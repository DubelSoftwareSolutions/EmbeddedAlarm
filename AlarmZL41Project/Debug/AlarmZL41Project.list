
C:\Users\Krzysztof\Documents\Studia\Semestr 6\Sterowniki Robotów\sterop\AlarmZL41Project\Debug\AlarmZL41Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c068  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800c1f8  0800c1f8  0001c1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c454  0800c454  0001c454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c45c  0800c45c  0001c45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c460  0800c460  0001c460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006b0  20000000  0800c464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000206b0  2**0
                  CONTENTS
  8 .bss          00000b08  200006b0  200006b0  000206b0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200011b8  200011b8  000206b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018a89  00000000  00000000  000206e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003c35  00000000  00000000  00039169  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000017f0  00000000  00000000  0003cda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000015b8  00000000  00000000  0003e590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a9c1  00000000  00000000  0003fb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006900  00000000  00000000  0004a509  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00050e09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000697c  00000000  00000000  00050e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006b0 	.word	0x200006b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1e0 	.word	0x0800c1e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006b4 	.word	0x200006b4
 80001cc:	0800c1e0 	.word	0x0800c1e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9d08      	ldr	r5, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__udivmoddi4+0xb2>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96c      	bls.n	8000cc0 <__udivmoddi4+0xf0>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0420 	rsb	r4, lr, #32
 8000bf4:	fa20 f404 	lsr.w	r4, r0, r4
 8000bf8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bfc:	ea44 0c06 	orr.w	ip, r4, r6
 8000c00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c0c:	0c22      	lsrs	r2, r4, #16
 8000c0e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c12:	fa1f f887 	uxth.w	r8, r7
 8000c16:	fb09 c610 	mls	r6, r9, r0, ip
 8000c1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c1e:	fb00 f308 	mul.w	r3, r0, r8
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x6a>
 8000c26:	19f6      	adds	r6, r6, r7
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8122 	bcs.w	8000e74 <__udivmoddi4+0x2a4>
 8000c30:	42b3      	cmp	r3, r6
 8000c32:	f240 811f 	bls.w	8000e74 <__udivmoddi4+0x2a4>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443e      	add	r6, r7
 8000c3a:	1af6      	subs	r6, r6, r3
 8000c3c:	b2a2      	uxth	r2, r4
 8000c3e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c42:	fb09 6613 	mls	r6, r9, r3, r6
 8000c46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c4a:	fb03 f808 	mul.w	r8, r3, r8
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x96>
 8000c52:	19e4      	adds	r4, r4, r7
 8000c54:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c58:	f080 810a 	bcs.w	8000e70 <__udivmoddi4+0x2a0>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f240 8107 	bls.w	8000e70 <__udivmoddi4+0x2a0>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ebc8 0404 	rsb	r4, r8, r4
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d062      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c74:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c78:	2300      	movs	r3, #0
 8000c7a:	602c      	str	r4, [r5, #0]
 8000c7c:	606b      	str	r3, [r5, #4]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0xc6>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d055      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c90:	4608      	mov	r0, r1
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x1f0>
 8000ca0:	42b3      	cmp	r3, r6
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xda>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb66 0603 	sbc.w	r6, r6, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	46b4      	mov	ip, r6
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d040      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cb8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	b912      	cbnz	r2, 8000cc8 <__udivmoddi4+0xf8>
 8000cc2:	2701      	movs	r7, #1
 8000cc4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc8:	fab7 fe87 	clz	lr, r7
 8000ccc:	f1be 0f00 	cmp.w	lr, #0
 8000cd0:	d135      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd2:	1bf3      	subs	r3, r6, r7
 8000cd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb08 3610 	mls	r6, r8, r0, r3
 8000ce8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cec:	fb0c f300 	mul.w	r3, ip, r0
 8000cf0:	42b3      	cmp	r3, r6
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19f6      	adds	r6, r6, r7
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42b3      	cmp	r3, r6
 8000cfe:	f200 80ce 	bhi.w	8000e9e <__udivmoddi4+0x2ce>
 8000d02:	4610      	mov	r0, r2
 8000d04:	1af6      	subs	r6, r6, r3
 8000d06:	b2a2      	uxth	r2, r4
 8000d08:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d0c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d14:	fb0c fc03 	mul.w	ip, ip, r3
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b5 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	ebcc 0404 	rsb	r4, ip, r4
 8000d30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d34:	e79c      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0120 	rsb	r1, lr, #32
 8000d42:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d52:	40ce      	lsrs	r6, r1
 8000d54:	ea49 0903 	orr.w	r9, r9, r3
 8000d58:	fbb6 faf8 	udiv	sl, r6, r8
 8000d5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d60:	fb08 661a 	mls	r6, r8, sl, r6
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d6c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d70:	429a      	cmp	r2, r3
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1be>
 8000d78:	19db      	adds	r3, r3, r7
 8000d7a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d7e:	f080 8087 	bcs.w	8000e90 <__udivmoddi4+0x2c0>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f240 8084 	bls.w	8000e90 <__udivmoddi4+0x2c0>
 8000d88:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	fa1f f989 	uxth.w	r9, r9
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000da0:	fb01 f60c 	mul.w	r6, r1, ip
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x1e8>
 8000da8:	19db      	adds	r3, r3, r7
 8000daa:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000db0:	429e      	cmp	r6, r3
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000db4:	3902      	subs	r1, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dbe:	e78e      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dc0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dc4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4323      	orrs	r3, r4
 8000dcc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000dd0:	fa06 f401 	lsl.w	r4, r6, r1
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ddc:	433c      	orrs	r4, r7
 8000dde:	fbb6 f9fc 	udiv	r9, r6, ip
 8000de2:	0c27      	lsrs	r7, r4, #16
 8000de4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000de8:	fa1f f883 	uxth.w	r8, r3
 8000dec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000df0:	fb09 f708 	mul.w	r7, r9, r8
 8000df4:	42b7      	cmp	r7, r6
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x242>
 8000e00:	18f6      	adds	r6, r6, r3
 8000e02:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e06:	d241      	bcs.n	8000e8c <__udivmoddi4+0x2bc>
 8000e08:	42b7      	cmp	r7, r6
 8000e0a:	d93f      	bls.n	8000e8c <__udivmoddi4+0x2bc>
 8000e0c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e10:	441e      	add	r6, r3
 8000e12:	1bf6      	subs	r6, r6, r7
 8000e14:	b2a0      	uxth	r0, r4
 8000e16:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e1a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e22:	fb04 f808 	mul.w	r8, r4, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26a>
 8000e2a:	18ff      	adds	r7, r7, r3
 8000e2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e30:	d228      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d926      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000e36:	3c02      	subs	r4, #2
 8000e38:	441f      	add	r7, r3
 8000e3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e3e:	ebc8 0707 	rsb	r7, r8, r7
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	4644      	mov	r4, r8
 8000e4a:	464e      	mov	r6, r9
 8000e4c:	d314      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	d029      	beq.n	8000ea4 <__udivmoddi4+0x2d4>
 8000e50:	b365      	cbz	r5, 8000eac <__udivmoddi4+0x2dc>
 8000e52:	ebba 0304 	subs.w	r3, sl, r4
 8000e56:	eb67 0706 	sbc.w	r7, r7, r6
 8000e5a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	40cf      	lsrs	r7, r1
 8000e62:	ea4e 0303 	orr.w	r3, lr, r3
 8000e66:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	4613      	mov	r3, r2
 8000e72:	e6f8      	b.n	8000c66 <__udivmoddi4+0x96>
 8000e74:	4610      	mov	r0, r2
 8000e76:	e6e0      	b.n	8000c3a <__udivmoddi4+0x6a>
 8000e78:	ebb8 0402 	subs.w	r4, r8, r2
 8000e7c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7e5      	b.n	8000e50 <__udivmoddi4+0x280>
 8000e84:	4604      	mov	r4, r0
 8000e86:	e7d8      	b.n	8000e3a <__udivmoddi4+0x26a>
 8000e88:	4611      	mov	r1, r2
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7c0      	b.n	8000e12 <__udivmoddi4+0x242>
 8000e90:	468a      	mov	sl, r1
 8000e92:	e77c      	b.n	8000d8e <__udivmoddi4+0x1be>
 8000e94:	3b02      	subs	r3, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e748      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	443e      	add	r6, r7
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x134>
 8000ea4:	45c2      	cmp	sl, r8
 8000ea6:	d3e7      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000ea8:	463e      	mov	r6, r7
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x280>
 8000eac:	4629      	mov	r1, r5
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f929 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f007 fae0 	bl	80084b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_InitTick+0x30>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <HAL_InitTick+0x34>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	099b      	lsrs	r3, r3, #6
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f947 	bl	80011a4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f16:	2200      	movs	r2, #0
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	f000 f917 	bl	8001150 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000012c 	.word	0x2000012c
 8000f30:	10624dd3 	.word	0x10624dd3

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick++;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_IncTick+0x18>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x18>)
 8000f40:	6013      	str	r3, [r2, #0]
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20000708 	.word	0x20000708

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000708 	.word	0x20000708

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d002      	beq.n	8000f88 <HAL_Delay+0x20>
  {
     wait++;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f88:	bf00      	nop
 8000f8a:	f7ff ffe1 	bl	8000f50 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3f7      	bcc.n	8000f8a <HAL_Delay+0x22>
  {
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop

08000fa4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ff8:	0a1b      	lsrs	r3, r3, #8
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001012:	4909      	ldr	r1, [pc, #36]	; (8001038 <NVIC_EnableIRQ+0x30>)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	f002 021f 	and.w	r2, r2, #31
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	da0b      	bge.n	8001068 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	490d      	ldr	r1, [pc, #52]	; (8001088 <NVIC_SetPriority+0x4c>)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	3b04      	subs	r3, #4
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001066:	e009      	b.n	800107c <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <NVIC_SetPriority+0x50>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	e000e100 	.word	0xe000e100

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	2201      	movs	r2, #1
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	401a      	ands	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d6:	2101      	movs	r1, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	1e59      	subs	r1, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80010e4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff90 	bl	800103c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff2f 	bl	8000fa4 <NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop

08001150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001162:	f7ff ff43 	bl	8000fec <NVIC_GetPriorityGrouping>
 8001166:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	6978      	ldr	r0, [r7, #20]
 800116e:	f7ff ff8f 	bl	8001090 <NVIC_EncodePriority>
 8001172:	4602      	mov	r2, r0
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff5e 	bl	800103c <NVIC_SetPriority>
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff36 	bl	8001008 <NVIC_EnableIRQ>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffa1 	bl	80010f4 <SysTick_Config>
 80011b2:	4603      	mov	r3, r0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d106      	bne.n	80011d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80011d6:	e005      	b.n	80011e4 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0304 	bic.w	r3, r3, #4
 80011e2:	6013      	str	r3, [r2, #0]
  }
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011f8:	f000 f802 	bl	8001200 <HAL_SYSTICK_Callback>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop

08001210 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d004      	beq.n	800122e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00c      	b.n	8001248 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2205      	movs	r2, #5
 8001232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e16b      	b.n	8001548 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 815a 	bne.w	8001542 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x4a>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b12      	cmp	r3, #18
 800129c:	d123      	bne.n	80012e6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	69b9      	ldr	r1, [r7, #24]
 80012e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0203 	and.w	r2, r3, #3
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00b      	beq.n	800133a <HAL_GPIO_Init+0xe6>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132e:	2b11      	cmp	r3, #17
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b12      	cmp	r3, #18
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80b4 	beq.w	8001542 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4a5f      	ldr	r2, [pc, #380]	; (800155c <HAL_GPIO_Init+0x308>)
 80013e0:	4b5e      	ldr	r3, [pc, #376]	; (800155c <HAL_GPIO_Init+0x308>)
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <HAL_GPIO_Init+0x308>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a5a      	ldr	r2, [pc, #360]	; (8001560 <HAL_GPIO_Init+0x30c>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a51      	ldr	r2, [pc, #324]	; (8001564 <HAL_GPIO_Init+0x310>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d02b      	beq.n	800147a <HAL_GPIO_Init+0x226>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a50      	ldr	r2, [pc, #320]	; (8001568 <HAL_GPIO_Init+0x314>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x222>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4f      	ldr	r2, [pc, #316]	; (800156c <HAL_GPIO_Init+0x318>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x21e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <HAL_GPIO_Init+0x31c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x21a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <HAL_GPIO_Init+0x320>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x216>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x324>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x212>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x328>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x20e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x32c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x20a>
 800145a:	2307      	movs	r3, #7
 800145c:	e00e      	b.n	800147c <HAL_GPIO_Init+0x228>
 800145e:	2308      	movs	r3, #8
 8001460:	e00c      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001462:	2306      	movs	r3, #6
 8001464:	e00a      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001466:	2305      	movs	r3, #5
 8001468:	e008      	b.n	800147c <HAL_GPIO_Init+0x228>
 800146a:	2304      	movs	r3, #4
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x228>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x228>
 800147a:	2300      	movs	r3, #0
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800148c:	4934      	ldr	r1, [pc, #208]	; (8001560 <HAL_GPIO_Init+0x30c>)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149a:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <HAL_GPIO_Init+0x330>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014be:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_GPIO_Init+0x330>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x330>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e8:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_GPIO_Init+0x330>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_GPIO_Init+0x330>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <HAL_GPIO_Init+0x330>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_GPIO_Init+0x330>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800153c:	4a11      	ldr	r2, [pc, #68]	; (8001584 <HAL_GPIO_Init+0x330>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	f67f ae90 	bls.w	8001270 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001550:	bf00      	nop
 8001552:	3724      	adds	r7, #36	; 0x24
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40023800 	.word	0x40023800
 8001560:	40013800 	.word	0x40013800
 8001564:	40020000 	.word	0x40020000
 8001568:	40020400 	.word	0x40020400
 800156c:	40020800 	.word	0x40020800
 8001570:	40020c00 	.word	0x40020c00
 8001574:	40021000 	.word	0x40021000
 8001578:	40021400 	.word	0x40021400
 800157c:	40021800 	.word	0x40021800
 8001580:	40021c00 	.word	0x40021c00
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 fb58 	bl	8007c5c <HAL_GPIO_EXTI_Callback>
  }
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0c8      	b.n	8001764 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f006 fdfe 	bl	80081e8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2224      	movs	r2, #36	; 0x24
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001604:	f002 fbbe 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8001608:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4a57      	ldr	r2, [pc, #348]	; (800176c <HAL_I2C_Init+0x1b4>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4952      	ldr	r1, [pc, #328]	; (8001770 <HAL_I2C_Init+0x1b8>)
 8001628:	428b      	cmp	r3, r1
 800162a:	d802      	bhi.n	8001632 <HAL_I2C_Init+0x7a>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	e009      	b.n	8001646 <HAL_I2C_Init+0x8e>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	494d      	ldr	r1, [pc, #308]	; (8001774 <HAL_I2C_Init+0x1bc>)
 800163e:	fba1 1303 	umull	r1, r3, r1, r3
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	3301      	adds	r3, #1
 8001646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6819      	ldr	r1, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a47      	ldr	r2, [pc, #284]	; (8001770 <HAL_I2C_Init+0x1b8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d812      	bhi.n	800167c <HAL_I2C_Init+0xc4>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001666:	2b03      	cmp	r3, #3
 8001668:	d906      	bls.n	8001678 <HAL_I2C_Init+0xc0>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	e045      	b.n	8001704 <HAL_I2C_Init+0x14c>
 8001678:	2304      	movs	r3, #4
 800167a:	e043      	b.n	8001704 <HAL_I2C_Init+0x14c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10f      	bne.n	80016a4 <HAL_I2C_Init+0xec>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	e010      	b.n	80016c6 <HAL_I2C_Init+0x10e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009a      	lsls	r2, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Init+0x116>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e01a      	b.n	8001704 <HAL_I2C_Init+0x14c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10a      	bne.n	80016ec <HAL_I2C_Init+0x134>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ea:	e00b      	b.n	8001704 <HAL_I2C_Init+0x14c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	009a      	lsls	r2, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001704:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	69d1      	ldr	r1, [r2, #28]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6a12      	ldr	r2, [r2, #32]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6911      	ldr	r1, [r2, #16]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68d2      	ldr	r2, [r2, #12]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6951      	ldr	r1, [r2, #20]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6992      	ldr	r2, [r2, #24]
 8001732:	430a      	orrs	r2, r1
 8001734:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	f042 0201 	orr.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	431bde83 	.word	0x431bde83
 8001770:	000186a0 	.word	0x000186a0
 8001774:	10624dd3 	.word	0x10624dd3

08001778 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	817b      	strh	r3, [r7, #10]
 800178a:	460b      	mov	r3, r1
 800178c:	813b      	strh	r3, [r7, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001796:	f7ff fbdb 	bl	8000f50 <HAL_GetTick>
 800179a:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	f040 80e7 	bne.w	8001978 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2319      	movs	r3, #25
 80017b0:	2201      	movs	r2, #1
 80017b2:	4974      	ldr	r1, [pc, #464]	; (8001984 <HAL_I2C_Mem_Write+0x20c>)
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fc8f 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
 80017c2:	e0da      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_I2C_Mem_Write+0x5a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e0d3      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d107      	bne.n	80017f8 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2221      	movs	r2, #33	; 0x21
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a3a      	ldr	r2, [r7, #32]
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4a56      	ldr	r2, [pc, #344]	; (8001988 <HAL_I2C_Mem_Write+0x210>)
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800183a:	88f8      	ldrh	r0, [r7, #6]
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	8979      	ldrh	r1, [r7, #10]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	4603      	mov	r3, r0
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fad0 	bl	8001df0 <I2C_RequestMemoryWrite>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d05e      	beq.n	8001914 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	2b04      	cmp	r3, #4
 800185c:	d105      	bne.n	800186a <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e087      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e081      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 fcec 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00f      	beq.n	80018a6 <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2b04      	cmp	r3, #4
 800188c:	d109      	bne.n	80018a2 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06b      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e069      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	1c58      	adds	r0, r3, #1
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	6248      	str	r0, [r1, #36]	; 0x24
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d019      	beq.n	8001914 <HAL_I2C_Mem_Write+0x19c>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d015      	beq.n	8001914 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	1c58      	adds	r0, r3, #1
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	6248      	str	r0, [r1, #36]	; 0x24
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190a:	b29b      	uxth	r3, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	855a      	strh	r2, [r3, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    while(hi2c->XferSize > 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ac      	bne.n	8001876 <HAL_I2C_Mem_Write+0xfe>
        hi2c->XferCount--;
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fcd7 	bl	80022d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00f      	beq.n	800194c <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	2b04      	cmp	r3, #4
 8001932:	d109      	bne.n	8001948 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001942:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e018      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e016      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	e000      	b.n	800197a <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001978:	2302      	movs	r3, #2
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	00100002 	.word	0x00100002
 8001988:	ffff0000 	.word	0xffff0000

0800198c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	4608      	mov	r0, r1
 8001996:	4611      	mov	r1, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4603      	mov	r3, r0
 800199c:	817b      	strh	r3, [r7, #10]
 800199e:	460b      	mov	r3, r1
 80019a0:	813b      	strh	r3, [r7, #8]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019aa:	f7ff fad1 	bl	8000f50 <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	f040 8212 	bne.w	8001de2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2319      	movs	r3, #25
 80019c4:	2201      	movs	r2, #1
 80019c6:	4984      	ldr	r1, [pc, #528]	; (8001bd8 <HAL_I2C_Mem_Read+0x24c>)
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fb85 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
 80019d6:	e205      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Mem_Read+0x5a>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e1fe      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d107      	bne.n	8001a0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2222      	movs	r2, #34	; 0x22
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a66      	ldr	r2, [pc, #408]	; (8001bdc <HAL_I2C_Mem_Read+0x250>)
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a4e:	88f8      	ldrh	r0, [r7, #6]
 8001a50:	893a      	ldrh	r2, [r7, #8]
 8001a52:	8979      	ldrh	r1, [r7, #10]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fa58 	bl	8001f14 <I2C_RequestMemoryRead>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00f      	beq.n	8001a8a <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d105      	bne.n	8001a7e <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e1b2      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1ac      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d113      	bne.n	8001aba <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	623b      	str	r3, [r7, #32]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	623b      	str	r3, [r7, #32]
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e180      	b.n	8001dbc <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d11b      	bne.n	8001afa <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e160      	b.n	8001dbc <HAL_I2C_Mem_Read+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d11b      	bne.n	8001b3a <HAL_I2C_Mem_Read+0x1ae>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	e140      	b.n	8001dbc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001b50:	e134      	b.n	8001dbc <HAL_I2C_Mem_Read+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	f200 80eb 	bhi.w	8001d32 <HAL_I2C_Mem_Read+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d127      	bne.n	8001bb4 <HAL_I2C_Mem_Read+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fbf1 	bl	8002350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_I2C_Mem_Read+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d101      	bne.n	8001b80 <HAL_I2C_Mem_Read+0x1f4>
            {
              return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e131      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e12f      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	1c59      	adds	r1, r3, #1
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	6251      	str	r1, [r2, #36]	; 0x24
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	6912      	ldr	r2, [r2, #16]
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bb2:	e103      	b.n	8001dbc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d14a      	bne.n	8001c52 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4906      	ldr	r1, [pc, #24]	; (8001be0 <HAL_I2C_Mem_Read+0x254>)
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fa86 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d008      	beq.n	8001be4 <HAL_I2C_Mem_Read+0x258>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e106      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
 8001bd6:	bf00      	nop
 8001bd8:	00100002 	.word	0x00100002
 8001bdc:	ffff0000 	.word	0xffff0000
 8001be0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	1c59      	adds	r1, r3, #1
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	6251      	str	r1, [r2, #36]	; 0x24
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	6912      	ldr	r2, [r2, #16]
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	1c59      	adds	r1, r3, #1
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	6251      	str	r1, [r2, #36]	; 0x24
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	6912      	ldr	r2, [r2, #16]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c50:	e0b4      	b.n	8001dbc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4964      	ldr	r1, [pc, #400]	; (8001dec <HAL_I2C_Mem_Read+0x460>)
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fa3b 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0bb      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	1c59      	adds	r1, r3, #1
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	6251      	str	r1, [r2, #36]	; 0x24
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	6912      	ldr	r2, [r2, #16]
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	494e      	ldr	r1, [pc, #312]	; (8001dec <HAL_I2C_Mem_Read+0x460>)
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fa0f 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_Mem_Read+0x338>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e08f      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	1c59      	adds	r1, r3, #1
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6251      	str	r1, [r2, #36]	; 0x24
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	6912      	ldr	r2, [r2, #16]
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	1c59      	adds	r1, r3, #1
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	6251      	str	r1, [r2, #36]	; 0x24
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	6912      	ldr	r2, [r2, #16]
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d30:	e044      	b.n	8001dbc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fb0a 	bl	8002350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_I2C_Mem_Read+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Mem_Read+0x3c2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e04a      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e048      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	6251      	str	r1, [r2, #36]	; 0x24
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	6912      	ldr	r2, [r2, #16]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d016      	beq.n	8001dbc <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	1c59      	adds	r1, r3, #1
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	6251      	str	r1, [r2, #36]	; 0x24
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	6912      	ldr	r2, [r2, #16]
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(hi2c->XferSize > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f aec6 	bne.w	8001b52 <HAL_I2C_Mem_Read+0x1c6>
          hi2c->XferCount--;
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	00010004 	.word	0x00010004

08001df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	817b      	strh	r3, [r7, #10]
 8001e02:	460b      	mov	r3, r1
 8001e04:	813b      	strh	r3, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f956 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e068      	b.n	8001f08 <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	897a      	ldrh	r2, [r7, #10]
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	6a3a      	ldr	r2, [r7, #32]
 8001e48:	4931      	ldr	r1, [pc, #196]	; (8001f10 <I2C_RequestMemoryWrite+0x120>)
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f996 	bl	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d101      	bne.n	8001e62 <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e052      	b.n	8001f08 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e050      	b.n	8001f08 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7e:	6a39      	ldr	r1, [r7, #32]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f9e9 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00f      	beq.n	8001eac <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d109      	bne.n	8001ea8 <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e02f      	b.n	8001f08 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e02d      	b.n	8001f08 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	893a      	ldrh	r2, [r7, #8]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	611a      	str	r2, [r3, #16]
 8001ebc:	e023      	b.n	8001f06 <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	893a      	ldrh	r2, [r7, #8]
 8001ec4:	0a12      	lsrs	r2, r2, #8
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ece:	6a39      	ldr	r1, [r7, #32]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f9c1 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00f      	beq.n	8001efc <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d109      	bne.n	8001ef8 <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e007      	b.n	8001f08 <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e005      	b.n	8001f08 <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	893a      	ldrh	r2, [r7, #8]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	00010002 	.word	0x00010002

08001f14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	817b      	strh	r3, [r7, #10]
 8001f26:	460b      	mov	r3, r1
 8001f28:	813b      	strh	r3, [r7, #8]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f8bc 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0af      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	897a      	ldrh	r2, [r7, #10]
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	6a3a      	ldr	r2, [r7, #32]
 8001f7c:	4955      	ldr	r1, [pc, #340]	; (80020d4 <I2C_RequestMemoryRead+0x1c0>)
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f8fc 	bl	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <I2C_RequestMemoryRead+0x86>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d101      	bne.n	8001f96 <I2C_RequestMemoryRead+0x82>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e099      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e097      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb2:	6a39      	ldr	r1, [r7, #32]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f94f 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00f      	beq.n	8001fe0 <I2C_RequestMemoryRead+0xcc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d109      	bne.n	8001fdc <I2C_RequestMemoryRead+0xc8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e076      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e074      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <I2C_RequestMemoryRead+0xde>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	893a      	ldrh	r2, [r7, #8]
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	611a      	str	r2, [r3, #16]
 8001ff0:	e023      	b.n	800203a <I2C_RequestMemoryRead+0x126>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	893a      	ldrh	r2, [r7, #8]
 8001ff8:	0a12      	lsrs	r2, r2, #8
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	6a39      	ldr	r1, [r7, #32]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f927 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00f      	beq.n	8002030 <I2C_RequestMemoryRead+0x11c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2b04      	cmp	r3, #4
 8002016:	d109      	bne.n	800202c <I2C_RequestMemoryRead+0x118>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002026:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04e      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
      }
      else
      {
        return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e04c      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	893a      	ldrh	r2, [r7, #8]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f90a 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00f      	beq.n	800206a <I2C_RequestMemoryRead+0x156>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b04      	cmp	r3, #4
 8002050:	d109      	bne.n	8002066 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002060:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e031      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e02f      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002078:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2200      	movs	r2, #0
 8002082:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f826 	bl	80020d8 <I2C_WaitOnFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_RequestMemoryRead+0x182>
  {
    return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e019      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	897a      	ldrh	r2, [r7, #10]
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <I2C_RequestMemoryRead+0x1c0>)
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f865 	bl	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <I2C_RequestMemoryRead+0x1b4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d101      	bne.n	80020c4 <I2C_RequestMemoryRead+0x1b0>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e002      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e000      	b.n	80020ca <I2C_RequestMemoryRead+0x1b6>
    }
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	00010002 	.word	0x00010002

080020d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80020e8:	e01f      	b.n	800212a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d01b      	beq.n	800212a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020f8:	f7fe ff2a 	bl	8000f50 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	1ad2      	subs	r2, r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d910      	bls.n	800212a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e023      	b.n	8002172 <I2C_WaitOnFlagUntilTimeout+0x9a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10d      	bne.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	e00c      	b.n	800216a <I2C_WaitOnFlagUntilTimeout+0x92>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4013      	ands	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d0bc      	beq.n	80020ea <I2C_WaitOnFlagUntilTimeout+0x12>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop

0800217c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800218a:	e03f      	b.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01c      	beq.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021b2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2204      	movs	r2, #4
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e03c      	b.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021da:	d017      	beq.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
 80021e2:	f7fe feb5 	bl	8000f50 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	1ad2      	subs	r2, r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d90c      	bls.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e020      	b.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10c      	bne.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	43da      	mvns	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e00b      	b.n	8002248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xcc>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d19f      	bne.n	800218c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002264:	e029      	b.n	80022ba <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8bc 	bl	80023e4 <I2C_IsAcknowledgeFailed>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e029      	b.n	80022ca <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d01d      	beq.n	80022ba <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002284:	f7fe fe64 	bl	8000f50 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad2      	subs	r2, r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	d912      	bls.n	80022ba <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e007      	b.n	80022ca <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ce      	beq.n	8002266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop

080022d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e0:	e029      	b.n	8002336 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f87e 	bl	80023e4 <I2C_IsAcknowledgeFailed>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e029      	b.n	8002346 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d01d      	beq.n	8002336 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002300:	f7fe fe26 	bl	8000f50 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d912      	bls.n	8002336 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e007      	b.n	8002346 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ce      	beq.n	80022e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop

08002350 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800235c:	e036      	b.n	80023cc <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d014      	beq.n	8002396 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0210 	mvn.w	r2, #16
 8002374:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e022      	b.n	80023dc <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800239c:	f7fe fdd8 	bl	8000f50 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1ad2      	subs	r2, r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d90f      	bls.n	80023cc <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e007      	b.n	80023dc <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0c1      	beq.n	800235e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d014      	beq.n	8002424 <I2C_IsAcknowledgeFailed+0x40>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002402:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2204      	movs	r2, #4
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <I2C_IsAcknowledgeFailed+0x42>
  }
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop

08002434 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	b08f      	sub	sp, #60	; 0x3c
 8002438:	af0a      	add	r7, sp, #40	; 0x28
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0f7      	b.n	800263a <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f006 fb2e 	bl	8008ab4 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f003 f8af 	bl	80055c0 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	687e      	ldr	r6, [r7, #4]
 800246a:	466d      	mov	r5, sp
 800246c:	f106 0410 	add.w	r4, r6, #16
 8002470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002478:	e894 0003 	ldmia.w	r4, {r0, r1}
 800247c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002480:	1d33      	adds	r3, r6, #4
 8002482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f003 f837 	bl	80054f8 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f003 f8a7 	bl	80055e4 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e04c      	b.n	8002536 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	3339      	adds	r3, #57	; 0x39
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3338      	adds	r3, #56	; 0x38
 80024c4:	4602      	mov	r2, r0
 80024c6:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	b298      	uxth	r0, r3
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	333e      	adds	r3, #62	; 0x3e
 80024dc:	4602      	mov	r2, r0
 80024de:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	333b      	adds	r3, #59	; 0x3b
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3340      	adds	r3, #64	; 0x40
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3344      	adds	r3, #68	; 0x44
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	334c      	adds	r3, #76	; 0x4c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3301      	adds	r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b0e      	cmp	r3, #14
 800253a:	d9af      	bls.n	800249c <HAL_PCD_Init+0x68>
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e05a      	b.n	80025f8 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	b2d8      	uxtb	r0, r3
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800256e:	4602      	mov	r2, r0
 8002570:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	b298      	uxth	r0, r3
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	333e      	adds	r3, #62	; 0x3e
 8002586:	4602      	mov	r2, r0
 8002588:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3340      	adds	r3, #64	; 0x40
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b0e      	cmp	r3, #14
 80025fc:	d9a1      	bls.n	8002542 <HAL_PCD_Init+0x10e>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	687e      	ldr	r6, [r7, #4]
 8002606:	466d      	mov	r5, sp
 8002608:	f106 0410 	add.w	r4, r6, #16
 800260c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002614:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002618:	e885 0003 	stmia.w	r5, {r0, r1}
 800261c:	1d33      	adds	r3, r6, #4
 800261e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	f003 f807 	bl	8005634 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f004 f828 	bl	8006688 <USB_DevDisconnect>
 return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002642:	bf00      	nop

08002644 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_PCD_Start+0x16>
 8002656:	2302      	movs	r3, #2
 8002658:	e012      	b.n	8002680 <HAL_PCD_Start+0x3c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fff6 	bl	8006658 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f002 ff93 	bl	800559c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 80026ae:	4b7b      	ldr	r3, [pc, #492]	; (800289c <HAL_PCD_IRQHandler+0x214>)
 80026b0:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 f88a 	bl	80067d0 <USB_GetMode>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 845d 	bne.w	8002f7e <HAL_PCD_IRQHandler+0x8f6>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fff5 	bl	80066b8 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8453 	beq.w	8002f7c <HAL_PCD_IRQHandler+0x8f4>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 ffec 	bl	80066b8 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	6952      	ldr	r2, [r2, #20]
 80026f4:	f002 0202 	and.w	r2, r2, #2
 80026f8:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 ffda 	bl	80066b8 <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80b2 	beq.w	8002874 <HAL_PCD_IRQHandler+0x1ec>
    {
      epnum = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 ffe3 	bl	80066e4 <USB_ReadDevAllOutEpInterrupt>
 800271e:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8002720:	e0a4      	b.n	800286c <HAL_PCD_IRQHandler+0x1e4>
      {
        if (ep_intr & 0x1U)
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8099 	beq.w	8002860 <HAL_PCD_IRQHandler+0x1d8>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f004 f803 	bl	8006744 <USB_ReadDevOutEPInterrupt>
 800273e:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d06b      	beq.n	8002822 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002756:	461a      	mov	r2, r3
 8002758:	2301      	movs	r3, #1
 800275a:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d13c      	bne.n	80027de <HAL_PCD_IRQHandler+0x156>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	0159      	lsls	r1, r3, #5
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	440b      	add	r3, r1
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	1ad1      	subs	r1, r2, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4403      	add	r3, r0
 800279a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800279e:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4403      	add	r3, r0
 80027c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4419      	add	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4403      	add	r3, r0
 80027d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027dc:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f006 f9b5 	bl	8008b54 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d117      	bne.n	8002822 <HAL_PCD_IRQHandler+0x19a>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d114      	bne.n	8002822 <HAL_PCD_IRQHandler+0x19a>
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d108      	bne.n	8002822 <HAL_PCD_IRQHandler+0x19a>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800281a:	461a      	mov	r2, r3
 800281c:	2101      	movs	r1, #1
 800281e:	f004 f81b 	bl	8006858 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <HAL_PCD_IRQHandler+0x1bc>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f006 f97f 	bl	8008b30 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283e:	461a      	mov	r2, r3
 8002840:	2308      	movs	r3, #8
 8002842:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_PCD_IRQHandler+0x1d8>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	2310      	movs	r3, #16
 800285e:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	3301      	adds	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	f47f af57 	bne.w	8002722 <HAL_PCD_IRQHandler+0x9a>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 ff1d 	bl	80066b8 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80c5 	beq.w	8002a14 <HAL_PCD_IRQHandler+0x38c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 ff40 	bl	8006714 <USB_ReadDevAllInEpInterrupt>
 8002894:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 800289a:	e0b7      	b.n	8002a0c <HAL_PCD_IRQHandler+0x384>
 800289c:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80aa 	beq.w	8002a00 <HAL_PCD_IRQHandler+0x378>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 ff60 	bl	800677c <USB_ReadDevInEPInterrupt>
 80028bc:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05a      	beq.n	800297e <HAL_PCD_IRQHandler+0x2f6>
          {
            fifoemptymsk = 0x1U << epnum;
 80028c8:	2201      	movs	r2, #1
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d8:	4619      	mov	r1, r3
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4013      	ands	r3, r2
 80028e8:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f6:	461a      	mov	r2, r3
 80028f8:	2301      	movs	r3, #1
 80028fa:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d11b      	bne.n	800293c <HAL_PCD_IRQHandler+0x2b4>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3344      	adds	r3, #68	; 0x44
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4403      	add	r3, r0
 8002924:	3340      	adds	r3, #64	; 0x40
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4419      	add	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4403      	add	r3, r0
 8002938:	3344      	adds	r3, #68	; 0x44
 800293a:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f006 f922 	bl	8008b8c <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d116      	bne.n	800297e <HAL_PCD_IRQHandler+0x2f6>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d113      	bne.n	800297e <HAL_PCD_IRQHandler+0x2f6>
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	334c      	adds	r3, #76	; 0x4c
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d108      	bne.n	800297e <HAL_PCD_IRQHandler+0x2f6>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002976:	461a      	mov	r2, r3
 8002978:	2101      	movs	r1, #1
 800297a:	f003 ff6d 	bl	8006858 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_PCD_IRQHandler+0x312>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002994:	461a      	mov	r2, r3
 8002996:	2308      	movs	r3, #8
 8002998:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_PCD_IRQHandler+0x32e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b0:	461a      	mov	r2, r3
 80029b2:	2310      	movs	r3, #16
 80029b4:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_PCD_IRQHandler+0x34a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029cc:	461a      	mov	r2, r3
 80029ce:	2340      	movs	r3, #64	; 0x40
 80029d0:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_PCD_IRQHandler+0x366>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e8:	461a      	mov	r2, r3
 80029ea:	2302      	movs	r3, #2
 80029ec:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x378>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80029f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fcec 	bl	80033d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	3301      	adds	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
      
      epnum = 0U;
      
      while ( ep_intr )
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f47f af46 	bne.w	80028a0 <HAL_PCD_IRQHandler+0x218>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fe4d 	bl	80066b8 <USB_ReadInterrupts>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	da15      	bge.n	8002a50 <HAL_PCD_IRQHandler+0x3c8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f006 f91e 	bl	8008c7c <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	6952      	ldr	r2, [r2, #20]
 8002a4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a4e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 fe2f 	bl	80066b8 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d012      	beq.n	8002a8a <HAL_PCD_IRQHandler+0x402>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_PCD_IRQHandler+0x3f2>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f006 f8d9 	bl	8008c2c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	6952      	ldr	r2, [r2, #20]
 8002a84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a88:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fe12 	bl	80066b8 <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8091 	beq.w	8002bc2 <HAL_PCD_IRQHandler+0x53a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2110      	movs	r1, #16
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fee5 	bl	800588c <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac6:	e014      	b.n	8002af2 <HAL_PCD_IRQHandler+0x46a>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	23ff      	movs	r3, #255	; 0xff
 8002ad8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	23ff      	movs	r3, #255	; 0xff
 8002aea:	6093      	str	r3, [r2, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	3301      	adds	r3, #1
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8e5      	bhi.n	8002ac8 <HAL_PCD_IRQHandler+0x440>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b02:	461a      	mov	r2, r3
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295
 8002b08:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b10:	461a      	mov	r2, r3
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b1e:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d018      	beq.n	8002b5a <HAL_PCD_IRQHandler+0x4d2>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3a:	f043 030b 	orr.w	r3, r3, #11
 8002b3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b48:	461a      	mov	r2, r3
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f043 030b 	orr.w	r3, r3, #11
 8002b56:	6453      	str	r3, [r2, #68]	; 0x44
 8002b58:	e015      	b.n	8002b86 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f043 030b 	orr.w	r3, r3, #11
 8002b6e:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b76:	461a      	mov	r2, r3
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f043 030b 	orr.w	r3, r3, #11
 8002b84:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b9a:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	b2d9      	uxtb	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002bac:	461a      	mov	r2, r3
 8002bae:	f003 fe53 	bl	8006858 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	6952      	ldr	r2, [r2, #20]
 8002bbc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bc0:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fd76 	bl	80066b8 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80da 	beq.w	8002d8c <HAL_PCD_IRQHandler+0x704>
    {
      USB_ActivateSetup(hpcd->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fe05 	bl	80067ec <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	68d2      	ldr	r2, [r2, #12]
 8002bec:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002bf0:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fea8 	bl	800594c <USB_GetDevSpeed>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x59a>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0e:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	e0a9      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8002c2e:	f001 f89d 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8002c32:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4a7b      	ldr	r2, [pc, #492]	; (8002e24 <HAL_PCD_IRQHandler+0x79c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d90c      	bls.n	8002c56 <HAL_PCD_IRQHandler+0x5ce>
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4a7a      	ldr	r2, [pc, #488]	; (8002e28 <HAL_PCD_IRQHandler+0x7a0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d808      	bhi.n	8002c56 <HAL_PCD_IRQHandler+0x5ce>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e08f      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4a73      	ldr	r2, [pc, #460]	; (8002e28 <HAL_PCD_IRQHandler+0x7a0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d90c      	bls.n	8002c78 <HAL_PCD_IRQHandler+0x5f0>
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4a72      	ldr	r2, [pc, #456]	; (8002e2c <HAL_PCD_IRQHandler+0x7a4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d808      	bhi.n	8002c78 <HAL_PCD_IRQHandler+0x5f0>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	68d2      	ldr	r2, [r2, #12]
 8002c70:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	e07e      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4a6c      	ldr	r2, [pc, #432]	; (8002e2c <HAL_PCD_IRQHandler+0x7a4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d90c      	bls.n	8002c9a <HAL_PCD_IRQHandler+0x612>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4a6b      	ldr	r2, [pc, #428]	; (8002e30 <HAL_PCD_IRQHandler+0x7a8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d808      	bhi.n	8002c9a <HAL_PCD_IRQHandler+0x612>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	68d2      	ldr	r2, [r2, #12]
 8002c92:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e06d      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4a64      	ldr	r2, [pc, #400]	; (8002e30 <HAL_PCD_IRQHandler+0x7a8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d90c      	bls.n	8002cbc <HAL_PCD_IRQHandler+0x634>
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4a63      	ldr	r2, [pc, #396]	; (8002e34 <HAL_PCD_IRQHandler+0x7ac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d808      	bhi.n	8002cbc <HAL_PCD_IRQHandler+0x634>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	68d2      	ldr	r2, [r2, #12]
 8002cb4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	e05c      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_PCD_IRQHandler+0x7ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d90c      	bls.n	8002cde <HAL_PCD_IRQHandler+0x656>
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4a5c      	ldr	r2, [pc, #368]	; (8002e38 <HAL_PCD_IRQHandler+0x7b0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d808      	bhi.n	8002cde <HAL_PCD_IRQHandler+0x656>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	e04b      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4a55      	ldr	r2, [pc, #340]	; (8002e38 <HAL_PCD_IRQHandler+0x7b0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d90c      	bls.n	8002d00 <HAL_PCD_IRQHandler+0x678>
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4a54      	ldr	r2, [pc, #336]	; (8002e3c <HAL_PCD_IRQHandler+0x7b4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d808      	bhi.n	8002d00 <HAL_PCD_IRQHandler+0x678>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	68d2      	ldr	r2, [r2, #12]
 8002cf8:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	e03a      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4a4e      	ldr	r2, [pc, #312]	; (8002e3c <HAL_PCD_IRQHandler+0x7b4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d90c      	bls.n	8002d22 <HAL_PCD_IRQHandler+0x69a>
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4a4d      	ldr	r2, [pc, #308]	; (8002e40 <HAL_PCD_IRQHandler+0x7b8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d808      	bhi.n	8002d22 <HAL_PCD_IRQHandler+0x69a>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	68d2      	ldr	r2, [r2, #12]
 8002d1a:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e029      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4a46      	ldr	r2, [pc, #280]	; (8002e40 <HAL_PCD_IRQHandler+0x7b8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d90c      	bls.n	8002d44 <HAL_PCD_IRQHandler+0x6bc>
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4a45      	ldr	r2, [pc, #276]	; (8002e44 <HAL_PCD_IRQHandler+0x7bc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d808      	bhi.n	8002d44 <HAL_PCD_IRQHandler+0x6bc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	68d2      	ldr	r2, [r2, #12]
 8002d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e018      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4a3f      	ldr	r2, [pc, #252]	; (8002e44 <HAL_PCD_IRQHandler+0x7bc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d90c      	bls.n	8002d66 <HAL_PCD_IRQHandler+0x6de>
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4a3e      	ldr	r2, [pc, #248]	; (8002e48 <HAL_PCD_IRQHandler+0x7c0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d808      	bhi.n	8002d66 <HAL_PCD_IRQHandler+0x6de>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	68d2      	ldr	r2, [r2, #12]
 8002d5e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	e007      	b.n	8002d76 <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	68d2      	ldr	r2, [r2, #12]
 8002d70:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8002d74:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f005 ff30 	bl	8008bdc <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	6952      	ldr	r2, [r2, #20]
 8002d86:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 fc91 	bl	80066b8 <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d074      	beq.n	8002e8a <HAL_PCD_IRQHandler+0x802>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	6992      	ldr	r2, [r2, #24]
 8002daa:	f022 0210 	bic.w	r2, r2, #16
 8002dae:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 020f 	and.w	r2, r3, #15
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0c5b      	lsrs	r3, r3, #17
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d138      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x7c4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d049      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x7f2>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68d9      	ldr	r1, [r3, #12]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	6a38      	ldr	r0, [r7, #32]
 8002dfa:	f003 faff 	bl	80063fc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e1c:	441a      	add	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	619a      	str	r2, [r3, #24]
 8002e22:	e02a      	b.n	8002e7a <HAL_PCD_IRQHandler+0x7f2>
 8002e24:	00d8acbf 	.word	0x00d8acbf
 8002e28:	00e4e1bf 	.word	0x00e4e1bf
 8002e2c:	00f423ff 	.word	0x00f423ff
 8002e30:	0106737f 	.word	0x0106737f
 8002e34:	011a499f 	.word	0x011a499f
 8002e38:	01312cff 	.word	0x01312cff
 8002e3c:	014ca43f 	.word	0x014ca43f
 8002e40:	016e35ff 	.word	0x016e35ff
 8002e44:	01a6ab1f 	.word	0x01a6ab1f
 8002e48:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	0c5b      	lsrs	r3, r3, #17
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d110      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x7f2>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002e5e:	2208      	movs	r2, #8
 8002e60:	4619      	mov	r1, r3
 8002e62:	6a38      	ldr	r0, [r7, #32]
 8002e64:	f003 faca 	bl	80063fc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e74:	441a      	add	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	6992      	ldr	r2, [r2, #24]
 8002e84:	f042 0210 	orr.w	r2, r2, #16
 8002e88:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fc12 	bl	80066b8 <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x82c>
    {
      HAL_PCD_SOFCallback(hpcd);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f005 fe8e 	bl	8008bc0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	6952      	ldr	r2, [r2, #20]
 8002eae:	f002 0208 	and.w	r2, r2, #8
 8002eb2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 fbfd 	bl	80066b8 <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x85c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f005 fef4 	bl	8008cbc <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	6952      	ldr	r2, [r2, #20]
 8002ede:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ee2:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fbe5 	bl	80066b8 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x88c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f005 feca 	bl	8008c98 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	6952      	ldr	r2, [r2, #20]
 8002f0e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f12:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 fbcd 	bl	80066b8 <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x8b6>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f005 fed9 	bl	8008ce0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	6952      	ldr	r2, [r2, #20]
 8002f38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f3c:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fbb8 	bl	80066b8 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x8f6>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_PCD_IRQHandler+0x8e2>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f005 fec9 	bl	8008cfc <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	6851      	ldr	r1, [r2, #4]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e000      	b.n	8002f7e <HAL_PCD_IRQHandler+0x8f6>
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
    {
      return;
 8002f7c:	bf00      	nop
        HAL_PCD_DisconnectCallback(hpcd);
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8002f7e:	3730      	adds	r7, #48	; 0x30
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_PCD_SetAddress+0x1a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e00f      	b.n	8002fbe <HAL_PCD_SetAddress+0x3a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fb2c 	bl	800660c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop

08002fc8 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	70fb      	strb	r3, [r7, #3]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	803b      	strh	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da0b      	bge.n	8003006 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	3338      	adds	r3, #56	; 0x38
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e00b      	b.n	800301e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003024:	b2da      	uxtb	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800302a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	09db      	lsrs	r3, r3, #7
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800303a:	883a      	ldrh	r2, [r7, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	78ba      	ldrb	r2, [r7, #2]
 8003044:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8003058:	78bb      	ldrb	r3, [r7, #2]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d102      	bne.n	8003064 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_PCD_EP_Open+0xaa>
 800306e:	2302      	movs	r3, #2
 8003070:	e00e      	b.n	8003090 <HAL_PCD_EP_Open+0xc8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	4618      	mov	r0, r3
 8003082:	f002 fc99 	bl	80059b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 800308e:	7afb      	ldrb	r3, [r7, #11]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80030a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da0b      	bge.n	80030c4 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	3338      	adds	r3, #56	; 0x38
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e00b      	b.n	80030dc <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80030e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	09db      	lsrs	r3, r3, #7
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_PCD_EP_Close+0x6e>
 8003102:	2302      	movs	r3, #2
 8003104:	e00e      	b.n	8003124 <HAL_PCD_EP_Close+0x8c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68f9      	ldr	r1, [r7, #12]
 8003114:	4618      	mov	r0, r3
 8003116:	f002 fcd9 	bl	8005acc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800313c:	7afb      	ldrb	r3, [r7, #11]
 800313e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4413      	add	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2200      	movs	r2, #0
 8003164:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2200      	movs	r2, #0
 800316a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800316c:	7afb      	ldrb	r3, [r7, #11]
 800316e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003172:	b2da      	uxtb	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	6979      	ldr	r1, [r7, #20]
 800319e:	f002 ff97 	bl	80060d0 <USB_EP0StartXfer>
 80031a2:	e008      	b.n	80031b6 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	f002 fd4b 	bl	8005c4c <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 020f 	and.w	r2, r3, #15
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop

080031f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	460b      	mov	r3, r1
 8003202:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003204:	7afb      	ldrb	r3, [r7, #11]
 8003206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3338      	adds	r3, #56	; 0x38
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2201      	movs	r2, #1
 8003230:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8003232:	7afb      	ldrb	r3, [r7, #11]
 8003234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003238:	b2da      	uxtb	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 800324c:	7afb      	ldrb	r3, [r7, #11]
 800324e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	6979      	ldr	r1, [r7, #20]
 8003264:	f002 ff34 	bl	80060d0 <USB_EP0StartXfer>
 8003268:	e008      	b.n	800327c <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	f002 fce8 	bl	8005c4c <USB_EPStartXfer>
  }
  
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop

08003288 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8003294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003298:	2b00      	cmp	r3, #0
 800329a:	da0b      	bge.n	80032b4 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3338      	adds	r3, #56	; 0x38
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e009      	b.n	80032c8 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80032da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	09db      	lsrs	r3, r3, #7
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_PCD_EP_SetStall+0x70>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e01e      	b.n	8003336 <HAL_PCD_EP_SetStall+0xae>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	4618      	mov	r0, r3
 8003308:	f003 f8a0 	bl	800644c <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	b2d9      	uxtb	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8003326:	461a      	mov	r2, r3
 8003328:	f003 fa96 	bl	8006858 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop

08003340 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800334c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003350:	2b00      	cmp	r3, #0
 8003352:	da0b      	bge.n	800336c <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	3338      	adds	r3, #56	; 0x38
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e009      	b.n	8003380 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	09db      	lsrs	r3, r3, #7
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_PCD_EP_ClrStall+0x70>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e00e      	b.n	80033ce <HAL_PCD_EP_ClrStall+0x8e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68f9      	ldr	r1, [r7, #12]
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 f8b6 	bl	8006530 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop

080033d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd: PCD handle
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af02      	add	r7, sp, #8
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	3338      	adds	r3, #56	; 0x38
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	429a      	cmp	r2, r3
 8003416:	d202      	bcs.n	800341e <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3303      	adds	r3, #3
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003426:	e02b      	b.n	8003480 <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	429a      	cmp	r2, r3
 800343c:	d202      	bcs.n	8003444 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	3303      	adds	r3, #3
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68d9      	ldr	r1, [r3, #12]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	b298      	uxth	r0, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	4603      	mov	r3, r0
 8003462:	6978      	ldr	r0, [r7, #20]
 8003464:	f002 ff94 	bl	8006390 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	619a      	str	r2, [r3, #24]
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	b29a      	uxth	r2, r3
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	429a      	cmp	r2, r3
 8003494:	d909      	bls.n	80034aa <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	695b      	ldr	r3, [r3, #20]
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800349e:	429a      	cmp	r2, r3
 80034a0:	d203      	bcs.n	80034aa <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	695b      	ldr	r3, [r3, #20]
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
          (ep->xfer_count < ep->xfer_len) &&
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1be      	bne.n	8003428 <PCD_WriteEmptyTxFifo+0x50>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d110      	bne.n	80034d2 <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 80034b0:	2201      	movs	r2, #1
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c0:	4619      	mov	r1, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	4013      	ands	r3, r2
 80034d0:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
 80034e8:	4613      	mov	r3, r2
 80034ea:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d107      	bne.n	8003512 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	883a      	ldrh	r2, [r7, #0]
 8003508:	0411      	lsls	r1, r2, #16
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	430a      	orrs	r2, r1
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
 8003510:	e028      	b.n	8003564 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	0c1b      	lsrs	r3, r3, #16
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4413      	add	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	e00d      	b.n	8003542 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	3340      	adds	r3, #64	; 0x40
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	4413      	add	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
    for (i = 0; i < (fifo - 1); i++)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	3301      	adds	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	3b01      	subs	r3, #1
 8003548:	429a      	cmp	r2, r3
 800354a:	dbec      	blt.n	8003526 <HAL_PCDEx_SetTxFiFo+0x4a>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	3b01      	subs	r3, #1
 8003554:	883a      	ldrh	r2, [r7, #0]
 8003556:	0410      	lsls	r0, r2, #16
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	4302      	orrs	r2, r0
 800355c:	3340      	adds	r3, #64	; 0x40
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop

08003574 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd: PCD handle
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	; 0x38
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 80035a0:	2300      	movs	r3, #0
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d074      	beq.n	800369a <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b0:	4ba4      	ldr	r3, [pc, #656]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d00b      	beq.n	80035d4 <HAL_RCC_OscConfig+0x3c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035bc:	4ba1      	ldr	r3, [pc, #644]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d111      	bne.n	80035ec <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_RCC_OscConfig+0x54>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	4b9b      	ldr	r3, [pc, #620]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05b      	beq.n	8003698 <HAL_RCC_OscConfig+0x100>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d157      	bne.n	8003698 <HAL_RCC_OscConfig+0x100>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e225      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_OscConfig+0x6c>
 80035f6:	4a93      	ldr	r2, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	4b92      	ldr	r3, [pc, #584]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e01d      	b.n	8003640 <HAL_RCC_OscConfig+0xa8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x90>
 800360e:	4a8d      	ldr	r2, [pc, #564]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4a8a      	ldr	r2, [pc, #552]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0xa8>
 8003628:	4a86      	ldr	r2, [pc, #536]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	4b86      	ldr	r3, [pc, #536]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4a83      	ldr	r2, [pc, #524]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003636:	4b83      	ldr	r3, [pc, #524]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363e:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0xd8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fc82 	bl	8000f50 <HAL_GetTick>
 800364c:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003650:	f7fd fc7e 	bl	8000f50 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xca>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1ea      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b78      	ldr	r3, [pc, #480]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0xb8>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x102>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fc6e 	bl	8000f50 <HAL_GetTick>
 8003674:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003678:	f7fd fc6a 	bl	8000f50 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e1d6      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	4b6e      	ldr	r3, [pc, #440]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0xe0>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x102>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d077      	beq.n	8003796 <HAL_RCC_OscConfig+0x1fe>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d126      	bne.n	800370c <HAL_RCC_OscConfig+0x174>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036be:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d120      	bne.n	800370c <HAL_RCC_OscConfig+0x174>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ca:	4b5e      	ldr	r3, [pc, #376]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_RCC_OscConfig+0x14a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_OscConfig+0x14a>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e1aa      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	4858      	ldr	r0, [pc, #352]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6919      	ldr	r1, [r3, #16]
 80036f0:	23f8      	movs	r3, #248	; 0xf8
 80036f2:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	4313      	orrs	r3, r2
 8003708:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	e044      	b.n	8003796 <HAL_RCC_OscConfig+0x1fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02a      	beq.n	800376a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003714:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x2b0>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fd fc19 	bl	8000f50 <HAL_GetTick>
 800371e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003722:	f7fd fc15 	bl	8000f50 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e181      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x18a>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	4840      	ldr	r0, [pc, #256]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	4b40      	ldr	r3, [pc, #256]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	23f8      	movs	r3, #248	; 0xf8
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	4313      	orrs	r3, r2
 8003766:	6003      	str	r3, [r0, #0]
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x1fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376a:	4b37      	ldr	r3, [pc, #220]	; (8003848 <HAL_RCC_OscConfig+0x2b0>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fd fbee 	bl	8000f50 <HAL_GetTick>
 8003774:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003778:	f7fd fbea 	bl	8000f50 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e156      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x1e0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d030      	beq.n	8003804 <HAL_RCC_OscConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d016      	beq.n	80037d8 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCC_OscConfig+0x2b4>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fd fbce 	bl	8000f50 <HAL_GetTick>
 80037b4:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x232>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fd fbca 	bl	8000f50 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e136      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x220>
 80037d6:	e015      	b.n	8003804 <HAL_RCC_OscConfig+0x26c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d8:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_OscConfig+0x2b4>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fd fbb7 	bl	8000f50 <HAL_GetTick>
 80037e2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x260>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e6:	f7fd fbb3 	bl	8000f50 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e11f      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x24e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8087 	beq.w	8003920 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800382e:	4a08      	ldr	r2, [pc, #32]	; (8003850 <HAL_RCC_OscConfig+0x2b8>)
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_RCC_OscConfig+0x2b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800383a:	f7fd fb89 	bl	8000f50 <HAL_GetTick>
 800383e:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003840:	e011      	b.n	8003866 <HAL_RCC_OscConfig+0x2ce>
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	42470000 	.word	0x42470000
 800384c:	42470e80 	.word	0x42470e80
 8003850:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fd fb7c 	bl	8000f50 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0e8      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003866:	4b76      	ldr	r3, [pc, #472]	; (8003a40 <HAL_RCC_OscConfig+0x4a8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x2bc>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d106      	bne.n	8003888 <HAL_RCC_OscConfig+0x2f0>
 800387a:	4a72      	ldr	r2, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	4b71      	ldr	r3, [pc, #452]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	e01c      	b.n	80038c2 <HAL_RCC_OscConfig+0x32a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0x312>
 8003890:	4a6c      	ldr	r2, [pc, #432]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003892:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f043 0304 	orr.w	r3, r3, #4
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	4a69      	ldr	r2, [pc, #420]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800389e:	4b69      	ldr	r3, [pc, #420]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
 80038a8:	e00b      	b.n	80038c2 <HAL_RCC_OscConfig+0x32a>
 80038aa:	4a66      	ldr	r2, [pc, #408]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038ac:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	4a63      	ldr	r2, [pc, #396]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	4b62      	ldr	r3, [pc, #392]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d015      	beq.n	80038f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fd fb41 	bl	8000f50 <HAL_GetTick>
 80038ce:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fd fb3d 	bl	8000f50 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0a7      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e8:	4b56      	ldr	r3, [pc, #344]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ee      	beq.n	80038d2 <HAL_RCC_OscConfig+0x33a>
 80038f4:	e014      	b.n	8003920 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fd fb2b 	bl	8000f50 <HAL_GetTick>
 80038fa:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fd fb27 	bl	8000f50 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e091      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003914:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ee      	bne.n	80038fe <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8086 	beq.w	8003a36 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800392a:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b08      	cmp	r3, #8
 8003934:	d07d      	beq.n	8003a32 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d162      	bne.n	8003a04 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <HAL_RCC_OscConfig+0x4b0>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fd fb04 	bl	8000f50 <HAL_GetTick>
 8003948:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394c:	f7fd fb00 	bl	8000f50 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e06c      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x3b4>
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800396a:	4836      	ldr	r0, [pc, #216]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800397a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	1e59      	subs	r1, r3, #1
 800399c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ba:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	4313      	orrs	r3, r2
 80039d4:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d6:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <HAL_RCC_OscConfig+0x4b0>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd fab8 	bl	8000f50 <HAL_GetTick>
 80039e0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fd fab4 	bl	8000f50 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e020      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44c>
 8003a02:	e018      	b.n	8003a36 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_RCC_OscConfig+0x4b0>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fd faa1 	bl	8000f50 <HAL_GetTick>
 8003a0e:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a12:	f7fd fa9d 	bl	8000f50 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e009      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_RCC_OscConfig+0x4ac>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f0      	bne.n	8003a12 <HAL_RCC_OscConfig+0x47a>
 8003a30:	e001      	b.n	8003a36 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3738      	adds	r7, #56	; 0x38
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40007000 	.word	0x40007000
 8003a44:	40023800 	.word	0x40023800
 8003a48:	42470060 	.word	0x42470060

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003a5a:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCC_ClockConfig+0x214>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 020f 	and.w	r2, r3, #15
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d20c      	bcs.n	8003a82 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a68:	4b7d      	ldr	r3, [pc, #500]	; (8003c60 <HAL_RCC_ClockConfig+0x214>)
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a70:	4b7b      	ldr	r3, [pc, #492]	; (8003c60 <HAL_RCC_ClockConfig+0x214>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0ea      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8e:	4975      	ldr	r1, [pc, #468]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003a90:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8086 	beq.w	8003bba <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b6b      	ldr	r3, [pc, #428]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d119      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0c8      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x9a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b63      	ldr	r3, [pc, #396]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0b8      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b5f      	ldr	r3, [pc, #380]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0b0      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	495b      	ldr	r1, [pc, #364]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003af8:	4b5a      	ldr	r3, [pc, #360]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 0203 	bic.w	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b08:	f7fd fa22 	bl	8000f50 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d112      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fd fa1a 	bl	8000f50 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e094      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b2e:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d1ee      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xcc>
 8003b3a:	e03e      	b.n	8003bba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d112      	bne.n	8003b6a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b46:	f7fd fa03 	bl	8000f50 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e07d      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b5c:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d1ee      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xfa>
 8003b68:	e027      	b.n	8003bba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d11d      	bne.n	8003bae <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fd f9ec 	bl	8000f50 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e066      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003b8a:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d1ee      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x128>
 8003b96:	e010      	b.n	8003bba <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fd f9da 	bl	8000f50 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e054      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bae:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_RCC_ClockConfig+0x214>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 020f 	and.w	r2, r3, #15
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d90c      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_RCC_ClockConfig+0x214>)
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bd0:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <HAL_RCC_ClockConfig+0x214>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e03a      	b.n	8003c58 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bee:	491d      	ldr	r1, [pc, #116]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0c:	4915      	ldr	r1, [pc, #84]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003c20:	f000 f826 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c24:	4601      	mov	r1, r0
 8003c26:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_RCC_ClockConfig+0x218>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c2e:	23f0      	movs	r3, #240	; 0xf0
 8003c30:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	fab3 f383 	clz	r3, r3
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <HAL_RCC_ClockConfig+0x21c>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	fa21 f303 	lsr.w	r3, r1, r3
 8003c4c:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_RCC_ClockConfig+0x220>)
 8003c4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7fd f953 	bl	8000efc <HAL_InitTick>
  
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40023c00 	.word	0x40023c00
 8003c64:	40023800 	.word	0x40023800
 8003c68:	0800c2d4 	.word	0x0800c2d4
 8003c6c:	2000012c 	.word	0x2000012c

08003c70 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b08b      	sub	sp, #44	; 0x2c
 8003c74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d006      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x30>
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d007      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x36>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d158      	bne.n	8003d4c <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c9a:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003c9c:	623b      	str	r3, [r7, #32]
       break;
 8003c9e:	e058      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ca2:	623b      	str	r3, [r7, #32]
      break;
 8003ca4:	e055      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cae:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d017      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003cbc:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc4:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ccc:	400b      	ands	r3, r1
 8003cce:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003cd2:	60f9      	str	r1, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	68f9      	ldr	r1, [r7, #12]
 8003cd6:	fa91 f1a1 	rbit	r1, r1
 8003cda:	60b9      	str	r1, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	fab1 f181 	clz	r1, r1
 8003ce2:	40cb      	lsrs	r3, r1
 8003ce4:	fb03 f302 	mul.w	r3, r3, r2
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	e016      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003d02:	6179      	str	r1, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	fa91 f1a1 	rbit	r1, r1
 8003d0a:	6079      	str	r1, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	fab1 f181 	clz	r1, r1
 8003d12:	40cb      	lsrs	r3, r1
 8003d14:	fb03 f302 	mul.w	r3, r3, r2
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d22:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003d26:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	623b      	str	r3, [r7, #32]
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003d4e:	623b      	str	r3, [r7, #32]
      break;
 8003d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d52:	6a3b      	ldr	r3, [r7, #32]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	372c      	adds	r7, #44	; 0x2c
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40023800 	.word	0x40023800
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	017d7840 	.word	0x017d7840

08003d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	2000012c 	.word	0x2000012c

08003d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003d8a:	f7ff ffef 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003d8e:	4601      	mov	r1, r0
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003d9c:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	fa93 f3a3 	rbit	r3, r3
 8003da4:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	fab3 f383 	clz	r3, r3
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	0800c2e4 	.word	0x0800c2e4

08003dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003dce:	f7ff ffcd 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8003ddc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003de0:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40023800 	.word	0x40023800
 8003e08:	0800c2e4 	.word	0x0800c2e4

08003e0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d04a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xbe>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e34:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3a:	f7fd f889 	bl	8000f50 <HAL_GetTick>
 8003e3e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e42:	f7fd f885 	bl	8000f50 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0c5      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e54:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e60:	4862      	ldr	r0, [pc, #392]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e6a:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	fab3 f383 	clz	r3, r3
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003e84:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif /* STM32F411xE */
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e9e:	4b52      	ldr	r3, [pc, #328]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fd f854 	bl	8000f50 <HAL_GetTick>
 8003ea8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eac:	f7fd f850 	bl	8000f50 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e090      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ebe:	4b4b      	ldr	r3, [pc, #300]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8083 	beq.w	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	4a43      	ldr	r2, [pc, #268]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ede:	4b43      	ldr	r3, [pc, #268]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee8:	4b40      	ldr	r3, [pc, #256]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ef4:	4a3e      	ldr	r2, [pc, #248]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efe:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f00:	f7fd f826 	bl	8000f50 <HAL_GetTick>
 8003f04:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fd f822 	bl	8000f50 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e062      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    PWR->CR |= PWR_CR_DBP;
    
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f1a:	4b35      	ldr	r3, [pc, #212]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02f      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d028      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f44:	4b29      	ldr	r3, [pc, #164]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4e:	4b29      	ldr	r3, [pc, #164]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f5a:	4a24      	ldr	r2, [pc, #144]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f60:	4b22      	ldr	r3, [pc, #136]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d014      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fc fff0 	bl	8000f50 <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	e00a      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f74:	f7fc ffec 	bl	8000f50 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e02a      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ee      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x168>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003fa4:	4911      	ldr	r1, [pc, #68]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
 8003fbe:	e005      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003fc0:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fca:	6093      	str	r3, [r2, #8]
 8003fcc:	4907      	ldr	r1, [pc, #28]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003fd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3728      	adds	r7, #40	; 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	42470068 	.word	0x42470068
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42470e40 	.word	0x42470e40

08003ff8 <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e06d      	b.n	80040e6 <HAL_RTC_Init+0xee>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7f5b      	ldrb	r3, [r3, #29]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f004 fa32 	bl	8008484 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	22ca      	movs	r2, #202	; 0xca
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2253      	movs	r2, #83	; 0x53
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9fe 	bl	8004438 <RTC_EnterInitMode>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	22ff      	movs	r2, #255	; 0xff
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e048      	b.n	80040e6 <HAL_RTC_Init+0xee>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004066:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	6891      	ldr	r1, [r2, #8]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6850      	ldr	r0, [r2, #4]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6912      	ldr	r2, [r2, #16]
 800407a:	4310      	orrs	r0, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6952      	ldr	r2, [r2, #20]
 8004080:	4302      	orrs	r2, r0
 8004082:	430a      	orrs	r2, r1
 8004084:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68d2      	ldr	r2, [r2, #12]
 800408e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	6911      	ldr	r1, [r2, #16]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6892      	ldr	r2, [r2, #8]
 800409e:	0412      	lsls	r2, r2, #16
 80040a0:	430a      	orrs	r2, r1
 80040a2:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	68d2      	ldr	r2, [r2, #12]
 80040ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b2:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6992      	ldr	r2, [r2, #24]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	22ff      	movs	r2, #255	; 0xff
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop

080040f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	7f1b      	ldrb	r3, [r3, #28]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_RTC_SetTime+0x1c>
 8004108:	2302      	movs	r3, #2
 800410a:	e0b2      	b.n	8004272 <HAL_RTC_SetTime+0x182>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2202      	movs	r2, #2
 8004116:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d126      	bne.n	800416c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f9aa 	bl	8004490 <RTC_ByteToBcd2>
 800413c:	4603      	mov	r3, r0
 800413e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f9a3 	bl	8004490 <RTC_ByteToBcd2>
 800414a:	4603      	mov	r3, r0
 800414c:	021b      	lsls	r3, r3, #8
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800414e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	789b      	ldrb	r3, [r3, #2]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f99b 	bl	8004490 <RTC_ByteToBcd2>
 800415a:	4603      	mov	r3, r0
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800415c:	ea44 0203 	orr.w	r2, r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	78db      	ldrb	r3, [r3, #3]
 8004164:	041b      	lsls	r3, r3, #16
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e020      	b.n	80041ae <HAL_RTC_SetTime+0xbe>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
                        (((uint32_t)sTime->TimeFormat) << 16U));  
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f9a4 	bl	80044cc <RTC_Bcd2ToByte>
 8004184:	4603      	mov	r3, r0
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e002      	b.n	8004190 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	021b      	lsls	r3, r3, #8
      sTime->TimeFormat = 0x00U;
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800419c:	4313      	orrs	r3, r2
              ((uint32_t)(sTime->Minutes) << 8U) | \
              ((uint32_t)sTime->Seconds) | \
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	7892      	ldrb	r2, [r2, #2]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80041a2:	431a      	orrs	r2, r3
              ((uint32_t)sTime->Seconds) | \
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	78db      	ldrb	r3, [r3, #3]
 80041a8:	041b      	lsls	r3, r3, #16
      sTime->TimeFormat = 0x00U;
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
              ((uint32_t)sTime->Seconds) | \
              ((uint32_t)(sTime->TimeFormat) << 16U));   
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	22ca      	movs	r2, #202	; 0xca
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2253      	movs	r2, #83	; 0x53
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f93a 	bl	8004438 <RTC_EnterInitMode>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	22ff      	movs	r2, #255	; 0xff
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2204      	movs	r2, #4
 80041d6:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e047      	b.n	8004272 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041f0:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	6892      	ldr	r2, [r2, #8]
 80041fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004200:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6891      	ldr	r1, [r2, #8]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	68d0      	ldr	r0, [r2, #12]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	6912      	ldr	r2, [r2, #16]
 8004214:	4302      	orrs	r2, r0
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	68d2      	ldr	r2, [r2, #12]
 8004224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004228:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f8d5 	bl	80043e8 <HAL_RTC_WaitForSynchro>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	22ff      	movs	r2, #255	; 0xff
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2204      	movs	r2, #4
 8004250:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e00a      	b.n	8004272 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	22ff      	movs	r2, #255	; 0xff
 8004262:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 8004270:	2300      	movs	r3, #0
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop

0800427c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	7f1b      	ldrb	r3, [r3, #28]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_RTC_SetDate+0x1c>
 8004294:	2302      	movs	r3, #2
 8004296:	e0a2      	b.n	80043de <HAL_RTC_SetDate+0x162>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2202      	movs	r2, #2
 80042a2:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10e      	bne.n	80042c8 <HAL_RTC_SetDate+0x4c>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	785b      	ldrb	r3, [r3, #1]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	f023 0310 	bic.w	r3, r3, #16
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	330a      	adds	r3, #10
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11c      	bne.n	8004308 <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	78db      	ldrb	r3, [r3, #3]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f8dc 	bl	8004490 <RTC_ByteToBcd2>
 80042d8:	4603      	mov	r3, r0
 80042da:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f8d5 	bl	8004490 <RTC_ByteToBcd2>
 80042e6:	4603      	mov	r3, r0
 80042e8:	021b      	lsls	r3, r3, #8
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042ea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	789b      	ldrb	r3, [r3, #2]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f8cd 	bl	8004490 <RTC_ByteToBcd2>
 80042f6:	4603      	mov	r3, r0
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80042f8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
                 ((uint32_t)sDate->WeekDay << 13U));   
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	035b      	lsls	r3, r3, #13
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e01c      	b.n	8004342 <HAL_RTC_SetDate+0xc6>
                 ((uint32_t)sDate->WeekDay << 13U));   
  }
  else
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f8dd 	bl	80044cc <RTC_Bcd2ToByte>
 8004312:	4603      	mov	r3, r0
 8004314:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	789b      	ldrb	r3, [r3, #2]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 f8d6 	bl	80044cc <RTC_Bcd2ToByte>
 8004320:	4603      	mov	r3, r0
 8004322:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	78db      	ldrb	r3, [r3, #3]
 8004328:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	021b      	lsls	r3, r3, #8
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004330:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Month) << 8U) | \
                  ((uint32_t)sDate->Date) | \
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	7892      	ldrb	r2, [r2, #2]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
                  (((uint32_t)sDate->Month) << 8U) | \
 8004336:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->Date) | \
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	035b      	lsls	r3, r3, #13
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
                  ((uint32_t)sDate->Date) | \
                  (((uint32_t)sDate->WeekDay) << 13U));  
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	22ca      	movs	r2, #202	; 0xca
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2253      	movs	r2, #83	; 0x53
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f870 	bl	8004438 <RTC_EnterInitMode>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_RTC_SetDate+0xfa>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2204      	movs	r2, #4
 800436a:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e033      	b.n	80043de <HAL_RTC_SetDate+0x162>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004380:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004384:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	68d2      	ldr	r2, [r2, #12]
 8004390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004394:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d111      	bne.n	80043c8 <HAL_RTC_SetDate+0x14c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f81f 	bl	80043e8 <HAL_RTC_WaitForSynchro>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <HAL_RTC_SetDate+0x14c>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	22ff      	movs	r2, #255	; 0xff
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2204      	movs	r2, #4
 80043bc:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e00a      	b.n	80043de <HAL_RTC_SetDate+0x162>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	22ff      	movs	r2, #255	; 0xff
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 80043dc:	2300      	movs	r3, #0
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
 80043e6:	bf00      	nop

080043e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004402:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004404:	f7fc fda4 	bl	8000f50 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800440a:	e009      	b.n	8004420 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800440c:	f7fc fda0 	bl	8000f50 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800441a:	d901      	bls.n	8004420 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e007      	b.n	8004430 <HAL_RTC_WaitForSynchro+0x48>

    /* Get tick */
    tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0ee      	beq.n	800440c <HAL_RTC_WaitForSynchro+0x24>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d119      	bne.n	8004486 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f04f 32ff 	mov.w	r2, #4294967295
 800445a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800445c:	f7fc fd78 	bl	8000f50 <HAL_GetTick>
 8004460:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004462:	e009      	b.n	8004478 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004464:	f7fc fd74 	bl	8000f50 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004472:	d901      	bls.n	8004478 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e007      	b.n	8004488 <RTC_EnterInitMode+0x50>

    /* Get tick */
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0ee      	beq.n	8004464 <RTC_EnterInitMode+0x2c>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 800449e:	e005      	b.n	80044ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3301      	adds	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	3b0a      	subs	r3, #10
 80044aa:	71fb      	strb	r3, [r7, #7]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  
  while(Value >= 10U)
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b09      	cmp	r3, #9
 80044b0:	d8f6      	bhi.n	80044a0 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	4313      	orrs	r3, r2
 80044be:	b2db      	uxtb	r3, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	b2db      	uxtb	r3, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3350      	adds	r3, #80	; 0x50
 800451e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4413      	add	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
  
  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.                   
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3350      	adds	r3, #80	; 0x50
 8004550:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e01d      	b.n	80045ba <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f004 f8c6 	bl	8008724 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f000 f982 	bl	80048b4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop

080045c4 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	68d2      	ldr	r2, [r2, #12]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop

080045fc <HAL_TIM_Base_Stop_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6a1a      	ldr	r2, [r3, #32]
 800461a:	f241 1311 	movw	r3, #4369	; 0x1111
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10f      	bne.n	8004644 <HAL_TIM_Base_Stop_IT+0x48>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a1a      	ldr	r2, [r3, #32]
 800462a:	f240 4344 	movw	r3, #1092	; 0x444
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <HAL_TIM_Base_Stop_IT+0x48>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop

08004654 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d022      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0202 	mvn.w	r2, #2
 8004680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8ee 	bl	8004878 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8e0 	bl	8004864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8f1 	bl	800488c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d022      	beq.n	8004704 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0204 	mvn.w	r2, #4
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8c4 	bl	8004878 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8b6 	bl	8004864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8c7 	bl	800488c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d022      	beq.n	8004758 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0208 	mvn.w	r2, #8
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f89a 	bl	8004878 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f88c 	bl	8004864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f89d 	bl	800488c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d022      	beq.n	80047ac <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01b      	beq.n	80047ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0210 	mvn.w	r2, #16
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2208      	movs	r2, #8
 8004782:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f870 	bl	8004878 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f862 	bl	8004864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f873 	bl	800488c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0201 	mvn.w	r2, #1
 80047d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f003 fb24 	bl	8007e20 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00e      	beq.n	8004804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f952 	bl	8004aa8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00e      	beq.n	8004830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004828:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f838 	bl	80048a0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00e      	beq.n	800485c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0220 	mvn.w	r2, #32
 8004854:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f91c 	bl	8004a94 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a44      	ldr	r2, [pc, #272]	; (80049dc <TIM_Base_SetConfig+0x128>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <TIM_Base_SetConfig+0x44>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0x44>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a41      	ldr	r2, [pc, #260]	; (80049e0 <TIM_Base_SetConfig+0x12c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0x44>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a40      	ldr	r2, [pc, #256]	; (80049e4 <TIM_Base_SetConfig+0x130>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0x44>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a3f      	ldr	r2, [pc, #252]	; (80049e8 <TIM_Base_SetConfig+0x134>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0x44>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a3e      	ldr	r2, [pc, #248]	; (80049ec <TIM_Base_SetConfig+0x138>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d101      	bne.n	80048fc <TIM_Base_SetConfig+0x48>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <TIM_Base_SetConfig+0x4a>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a31      	ldr	r2, [pc, #196]	; (80049dc <TIM_Base_SetConfig+0x128>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d02b      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004922:	d027      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a2e      	ldr	r2, [pc, #184]	; (80049e0 <TIM_Base_SetConfig+0x12c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d023      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a2d      	ldr	r2, [pc, #180]	; (80049e4 <TIM_Base_SetConfig+0x130>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d01f      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <TIM_Base_SetConfig+0x134>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d01b      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <TIM_Base_SetConfig+0x138>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d017      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a2a      	ldr	r2, [pc, #168]	; (80049f0 <TIM_Base_SetConfig+0x13c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <TIM_Base_SetConfig+0x140>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00f      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <TIM_Base_SetConfig+0x144>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00b      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a27      	ldr	r2, [pc, #156]	; (80049fc <TIM_Base_SetConfig+0x148>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <TIM_Base_SetConfig+0x14c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0xc0>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a25      	ldr	r2, [pc, #148]	; (8004a04 <TIM_Base_SetConfig+0x150>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <TIM_Base_SetConfig+0xc4>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <TIM_Base_SetConfig+0xc6>
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <TIM_Base_SetConfig+0x128>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_Base_SetConfig+0x102>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <TIM_Base_SetConfig+0x138>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <TIM_Base_SetConfig+0x106>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <TIM_Base_SetConfig+0x108>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	615a      	str	r2, [r3, #20]
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	40010400 	.word	0x40010400
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40014400 	.word	0x40014400
 80049f8:	40014800 	.word	0x40014800
 80049fc:	40001800 	.word	0x40001800
 8004a00:	40001c00 	.word	0x40001c00
 8004a04:	40002000 	.word	0x40002000

08004a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e032      	b.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	6852      	ldr	r2, [r2, #4]
 8004a3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a3e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	6851      	ldr	r1, [r2, #4]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	6892      	ldr	r2, [r2, #8]
 8004a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a60:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	6891      	ldr	r1, [r2, #8]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	6852      	ldr	r2, [r2, #4]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
} 
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop

08004a94 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e03f      	b.n	8004b4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f003 feb8 	bl	8008858 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	; 0x24
 8004aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	68d2      	ldr	r2, [r2, #12]
 8004afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004afe:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fadd 	bl	80050c0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	6912      	ldr	r2, [r2, #16]
 8004b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	6952      	ldr	r2, [r2, #20]
 8004b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b24:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	68d2      	ldr	r2, [r2, #12]
 8004b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b34:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop

08004b58 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d130      	bne.n	8004bd4 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_Transmit_IT+0x26>
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e029      	b.n	8004bd6 <HAL_UART_Transmit_IT+0x7e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Transmit_IT+0x38>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e022      	b.n	8004bd6 <HAL_UART_Transmit_IT+0x7e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2221      	movs	r2, #33	; 0x21
 8004bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	68d2      	ldr	r2, [r2, #12]
 8004bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bce:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;   
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d138      	bne.n	8004c70 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_UART_Receive_IT+0x26>
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e031      	b.n	8004c72 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_UART_Receive_IT+0x38>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e02a      	b.n	8004c72 <HAL_UART_Receive_IT+0x8e>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2222      	movs	r2, #34	; 0x22
 8004c40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	6952      	ldr	r2, [r2, #20]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	68d2      	ldr	r2, [r2, #12]
 8004c66:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004c6a:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop

08004c80 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x52>
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f97e 	bl	8004fcc <UART_Receive_IT>
      return;
 8004cd0:	e0cc      	b.n	8004e6c <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80ab 	beq.w	8004e30 <HAL_UART_IRQHandler+0x1b0>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x70>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80a0 	beq.w	8004e30 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_UART_IRQHandler+0x90>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d08:	f043 0201 	orr.w	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_UART_IRQHandler+0xb0>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	f043 0202 	orr.w	r2, r3, #2
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_UART_IRQHandler+0xd0>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	f043 0204 	orr.w	r2, r3, #4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_UART_IRQHandler+0xf0>
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	f043 0208 	orr.w	r2, r3, #8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d078      	beq.n	8004e6a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_UART_IRQHandler+0x112>
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f91d 	bl	8004fcc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <HAL_UART_IRQHandler+0x13a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d031      	beq.n	8004e1e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f866 	bl	8004e8c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d023      	beq.n	8004e16 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	6952      	ldr	r2, [r2, #20]
 8004dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ddc:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d013      	beq.n	8004e0e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	4a22      	ldr	r2, [pc, #136]	; (8004e74 <HAL_UART_IRQHandler+0x1f4>)
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fc fa0c 	bl	8001210 <HAL_DMA_Abort_IT>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4798      	blx	r3
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	e00e      	b.n	8004e2c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f832 	bl	8004e78 <HAL_UART_ErrorCallback>
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	e00a      	b.n	8004e2c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f82e 	bl	8004e78 <HAL_UART_ErrorCallback>
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	e006      	b.n	8004e2c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f82a 	bl	8004e78 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004e2a:	e01e      	b.n	8004e6a <HAL_UART_IRQHandler+0x1ea>
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	bf00      	nop
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
        huart->ErrorCode = HAL_UART_ERROR_NONE;
      }
    }
    return;
 8004e2e:	e01c      	b.n	8004e6a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_UART_IRQHandler+0x1cc>
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f853 	bl	8004ef0 <UART_Transmit_IT>
    return;
 8004e4a:	e00f      	b.n	8004e6c <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_UART_IRQHandler+0x1ec>
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f89b 	bl	8004f9c <UART_EndTransmit_IT>
    return;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <HAL_UART_IRQHandler+0x1ec>
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
        huart->ErrorCode = HAL_UART_ERROR_NONE;
      }
    }
    return;
 8004e6a:	bf00      	nop
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	08004ec9 	.word	0x08004ec9

08004e78 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	68d2      	ldr	r2, [r2, #12]
 8004e9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ea2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	6952      	ldr	r2, [r2, #20]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff ffc8 	bl	8004e78 <HAL_UART_ErrorCallback>
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b21      	cmp	r3, #33	; 0x21
 8004f02:	d143      	bne.n	8004f8c <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0c:	d119      	bne.n	8004f42 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	8812      	ldrh	r2, [r2, #0]
 8004f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f20:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d105      	bne.n	8004f36 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	1c9a      	adds	r2, r3, #2
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]
 8004f34:	e00e      	b.n	8004f54 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	621a      	str	r2, [r3, #32]
 8004f40:	e008      	b.n	8004f54 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	1c58      	adds	r0, r3, #1
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	6208      	str	r0, [r1, #32]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4619      	mov	r1, r3
 8004f62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10f      	bne.n	8004f88 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	68d2      	ldr	r2, [r2, #12]
 8004f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	68d2      	ldr	r2, [r2, #12]
 8004f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop

08004f9c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb2:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f002 ff93 	bl	8007ee8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b22      	cmp	r3, #34	; 0x22
 8004fde:	d169      	bne.n	80050b4 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe8:	d123      	bne.n	8005032 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10e      	bne.n	8005016 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
 8005014:	e029      	b.n	800506a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	b29b      	uxth	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
 8005030:	e01b      	b.n	800506a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	1c59      	adds	r1, r3, #1
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6291      	str	r1, [r2, #40]	; 0x28
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	6852      	ldr	r2, [r2, #4]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e00c      	b.n	800506a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6291      	str	r1, [r2, #40]	; 0x28
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	6852      	ldr	r2, [r2, #4]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29b      	uxth	r3, r3
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4619      	mov	r1, r3
 8005078:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800507a:	2b00      	cmp	r3, #0
 800507c:	d118      	bne.n	80050b0 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	68d2      	ldr	r2, [r2, #12]
 8005088:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800508c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	6952      	ldr	r2, [r2, #20]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f002 fefe 	bl	8007ea8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e002      	b.n	80050b6 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	e000      	b.n	80050b6 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop

080050c0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050da:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80050fc:	f023 030c 	bic.w	r3, r3, #12
 8005100:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	4313      	orrs	r3, r2
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005150:	f040 80e4 	bne.w	800531c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4aab      	ldr	r2, [pc, #684]	; (8005408 <UART_SetConfig+0x348>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <UART_SetConfig+0xa8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4aaa      	ldr	r2, [pc, #680]	; (800540c <UART_SetConfig+0x34c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d16c      	bne.n	8005242 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681c      	ldr	r4, [r3, #0]
 800516c:	f7fe fe2c 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 8005170:	4602      	mov	r2, r0
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009a      	lsls	r2, r3, #2
 800517a:	441a      	add	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	4aa2      	ldr	r2, [pc, #648]	; (8005410 <UART_SetConfig+0x350>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	011d      	lsls	r5, r3, #4
 8005190:	f7fe fe1a 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 8005194:	4602      	mov	r2, r0
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009a      	lsls	r2, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80051aa:	f7fe fe0d 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80051ae:	4602      	mov	r2, r0
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009a      	lsls	r2, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	4a92      	ldr	r2, [pc, #584]	; (8005410 <UART_SetConfig+0x350>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2264      	movs	r2, #100	; 0x64
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	1af3      	subs	r3, r6, r3
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	3332      	adds	r3, #50	; 0x32
 80051d8:	4a8d      	ldr	r2, [pc, #564]	; (8005410 <UART_SetConfig+0x350>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	441d      	add	r5, r3
 80051e8:	f7fe fdee 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009a      	lsls	r2, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8005202:	f7fe fde1 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 8005206:	4602      	mov	r2, r0
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009a      	lsls	r2, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	4a7c      	ldr	r2, [pc, #496]	; (8005410 <UART_SetConfig+0x350>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2264      	movs	r2, #100	; 0x64
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	1af3      	subs	r3, r6, r3
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	3332      	adds	r3, #50	; 0x32
 8005230:	4a77      	ldr	r2, [pc, #476]	; (8005410 <UART_SetConfig+0x350>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	442b      	add	r3, r5
 800523e:	60a3      	str	r3, [r4, #8]
 8005240:	e154      	b.n	80054ec <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681c      	ldr	r4, [r3, #0]
 8005246:	f7fe fd9d 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 800524a:	4602      	mov	r2, r0
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	4a6b      	ldr	r2, [pc, #428]	; (8005410 <UART_SetConfig+0x350>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	011d      	lsls	r5, r3, #4
 800526a:	f7fe fd8b 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 800526e:	4602      	mov	r2, r0
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009a      	lsls	r2, r3, #2
 8005278:	441a      	add	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	fbb2 f6f3 	udiv	r6, r2, r3
 8005284:	f7fe fd7e 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8005288:	4602      	mov	r2, r0
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009a      	lsls	r2, r3, #2
 8005292:	441a      	add	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	4a5c      	ldr	r2, [pc, #368]	; (8005410 <UART_SetConfig+0x350>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	2264      	movs	r2, #100	; 0x64
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	1af3      	subs	r3, r6, r3
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	3332      	adds	r3, #50	; 0x32
 80052b2:	4a57      	ldr	r2, [pc, #348]	; (8005410 <UART_SetConfig+0x350>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	441d      	add	r5, r3
 80052c2:	f7fe fd5f 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 80052c6:	4602      	mov	r2, r0
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009a      	lsls	r2, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052dc:	f7fe fd52 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009a      	lsls	r2, r3, #2
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	4a46      	ldr	r2, [pc, #280]	; (8005410 <UART_SetConfig+0x350>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2264      	movs	r2, #100	; 0x64
 8005300:	fb02 f303 	mul.w	r3, r2, r3
 8005304:	1af3      	subs	r3, r6, r3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a41      	ldr	r2, [pc, #260]	; (8005410 <UART_SetConfig+0x350>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	442b      	add	r3, r5
 8005318:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800531a:	e0e7      	b.n	80054ec <UART_SetConfig+0x42c>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a39      	ldr	r2, [pc, #228]	; (8005408 <UART_SetConfig+0x348>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <UART_SetConfig+0x270>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a38      	ldr	r2, [pc, #224]	; (800540c <UART_SetConfig+0x34c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d171      	bne.n	8005414 <UART_SetConfig+0x354>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681c      	ldr	r4, [r3, #0]
 8005334:	f7fe fd48 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 8005338:	4602      	mov	r2, r0
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009a      	lsls	r2, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	4a30      	ldr	r2, [pc, #192]	; (8005410 <UART_SetConfig+0x350>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	011d      	lsls	r5, r3, #4
 8005358:	f7fe fd36 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 800535c:	4602      	mov	r2, r0
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009a      	lsls	r2, r3, #2
 8005366:	441a      	add	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005372:	f7fe fd29 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 8005376:	4602      	mov	r2, r0
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009a      	lsls	r2, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	4a20      	ldr	r2, [pc, #128]	; (8005410 <UART_SetConfig+0x350>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2264      	movs	r2, #100	; 0x64
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	1af3      	subs	r3, r6, r3
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	3332      	adds	r3, #50	; 0x32
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <UART_SetConfig+0x350>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ac:	441d      	add	r5, r3
 80053ae:	f7fe fd0b 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80053b2:	4602      	mov	r2, r0
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009a      	lsls	r2, r3, #2
 80053bc:	441a      	add	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80053c8:	f7fe fcfe 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009a      	lsls	r2, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	4a0b      	ldr	r2, [pc, #44]	; (8005410 <UART_SetConfig+0x350>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	2264      	movs	r2, #100	; 0x64
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	1af3      	subs	r3, r6, r3
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	3332      	adds	r3, #50	; 0x32
 80053f6:	4a06      	ldr	r2, [pc, #24]	; (8005410 <UART_SetConfig+0x350>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	442b      	add	r3, r5
 8005404:	60a3      	str	r3, [r4, #8]
 8005406:	e071      	b.n	80054ec <UART_SetConfig+0x42c>
 8005408:	40011000 	.word	0x40011000
 800540c:	40011400 	.word	0x40011400
 8005410:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681c      	ldr	r4, [r3, #0]
 8005418:	f7fe fcb4 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 800541c:	4602      	mov	r2, r0
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009a      	lsls	r2, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	4a30      	ldr	r2, [pc, #192]	; (80054f4 <UART_SetConfig+0x434>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	011d      	lsls	r5, r3, #4
 800543c:	f7fe fca2 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8005440:	4602      	mov	r2, r0
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009a      	lsls	r2, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	fbb2 f6f3 	udiv	r6, r2, r3
 8005456:	f7fe fc95 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 800545a:	4602      	mov	r2, r0
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	4a20      	ldr	r2, [pc, #128]	; (80054f4 <UART_SetConfig+0x434>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2264      	movs	r2, #100	; 0x64
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	1af3      	subs	r3, r6, r3
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	3332      	adds	r3, #50	; 0x32
 8005484:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <UART_SetConfig+0x434>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005490:	441d      	add	r5, r3
 8005492:	f7fe fc77 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8005496:	4602      	mov	r2, r0
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009a      	lsls	r2, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80054ac:	f7fe fc6a 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009a      	lsls	r2, r3, #2
 80054ba:	441a      	add	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	4a0b      	ldr	r2, [pc, #44]	; (80054f4 <UART_SetConfig+0x434>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2264      	movs	r2, #100	; 0x64
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	1af3      	subs	r3, r6, r3
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	3332      	adds	r3, #50	; 0x32
 80054da:	4a06      	ldr	r2, [pc, #24]	; (80054f4 <UART_SetConfig+0x434>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	442b      	add	r3, r5
 80054e8:	60a3      	str	r3, [r4, #8]
    }
  }
}
 80054ea:	e7ff      	b.n	80054ec <UART_SetConfig+0x42c>
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f4:	51eb851f 	.word	0x51eb851f

080054f8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f8:	b084      	sub	sp, #16
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	f107 0014 	add.w	r0, r7, #20
 8005506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	2b01      	cmp	r3, #1
 800550e:	d120      	bne.n	8005552 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8005538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553a:	2b01      	cmp	r3, #1
 800553c:	d105      	bne.n	800554a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 f9ca 	bl	80068e4 <USB_CoreReset>
 8005550:	e00c      	b.n	800556c <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f001 f9c0 	bl	80068e4 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d10b      	bne.n	800558a <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f043 0206 	orr.w	r2, r3, #6
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005596:	b004      	add	sp, #16
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop

0800559c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f043 0201 	orr.w	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop

080055c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f023 0201 	bic.w	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop

080055e4 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d106      	bne.n	8005610 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	e008      	b.n	8005622 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8005622:	2032      	movs	r0, #50	; 0x32
 8005624:	f7fb fca0 	bl	8000f68 <HAL_Delay>
  
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop

08005634 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005634:	b084      	sub	sp, #16
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	f107 001c 	add.w	r0, r7, #28
 8005642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 800564a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
 800565c:	e005      	b.n	800566a <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567c:	461a      	mov	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10c      	bne.n	80056a8 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8005694:	2100      	movs	r1, #0
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f940 	bl	800591c <USB_SetDevSpeed>
 800569c:	e008      	b.n	80056b0 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800569e:	2101      	movs	r1, #1
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f93b 	bl	800591c <USB_SetDevSpeed>
 80056a6:	e003      	b.n	80056b0 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80056a8:	2103      	movs	r1, #3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f936 	bl	800591c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80056b0:	2110      	movs	r1, #16
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f8ea 	bl	800588c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f90d 	bl	80058d8 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	461a      	mov	r2, r3
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
 80056e2:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e031      	b.n	800575a <USB_DevInit+0x126>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	da0a      	bge.n	800571e <USB_DevInit+0xea>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	461a      	mov	r2, r3
 8005716:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	e008      	b.n	8005730 <USB_DevInit+0xfc>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	461a      	mov	r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	461a      	mov	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574e:	461a      	mov	r2, r3
 8005750:	23ff      	movs	r3, #255	; 0xff
 8005752:	6093      	str	r3, [r2, #8]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	429a      	cmp	r2, r3
 8005760:	d8c9      	bhi.n	80056f6 <USB_DevInit+0xc2>
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	e031      	b.n	80057cc <USB_DevInit+0x198>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	da0a      	bge.n	8005790 <USB_DevInit+0x15c>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e008      	b.n	80057a2 <USB_DevInit+0x16e>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	461a      	mov	r2, r3
 800579e:	2300      	movs	r3, #0
 80057a0:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	461a      	mov	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	461a      	mov	r2, r3
 80057c2:	23ff      	movs	r3, #255	; 0xff
 80057c4:	6093      	str	r3, [r2, #8]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d8c9      	bhi.n	8005768 <USB_DevInit+0x134>
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057da:	461a      	mov	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e8:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d117      	bne.n	8005820 <USB_DevInit+0x1ec>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f6:	461a      	mov	r2, r3
 80057f8:	4b22      	ldr	r3, [pc, #136]	; (8005884 <USB_DevInit+0x250>)
 80057fa:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005810:	f043 0303 	orr.w	r3, r3, #3
 8005814:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800582c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d105      	bne.n	8005840 <USB_DevInit+0x20c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	f043 0210 	orr.w	r2, r3, #16
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	4b10      	ldr	r3, [pc, #64]	; (8005888 <USB_DevInit+0x254>)
 8005846:	4313      	orrs	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <USB_DevInit+0x22a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f043 0208 	orr.w	r2, r3, #8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800585e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005860:	2b01      	cmp	r3, #1
 8005862:	d107      	bne.n	8005874 <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800586c:	f043 0304 	orr.w	r3, r3, #4
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005880:	b004      	add	sp, #16
 8005882:	4770      	bx	lr
 8005884:	00800100 	.word	0x00800100
 8005888:	803c3800 	.word	0x803c3800

0800588c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <USB_FlushTxFifo+0x48>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d901      	bls.n	80058b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e006      	b.n	80058c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f0      	bne.n	80058a6 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	00030d40 	.word	0x00030d40

080058d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2210      	movs	r2, #16
 80058e8:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <USB_FlushRxFifo+0x40>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e006      	b.n	800590a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f0      	bne.n	80058ea <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	00030d40 	.word	0x00030d40

0800591c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	4619      	mov	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0306 	and.w	r3, r3, #6
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8005968:	2300      	movs	r3, #0
 800596a:	73fb      	strb	r3, [r7, #15]
 800596c:	e01c      	b.n	80059a8 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0306 	and.w	r3, r3, #6
 800597a:	2b02      	cmp	r3, #2
 800597c:	d007      	beq.n	800598e <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0306 	and.w	r3, r3, #6
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800598a:	2b06      	cmp	r3, #6
 800598c:	d102      	bne.n	8005994 <USB_GetDevSpeed+0x48>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 800598e:	2303      	movs	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
 8005992:	e009      	b.n	80059a8 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0306 	and.w	r3, r3, #6
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d101      	bne.n	80059a8 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 80059a4:	2302      	movs	r3, #2
 80059a6:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop

080059b8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d13e      	bne.n	8005a48 <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	4619      	mov	r1, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	2301      	movs	r3, #1
 80059e2:	4083      	lsls	r3, r0
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d15c      	bne.n	8005abc <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	4618      	mov	r0, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	78c9      	ldrb	r1, [r1, #3]
 8005a2e:	0489      	lsls	r1, r1, #18
 8005a30:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	7809      	ldrb	r1, [r1, #0]
 8005a36:	0589      	lsls	r1, r1, #22
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a44:	6003      	str	r3, [r0, #0]
 8005a46:	e039      	b.n	8005abc <USB_ActivateEndpoint+0x104>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	4619      	mov	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4083      	lsls	r3, r0
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11d      	bne.n	8005abc <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	4618      	mov	r0, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	78c9      	ldrb	r1, [r1, #3]
 8005aac:	0489      	lsls	r1, r1, #18
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aba:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop

08005acc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d153      	bne.n	8005b8a <USB_DeactivateEndpoint+0xbe>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	4619      	mov	r1, r3
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b06:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	461a      	mov	r2, r3
 8005b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b1c:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b32:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a42      	ldr	r2, [pc, #264]	; (8005c48 <USB_DeactivateEndpoint+0x17c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e07c      	b.n	8005c40 <USB_DeactivateEndpoint+0x174>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1ea      	bne.n	8005b34 <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8005b5e:	2110      	movs	r1, #16
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff fe93 	bl	800588c <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4083      	lsls	r3, r0
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	4013      	ands	r3, r2
 8005b86:	61cb      	str	r3, [r1, #28]
 8005b88:	e059      	b.n	8005c3e <USB_DeactivateEndpoint+0x172>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	4619      	mov	r1, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bae:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bc4:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bda:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <USB_DeactivateEndpoint+0x17c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <USB_DeactivateEndpoint+0x122>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e028      	b.n	8005c40 <USB_DeactivateEndpoint+0x174>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1ea      	bne.n	8005bdc <USB_DeactivateEndpoint+0x110>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c1a:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	4619      	mov	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	2301      	movs	r3, #1
 8005c34:	4083      	lsls	r3, r0
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	00030d40 	.word	0x00030d40

08005c4c <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	f040 8146 	bne.w	8005ef4 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d13b      	bne.n	8005ce8 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	4619      	mov	r1, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c98:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	4619      	mov	r1, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	0cdb      	lsrs	r3, r3, #19
 8005ce2:	04db      	lsls	r3, r3, #19
 8005ce4:	610b      	str	r3, [r1, #16]
 8005ce6:	e086      	b.n	8005df6 <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	0cdb      	lsrs	r3, r3, #19
 8005d0a:	04db      	lsls	r3, r3, #19
 8005d0c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d36:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	4618      	mov	r0, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6959      	ldr	r1, [r3, #20]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	440b      	add	r3, r1
 8005d62:	1e59      	subs	r1, r3, #1
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6c:	04d9      	lsls	r1, r3, #19
 8005d6e:	4b8c      	ldr	r3, [pc, #560]	; (8005fa0 <USB_EPStartXfer+0x354>)
 8005d70:	400b      	ands	r3, r1
 8005d72:	4313      	orrs	r3, r2
 8005d74:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	4619      	mov	r1, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d125      	bne.n	8005df6 <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	4619      	mov	r1, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005dce:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dde:	4619      	mov	r1, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005df4:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d10b      	bne.n	8005e14 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	6153      	str	r3, [r2, #20]
 8005e12:	e016      	b.n	8005e42 <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	78db      	ldrb	r3, [r3, #3]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d012      	beq.n	8005e42 <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00e      	beq.n	8005e42 <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4083      	lsls	r3, r0
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	78db      	ldrb	r3, [r3, #3]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d12e      	bne.n	8005ea8 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d113      	bne.n	8005e82 <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	4619      	mov	r1, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e7e:	600b      	str	r3, [r1, #0]
 8005e80:	e012      	b.n	8005ea8 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	4619      	mov	r1, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ecc:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	78db      	ldrb	r3, [r3, #3]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	f040 80f5 	bne.w	80060c2 <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	68d9      	ldr	r1, [r3, #12]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	781a      	ldrb	r2, [r3, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	b298      	uxth	r0, r3
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4603      	mov	r3, r0
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fa4f 	bl	8006390 <USB_WritePacket>
 8005ef2:	e0e6      	b.n	80060c2 <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f02:	4619      	mov	r1, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	0cdb      	lsrs	r3, r3, #19
 8005f16:	04db      	lsls	r3, r3, #19
 8005f18:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f28:	4619      	mov	r1, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f42:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d12b      	bne.n	8005fa4 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	4313      	orrs	r3, r2
 8005f76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f86:	4619      	mov	r1, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9c:	610b      	str	r3, [r1, #16]
 8005f9e:	e03c      	b.n	800601a <USB_EPStartXfer+0x3ce>
 8005fa0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	4413      	add	r3, r2
 8005fae:	1e5a      	subs	r2, r3, #1
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	4619      	mov	r1, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	8afb      	ldrh	r3, [r7, #22]
 8005fdc:	04db      	lsls	r3, r3, #19
 8005fde:	4618      	mov	r0, r3
 8005fe0:	4b3a      	ldr	r3, [pc, #232]	; (80060cc <USB_EPStartXfer+0x480>)
 8005fe2:	4003      	ands	r3, r0
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	8af9      	ldrh	r1, [r7, #22]
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006016:	4313      	orrs	r3, r2
 8006018:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d10a      	bne.n	8006036 <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	461a      	mov	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	78db      	ldrb	r3, [r3, #3]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d12e      	bne.n	800609c <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d113      	bne.n	8006076 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	4619      	mov	r1, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006072:	600b      	str	r3, [r1, #0]
 8006074:	e012      	b.n	800609c <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	4619      	mov	r1, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609a:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060aa:	4619      	mov	r1, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c0:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	1ff80000 	.word	0x1ff80000

080060d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	4613      	mov	r3, r2
 80060dc:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	f040 80d2 	bne.w	800628c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d13b      	bne.n	8006168 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	4619      	mov	r1, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006114:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006118:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	4619      	mov	r1, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800613e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	4619      	mov	r1, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	0cdb      	lsrs	r3, r3, #19
 8006162:	04db      	lsls	r3, r3, #19
 8006164:	610b      	str	r3, [r1, #16]
 8006166:	e05a      	b.n	800621e <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	4619      	mov	r1, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	0cdb      	lsrs	r3, r3, #19
 800618a:	04db      	lsls	r3, r3, #19
 800618c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	4619      	mov	r1, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061b6:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d903      	bls.n	80061cc <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	4619      	mov	r1, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006200:	4619      	mov	r1, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621a:	4313      	orrs	r3, r2
 800621c:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	4619      	mov	r1, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006242:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d10b      	bne.n	8006262 <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	461a      	mov	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	6153      	str	r3, [r2, #20]
 8006260:	e08e      	b.n	8006380 <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 808a 	beq.w	8006380 <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	4619      	mov	r1, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	2301      	movs	r3, #1
 8006284:	4083      	lsls	r3, r0
 8006286:	4313      	orrs	r3, r2
 8006288:	634b      	str	r3, [r1, #52]	; 0x34
 800628a:	e079      	b.n	8006380 <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629a:	4619      	mov	r1, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	0cdb      	lsrs	r3, r3, #19
 80062ae:	04db      	lsls	r3, r3, #19
 80062b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c0:	4619      	mov	r1, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062da:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	4619      	mov	r1, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006310:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	4619      	mov	r1, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633a:	4313      	orrs	r3, r2
 800633c:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d10a      	bne.n	800635a <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	461a      	mov	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	4619      	mov	r1, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800637e:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop

08006390 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4611      	mov	r1, r2
 800639c:	461a      	mov	r2, r3
 800639e:	460b      	mov	r3, r1
 80063a0:	71fb      	strb	r3, [r7, #7]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 80063ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d11a      	bne.n	80063ec <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 80063b6:	88bb      	ldrh	r3, [r7, #4]
 80063b8:	3303      	adds	r3, #3
 80063ba:	089b      	lsrs	r3, r3, #2
 80063bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e00f      	b.n	80063e4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	031a      	lsls	r2, r3, #12
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d0:	461a      	mov	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6013      	str	r3, [r2, #0]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	3301      	adds	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	3304      	adds	r3, #4
 80063e2:	60bb      	str	r3, [r7, #8]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d3eb      	bcc.n	80063c4 <USB_WritePacket+0x34>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop

080063fc <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	4613      	mov	r3, r2
 8006408:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	3303      	adds	r3, #3
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	e00b      	b.n	8006434 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	601a      	str	r2, [r3, #0]
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3301      	adds	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	3304      	adds	r3, #4
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	429a      	cmp	r2, r3
 800643a:	d3ef      	bcc.n	800641c <USB_ReadPacket+0x20>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
    
  }
  return ((void *)dest);
 800643c:	68bb      	ldr	r3, [r7, #8]
}
 800643e:	4618      	mov	r0, r3
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d130      	bne.n	80064c0 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	db12      	blt.n	8006498 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	4619      	mov	r1, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006496:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	4619      	mov	r1, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064bc:	600b      	str	r3, [r1, #0]
 80064be:	e02f      	b.n	8006520 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db12      	blt.n	80064fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	4619      	mov	r1, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064f8:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	4619      	mov	r1, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800651e:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop

08006530 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d12e      	bne.n	80065a0 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	4619      	mov	r1, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006566:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	78db      	ldrb	r3, [r3, #3]
 800656c:	2b03      	cmp	r3, #3
 800656e:	d003      	beq.n	8006578 <USB_EPClearStall+0x48>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	78db      	ldrb	r3, [r3, #3]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d141      	bne.n	80065fc <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	4619      	mov	r1, r3
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659c:	600b      	str	r3, [r1, #0]
 800659e:	e02d      	b.n	80065fc <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	4619      	mov	r1, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065c4:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	78db      	ldrb	r3, [r3, #3]
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d003      	beq.n	80065d6 <USB_EPClearStall+0xa6>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	78db      	ldrb	r3, [r3, #3]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d112      	bne.n	80065fc <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	4619      	mov	r1, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fa:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop

0800660c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	461a      	mov	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800662c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006634:	4619      	mov	r1, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006646:	4313      	orrs	r3, r2
 8006648:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f023 0302 	bic.w	r3, r3, #2
 8006674:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006676:	2003      	movs	r0, #3
 8006678:	f7fa fc76 	bl	8000f68 <HAL_Delay>
  
  return HAL_OK;  
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop

08006688 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80066a6:	2003      	movs	r0, #3
 80066a8:	f7fa fc5e 	bl	8000f68 <HAL_Delay>
  
  return HAL_OK;  
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop

080066b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4013      	ands	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  return v;  
 80066d4:	68fb      	ldr	r3, [r7, #12]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4013      	ands	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	0c1b      	lsrs	r3, r3, #16
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4013      	ands	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	b29b      	uxth	r3, r3
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4013      	ands	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  return v;
 800676e:	68fb      	ldr	r3, [r7, #12]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679a:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	fa22 f303 	lsr.w	r3, r2, r3
 80067a4:	01db      	lsls	r3, r3, #7
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4013      	ands	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  return v;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f003 0301 	and.w	r3, r3, #1
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006808:	f023 0307 	bic.w	r3, r3, #7
 800680c:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0306 	and.w	r3, r3, #6
 800681a:	2b04      	cmp	r3, #4
 800681c:	d10a      	bne.n	8006834 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006824:	461a      	mov	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f043 0303 	orr.w	r3, r3, #3
 8006832:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006848:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	460b      	mov	r3, r1
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	461a      	mov	r2, r3
 800686e:	2300      	movs	r3, #0
 8006870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006878:	461a      	mov	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006886:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688e:	461a      	mov	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f043 0318 	orr.w	r3, r3, #24
 800689c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a4:	461a      	mov	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068b2:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d10c      	bne.n	80068d4 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	461a      	mov	r2, r3
 80068ce:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80068d2:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop

080068e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a13      	ldr	r2, [pc, #76]	; (8006948 <USB_CoreReset+0x64>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d901      	bls.n	8006902 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e01b      	b.n	800693a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	daf2      	bge.n	80068f0 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f043 0201 	orr.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a09      	ldr	r2, [pc, #36]	; (8006948 <USB_CoreReset+0x64>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d901      	bls.n	800692c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e006      	b.n	800693a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f0      	bne.n	800691a <USB_CoreReset+0x36>
  
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	00030d40 	.word	0x00030d40

0800694c <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7c1b      	ldrb	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10e      	bne.n	8006982 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8006964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006968:	2202      	movs	r2, #2
 800696a:	2181      	movs	r1, #129	; 0x81
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f002 fa55 	bl	8008e1c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8006972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006976:	2202      	movs	r2, #2
 8006978:	2101      	movs	r1, #1
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f002 fa4e 	bl	8008e1c <USBD_LL_OpenEP>
 8006980:	e00b      	b.n	800699a <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	2202      	movs	r2, #2
 8006986:	2181      	movs	r1, #129	; 0x81
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f002 fa47 	bl	8008e1c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800698e:	2340      	movs	r3, #64	; 0x40
 8006990:	2202      	movs	r2, #2
 8006992:	2101      	movs	r1, #1
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f002 fa41 	bl	8008e1c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800699a:	2308      	movs	r3, #8
 800699c:	2203      	movs	r2, #3
 800699e:	2182      	movs	r1, #130	; 0x82
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f002 fa3b 	bl	8008e1c <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80069a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069aa:	f002 fd01 	bl	80093b0 <malloc>
 80069ae:	4603      	mov	r3, r0
 80069b0:	461a      	mov	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 80069c2:	2301      	movs	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
 80069c6:	e026      	b.n	8006a16 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069ce:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7c1b      	ldrb	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069fc:	2101      	movs	r1, #1
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 fb88 	bl	8009114 <USBD_LL_PrepareReceive>
 8006a04:	e007      	b.n	8006a16 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a0c:	2340      	movs	r3, #64	; 0x40
 8006a0e:	2101      	movs	r1, #1
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f002 fb7f 	bl	8009114 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8006a30:	2181      	movs	r1, #129	; 0x81
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f002 fa30 	bl	8008e98 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8006a38:	2101      	movs	r1, #1
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f002 fa2c 	bl	8008e98 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8006a40:	2182      	movs	r1, #130	; 0x82
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f002 fa28 	bl	8008e98 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a62:	4618      	mov	r0, r3
 8006a64:	f002 fcac 	bl	80093c0 <free>
    pdev->pClassData = NULL;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop

08006a7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a8c:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d03a      	beq.n	8006b10 <USBD_CDC_Setup+0x94>
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d000      	beq.n	8006aa0 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8006a9e:	e043      	b.n	8006b28 <USBD_CDC_Setup+0xac>
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	88db      	ldrh	r3, [r3, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d029      	beq.n	8006afc <USBD_CDC_Setup+0x80>
    {
      if (req->bmRequest & 0x80)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b25b      	sxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da11      	bge.n	8006ad6 <USBD_CDC_Setup+0x5a>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006abe:	68f9      	ldr	r1, [r7, #12]
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	88d2      	ldrh	r2, [r2, #6]
 8006ac4:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8006ac6:	68f9      	ldr	r1, [r7, #12]
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	88db      	ldrh	r3, [r3, #6]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 f83e 	bl	8007b50 <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8006ad4:	e029      	b.n	8006b2a <USBD_CDC_Setup+0xae>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	785a      	ldrb	r2, [r3, #1]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	88db      	ldrh	r3, [r3, #6]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hcdc->data,
 8006aec:	68f9      	ldr	r1, [r7, #12]
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
        
        USBD_CtlPrepareRx (pdev, 
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	88db      	ldrh	r3, [r3, #6]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 f859 	bl	8007bac <USBD_CtlPrepareRx>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8006afa:	e016      	b.n	8006b2a <USBD_CDC_Setup+0xae>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	7850      	ldrb	r0, [r2, #1]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	4798      	blx	r3
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8006b0e:	e00c      	b.n	8006b2a <USBD_CDC_Setup+0xae>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b0a      	cmp	r3, #10
 8006b16:	d001      	beq.n	8006b1c <USBD_CDC_Setup+0xa0>
 8006b18:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 8006b1a:	e005      	b.n	8006b28 <USBD_CDC_Setup+0xac>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	4905      	ldr	r1, [pc, #20]	; (8006b34 <USBD_CDC_Setup+0xb8>)
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 f815 	bl	8007b50 <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 8006b26:	bf00      	nop
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8006b28:	bf00      	nop
  }
  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	200006cc 	.word	0x200006cc

08006b38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b4a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e000      	b.n	8006b64 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8006b62:	2302      	movs	r3, #2
  }
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b82:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f002 fafd 	bl	8009188 <USBD_LL_GetRxDataSize>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4798      	blx	r3

    return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006bd6:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <USBD_CDC_EP0_RxReady+0x46>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006be8:	2bff      	cmp	r3, #255	; 0xff
 8006bea:	d010      	beq.n	8006c0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006bfa:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c02:	b292      	uxth	r2, r2
 8006c04:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	22ff      	movs	r2, #255	; 0xff
 8006c0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2243      	movs	r2, #67	; 0x43
 8006c24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c26:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	20000088 	.word	0x20000088

08006c38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2243      	movs	r2, #67	; 0x43
 8006c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c46:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	20000044 	.word	0x20000044

08006c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2243      	movs	r2, #67	; 0x43
 8006c64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c66:	4b03      	ldr	r3, [pc, #12]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	200000cc 	.word	0x200000cc

08006c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220a      	movs	r2, #10
 8006c84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c86:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	20000000 	.word	0x20000000

08006c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop

08006cc8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006cdc:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d0c:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d32:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d017      	beq.n	8006d6e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7c1b      	ldrb	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d50:	2101      	movs	r1, #1
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f002 f9de 	bl	8009114 <USBD_LL_PrepareReceive>
 8006d58:	e007      	b.n	8006d6a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	2101      	movs	r1, #1
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f002 f9d5 	bl	8009114 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e000      	b.n	8006d70 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d6e:	2302      	movs	r3, #2
  }
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e01a      	b.n	8006dc6 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	79fa      	ldrb	r2, [r7, #7]
 8006dbc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f001 ffaa 	bl	8008d18 <USBD_LL_Init>
  
  return USBD_OK; 
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop

08006dd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
 8006df0:	e001      	b.n	8006df6 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8006df2:	2302      	movs	r3, #2
 8006df4:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 ffd3 	bl	8008db8 <USBD_LL_Start>
  
  return USBD_OK;  
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop

08006e34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006e40:	2302      	movs	r3, #2
 8006e42:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	78fa      	ldrb	r2, [r7, #3]
 8006e58:	4611      	mov	r1, r2
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop

08006e74 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	78fa      	ldrb	r2, [r7, #3]
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
  return USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop

08006e9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fda2 	bl	80079f8 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006ed0:	f003 031f 	and.w	r3, r3, #31
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d00b      	beq.n	8006ef0 <USBD_LL_SetupStage+0x54>
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d011      	beq.n	8006f00 <USBD_LL_SetupStage+0x64>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d117      	bne.n	8006f10 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9cf 	bl	800728c <USBD_StdDevReq>
    break;
 8006eee:	e01a      	b.n	8006f26 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fa17 	bl	800732c <USBD_StdItfReq>
    break;
 8006efe:	e012      	b.n	8006f26 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fa43 	bl	8007394 <USBD_StdEPReq>
    break;
 8006f0e:	e00a      	b.n	8006f26 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006f16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 fff0 	bl	8008f04 <USBD_LL_StallEP>
    break;
 8006f24:	bf00      	nop
  }  
  return USBD_OK;  
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8006f3e:	7afb      	ldrb	r3, [r7, #11]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d138      	bne.n	8006fb6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006f4a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d142      	bne.n	8006fdc <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d914      	bls.n	8006f8c <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	bf28      	it	cs
 8006f7c:	4613      	movcs	r3, r2
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fe2f 	bl	8007be8 <USBD_CtlContinueRx>
 8006f8a:	e027      	b.n	8006fdc <USBD_LL_DataOutStage+0xac>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d105      	bne.n	8006fae <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fe2c 	bl	8007c0c <USBD_CtlSendStatus>
 8006fb4:	e012      	b.n	8006fdc <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00c      	beq.n	8006fdc <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d107      	bne.n	8006fdc <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	7afa      	ldrb	r2, [r7, #11]
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	4798      	blx	r3
  }  
  return USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop

08006fe8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d16c      	bne.n	80070d6 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3314      	adds	r3, #20
 8007000:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8007008:	2b02      	cmp	r3, #2
 800700a:	d157      	bne.n	80070bc <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	d915      	bls.n	8007044 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	1ad2      	subs	r2, r2, r3
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	689b      	ldr	r3, [r3, #8]
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
        
        USBD_CtlContinueSendData (pdev, 
 800702a:	b29b      	uxth	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fda9 	bl	8007b88 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8007036:	2300      	movs	r3, #0
 8007038:	2200      	movs	r2, #0
 800703a:	2100      	movs	r1, #0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f002 f869 	bl	8009114 <USBD_LL_PrepareReceive>
 8007042:	e03b      	b.n	80070bc <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	68d2      	ldr	r2, [r2, #12]
 800704c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007050:	fb02 f201 	mul.w	r2, r2, r1
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d11c      	bne.n	8007094 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	68db      	ldr	r3, [r3, #12]
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8007062:	429a      	cmp	r2, r3
 8007064:	d316      	bcc.n	8007094 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 8007070:	429a      	cmp	r2, r3
 8007072:	d20f      	bcs.n	8007094 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8007074:	2200      	movs	r2, #0
 8007076:	2100      	movs	r1, #0
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fd85 	bl	8007b88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8007086:	2300      	movs	r3, #0
 8007088:	2200      	movs	r2, #0
 800708a:	2100      	movs	r1, #0
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f002 f841 	bl	8009114 <USBD_LL_PrepareReceive>
 8007092:	e013      	b.n	80070bc <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d105      	bne.n	80070b6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fdbc 	bl	8007c34 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d11a      	bne.n	80070fc <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fea8 	bl	8006e1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80070d4:	e012      	b.n	80070fc <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00c      	beq.n	80070fc <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d107      	bne.n	80070fc <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	7afa      	ldrb	r2, [r7, #11]
 80070f6:	4611      	mov	r1, r2
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	4798      	blx	r3
  }  
  return USBD_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop

08007108 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	2200      	movs	r2, #0
 8007114:	2100      	movs	r1, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fe80 	bl	8008e1c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2240      	movs	r2, #64	; 0x40
 8007120:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8007124:	2340      	movs	r3, #64	; 0x40
 8007126:	2200      	movs	r2, #0
 8007128:	2180      	movs	r1, #128	; 0x80
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fe76 	bl	8008e1c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2240      	movs	r2, #64	; 0x40
 8007134:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6852      	ldr	r2, [r2, #4]
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	4611      	mov	r1, r2
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
 
  
  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop

08007168 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2204      	movs	r2, #4
 80071a0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop

080071b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop

080071d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d10b      	bne.n	8007202 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop

08007228 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop

08007244 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop

0800725c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6852      	ldr	r2, [r2, #4]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	4611      	mov	r1, r2
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	4798      	blx	r3
   
  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop

0800728c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b09      	cmp	r3, #9
 80072a0:	d839      	bhi.n	8007316 <USBD_StdDevReq+0x8a>
 80072a2:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <USBD_StdDevReq+0x1c>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072f9 	.word	0x080072f9
 80072ac:	0800730d 	.word	0x0800730d
 80072b0:	08007317 	.word	0x08007317
 80072b4:	08007303 	.word	0x08007303
 80072b8:	08007317 	.word	0x08007317
 80072bc:	080072db 	.word	0x080072db
 80072c0:	080072d1 	.word	0x080072d1
 80072c4:	08007317 	.word	0x08007317
 80072c8:	080072ef 	.word	0x080072ef
 80072cc:	080072e5 	.word	0x080072e5
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f936 	bl	8007544 <USBD_GetDescriptor>
    break;
 80072d8:	e022      	b.n	8007320 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa25 	bl	800772c <USBD_SetAddress>
    break;
 80072e2:	e01d      	b.n	8007320 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa5e 	bl	80077a8 <USBD_SetConfig>
    break;
 80072ec:	e018      	b.n	8007320 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fae1 	bl	80078b8 <USBD_GetConfig>
    break;
 80072f6:	e013      	b.n	8007320 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fb0e 	bl	800791c <USBD_GetStatus>
    break;
 8007300:	e00e      	b.n	8007320 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fb33 	bl	8007970 <USBD_SetFeature>
    break;
 800730a:	e009      	b.n	8007320 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fb4a 	bl	80079a8 <USBD_ClrFeature>
    break;
 8007314:	e004      	b.n	8007320 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fbab 	bl	8007a74 <USBD_CtlError>
    break;
 800731e:	bf00      	nop
  }
  
  return ret;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop

0800732c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007340:	2b03      	cmp	r3, #3
 8007342:	d11b      	bne.n	800737c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	889b      	ldrh	r3, [r3, #4]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b01      	cmp	r3, #1
 800734c:	d811      	bhi.n	8007372 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	88db      	ldrh	r3, [r3, #6]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d110      	bne.n	8007386 <USBD_StdItfReq+0x5a>
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10d      	bne.n	8007386 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fc4e 	bl	8007c0c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8007370:	e009      	b.n	8007386 <USBD_StdItfReq+0x5a>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fb7d 	bl	8007a74 <USBD_CtlError>
    }
    break;
 800737a:	e004      	b.n	8007386 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fb78 	bl	8007a74 <USBD_CtlError>
    break;
 8007384:	e000      	b.n	8007388 <USBD_StdItfReq+0x5c>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8007386:	bf00      	nop
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop

08007394 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	889b      	ldrh	r3, [r3, #4]
 80073a6:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d108      	bne.n	80073c6 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	4798      	blx	r3
    
    return USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e0ba      	b.n	800753c <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d039      	beq.n	8007442 <USBD_StdEPReq+0xae>
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d002      	beq.n	80073d8 <USBD_StdEPReq+0x44>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d06b      	beq.n	80074ae <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80073d6:	e0b0      	b.n	800753a <USBD_StdEPReq+0x1a6>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d002      	beq.n	80073e8 <USBD_StdEPReq+0x54>
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d00c      	beq.n	8007400 <USBD_StdEPReq+0x6c>
 80073e6:	e025      	b.n	8007434 <USBD_StdEPReq+0xa0>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d027      	beq.n	800743e <USBD_StdEPReq+0xaa>
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b80      	cmp	r3, #128	; 0x80
 80073f2:	d024      	beq.n	800743e <USBD_StdEPReq+0xaa>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fd83 	bl	8008f04 <USBD_LL_StallEP>
      }
      break;	
 80073fe:	e01e      	b.n	800743e <USBD_StdEPReq+0xaa>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	885b      	ldrh	r3, [r3, #2]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <USBD_StdEPReq+0x8a>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <USBD_StdEPReq+0x8a>
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b80      	cmp	r3, #128	; 0x80
 8007412:	d004      	beq.n	800741e <USBD_StdEPReq+0x8a>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 fd73 	bl	8008f04 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fbed 	bl	8007c0c <USBD_CtlSendStatus>
      
      break;
 8007432:	e005      	b.n	8007440 <USBD_StdEPReq+0xac>
      
    default:                         
      USBD_CtlError(pdev , req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fb1c 	bl	8007a74 <USBD_CtlError>
      break;    
 800743c:	e000      	b.n	8007440 <USBD_StdEPReq+0xac>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 800743e:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 8007440:	e07b      	b.n	800753a <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007448:	2b02      	cmp	r3, #2
 800744a:	d002      	beq.n	8007452 <USBD_StdEPReq+0xbe>
 800744c:	2b03      	cmp	r3, #3
 800744e:	d00c      	beq.n	800746a <USBD_StdEPReq+0xd6>
 8007450:	e024      	b.n	800749c <USBD_StdEPReq+0x108>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d026      	beq.n	80074a6 <USBD_StdEPReq+0x112>
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b80      	cmp	r3, #128	; 0x80
 800745c:	d023      	beq.n	80074a6 <USBD_StdEPReq+0x112>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fd4e 	bl	8008f04 <USBD_LL_StallEP>
      }
      break;	
 8007468:	e01d      	b.n	80074a6 <USBD_StdEPReq+0x112>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d11b      	bne.n	80074aa <USBD_StdEPReq+0x116>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <USBD_StdEPReq+0x100>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 fd75 	bl	8008f70 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fbb9 	bl	8007c0c <USBD_CtlSendStatus>
      }
      break;
 800749a:	e006      	b.n	80074aa <USBD_StdEPReq+0x116>
      
    default:                         
      USBD_CtlError(pdev , req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fae8 	bl	8007a74 <USBD_CtlError>
      break;    
 80074a4:	e002      	b.n	80074ac <USBD_StdEPReq+0x118>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 80074a6:	bf00      	nop
 80074a8:	e047      	b.n	800753a <USBD_StdEPReq+0x1a6>
          USBD_LL_ClearStallEP(pdev , ep_addr);
          pdev->pClass->Setup (pdev, req);
        }
        USBD_CtlSendStatus(pdev);
      }
      break;
 80074aa:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 80074ac:	e045      	b.n	800753a <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d002      	beq.n	80074be <USBD_StdEPReq+0x12a>
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d00b      	beq.n	80074d4 <USBD_StdEPReq+0x140>
 80074bc:	e036      	b.n	800752c <USBD_StdEPReq+0x198>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d036      	beq.n	8007536 <USBD_StdEPReq+0x1a2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fd19 	bl	8008f04 <USBD_LL_StallEP>
      }
      break;	
 80074d2:	e030      	b.n	8007536 <USBD_StdEPReq+0x1a2>
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80074d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da08      	bge.n	80074ee <USBD_StdEPReq+0x15a>
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e2:	3301      	adds	r3, #1
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4413      	add	r3, r2
 80074ea:	3304      	adds	r3, #4
 80074ec:	e007      	b.n	80074fe <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80074f4:	3310      	adds	r3, #16
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4413      	add	r3, r2
 80074fc:	3304      	adds	r3, #4
 80074fe:	60bb      	str	r3, [r7, #8]
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 fd69 	bl	8008fdc <USBD_LL_IsStallEP>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <USBD_StdEPReq+0x184>
      {
        pep->status = 0x0001;     
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e002      	b.n	800751e <USBD_StdEPReq+0x18a>
      }
      else
      {
        pep->status = 0x0000;  
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
      }
      
      USBD_CtlSendData (pdev,
                        (uint8_t *)&pep->status,
 800751e:	68bb      	ldr	r3, [r7, #8]
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
 8007520:	2202      	movs	r2, #2
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fb13 	bl	8007b50 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 800752a:	e005      	b.n	8007538 <USBD_StdEPReq+0x1a4>
      
    default:                         
      USBD_CtlError(pdev , req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 faa0 	bl	8007a74 <USBD_CtlError>
      break;
 8007534:	e000      	b.n	8007538 <USBD_StdEPReq+0x1a4>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 8007536:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;
    }
    break;
 8007538:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	885b      	ldrh	r3, [r3, #2]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	2b06      	cmp	r3, #6
 800755a:	f200 80c9 	bhi.w	80076f0 <USBD_GetDescriptor+0x1ac>
 800755e:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <USBD_GetDescriptor+0x20>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007581 	.word	0x08007581
 8007568:	08007599 	.word	0x08007599
 800756c:	080075d9 	.word	0x080075d9
 8007570:	080076f1 	.word	0x080076f1
 8007574:	080076f1 	.word	0x080076f1
 8007578:	0800769d 	.word	0x0800769d
 800757c:	080076c3 	.word	0x080076c3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7c12      	ldrb	r2, [r2, #16]
 800758c:	f107 010a 	add.w	r1, r7, #10
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
 8007594:	60f8      	str	r0, [r7, #12]
    break;
 8007596:	e0b0      	b.n	80076fa <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	7c1b      	ldrb	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10d      	bne.n	80075bc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	f107 020a 	add.w	r2, r7, #10
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	2202      	movs	r2, #2
 80075b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80075ba:	e09e      	b.n	80076fa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	f107 020a 	add.w	r2, r7, #10
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
 80075cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	2202      	movs	r2, #2
 80075d4:	701a      	strb	r2, [r3, #0]
    }
    break;
 80075d6:	e090      	b.n	80076fa <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	885b      	ldrh	r3, [r3, #2]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d856      	bhi.n	8007690 <USBD_GetDescriptor+0x14c>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <USBD_GetDescriptor+0xa4>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	08007601 	.word	0x08007601
 80075ec:	08007619 	.word	0x08007619
 80075f0:	08007631 	.word	0x08007631
 80075f4:	08007649 	.word	0x08007649
 80075f8:	08007661 	.word	0x08007661
 80075fc:	08007679 	.word	0x08007679
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7c12      	ldrb	r2, [r2, #16]
 800760c:	f107 010a 	add.w	r1, r7, #10
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	60f8      	str	r0, [r7, #12]
      break;
 8007616:	e040      	b.n	800769a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	7c12      	ldrb	r2, [r2, #16]
 8007624:	f107 010a 	add.w	r1, r7, #10
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	60f8      	str	r0, [r7, #12]
      break;
 800762e:	e034      	b.n	800769a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7c12      	ldrb	r2, [r2, #16]
 800763c:	f107 010a 	add.w	r1, r7, #10
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
      break;
 8007646:	e028      	b.n	800769a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 010a 	add.w	r1, r7, #10
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
      break;
 800765e:	e01c      	b.n	800769a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	7c12      	ldrb	r2, [r2, #16]
 800766c:	f107 010a 	add.w	r1, r7, #10
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
      break;
 8007676:	e010      	b.n	800769a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7c12      	ldrb	r2, [r2, #16]
 8007684:	f107 010a 	add.w	r1, r7, #10
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
      break;
 800768e:	e004      	b.n	800769a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f9ee 	bl	8007a74 <USBD_CtlError>
      return;
 8007698:	e044      	b.n	8007724 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800769a:	e02e      	b.n	80076fa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	7c1b      	ldrb	r3, [r3, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d109      	bne.n	80076b8 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ac:	f107 020a 	add.w	r2, r7, #10
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
      break;
 80076b6:	e020      	b.n	80076fa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f9da 	bl	8007a74 <USBD_CtlError>
      return;
 80076c0:	e030      	b.n	8007724 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	7c1b      	ldrb	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10d      	bne.n	80076e6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f107 020a 	add.w	r2, r7, #10
 80076d6:	4610      	mov	r0, r2
 80076d8:	4798      	blx	r3
 80076da:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	2207      	movs	r2, #7
 80076e2:	701a      	strb	r2, [r3, #0]
      break; 
 80076e4:	e009      	b.n	80076fa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f9c3 	bl	8007a74 <USBD_CtlError>
      return;
 80076ee:	e019      	b.n	8007724 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f9be 	bl	8007a74 <USBD_CtlError>
    return;
 80076f8:	e014      	b.n	8007724 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80076fa:	897b      	ldrh	r3, [r7, #10]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d011      	beq.n	8007724 <USBD_GetDescriptor+0x1e0>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	88db      	ldrh	r3, [r3, #6]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00d      	beq.n	8007724 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	88da      	ldrh	r2, [r3, #6]
 800770c:	897b      	ldrh	r3, [r7, #10]
 800770e:	4293      	cmp	r3, r2
 8007710:	bf28      	it	cs
 8007712:	4613      	movcs	r3, r2
 8007714:	b29b      	uxth	r3, r3
 8007716:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8007718:	897b      	ldrh	r3, [r7, #10]
 800771a:	461a      	mov	r2, r3
 800771c:	68f9      	ldr	r1, [r7, #12]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa16 	bl	8007b50 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop

0800772c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	889b      	ldrh	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d12c      	bne.n	8007798 <USBD_SetAddress+0x6c>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	88db      	ldrh	r3, [r3, #6]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d128      	bne.n	8007798 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	885b      	ldrh	r3, [r3, #2]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007750:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007758:	2b03      	cmp	r3, #3
 800775a:	d104      	bne.n	8007766 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f988 	bl	8007a74 <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007764:	e01c      	b.n	80077a0 <USBD_SetAddress+0x74>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7bfa      	ldrb	r2, [r7, #15]
 800776a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fc5e 	bl	8009034 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa47 	bl	8007c0c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800778c:	e008      	b.n	80077a0 <USBD_SetAddress+0x74>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007796:	e003      	b.n	80077a0 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f96a 	bl	8007a74 <USBD_CtlError>
  } 
}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	885b      	ldrh	r3, [r3, #2]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	4b3e      	ldr	r3, [pc, #248]	; (80078b4 <USBD_SetConfig+0x10c>)
 80077ba:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80077bc:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <USBD_SetConfig+0x10c>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d904      	bls.n	80077ce <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f954 	bl	8007a74 <USBD_CtlError>
 80077cc:	e06f      	b.n	80078ae <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d002      	beq.n	80077de <USBD_SetConfig+0x36>
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d023      	beq.n	8007824 <USBD_SetConfig+0x7c>
 80077dc:	e062      	b.n	80078a4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80077de:	4b35      	ldr	r3, [pc, #212]	; (80078b4 <USBD_SetConfig+0x10c>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01a      	beq.n	800781c <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80077e6:	4b33      	ldr	r3, [pc, #204]	; (80078b4 <USBD_SetConfig+0x10c>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2203      	movs	r2, #3
 80077f4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80077f8:	4b2e      	ldr	r3, [pc, #184]	; (80078b4 <USBD_SetConfig+0x10c>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fb18 	bl	8006e34 <USBD_SetClassConfig>
 8007804:	4603      	mov	r3, r0
 8007806:	2b02      	cmp	r3, #2
 8007808:	d104      	bne.n	8007814 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f931 	bl	8007a74 <USBD_CtlError>
          return;
 8007812:	e04c      	b.n	80078ae <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f9f9 	bl	8007c0c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800781a:	e048      	b.n	80078ae <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9f5 	bl	8007c0c <USBD_CtlSendStatus>
      }
      break;
 8007822:	e044      	b.n	80078ae <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8007824:	4b23      	ldr	r3, [pc, #140]	; (80078b4 <USBD_SetConfig+0x10c>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d112      	bne.n	8007852 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8007834:	4b1f      	ldr	r3, [pc, #124]	; (80078b4 <USBD_SetConfig+0x10c>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800783e:	4b1d      	ldr	r3, [pc, #116]	; (80078b4 <USBD_SetConfig+0x10c>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff fb15 	bl	8006e74 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9de 	bl	8007c0c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007850:	e02d      	b.n	80078ae <USBD_SetConfig+0x106>
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8007852:	4b18      	ldr	r3, [pc, #96]	; (80078b4 <USBD_SetConfig+0x10c>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d01d      	beq.n	800789c <USBD_SetConfig+0xf4>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fb03 	bl	8006e74 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 800786e:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <USBD_SetConfig+0x10c>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007878:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <USBD_SetConfig+0x10c>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fad8 	bl	8006e34 <USBD_SetClassConfig>
 8007884:	4603      	mov	r3, r0
 8007886:	2b02      	cmp	r3, #2
 8007888:	d104      	bne.n	8007894 <USBD_SetConfig+0xec>
        {
          USBD_CtlError(pdev , req);  
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f8f1 	bl	8007a74 <USBD_CtlError>
          return;
 8007892:	e00c      	b.n	80078ae <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f9b9 	bl	8007c0c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800789a:	e008      	b.n	80078ae <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f9b5 	bl	8007c0c <USBD_CtlSendStatus>
      }
      break;
 80078a2:	e004      	b.n	80078ae <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f8e4 	bl	8007a74 <USBD_CtlError>
      break;
 80078ac:	bf00      	nop
    }
  }
}
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200006cd 	.word	0x200006cd

080078b8 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	88db      	ldrh	r3, [r3, #6]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d004      	beq.n	80078d4 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f8d1 	bl	8007a74 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80078d2:	e01f      	b.n	8007914 <USBD_GetConfig+0x5c>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d002      	beq.n	80078e4 <USBD_GetConfig+0x2c>
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d00b      	beq.n	80078fa <USBD_GetConfig+0x42>
 80078e2:	e012      	b.n	800790a <USBD_GetConfig+0x52>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_default_config,
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3308      	adds	r3, #8
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
      USBD_CtlSendData (pdev, 
 80078ee:	2201      	movs	r2, #1
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f92c 	bl	8007b50 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 80078f8:	e00c      	b.n	8007914 <USBD_GetConfig+0x5c>
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_config,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 80078fe:	2201      	movs	r2, #1
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f924 	bl	8007b50 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 8007908:	e004      	b.n	8007914 <USBD_GetConfig+0x5c>
      
    default:
       USBD_CtlError(pdev , req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f8b1 	bl	8007a74 <USBD_CtlError>
      break;
 8007912:	bf00      	nop
    }
  }
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800792c:	3b02      	subs	r3, #2
 800792e:	2b01      	cmp	r3, #1
 8007930:	d815      	bhi.n	800795e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f043 0202 	orr.w	r2, r3, #2
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	330c      	adds	r3, #12
    if (pdev->dev_remote_wakeup) 
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
    }
    
    USBD_CtlSendData (pdev, 
 8007952:	2202      	movs	r2, #2
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f8fa 	bl	8007b50 <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 800795c:	e004      	b.n	8007968 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f887 	bl	8007a74 <USBD_CtlError>
    break;
 8007966:	bf00      	nop
  }
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	885b      	ldrh	r3, [r3, #2]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d10d      	bne.n	800799e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f937 	bl	8007c0c <USBD_CtlSendStatus>
  }

}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop

080079a8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80079b8:	3b02      	subs	r3, #2
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d812      	bhi.n	80079e4 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	885b      	ldrh	r3, [r3, #2]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d113      	bne.n	80079ee <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f915 	bl	8007c0c <USBD_CtlSendStatus>
    }
    break;
 80079e2:	e004      	b.n	80079ee <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f844 	bl	8007a74 <USBD_CtlError>
    break;
 80079ec:	e000      	b.n	80079f0 <USBD_ClrFeature+0x48>
    {
      pdev->dev_remote_wakeup = 0; 
      pdev->pClass->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 80079ee:	bf00      	nop
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781a      	ldrb	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785a      	ldrb	r2, [r3, #1]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3302      	adds	r3, #2
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	3303      	adds	r3, #3
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	4413      	add	r3, r2
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	3304      	adds	r3, #4
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	3305      	adds	r3, #5
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	021b      	lsls	r3, r3, #8
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4413      	add	r3, r2
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	3306      	adds	r3, #6
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	3307      	adds	r3, #7
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	021b      	lsls	r3, r3, #8
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	4413      	add	r3, r2
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	80da      	strh	r2, [r3, #6]

}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8007a7e:	2180      	movs	r1, #128	; 0x80
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 fa3f 	bl	8008f04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8007a86:	2100      	movs	r1, #0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fa3b 	bl	8008f04 <USBD_LL_StallEP>
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop

08007a98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d033      	beq.n	8007b16 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f836 	bl	8007b20 <USBD_GetLen>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	75fa      	strb	r2, [r7, #23]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4413      	add	r3, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	8812      	ldrh	r2, [r2, #0]
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	75fa      	strb	r2, [r7, #23]
 8007adc:	461a      	mov	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8007ae6:	e012      	b.n	8007b0e <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	75fa      	strb	r2, [r7, #23]
 8007aee:	461a      	mov	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	441a      	add	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	1c59      	adds	r1, r3, #1
 8007af8:	60f9      	str	r1, [r7, #12]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	75fa      	strb	r2, [r7, #23]
 8007b04:	461a      	mov	r2, r3
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	4413      	add	r3, r2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e8      	bne.n	8007ae8 <USBD_GetString+0x50>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8007b16:	bf00      	nop
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop

08007b20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8007b2c:	e005      	b.n	8007b3a <USBD_GetLen+0x1a>
    {
        len++;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	3301      	adds	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3301      	adds	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f5      	bne.n	8007b2e <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8007b66:	88fa      	ldrh	r2, [r7, #6]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8007b72:	88fb      	ldrh	r3, [r7, #6]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	2100      	movs	r1, #0
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f001 fa91 	bl	80090a0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f001 fa7f 	bl	80090a0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8007bc2:	88fa      	ldrh	r2, [r7, #6]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8007bca:	88fa      	ldrh	r2, [r7, #6]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f001 fa9b 	bl	8009114 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f001 fa89 	bl	8009114 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2204      	movs	r2, #4
 8007c18:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 fa3c 	bl	80090a0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop

08007c34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2205      	movs	r2, #5
 8007c40:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8007c44:	2300      	movs	r3, #0
 8007c46:	2200      	movs	r2, #0
 8007c48:	2100      	movs	r1, #0
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fa62 	bl	8009114 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop

08007c5c <HAL_GPIO_EXTI_Callback>:
uint8_t g_MPU6050_MotionInterruptThreshold[1] = { ACC_MOTION_THRESHOLD_mg / ACC_MOTION_THRESHOLD_RESOLUTION_mg };

uint8_t g_MPU6050_MotionInterruptDuration[1] = { ACC_MOTION_DURATION_ms / ACC_MOTION_DURATION_RESOLUTION_ms };

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Accelerometer_Interrupt_Pin)
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	2b80      	cmp	r3, #128	; 0x80
 8007c6a:	d10b      	bne.n	8007c84 <HAL_GPIO_EXTI_Callback+0x28>
	{
		g_MotionFlag = !g_MotionFlag;//popraw
 8007c6c:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <HAL_GPIO_EXTI_Callback+0x30>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bf0c      	ite	eq
 8007c74:	2301      	moveq	r3, #1
 8007c76:	2300      	movne	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <HAL_GPIO_EXTI_Callback+0x30>)
 8007c7e:	701a      	strb	r2, [r3, #0]
		//GPS_StartGettingPosition();
		GSM_StartSendingPosition();
 8007c80:	f000 f97c 	bl	8007f7c <GSM_StartSendingPosition>
	}
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000712 	.word	0x20000712

08007c90 <AccelerometerManagePower>:

HAL_StatusTypeDef AccelerometerManagePower()
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef TransmissionStatus;
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8007c96:	2364      	movs	r3, #100	; 0x64
 8007c98:	9302      	str	r3, [sp, #8]
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <AccelerometerManagePower+0x54>)
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	226b      	movs	r2, #107	; 0x6b
 8007ca6:	2168      	movs	r1, #104	; 0x68
 8007ca8:	480f      	ldr	r0, [pc, #60]	; (8007ce8 <AccelerometerManagePower+0x58>)
 8007caa:	f7f9 fd65 	bl	8001778 <HAL_I2C_Mem_Write>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71fb      	strb	r3, [r7, #7]
			MPU6050_PWR_MGMT1, 1, g_MPU6050_PowerManagement1Settings, 1, ACC_I2C_TIMEOUT);
	if (TransmissionStatus != HAL_OK)
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <AccelerometerManagePower+0x2c>
		return TransmissionStatus;
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	e00e      	b.n	8007cda <AccelerometerManagePower+0x4a>
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8007cbc:	2364      	movs	r3, #100	; 0x64
 8007cbe:	9302      	str	r3, [sp, #8]
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <AccelerometerManagePower+0x5c>)
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	226c      	movs	r2, #108	; 0x6c
 8007ccc:	2168      	movs	r1, #104	; 0x68
 8007cce:	4806      	ldr	r0, [pc, #24]	; (8007ce8 <AccelerometerManagePower+0x58>)
 8007cd0:	f7f9 fd52 	bl	8001778 <HAL_I2C_Mem_Write>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	71fb      	strb	r3, [r7, #7]
			MPU6050_PWR_MGMT2, 1, g_MPU6050_PowerManagement2Settings, 1, ACC_I2C_TIMEOUT);
	return TransmissionStatus;
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000110 	.word	0x20000110
 8007ce8:	200007c8 	.word	0x200007c8
 8007cec:	20000114 	.word	0x20000114

08007cf0 <AccelerometerConfigure>:

HAL_StatusTypeDef AccelerometerConfigure()
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef TransmissionStatus;
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8007cf6:	2364      	movs	r3, #100	; 0x64
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <AccelerometerConfigure+0x2c>)
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	2301      	movs	r3, #1
 8007d04:	221c      	movs	r2, #28
 8007d06:	2168      	movs	r1, #104	; 0x68
 8007d08:	4805      	ldr	r0, [pc, #20]	; (8007d20 <AccelerometerConfigure+0x30>)
 8007d0a:	f7f9 fd35 	bl	8001778 <HAL_I2C_Mem_Write>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	71fb      	strb	r3, [r7, #7]
			MPU6050_ACC_CONFIG, 1, g_MPU6050_AccelerometerSettings, 1, ACC_I2C_TIMEOUT);
	return TransmissionStatus;
 8007d12:	79fb      	ldrb	r3, [r7, #7]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000118 	.word	0x20000118
 8007d20:	200007c8 	.word	0x200007c8

08007d24 <AccelerometerMotionIntConfigure>:

HAL_StatusTypeDef AccelerometerMotionIntConfigure()
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef TransmissionStatus;
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8007d2a:	2364      	movs	r3, #100	; 0x64
 8007d2c:	9302      	str	r3, [sp, #8]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <AccelerometerMotionIntConfigure+0xa0>)
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2301      	movs	r3, #1
 8007d38:	2237      	movs	r2, #55	; 0x37
 8007d3a:	2168      	movs	r1, #104	; 0x68
 8007d3c:	4822      	ldr	r0, [pc, #136]	; (8007dc8 <AccelerometerMotionIntConfigure+0xa4>)
 8007d3e:	f7f9 fd1b 	bl	8001778 <HAL_I2C_Mem_Write>
 8007d42:	4603      	mov	r3, r0
 8007d44:	71fb      	strb	r3, [r7, #7]
			MPU6050_INT_PIN_CFG,1,g_MPU6050_InterruptSettings,1, ACC_I2C_TIMEOUT);
	if (TransmissionStatus != HAL_OK)
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <AccelerometerMotionIntConfigure+0x2c>
		return TransmissionStatus;
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	e034      	b.n	8007dba <AccelerometerMotionIntConfigure+0x96>
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8007d50:	2364      	movs	r3, #100	; 0x64
 8007d52:	9302      	str	r3, [sp, #8]
 8007d54:	2301      	movs	r3, #1
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	4b1c      	ldr	r3, [pc, #112]	; (8007dcc <AccelerometerMotionIntConfigure+0xa8>)
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	2238      	movs	r2, #56	; 0x38
 8007d60:	2168      	movs	r1, #104	; 0x68
 8007d62:	4819      	ldr	r0, [pc, #100]	; (8007dc8 <AccelerometerMotionIntConfigure+0xa4>)
 8007d64:	f7f9 fd08 	bl	8001778 <HAL_I2C_Mem_Write>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	71fb      	strb	r3, [r7, #7]
				MPU6050_INT_ENABLE,1,g_MPU6050_InterruptEnableSettings,1, ACC_I2C_TIMEOUT);
	if (TransmissionStatus != HAL_OK)
 8007d6c:	79fb      	ldrb	r3, [r7, #7]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <AccelerometerMotionIntConfigure+0x52>
		return TransmissionStatus;
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	e021      	b.n	8007dba <AccelerometerMotionIntConfigure+0x96>
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8007d76:	2364      	movs	r3, #100	; 0x64
 8007d78:	9302      	str	r3, [sp, #8]
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	4b14      	ldr	r3, [pc, #80]	; (8007dd0 <AccelerometerMotionIntConfigure+0xac>)
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	2301      	movs	r3, #1
 8007d84:	221f      	movs	r2, #31
 8007d86:	2168      	movs	r1, #104	; 0x68
 8007d88:	480f      	ldr	r0, [pc, #60]	; (8007dc8 <AccelerometerMotionIntConfigure+0xa4>)
 8007d8a:	f7f9 fcf5 	bl	8001778 <HAL_I2C_Mem_Write>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	71fb      	strb	r3, [r7, #7]
				MPU6050_MOT_THR,1,g_MPU6050_MotionInterruptThreshold,1,ACC_I2C_TIMEOUT);
	if (TransmissionStatus != HAL_OK)
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <AccelerometerMotionIntConfigure+0x78>
		return TransmissionStatus;
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	e00e      	b.n	8007dba <AccelerometerMotionIntConfigure+0x96>
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8007d9c:	2364      	movs	r3, #100	; 0x64
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	2301      	movs	r3, #1
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <AccelerometerMotionIntConfigure+0xb0>)
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2301      	movs	r3, #1
 8007daa:	2220      	movs	r2, #32
 8007dac:	2168      	movs	r1, #104	; 0x68
 8007dae:	4806      	ldr	r0, [pc, #24]	; (8007dc8 <AccelerometerMotionIntConfigure+0xa4>)
 8007db0:	f7f9 fce2 	bl	8001778 <HAL_I2C_Mem_Write>
 8007db4:	4603      	mov	r3, r0
 8007db6:	71fb      	strb	r3, [r7, #7]
				MPU6050_MOT_DUR,1,g_MPU6050_MotionInterruptDuration,1,ACC_I2C_TIMEOUT);
	return TransmissionStatus;
 8007db8:	79fb      	ldrb	r3, [r7, #7]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	2000011c 	.word	0x2000011c
 8007dc8:	200007c8 	.word	0x200007c8
 8007dcc:	20000120 	.word	0x20000120
 8007dd0:	20000124 	.word	0x20000124
 8007dd4:	20000128 	.word	0x20000128

08007dd8 <AccelerometerInit>:
				(float) g_AxisMeasurements[i]
						* ACC_RESOLUTION_G / (float) INT16_MAX;
}

HAL_StatusTypeDef AccelerometerInit()
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef InitStatus;
	g_MotionFlag=0;
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <AccelerometerInit+0x44>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
	InitStatus=AccelerometerManagePower();
 8007de4:	f7ff ff54 	bl	8007c90 <AccelerometerManagePower>
 8007de8:	4603      	mov	r3, r0
 8007dea:	71fb      	strb	r3, [r7, #7]
	if(InitStatus!= HAL_OK)
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <AccelerometerInit+0x1e>
		return InitStatus;
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	e00d      	b.n	8007e12 <AccelerometerInit+0x3a>
	InitStatus=AccelerometerConfigure();
 8007df6:	f7ff ff7b 	bl	8007cf0 <AccelerometerConfigure>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	71fb      	strb	r3, [r7, #7]
	if(InitStatus!= HAL_OK)
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <AccelerometerInit+0x30>
			return InitStatus;
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	e004      	b.n	8007e12 <AccelerometerInit+0x3a>
	InitStatus=AccelerometerMotionIntConfigure();
 8007e08:	f7ff ff8c 	bl	8007d24 <AccelerometerMotionIntConfigure>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	71fb      	strb	r3, [r7, #7]
	return InitStatus;
 8007e10:	79fb      	ldrb	r3, [r7, #7]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000712 	.word	0x20000712

08007e20 <HAL_TIM_PeriodElapsedCallback>:

volatile uint8_t g_GSM_BaudrateSetFlag=0;
volatile uint8_t g_Tim7Seconds=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a18      	ldr	r2, [pc, #96]	; (8007e8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d108      	bne.n	8007e42 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
 8007e30:	2204      	movs	r2, #4
 8007e32:	4917      	ldr	r1, [pc, #92]	; (8007e90 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8007e34:	4817      	ldr	r0, [pc, #92]	; (8007e94 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8007e36:	f7fc fe8f 	bl	8004b58 <HAL_UART_Transmit_IT>
		g_GSM_LastCommandSize = sizeof("AT\r\n")-1;
 8007e3a:	4b17      	ldr	r3, [pc, #92]	; (8007e98 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	701a      	strb	r2, [r3, #0]
		++g_Tim7Seconds;
		g_Tim7Seconds%=TIM7_POSTSCALER;
		if(g_Tim7Seconds==0)
			GSM_SendPosition();
	}
}
 8007e40:	e020      	b.n	8007e84 <HAL_TIM_PeriodElapsedCallback+0x64>
	if(htim==&htim6)
	{
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
		g_GSM_LastCommandSize = sizeof("AT\r\n")-1;
	}
	else if(htim==&htim7)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a15      	ldr	r2, [pc, #84]	; (8007e9c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d11c      	bne.n	8007e84 <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		++g_Tim7Seconds;
 8007e4a:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	3301      	adds	r3, #1
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8007e56:	701a      	strb	r2, [r3, #0]
		g_Tim7Seconds%=TIM7_POSTSCALER;
 8007e58:	4b11      	ldr	r3, [pc, #68]	; (8007ea0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8007e60:	fba3 1302 	umull	r1, r3, r3, r2
 8007e64:	0959      	lsrs	r1, r3, #5
 8007e66:	460b      	mov	r3, r1
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	1a5b      	subs	r3, r3, r1
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8007e74:	701a      	strb	r2, [r3, #0]
		if(g_Tim7Seconds==0)
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <HAL_TIM_PeriodElapsedCallback+0x64>
			GSM_SendPosition();
 8007e80:	f000 f88c 	bl	8007f9c <GSM_SendPosition>
	}
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20000840 	.word	0x20000840
 8007e90:	0800c1f8 	.word	0x0800c1f8
 8007e94:	200008b8 	.word	0x200008b8
 8007e98:	20000792 	.word	0x20000792
 8007e9c:	2000087c 	.word	0x2000087c
 8007ea0:	200006cf 	.word	0x200006cf
 8007ea4:	88888889 	.word	0x88888889

08007ea8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	if(huart==&GSM_huart)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <HAL_UART_RxCpltCallback+0x34>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10d      	bne.n	8007ed4 <HAL_UART_RxCpltCallback+0x2c>
	{
		if(!g_GSM_BaudrateSetFlag)
 8007eb8:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <HAL_UART_RxCpltCallback+0x38>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d102      	bne.n	8007ec8 <HAL_UART_RxCpltCallback+0x20>
			GSM_VerifyAutoBaudrate();
 8007ec2:	f000 f83b 	bl	8007f3c <GSM_VerifyAutoBaudrate>
		else
			g_GSM_LastCommandStatus=GSM_VerifyCommand();
	}
}
 8007ec6:	e005      	b.n	8007ed4 <HAL_UART_RxCpltCallback+0x2c>
	if(huart==&GSM_huart)
	{
		if(!g_GSM_BaudrateSetFlag)
			GSM_VerifyAutoBaudrate();
		else
			g_GSM_LastCommandStatus=GSM_VerifyCommand();
 8007ec8:	f000 f8d0 	bl	800806c <GSM_VerifyCommand>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <HAL_UART_RxCpltCallback+0x3c>)
 8007ed2:	701a      	strb	r2, [r3, #0]
	}
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	200008b8 	.word	0x200008b8
 8007ee0:	200006ce 	.word	0x200006ce
 8007ee4:	20000720 	.word	0x20000720

08007ee8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
	if(huart==&GSM_huart)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a0e      	ldr	r2, [pc, #56]	; (8007f2c <HAL_UART_TxCpltCallback+0x44>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d114      	bne.n	8007f22 <HAL_UART_TxCpltCallback+0x3a>
		if(!g_GSM_BaudrateSetFlag)
 8007ef8:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <HAL_UART_TxCpltCallback+0x48>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d105      	bne.n	8007f0e <HAL_UART_TxCpltCallback+0x26>
			HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_RETURN_MESSAGE_SIZE+5);
 8007f02:	2209      	movs	r2, #9
 8007f04:	490b      	ldr	r1, [pc, #44]	; (8007f34 <HAL_UART_TxCpltCallback+0x4c>)
 8007f06:	4809      	ldr	r0, [pc, #36]	; (8007f2c <HAL_UART_TxCpltCallback+0x44>)
 8007f08:	f7fc fe6c 	bl	8004be4 <HAL_UART_Receive_IT>
		else
			HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,g_GSM_LastCommandSize+7);
}
 8007f0c:	e009      	b.n	8007f22 <HAL_UART_TxCpltCallback+0x3a>
{
	if(huart==&GSM_huart)
		if(!g_GSM_BaudrateSetFlag)
			HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_RETURN_MESSAGE_SIZE+5);
		else
			HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,g_GSM_LastCommandSize+7);
 8007f0e:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <HAL_UART_TxCpltCallback+0x50>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3307      	adds	r3, #7
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4906      	ldr	r1, [pc, #24]	; (8007f34 <HAL_UART_TxCpltCallback+0x4c>)
 8007f1c:	4803      	ldr	r0, [pc, #12]	; (8007f2c <HAL_UART_TxCpltCallback+0x44>)
 8007f1e:	f7fc fe61 	bl	8004be4 <HAL_UART_Receive_IT>
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200008b8 	.word	0x200008b8
 8007f30:	200006ce 	.word	0x200006ce
 8007f34:	20000760 	.word	0x20000760
 8007f38:	20000792 	.word	0x20000792

08007f3c <GSM_VerifyAutoBaudrate>:
			g_GSM_LastCommandSize = sizeof("AT\r\n")-1;
		}
}

void GSM_VerifyAutoBaudrate()
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
	if(strncmp(g_GSM_ReceivedData,"AT\r\r\nOK\r\n",g_GSM_LastCommandSize+GSM_RETURN_MESSAGE_SIZE)==0)
 8007f40:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <GSM_VerifyAutoBaudrate+0x2c>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	3304      	adds	r3, #4
 8007f46:	461a      	mov	r2, r3
 8007f48:	4908      	ldr	r1, [pc, #32]	; (8007f6c <GSM_VerifyAutoBaudrate+0x30>)
 8007f4a:	4809      	ldr	r0, [pc, #36]	; (8007f70 <GSM_VerifyAutoBaudrate+0x34>)
 8007f4c:	f001 fcab 	bl	80098a6 <strncmp>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d105      	bne.n	8007f62 <GSM_VerifyAutoBaudrate+0x26>
	{
		g_GSM_BaudrateSetFlag=1;
 8007f56:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <GSM_VerifyAutoBaudrate+0x38>)
 8007f58:	2201      	movs	r2, #1
 8007f5a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8007f5c:	4806      	ldr	r0, [pc, #24]	; (8007f78 <GSM_VerifyAutoBaudrate+0x3c>)
 8007f5e:	f7fc fb4d 	bl	80045fc <HAL_TIM_Base_Stop_IT>
	}
}
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000792 	.word	0x20000792
 8007f6c:	0800c200 	.word	0x0800c200
 8007f70:	20000760 	.word	0x20000760
 8007f74:	200006ce 	.word	0x200006ce
 8007f78:	20000840 	.word	0x20000840

08007f7c <GSM_StartSendingPosition>:
		g_GSM_LastCommandSize = MessageSize-2;
	}
}

void GSM_StartSendingPosition()
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
	if(g_GSM_BaudrateSetFlag)
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <GSM_StartSendingPosition+0x18>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <GSM_StartSendingPosition+0x14>
	{
		HAL_TIM_Base_Start_IT(&htim7);
 8007f8a:	4803      	ldr	r0, [pc, #12]	; (8007f98 <GSM_StartSendingPosition+0x1c>)
 8007f8c:	f7fc fb1a 	bl	80045c4 <HAL_TIM_Base_Start_IT>
	}
}
 8007f90:	bf00      	nop
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	200006ce 	.word	0x200006ce
 8007f98:	2000087c 	.word	0x2000087c

08007f9c <GSM_SendPosition>:

void GSM_SendPosition()
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08e      	sub	sp, #56	; 0x38
 8007fa0:	af00      	add	r7, sp, #0
	if(g_GSM_BaudrateSetFlag)
 8007fa2:	4b29      	ldr	r3, [pc, #164]	; (8008048 <GSM_SendPosition+0xac>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d049      	beq.n	8008040 <GSM_SendPosition+0xa4>
	{
		uint8_t data[GSM_MAX_MESSAGE_SIZE];
		uint16_t MessageSize;
		MessageSize=sprintf(data,"AT+CMGS=\"%s\"\r\n",GSM_RECEIVER_PHONE_NUMBER);
 8007fac:	463b      	mov	r3, r7
 8007fae:	4a27      	ldr	r2, [pc, #156]	; (800804c <GSM_SendPosition+0xb0>)
 8007fb0:	4927      	ldr	r1, [pc, #156]	; (8008050 <GSM_SendPosition+0xb4>)
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f001 fc3e 	bl	8009834 <sprintf>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	86bb      	strh	r3, [r7, #52]	; 0x34
		HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 8007fbc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4824      	ldr	r0, [pc, #144]	; (8008054 <GSM_SendPosition+0xb8>)
 8007fc4:	f7fc fdc8 	bl	8004b58 <HAL_UART_Transmit_IT>
		strncpy(g_GSM_LastCommand ,data,MessageSize-2);
 8007fc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007fca:	3b02      	subs	r3, #2
 8007fcc:	461a      	mov	r2, r3
 8007fce:	463b      	mov	r3, r7
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4821      	ldr	r0, [pc, #132]	; (8008058 <GSM_SendPosition+0xbc>)
 8007fd4:	f001 fc7c 	bl	80098d0 <strncpy>
		g_GSM_LastCommandSize = MessageSize-2;
 8007fd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	3b02      	subs	r3, #2
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	4b1e      	ldr	r3, [pc, #120]	; (800805c <GSM_SendPosition+0xc0>)
 8007fe2:	701a      	strb	r2, [r3, #0]

		//Zmienic na odpowiednie dane
		for(uint8_t i=0; i<POSITION_LOG_CAPACITY;++i)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007fea:	e017      	b.n	800801c <GSM_SendPosition+0x80>
		{
			MessageSize=sprintf(data,"%d, ",g_PositionLog.Positions[i]);
 8007fec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <GSM_SendPosition+0xc4>)
 8007ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	491a      	ldr	r1, [pc, #104]	; (8008064 <GSM_SendPosition+0xc8>)
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 fc19 	bl	8009834 <sprintf>
 8008002:	4603      	mov	r3, r0
 8008004:	86bb      	strh	r3, [r7, #52]	; 0x34
			HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 8008006:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008008:	463b      	mov	r3, r7
 800800a:	4619      	mov	r1, r3
 800800c:	4811      	ldr	r0, [pc, #68]	; (8008054 <GSM_SendPosition+0xb8>)
 800800e:	f7fc fda3 	bl	8004b58 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
		strncpy(g_GSM_LastCommand ,data,MessageSize-2);
		g_GSM_LastCommandSize = MessageSize-2;

		//Zmienic na odpowiednie dane
		for(uint8_t i=0; i<POSITION_LOG_CAPACITY;++i)
 8008012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008016:	3301      	adds	r3, #1
 8008018:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800801c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008020:	2b02      	cmp	r3, #2
 8008022:	d9e3      	bls.n	8007fec <GSM_SendPosition+0x50>
		{
			MessageSize=sprintf(data,"%d, ",g_PositionLog.Positions[i]);
			HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
		}
		MessageSize=sprintf(data,"%d\r\n",0x1A); //Send as hex ?
 8008024:	463b      	mov	r3, r7
 8008026:	221a      	movs	r2, #26
 8008028:	490f      	ldr	r1, [pc, #60]	; (8008068 <GSM_SendPosition+0xcc>)
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fc02 	bl	8009834 <sprintf>
 8008030:	4603      	mov	r3, r0
 8008032:	86bb      	strh	r3, [r7, #52]	; 0x34
		HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 8008034:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008036:	463b      	mov	r3, r7
 8008038:	4619      	mov	r1, r3
 800803a:	4806      	ldr	r0, [pc, #24]	; (8008054 <GSM_SendPosition+0xb8>)
 800803c:	f7fc fd8c 	bl	8004b58 <HAL_UART_Transmit_IT>
	}
}
 8008040:	bf00      	nop
 8008042:	3738      	adds	r7, #56	; 0x38
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200006ce 	.word	0x200006ce
 800804c:	0800c248 	.word	0x0800c248
 8008050:	0800c254 	.word	0x0800c254
 8008054:	200008b8 	.word	0x200008b8
 8008058:	2000072c 	.word	0x2000072c
 800805c:	20000792 	.word	0x20000792
 8008060:	20000724 	.word	0x20000724
 8008064:	0800c264 	.word	0x0800c264
 8008068:	0800c26c 	.word	0x0800c26c

0800806c <GSM_VerifyCommand>:
	GSM_UnlockSIMCard();
	GSM_ConfigureSMS();
}

HAL_StatusTypeDef GSM_VerifyCommand()
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
	if(strncmp(g_GSM_ReceivedData,strcat(g_GSM_LastCommand,"\r\r\nOK\r\n"),g_GSM_LastCommandSize+7))
 8008070:	480e      	ldr	r0, [pc, #56]	; (80080ac <GSM_VerifyCommand+0x40>)
 8008072:	f7f8 f8ad 	bl	80001d0 <strlen>
 8008076:	4603      	mov	r3, r0
 8008078:	461a      	mov	r2, r3
 800807a:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <GSM_VerifyCommand+0x40>)
 800807c:	4413      	add	r3, r2
 800807e:	490c      	ldr	r1, [pc, #48]	; (80080b0 <GSM_VerifyCommand+0x44>)
 8008080:	461a      	mov	r2, r3
 8008082:	460b      	mov	r3, r1
 8008084:	cb03      	ldmia	r3!, {r0, r1}
 8008086:	6010      	str	r0, [r2, #0]
 8008088:	6051      	str	r1, [r2, #4]
 800808a:	4908      	ldr	r1, [pc, #32]	; (80080ac <GSM_VerifyCommand+0x40>)
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <GSM_VerifyCommand+0x48>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	3307      	adds	r3, #7
 8008092:	461a      	mov	r2, r3
 8008094:	4808      	ldr	r0, [pc, #32]	; (80080b8 <GSM_VerifyCommand+0x4c>)
 8008096:	f001 fc06 	bl	80098a6 <strncmp>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <GSM_VerifyCommand+0x38>
		return HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	e000      	b.n	80080a6 <GSM_VerifyCommand+0x3a>
	else
		return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	2000072c 	.word	0x2000072c
 80080b0:	0800c274 	.word	0x0800c274
 80080b4:	20000792 	.word	0x20000792
 80080b8:	20000760 	.word	0x20000760

080080bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	4a2e      	ldr	r2, [pc, #184]	; (8008180 <MX_GPIO_Init+0xc4>)
 80080c8:	4b2d      	ldr	r3, [pc, #180]	; (8008180 <MX_GPIO_Init+0xc4>)
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d0:	6313      	str	r3, [r2, #48]	; 0x30
 80080d2:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <MX_GPIO_Init+0xc4>)
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	4a27      	ldr	r2, [pc, #156]	; (8008180 <MX_GPIO_Init+0xc4>)
 80080e4:	4b26      	ldr	r3, [pc, #152]	; (8008180 <MX_GPIO_Init+0xc4>)
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	f043 0310 	orr.w	r3, r3, #16
 80080ec:	6313      	str	r3, [r2, #48]	; 0x30
 80080ee:	4b24      	ldr	r3, [pc, #144]	; (8008180 <MX_GPIO_Init+0xc4>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f003 0310 	and.w	r3, r3, #16
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080fa:	2300      	movs	r3, #0
 80080fc:	60bb      	str	r3, [r7, #8]
 80080fe:	4a20      	ldr	r2, [pc, #128]	; (8008180 <MX_GPIO_Init+0xc4>)
 8008100:	4b1f      	ldr	r3, [pc, #124]	; (8008180 <MX_GPIO_Init+0xc4>)
 8008102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008104:	f043 0304 	orr.w	r3, r3, #4
 8008108:	6313      	str	r3, [r2, #48]	; 0x30
 800810a:	4b1d      	ldr	r3, [pc, #116]	; (8008180 <MX_GPIO_Init+0xc4>)
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	60bb      	str	r3, [r7, #8]
 8008114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008116:	2300      	movs	r3, #0
 8008118:	607b      	str	r3, [r7, #4]
 800811a:	4a19      	ldr	r2, [pc, #100]	; (8008180 <MX_GPIO_Init+0xc4>)
 800811c:	4b18      	ldr	r3, [pc, #96]	; (8008180 <MX_GPIO_Init+0xc4>)
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	f043 0301 	orr.w	r3, r3, #1
 8008124:	6313      	str	r3, [r2, #48]	; 0x30
 8008126:	4b16      	ldr	r3, [pc, #88]	; (8008180 <MX_GPIO_Init+0xc4>)
 8008128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008132:	2300      	movs	r3, #0
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4a12      	ldr	r2, [pc, #72]	; (8008180 <MX_GPIO_Init+0xc4>)
 8008138:	4b11      	ldr	r3, [pc, #68]	; (8008180 <MX_GPIO_Init+0xc4>)
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	f043 0302 	orr.w	r3, r3, #2
 8008140:	6313      	str	r3, [r2, #48]	; 0x30
 8008142:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <MX_GPIO_Init+0xc4>)
 8008144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accelerometer_Interrupt_Pin;
 800814e:	2380      	movs	r3, #128	; 0x80
 8008150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008152:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <MX_GPIO_Init+0xc8>)
 8008154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008156:	2300      	movs	r3, #0
 8008158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Accelerometer_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800815a:	f107 0314 	add.w	r3, r7, #20
 800815e:	4619      	mov	r1, r3
 8008160:	4809      	ldr	r0, [pc, #36]	; (8008188 <MX_GPIO_Init+0xcc>)
 8008162:	f7f9 f877 	bl	8001254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8008166:	2200      	movs	r2, #0
 8008168:	2100      	movs	r1, #0
 800816a:	2017      	movs	r0, #23
 800816c:	f7f8 fff0 	bl	8001150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008170:	2017      	movs	r0, #23
 8008172:	f7f9 f809 	bl	8001188 <HAL_NVIC_EnableIRQ>

}
 8008176:	bf00      	nop
 8008178:	3728      	adds	r7, #40	; 0x28
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40023800 	.word	0x40023800
 8008184:	10110000 	.word	0x10110000
 8008188:	40021000 	.word	0x40021000

0800818c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008190:	4b12      	ldr	r3, [pc, #72]	; (80081dc <MX_I2C1_Init+0x50>)
 8008192:	4a13      	ldr	r2, [pc, #76]	; (80081e0 <MX_I2C1_Init+0x54>)
 8008194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <MX_I2C1_Init+0x50>)
 8008198:	4a12      	ldr	r2, [pc, #72]	; (80081e4 <MX_I2C1_Init+0x58>)
 800819a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800819c:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <MX_I2C1_Init+0x50>)
 800819e:	2200      	movs	r2, #0
 80081a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80081a2:	4b0e      	ldr	r3, [pc, #56]	; (80081dc <MX_I2C1_Init+0x50>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80081a8:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <MX_I2C1_Init+0x50>)
 80081aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80081b0:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <MX_I2C1_Init+0x50>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80081b6:	4b09      	ldr	r3, [pc, #36]	; (80081dc <MX_I2C1_Init+0x50>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80081bc:	4b07      	ldr	r3, [pc, #28]	; (80081dc <MX_I2C1_Init+0x50>)
 80081be:	2200      	movs	r2, #0
 80081c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80081c2:	4b06      	ldr	r3, [pc, #24]	; (80081dc <MX_I2C1_Init+0x50>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80081c8:	4804      	ldr	r0, [pc, #16]	; (80081dc <MX_I2C1_Init+0x50>)
 80081ca:	f7f9 f9f5 	bl	80015b8 <HAL_I2C_Init>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80081d4:	f000 f8ee 	bl	80083b4 <Error_Handler>
  }

}
 80081d8:	bf00      	nop
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200007c8 	.word	0x200007c8
 80081e0:	40005400 	.word	0x40005400
 80081e4:	00061a80 	.word	0x00061a80

080081e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a12      	ldr	r2, [pc, #72]	; (8008240 <HAL_I2C_MspInit+0x58>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d11e      	bne.n	8008238 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Accelerometer_SCL_Pin|Accelerometer_SDA_Pin;
 80081fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80081fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008200:	2312      	movs	r3, #18
 8008202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008204:	2301      	movs	r3, #1
 8008206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008208:	2303      	movs	r3, #3
 800820a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800820c:	2304      	movs	r3, #4
 800820e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	4619      	mov	r1, r3
 8008216:	480b      	ldr	r0, [pc, #44]	; (8008244 <HAL_I2C_MspInit+0x5c>)
 8008218:	f7f9 f81c 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800821c:	2300      	movs	r3, #0
 800821e:	60bb      	str	r3, [r7, #8]
 8008220:	4a09      	ldr	r2, [pc, #36]	; (8008248 <HAL_I2C_MspInit+0x60>)
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <HAL_I2C_MspInit+0x60>)
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800822a:	6413      	str	r3, [r2, #64]	; 0x40
 800822c:	4b06      	ldr	r3, [pc, #24]	; (8008248 <HAL_I2C_MspInit+0x60>)
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008234:	60bb      	str	r3, [r7, #8]
 8008236:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008238:	bf00      	nop
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40005400 	.word	0x40005400
 8008244:	40020400 	.word	0x40020400
 8008248:	40023800 	.word	0x40023800

0800824c <main>:
uint8_t rcvData[1];
HAL_StatusTypeDef status=HAL_BUSY;
/* USER CODE END 0 */

int main(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008252:	f7f8 fe31 	bl	8000eb8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8008256:	f000 f82b 	bl	80082b0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800825a:	f7ff ff2f 	bl	80080bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800825e:	f000 fb63 	bl	8008928 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8008262:	f7ff ff93 	bl	800818c <MX_I2C1_Init>
  MX_UART4_Init();
 8008266:	f000 faa3 	bl	80087b0 <MX_UART4_Init>
  MX_USART6_UART_Init();
 800826a:	f000 facb 	bl	8008804 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800826e:	f000 f9f9 	bl	8008664 <MX_TIM6_Init>
  MX_RTC_Init();
 8008272:	f000 f8a7 	bl	80083c4 <MX_RTC_Init>
  MX_TIM7_Init();
 8008276:	f000 fa25 	bl	80086c4 <MX_TIM7_Init>

  /* USER CODE BEGIN 2 */
  status=HAL_I2C_Mem_Read(&hi2c1,0x68,0x3B,1,rcvData,1,1000);
 800827a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800827e:	9302      	str	r3, [sp, #8]
 8008280:	2301      	movs	r3, #1
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <main+0x58>)
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	2301      	movs	r3, #1
 800828a:	223b      	movs	r2, #59	; 0x3b
 800828c:	2168      	movs	r1, #104	; 0x68
 800828e:	4806      	ldr	r0, [pc, #24]	; (80082a8 <main+0x5c>)
 8008290:	f7f9 fb7c 	bl	800198c <HAL_I2C_Mem_Read>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <main+0x60>)
 800829a:	701a      	strb	r2, [r3, #0]

  AccelerometerInit();
 800829c:	f7ff fd9c 	bl	8007dd8 <AccelerometerInit>
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 80082a0:	e7fe      	b.n	80082a0 <main+0x54>
 80082a2:	bf00      	nop
 80082a4:	2000081c 	.word	0x2000081c
 80082a8:	200007c8 	.word	0x200007c8
 80082ac:	20000129 	.word	0x20000129

080082b0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b098      	sub	sp, #96	; 0x60
 80082b4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80082b6:	2300      	movs	r3, #0
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	4a3b      	ldr	r2, [pc, #236]	; (80083a8 <SystemClock_Config+0xf8>)
 80082bc:	4b3a      	ldr	r3, [pc, #232]	; (80083a8 <SystemClock_Config+0xf8>)
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082c4:	6413      	str	r3, [r2, #64]	; 0x40
 80082c6:	4b38      	ldr	r3, [pc, #224]	; (80083a8 <SystemClock_Config+0xf8>)
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ce:	60bb      	str	r3, [r7, #8]
 80082d0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]
 80082d6:	4a35      	ldr	r2, [pc, #212]	; (80083ac <SystemClock_Config+0xfc>)
 80082d8:	4b34      	ldr	r3, [pc, #208]	; (80083ac <SystemClock_Config+0xfc>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	4b32      	ldr	r3, [pc, #200]	; (80083ac <SystemClock_Config+0xfc>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ea:	607b      	str	r3, [r7, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80082ee:	230b      	movs	r3, #11
 80082f0:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80082f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80082f8:	2301      	movs	r3, #1
 80082fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082fc:	2302      	movs	r3, #2
 80082fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008300:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008304:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008306:	2319      	movs	r3, #25
 8008308:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800830a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800830e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008310:	2302      	movs	r3, #2
 8008312:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008314:	2307      	movs	r3, #7
 8008316:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800831c:	4618      	mov	r0, r3
 800831e:	f7fb f93b 	bl	8003598 <HAL_RCC_OscConfig>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8008328:	f000 f844 	bl	80083b4 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800832c:	230f      	movs	r3, #15
 800832e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008330:	2302      	movs	r3, #2
 8008332:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008334:	2300      	movs	r3, #0
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008338:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800833c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800833e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008342:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008344:	f107 031c 	add.w	r3, r7, #28
 8008348:	2105      	movs	r1, #5
 800834a:	4618      	mov	r0, r3
 800834c:	f7fb fb7e 	bl	8003a4c <HAL_RCC_ClockConfig>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8008356:	f000 f82d 	bl	80083b4 <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800835a:	2302      	movs	r3, #2
 800835c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800835e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008362:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f7fb fd4f 	bl	8003e0c <HAL_RCCEx_PeriphCLKConfig>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8008374:	f000 f81e 	bl	80083b4 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008378:	f7fb fcf8 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 800837c:	4602      	mov	r2, r0
 800837e:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <SystemClock_Config+0x100>)
 8008380:	fba3 2302 	umull	r2, r3, r3, r2
 8008384:	099b      	lsrs	r3, r3, #6
 8008386:	4618      	mov	r0, r3
 8008388:	f7f8 ff0c 	bl	80011a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800838c:	2004      	movs	r0, #4
 800838e:	f7f8 ff15 	bl	80011bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008392:	2200      	movs	r2, #0
 8008394:	2100      	movs	r1, #0
 8008396:	f04f 30ff 	mov.w	r0, #4294967295
 800839a:	f7f8 fed9 	bl	8001150 <HAL_NVIC_SetPriority>
}
 800839e:	bf00      	nop
 80083a0:	3760      	adds	r7, #96	; 0x60
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	40023800 	.word	0x40023800
 80083ac:	40007000 	.word	0x40007000
 80083b0:	10624dd3 	.word	0x10624dd3

080083b4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */
  /*while(1)
  {
  }*/
  /* USER CODE END Error_Handler */ 
}
 80083b8:	bf00      	nop
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop

080083c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 80083ca:	4b2c      	ldr	r3, [pc, #176]	; (800847c <MX_RTC_Init+0xb8>)
 80083cc:	4a2c      	ldr	r2, [pc, #176]	; (8008480 <MX_RTC_Init+0xbc>)
 80083ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80083d0:	4b2a      	ldr	r3, [pc, #168]	; (800847c <MX_RTC_Init+0xb8>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80083d6:	4b29      	ldr	r3, [pc, #164]	; (800847c <MX_RTC_Init+0xb8>)
 80083d8:	227f      	movs	r2, #127	; 0x7f
 80083da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80083dc:	4b27      	ldr	r3, [pc, #156]	; (800847c <MX_RTC_Init+0xb8>)
 80083de:	22ff      	movs	r2, #255	; 0xff
 80083e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80083e2:	4b26      	ldr	r3, [pc, #152]	; (800847c <MX_RTC_Init+0xb8>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80083e8:	4b24      	ldr	r3, [pc, #144]	; (800847c <MX_RTC_Init+0xb8>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80083ee:	4b23      	ldr	r3, [pc, #140]	; (800847c <MX_RTC_Init+0xb8>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80083f4:	4821      	ldr	r0, [pc, #132]	; (800847c <MX_RTC_Init+0xb8>)
 80083f6:	f7fb fdff 	bl	8003ff8 <HAL_RTC_Init>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8008400:	f7ff ffd8 	bl	80083b4 <Error_Handler>
  }

    /**Initialize RTC and set the Time and Date 
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8008404:	2100      	movs	r1, #0
 8008406:	481d      	ldr	r0, [pc, #116]	; (800847c <MX_RTC_Init+0xb8>)
 8008408:	f7fc f898 	bl	800453c <HAL_RTCEx_BKUPRead>
 800840c:	4602      	mov	r2, r0
 800840e:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8008412:	429a      	cmp	r2, r3
 8008414:	d02d      	beq.n	8008472 <MX_RTC_Init+0xae>
  sTime.Hours = 0x0;
 8008416:	2300      	movs	r3, #0
 8008418:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800841a:	2300      	movs	r3, #0
 800841c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800841e:	2300      	movs	r3, #0
 8008420:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800842a:	1d3b      	adds	r3, r7, #4
 800842c:	2201      	movs	r2, #1
 800842e:	4619      	mov	r1, r3
 8008430:	4812      	ldr	r0, [pc, #72]	; (800847c <MX_RTC_Init+0xb8>)
 8008432:	f7fb fe5d 	bl	80040f0 <HAL_RTC_SetTime>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800843c:	f7ff ffba 	bl	80083b4 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008440:	2301      	movs	r3, #1
 8008442:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8008444:	2301      	movs	r3, #1
 8008446:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8008448:	2301      	movs	r3, #1
 800844a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800844c:	2300      	movs	r3, #0
 800844e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8008450:	463b      	mov	r3, r7
 8008452:	2201      	movs	r2, #1
 8008454:	4619      	mov	r1, r3
 8008456:	4809      	ldr	r0, [pc, #36]	; (800847c <MX_RTC_Init+0xb8>)
 8008458:	f7fb ff10 	bl	800427c <HAL_RTC_SetDate>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8008462:	f7ff ffa7 	bl	80083b4 <Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8008466:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800846a:	2100      	movs	r1, #0
 800846c:	4803      	ldr	r0, [pc, #12]	; (800847c <MX_RTC_Init+0xb8>)
 800846e:	f7fc f84b 	bl	8004508 <HAL_RTCEx_BKUPWrite>
  }

}
 8008472:	bf00      	nop
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000820 	.word	0x20000820
 8008480:	40002800 	.word	0x40002800

08008484 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a05      	ldr	r2, [pc, #20]	; (80084a8 <HAL_RTC_MspInit+0x24>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d102      	bne.n	800849c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008496:	4b05      	ldr	r3, [pc, #20]	; (80084ac <HAL_RTC_MspInit+0x28>)
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	40002800 	.word	0x40002800
 80084ac:	42470e3c 	.word	0x42470e3c

080084b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084b4:	2003      	movs	r0, #3
 80084b6:	f7f8 fe3f 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80084ba:	2200      	movs	r2, #0
 80084bc:	2100      	movs	r1, #0
 80084be:	f06f 000b 	mvn.w	r0, #11
 80084c2:	f7f8 fe45 	bl	8001150 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80084c6:	2200      	movs	r2, #0
 80084c8:	2100      	movs	r1, #0
 80084ca:	f06f 000a 	mvn.w	r0, #10
 80084ce:	f7f8 fe3f 	bl	8001150 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	f06f 0009 	mvn.w	r0, #9
 80084da:	f7f8 fe39 	bl	8001150 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	f06f 0004 	mvn.w	r0, #4
 80084e6:	f7f8 fe33 	bl	8001150 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80084ea:	2200      	movs	r2, #0
 80084ec:	2100      	movs	r1, #0
 80084ee:	f06f 0003 	mvn.w	r0, #3
 80084f2:	f7f8 fe2d 	bl	8001150 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80084f6:	2200      	movs	r2, #0
 80084f8:	2100      	movs	r1, #0
 80084fa:	f06f 0001 	mvn.w	r0, #1
 80084fe:	f7f8 fe27 	bl	8001150 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	f04f 30ff 	mov.w	r0, #4294967295
 800850a:	f7f8 fe21 	bl	8001150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800850e:	bf00      	nop
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop

08008514 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008518:	bf00      	nop
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop

08008524 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8008528:	e7fe      	b.n	8008528 <HardFault_Handler+0x4>
 800852a:	bf00      	nop

0800852c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8008530:	e7fe      	b.n	8008530 <MemManage_Handler+0x4>
 8008532:	bf00      	nop

08008534 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8008538:	e7fe      	b.n	8008538 <BusFault_Handler+0x4>
 800853a:	bf00      	nop

0800853c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8008540:	e7fe      	b.n	8008540 <UsageFault_Handler+0x4>
 8008542:	bf00      	nop

08008544 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008548:	bf00      	nop
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop

08008554 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008558:	bf00      	nop
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop

08008564 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008568:	bf00      	nop
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop

08008574 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008578:	f7f8 fcdc 	bl	8000f34 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800857c:	f7f8 fe3a 	bl	80011f4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008580:	bf00      	nop
 8008582:	bd80      	pop	{r7, pc}

08008584 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008588:	2080      	movs	r0, #128	; 0x80
 800858a:	f7f8 fffd 	bl	8001588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800858e:	bf00      	nop
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop

08008594 <UART4_IRQHandler>:

/**
* @brief This function handles UART4 global interrupt.
*/
void UART4_IRQHandler(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008598:	4802      	ldr	r0, [pc, #8]	; (80085a4 <UART4_IRQHandler+0x10>)
 800859a:	f7fc fb71 	bl	8004c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800859e:	bf00      	nop
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	200008f8 	.word	0x200008f8

080085a8 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80085ac:	4802      	ldr	r0, [pc, #8]	; (80085b8 <TIM6_DAC_IRQHandler+0x10>)
 80085ae:	f7fc f851 	bl	8004654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80085b2:	bf00      	nop
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000840 	.word	0x20000840

080085bc <TIM7_IRQHandler>:

/**
* @brief This function handles TIM7 global interrupt.
*/
void TIM7_IRQHandler(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80085c0:	4802      	ldr	r0, [pc, #8]	; (80085cc <TIM7_IRQHandler+0x10>)
 80085c2:	f7fc f847 	bl	8004654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80085c6:	bf00      	nop
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	2000087c 	.word	0x2000087c

080085d0 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80085d4:	4802      	ldr	r0, [pc, #8]	; (80085e0 <OTG_FS_IRQHandler+0x10>)
 80085d6:	f7fa f857 	bl	8002688 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80085da:	bf00      	nop
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	20000bc4 	.word	0x20000bc4

080085e4 <USART6_IRQHandler>:

/**
* @brief This function handles USART6 global interrupt.
*/
void USART6_IRQHandler(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80085e8:	4802      	ldr	r0, [pc, #8]	; (80085f4 <USART6_IRQHandler+0x10>)
 80085ea:	f7fc fb49 	bl	8004c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80085ee:	bf00      	nop
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	200008b8 	.word	0x200008b8

080085f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80085fc:	4a16      	ldr	r2, [pc, #88]	; (8008658 <SystemInit+0x60>)
 80085fe:	4b16      	ldr	r3, [pc, #88]	; (8008658 <SystemInit+0x60>)
 8008600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800860c:	4a13      	ldr	r2, [pc, #76]	; (800865c <SystemInit+0x64>)
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <SystemInit+0x64>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <SystemInit+0x64>)
 800861a:	2200      	movs	r2, #0
 800861c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800861e:	4a0f      	ldr	r2, [pc, #60]	; (800865c <SystemInit+0x64>)
 8008620:	4b0e      	ldr	r3, [pc, #56]	; (800865c <SystemInit+0x64>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800862c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800862e:	4b0b      	ldr	r3, [pc, #44]	; (800865c <SystemInit+0x64>)
 8008630:	4a0b      	ldr	r2, [pc, #44]	; (8008660 <SystemInit+0x68>)
 8008632:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008634:	4a09      	ldr	r2, [pc, #36]	; (800865c <SystemInit+0x64>)
 8008636:	4b09      	ldr	r3, [pc, #36]	; (800865c <SystemInit+0x64>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800863e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008640:	4b06      	ldr	r3, [pc, #24]	; (800865c <SystemInit+0x64>)
 8008642:	2200      	movs	r2, #0
 8008644:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008646:	4b04      	ldr	r3, [pc, #16]	; (8008658 <SystemInit+0x60>)
 8008648:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800864c:	609a      	str	r2, [r3, #8]
#endif
}
 800864e:	bf00      	nop
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	e000ed00 	.word	0xe000ed00
 800865c:	40023800 	.word	0x40023800
 8008660:	24003010 	.word	0x24003010

08008664 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 800866a:	4b14      	ldr	r3, [pc, #80]	; (80086bc <MX_TIM6_Init+0x58>)
 800866c:	4a14      	ldr	r2, [pc, #80]	; (80086c0 <MX_TIM6_Init+0x5c>)
 800866e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PRESCALER;
 8008670:	4b12      	ldr	r3, [pc, #72]	; (80086bc <MX_TIM6_Init+0x58>)
 8008672:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8008676:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <MX_TIM6_Init+0x58>)
 800867a:	2200      	movs	r2, #0
 800867c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_COUNTER;
 800867e:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <MX_TIM6_Init+0x58>)
 8008680:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008684:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008686:	480d      	ldr	r0, [pc, #52]	; (80086bc <MX_TIM6_Init+0x58>)
 8008688:	f7fb ff70 	bl	800456c <HAL_TIM_Base_Init>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8008692:	f7ff fe8f 	bl	80083b4 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008696:	2300      	movs	r3, #0
 8008698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800869e:	463b      	mov	r3, r7
 80086a0:	4619      	mov	r1, r3
 80086a2:	4806      	ldr	r0, [pc, #24]	; (80086bc <MX_TIM6_Init+0x58>)
 80086a4:	f7fc f9b0 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 80086ae:	f7ff fe81 	bl	80083b4 <Error_Handler>
  }

}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000840 	.word	0x20000840
 80086c0:	40001000 	.word	0x40001000

080086c4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
 80086ca:	4b14      	ldr	r3, [pc, #80]	; (800871c <MX_TIM7_Init+0x58>)
 80086cc:	4a14      	ldr	r2, [pc, #80]	; (8008720 <MX_TIM7_Init+0x5c>)
 80086ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = TIM7_PRESCALER;
 80086d0:	4b12      	ldr	r3, [pc, #72]	; (800871c <MX_TIM7_Init+0x58>)
 80086d2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80086d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086d8:	4b10      	ldr	r3, [pc, #64]	; (800871c <MX_TIM7_Init+0x58>)
 80086da:	2200      	movs	r2, #0
 80086dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = TIM7_COUNTER;
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <MX_TIM7_Init+0x58>)
 80086e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80086e4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80086e6:	480d      	ldr	r0, [pc, #52]	; (800871c <MX_TIM7_Init+0x58>)
 80086e8:	f7fb ff40 	bl	800456c <HAL_TIM_Base_Init>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <MX_TIM7_Init+0x32>
  {
    Error_Handler();
 80086f2:	f7ff fe5f 	bl	80083b4 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086f6:	2300      	movs	r3, #0
 80086f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80086fe:	463b      	mov	r3, r7
 8008700:	4619      	mov	r1, r3
 8008702:	4806      	ldr	r0, [pc, #24]	; (800871c <MX_TIM7_Init+0x58>)
 8008704:	f7fc f980 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 800870e:	f7ff fe51 	bl	80083b4 <Error_Handler>
  }

}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	2000087c 	.word	0x2000087c
 8008720:	40001400 	.word	0x40001400

08008724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a1c      	ldr	r2, [pc, #112]	; (80087a4 <HAL_TIM_Base_MspInit+0x80>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d116      	bne.n	8008764 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	4a1b      	ldr	r2, [pc, #108]	; (80087a8 <HAL_TIM_Base_MspInit+0x84>)
 800873c:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <HAL_TIM_Base_MspInit+0x84>)
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	f043 0310 	orr.w	r3, r3, #16
 8008744:	6413      	str	r3, [r2, #64]	; 0x40
 8008746:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <HAL_TIM_Base_MspInit+0x84>)
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	f003 0310 	and.w	r3, r3, #16
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8008752:	2200      	movs	r2, #0
 8008754:	2100      	movs	r1, #0
 8008756:	2036      	movs	r0, #54	; 0x36
 8008758:	f7f8 fcfa 	bl	8001150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800875c:	2036      	movs	r0, #54	; 0x36
 800875e:	f7f8 fd13 	bl	8001188 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8008762:	e01a      	b.n	800879a <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a10      	ldr	r2, [pc, #64]	; (80087ac <HAL_TIM_Base_MspInit+0x88>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d115      	bne.n	800879a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <HAL_TIM_Base_MspInit+0x84>)
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <HAL_TIM_Base_MspInit+0x84>)
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008778:	f043 0320 	orr.w	r3, r3, #32
 800877c:	6413      	str	r3, [r2, #64]	; 0x40
 800877e:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <HAL_TIM_Base_MspInit+0x84>)
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800878a:	2200      	movs	r2, #0
 800878c:	2100      	movs	r1, #0
 800878e:	2037      	movs	r0, #55	; 0x37
 8008790:	f7f8 fcde 	bl	8001150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008794:	2037      	movs	r0, #55	; 0x37
 8008796:	f7f8 fcf7 	bl	8001188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	40001000 	.word	0x40001000
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40001400 	.word	0x40001400

080087b0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80087b4:	4b11      	ldr	r3, [pc, #68]	; (80087fc <MX_UART4_Init+0x4c>)
 80087b6:	4a12      	ldr	r2, [pc, #72]	; (8008800 <MX_UART4_Init+0x50>)
 80087b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80087ba:	4b10      	ldr	r3, [pc, #64]	; (80087fc <MX_UART4_Init+0x4c>)
 80087bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80087c2:	4b0e      	ldr	r3, [pc, #56]	; (80087fc <MX_UART4_Init+0x4c>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80087c8:	4b0c      	ldr	r3, [pc, #48]	; (80087fc <MX_UART4_Init+0x4c>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80087ce:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <MX_UART4_Init+0x4c>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <MX_UART4_Init+0x4c>)
 80087d6:	220c      	movs	r2, #12
 80087d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087da:	4b08      	ldr	r3, [pc, #32]	; (80087fc <MX_UART4_Init+0x4c>)
 80087dc:	2200      	movs	r2, #0
 80087de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80087e0:	4b06      	ldr	r3, [pc, #24]	; (80087fc <MX_UART4_Init+0x4c>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80087e6:	4805      	ldr	r0, [pc, #20]	; (80087fc <MX_UART4_Init+0x4c>)
 80087e8:	f7fc f968 	bl	8004abc <HAL_UART_Init>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80087f2:	f7ff fddf 	bl	80083b4 <Error_Handler>
  }

}
 80087f6:	bf00      	nop
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	200008f8 	.word	0x200008f8
 8008800:	40004c00 	.word	0x40004c00

08008804 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8008808:	4b11      	ldr	r3, [pc, #68]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 800880a:	4a12      	ldr	r2, [pc, #72]	; (8008854 <MX_USART6_UART_Init+0x50>)
 800880c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800880e:	4b10      	ldr	r3, [pc, #64]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 8008810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008814:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008816:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 8008818:	2200      	movs	r2, #0
 800881a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800881c:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 800881e:	2200      	movs	r2, #0
 8008820:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 8008824:	2200      	movs	r2, #0
 8008826:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008828:	4b09      	ldr	r3, [pc, #36]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 800882a:	220c      	movs	r2, #12
 800882c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800882e:	4b08      	ldr	r3, [pc, #32]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 8008830:	2200      	movs	r2, #0
 8008832:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 8008836:	2200      	movs	r2, #0
 8008838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800883a:	4805      	ldr	r0, [pc, #20]	; (8008850 <MX_USART6_UART_Init+0x4c>)
 800883c:	f7fc f93e 	bl	8004abc <HAL_UART_Init>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8008846:	f7ff fdb5 	bl	80083b4 <Error_Handler>
  }

}
 800884a:	bf00      	nop
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	200008b8 	.word	0x200008b8
 8008854:	40011400 	.word	0x40011400

08008858 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	; 0x28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a2c      	ldr	r2, [pc, #176]	; (8008918 <HAL_UART_MspInit+0xc0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d127      	bne.n	80088ba <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800886a:	2300      	movs	r3, #0
 800886c:	613b      	str	r3, [r7, #16]
 800886e:	4a2b      	ldr	r2, [pc, #172]	; (800891c <HAL_UART_MspInit+0xc4>)
 8008870:	4b2a      	ldr	r3, [pc, #168]	; (800891c <HAL_UART_MspInit+0xc4>)
 8008872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008878:	6413      	str	r3, [r2, #64]	; 0x40
 800887a:	4b28      	ldr	r3, [pc, #160]	; (800891c <HAL_UART_MspInit+0xc4>)
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = CommunicationUART_TX_Pin|CommunicationUART_RX_Pin;
 8008886:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800888a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888c:	2302      	movs	r3, #2
 800888e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008890:	2301      	movs	r3, #1
 8008892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008894:	2303      	movs	r3, #3
 8008896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008898:	2308      	movs	r3, #8
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800889c:	f107 0314 	add.w	r3, r7, #20
 80088a0:	4619      	mov	r1, r3
 80088a2:	481f      	ldr	r0, [pc, #124]	; (8008920 <HAL_UART_MspInit+0xc8>)
 80088a4:	f7f8 fcd6 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	2034      	movs	r0, #52	; 0x34
 80088ae:	f7f8 fc4f 	bl	8001150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80088b2:	2034      	movs	r0, #52	; 0x34
 80088b4:	f7f8 fc68 	bl	8001188 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80088b8:	e02a      	b.n	8008910 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a19      	ldr	r2, [pc, #100]	; (8008924 <HAL_UART_MspInit+0xcc>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d125      	bne.n	8008910 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	4a14      	ldr	r2, [pc, #80]	; (800891c <HAL_UART_MspInit+0xc4>)
 80088ca:	4b14      	ldr	r3, [pc, #80]	; (800891c <HAL_UART_MspInit+0xc4>)
 80088cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ce:	f043 0320 	orr.w	r3, r3, #32
 80088d2:	6453      	str	r3, [r2, #68]	; 0x44
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <HAL_UART_MspInit+0xc4>)
 80088d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
  
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = SIM808_USART_TX_Pin|SIM808_USART_RX_Pin;
 80088e0:	23c0      	movs	r3, #192	; 0xc0
 80088e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088e4:	2302      	movs	r3, #2
 80088e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088e8:	2301      	movs	r3, #1
 80088ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ec:	2303      	movs	r3, #3
 80088ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80088f0:	2308      	movs	r3, #8
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088f4:	f107 0314 	add.w	r3, r7, #20
 80088f8:	4619      	mov	r1, r3
 80088fa:	4809      	ldr	r0, [pc, #36]	; (8008920 <HAL_UART_MspInit+0xc8>)
 80088fc:	f7f8 fcaa 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008900:	2200      	movs	r2, #0
 8008902:	2100      	movs	r1, #0
 8008904:	2047      	movs	r0, #71	; 0x47
 8008906:	f7f8 fc23 	bl	8001150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800890a:	2047      	movs	r0, #71	; 0x47
 800890c:	f7f8 fc3c 	bl	8001188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008910:	bf00      	nop
 8008912:	3728      	adds	r7, #40	; 0x28
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	40004c00 	.word	0x40004c00
 800891c:	40023800 	.word	0x40023800
 8008920:	40020800 	.word	0x40020800
 8008924:	40011400 	.word	0x40011400

08008928 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800892c:	2200      	movs	r2, #0
 800892e:	4908      	ldr	r1, [pc, #32]	; (8008950 <MX_USB_DEVICE_Init+0x28>)
 8008930:	4808      	ldr	r0, [pc, #32]	; (8008954 <MX_USB_DEVICE_Init+0x2c>)
 8008932:	f7fe fa21 	bl	8006d78 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8008936:	4908      	ldr	r1, [pc, #32]	; (8008958 <MX_USB_DEVICE_Init+0x30>)
 8008938:	4806      	ldr	r0, [pc, #24]	; (8008954 <MX_USB_DEVICE_Init+0x2c>)
 800893a:	f7fe fa49 	bl	8006dd0 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800893e:	4907      	ldr	r1, [pc, #28]	; (800895c <MX_USB_DEVICE_Init+0x34>)
 8008940:	4804      	ldr	r0, [pc, #16]	; (8008954 <MX_USB_DEVICE_Init+0x2c>)
 8008942:	f7fe f9a9 	bl	8006c98 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8008946:	4803      	ldr	r0, [pc, #12]	; (8008954 <MX_USB_DEVICE_Init+0x2c>)
 8008948:	f7fe fa5c 	bl	8006e04 <USBD_Start>

}
 800894c:	bf00      	nop
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20000140 	.word	0x20000140
 8008954:	20000938 	.word	0x20000938
 8008958:	2000000c 	.word	0x2000000c
 800895c:	20000130 	.word	0x20000130

08008960 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8008960:	b580      	push	{r7, lr}
 8008962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008964:	2200      	movs	r2, #0
 8008966:	4905      	ldr	r1, [pc, #20]	; (800897c <CDC_Init_FS+0x1c>)
 8008968:	4805      	ldr	r0, [pc, #20]	; (8008980 <CDC_Init_FS+0x20>)
 800896a:	f7fe f9ad 	bl	8006cc8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800896e:	4905      	ldr	r1, [pc, #20]	; (8008984 <CDC_Init_FS+0x24>)
 8008970:	4803      	ldr	r0, [pc, #12]	; (8008980 <CDC_Init_FS+0x20>)
 8008972:	f7fe f9c3 	bl	8006cfc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008976:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8008978:	4618      	mov	r0, r3
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20000b90 	.word	0x20000b90
 8008980:	20000938 	.word	0x20000938
 8008984:	20000b5c 	.word	0x20000b5c

08008988 <CDC_DeInit_FS>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008988:	b480      	push	{r7}
 800898a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 800898c:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 800898e:	4618      	mov	r0, r3
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
 80089a4:	4613      	mov	r3, r2
 80089a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	2b23      	cmp	r3, #35	; 0x23
 80089ac:	d84a      	bhi.n	8008a44 <CDC_Control_FS+0xac>
 80089ae:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <CDC_Control_FS+0x1c>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	08008a45 	.word	0x08008a45
 80089b8:	08008a45 	.word	0x08008a45
 80089bc:	08008a45 	.word	0x08008a45
 80089c0:	08008a45 	.word	0x08008a45
 80089c4:	08008a45 	.word	0x08008a45
 80089c8:	08008a45 	.word	0x08008a45
 80089cc:	08008a45 	.word	0x08008a45
 80089d0:	08008a45 	.word	0x08008a45
 80089d4:	08008a45 	.word	0x08008a45
 80089d8:	08008a45 	.word	0x08008a45
 80089dc:	08008a45 	.word	0x08008a45
 80089e0:	08008a45 	.word	0x08008a45
 80089e4:	08008a45 	.word	0x08008a45
 80089e8:	08008a45 	.word	0x08008a45
 80089ec:	08008a45 	.word	0x08008a45
 80089f0:	08008a45 	.word	0x08008a45
 80089f4:	08008a45 	.word	0x08008a45
 80089f8:	08008a45 	.word	0x08008a45
 80089fc:	08008a45 	.word	0x08008a45
 8008a00:	08008a45 	.word	0x08008a45
 8008a04:	08008a45 	.word	0x08008a45
 8008a08:	08008a45 	.word	0x08008a45
 8008a0c:	08008a45 	.word	0x08008a45
 8008a10:	08008a45 	.word	0x08008a45
 8008a14:	08008a45 	.word	0x08008a45
 8008a18:	08008a45 	.word	0x08008a45
 8008a1c:	08008a45 	.word	0x08008a45
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a45 	.word	0x08008a45
 8008a28:	08008a45 	.word	0x08008a45
 8008a2c:	08008a45 	.word	0x08008a45
 8008a30:	08008a45 	.word	0x08008a45
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a45 	.word	0x08008a45
 8008a3c:	08008a45 	.word	0x08008a45
 8008a40:	08008a45 	.word	0x08008a45
  case CDC_SEND_BREAK:
 
    break;    
    
  default:
    break;
 8008a44:	bf00      	nop
  }

  return (USBD_OK);
 8008a46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	4811      	ldr	r0, [pc, #68]	; (8008aa8 <CDC_Receive_FS+0x54>)
 8008a62:	f7fe f94b 	bl	8006cfc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a66:	4810      	ldr	r0, [pc, #64]	; (8008aa8 <CDC_Receive_FS+0x54>)
 8008a68:	f7fe f95c 	bl	8006d24 <USBD_CDC_ReceivePacket>

  extern uint8_t g_ReceivedDataBuffer[APP_RX_DATA_SIZE];
  extern uint8_t g_USBRcvCpltFlag;

  for(uint8_t i=0; i<APP_RX_DATA_SIZE;++i)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
 8008a70:	e006      	b.n	8008a80 <CDC_Receive_FS+0x2c>
	  g_ReceivedDataBuffer[i]=0;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	4a0d      	ldr	r2, [pc, #52]	; (8008aac <CDC_Receive_FS+0x58>)
 8008a76:	2100      	movs	r1, #0
 8008a78:	54d1      	strb	r1, [r2, r3]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);

  extern uint8_t g_ReceivedDataBuffer[APP_RX_DATA_SIZE];
  extern uint8_t g_USBRcvCpltFlag;

  for(uint8_t i=0; i<APP_RX_DATA_SIZE;++i)
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b31      	cmp	r3, #49	; 0x31
 8008a84:	d9f5      	bls.n	8008a72 <CDC_Receive_FS+0x1e>
	  g_ReceivedDataBuffer[i]=0;

  strlcpy(g_ReceivedDataBuffer,Buf,(*Len)+1);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	4806      	ldr	r0, [pc, #24]	; (8008aac <CDC_Receive_FS+0x58>)
 8008a92:	f000 fef3 	bl	800987c <strlcpy>
  g_USBRcvCpltFlag=1;
 8008a96:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <CDC_Receive_FS+0x5c>)
 8008a98:	2201      	movs	r2, #1
 8008a9a:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8008a9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20000938 	.word	0x20000938
 8008aac:	20000794 	.word	0x20000794
 8008ab0:	200007c6 	.word	0x200007c6

08008ab4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ac4:	d12c      	bne.n	8008b20 <HAL_PCD_MspInit+0x6c>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008acc:	2302      	movs	r3, #2
 8008ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ad8:	230a      	movs	r3, #10
 8008ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008adc:	f107 030c 	add.w	r3, r7, #12
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4811      	ldr	r0, [pc, #68]	; (8008b28 <HAL_PCD_MspInit+0x74>)
 8008ae4:	f7f8 fbb6 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ae8:	4a10      	ldr	r2, [pc, #64]	; (8008b2c <HAL_PCD_MspInit+0x78>)
 8008aea:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <HAL_PCD_MspInit+0x78>)
 8008aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af2:	6353      	str	r3, [r2, #52]	; 0x34
 8008af4:	2300      	movs	r3, #0
 8008af6:	60bb      	str	r3, [r7, #8]
 8008af8:	4a0c      	ldr	r2, [pc, #48]	; (8008b2c <HAL_PCD_MspInit+0x78>)
 8008afa:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <HAL_PCD_MspInit+0x78>)
 8008afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b02:	6453      	str	r3, [r2, #68]	; 0x44
 8008b04:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <HAL_PCD_MspInit+0x78>)
 8008b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b0c:	60bb      	str	r3, [r7, #8]
 8008b0e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b10:	2200      	movs	r2, #0
 8008b12:	2100      	movs	r1, #0
 8008b14:	2043      	movs	r0, #67	; 0x43
 8008b16:	f7f8 fb1b 	bl	8001150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b1a:	2043      	movs	r0, #67	; 0x43
 8008b1c:	f7f8 fb34 	bl	8001188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b20:	bf00      	nop
 8008b22:	3720      	adds	r7, #32
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	40020000 	.word	0x40020000
 8008b2c:	40023800 	.word	0x40023800

08008b30 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8008b44:	4619      	mov	r1, r3
 8008b46:	4610      	mov	r0, r2
 8008b48:	f7fe f9a8 	bl	8006e9c <USBD_LL_SetupStage>
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	440b      	add	r3, r1
 8008b74:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	f7fe f9d7 	bl	8006f30 <USBD_LL_DataOutStage>
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop

08008b8c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	3344      	adds	r3, #68	; 0x44
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	f7fe fa18 	bl	8006fe8 <USBD_LL_DataInStage>
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe fb02 	bl	80071d8 <USBD_LL_SOF>
}
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008be4:	2301      	movs	r3, #1
 8008be6:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <HAL_PCD_ResetCallback+0x1a>
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d003      	beq.n	8008bfc <HAL_PCD_ResetCallback+0x20>
 8008bf4:	e005      	b.n	8008c02 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfa:	e005      	b.n	8008c08 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008c00:	e002      	b.n	8008c08 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;    
 8008c02:	2301      	movs	r3, #1
 8008c04:	73fb      	strb	r3, [r7, #15]
    break;    
 8008c06:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008c0e:	7bfa      	ldrb	r2, [r7, #15]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe faa8 	bl	8007168 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fe fa72 	bl	8007108 <USBD_LL_Reset>
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe faa4 	bl	8007188 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c48:	461a      	mov	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f043 0301 	orr.w	r3, r3, #1
 8008c58:	6013      	str	r3, [r2, #0]
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d005      	beq.n	8008c6e <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c62:	4a05      	ldr	r2, [pc, #20]	; (8008c78 <HAL_PCD_SuspendCallback+0x4c>)
 8008c64:	4b04      	ldr	r3, [pc, #16]	; (8008c78 <HAL_PCD_SuspendCallback+0x4c>)
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	f043 0306 	orr.w	r3, r3, #6
 8008c6c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	e000ed00 	.word	0xe000ed00

08008c7c <HAL_PCD_ResumeCallback>:
    When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fa92 	bl	80071b4 <USBD_LL_Resume>
  
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008caa:	78fa      	ldrb	r2, [r7, #3]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe faba 	bl	8007228 <USBD_LL_IsoOUTIncomplete>
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008cce:	78fa      	ldrb	r2, [r7, #3]
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fa9a 	bl	800720c <USBD_LL_IsoINIncomplete>
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe faa8 	bl	8007244 <USBD_LL_DevConnected>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe faa6 	bl	800725c <USBD_LL_DevDisconnected>
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d13f      	bne.n	8008da8 <USBD_LL_Init+0x90>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8008d28:	4a22      	ldr	r2, [pc, #136]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a20      	ldr	r2, [pc, #128]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d34:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d38:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d40:	4b1c      	ldr	r3, [pc, #112]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d42:	2204      	movs	r2, #4
 8008d44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d46:	4b1b      	ldr	r3, [pc, #108]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d48:	2202      	movs	r2, #2
 8008d4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d4c:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8008d52:	4b18      	ldr	r3, [pc, #96]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d58:	4b16      	ldr	r3, [pc, #88]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d5e:	4b15      	ldr	r3, [pc, #84]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d64:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d6a:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008d70:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d72:	2201      	movs	r2, #1
 8008d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d76:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d7c:	480d      	ldr	r0, [pc, #52]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d7e:	f7f9 fb59 	bl	8002434 <HAL_PCD_Init>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <USBD_LL_Init+0x74>
  {
    Error_Handler();
 8008d88:	f7ff fb14 	bl	80083b4 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d8c:	2180      	movs	r1, #128	; 0x80
 8008d8e:	4809      	ldr	r0, [pc, #36]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d90:	f7fa fbf0 	bl	8003574 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d94:	2240      	movs	r2, #64	; 0x40
 8008d96:	2100      	movs	r1, #0
 8008d98:	4806      	ldr	r0, [pc, #24]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008d9a:	f7fa fb9f 	bl	80034dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d9e:	2280      	movs	r2, #128	; 0x80
 8008da0:	2101      	movs	r1, #1
 8008da2:	4804      	ldr	r0, [pc, #16]	; (8008db4 <USBD_LL_Init+0x9c>)
 8008da4:	f7fa fb9a 	bl	80034dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20000bc4 	.word	0x20000bc4

08008db8 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7f9 fc38 	bl	8002644 <HAL_PCD_Start>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d816      	bhi.n	8008e0c <USBD_LL_Start+0x54>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USBD_LL_Start+0x2c>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008dfb 	.word	0x08008dfb
 8008dec:	08008e01 	.word	0x08008e01
 8008df0:	08008e07 	.word	0x08008e07
    case HAL_OK :
      usb_status = USBD_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]
    break;
 8008df8:	e00b      	b.n	8008e12 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfe:	e008      	b.n	8008e12 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
    break;
 8008e04:	e005      	b.n	8008e12 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e06:	2302      	movs	r3, #2
 8008e08:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0a:	e002      	b.n	8008e12 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e10:	bf00      	nop
  }
  return usb_status;  
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	4608      	mov	r0, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	70fb      	strb	r3, [r7, #3]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70bb      	strb	r3, [r7, #2]
 8008e32:	4613      	mov	r3, r2
 8008e34:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8008e44:	78bb      	ldrb	r3, [r7, #2]
 8008e46:	883a      	ldrh	r2, [r7, #0]
 8008e48:	78f9      	ldrb	r1, [r7, #3]
 8008e4a:	f7fa f8bd 	bl	8002fc8 <HAL_PCD_EP_Open>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73bb      	strb	r3, [r7, #14]
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d817      	bhi.n	8008e88 <USBD_LL_OpenEP+0x6c>
 8008e58:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <USBD_LL_OpenEP+0x44>)
 8008e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5e:	bf00      	nop
 8008e60:	08008e71 	.word	0x08008e71
 8008e64:	08008e77 	.word	0x08008e77
 8008e68:	08008e7d 	.word	0x08008e7d
 8008e6c:	08008e83 	.word	0x08008e83
    case HAL_OK :
      usb_status = USBD_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
    break;
 8008e74:	e00b      	b.n	8008e8e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e76:	2302      	movs	r3, #2
 8008e78:	73fb      	strb	r3, [r7, #15]
    break;
 8008e7a:	e008      	b.n	8008e8e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e80:	e005      	b.n	8008e8e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e82:	2302      	movs	r3, #2
 8008e84:	73fb      	strb	r3, [r7, #15]
    break;
 8008e86:	e002      	b.n	8008e8e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008e88:	2302      	movs	r3, #2
 8008e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e8c:	bf00      	nop
  }
  return usb_status; 
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008eb2:	78fa      	ldrb	r2, [r7, #3]
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fa f8ee 	bl	8003098 <HAL_PCD_EP_Close>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d816      	bhi.n	8008ef4 <USBD_LL_CloseEP+0x5c>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <USBD_LL_CloseEP+0x34>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008edd 	.word	0x08008edd
 8008ed0:	08008ee3 	.word	0x08008ee3
 8008ed4:	08008ee9 	.word	0x08008ee9
 8008ed8:	08008eef 	.word	0x08008eef
    case HAL_OK :
      usb_status = USBD_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee0:	e00b      	b.n	8008efa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee6:	e008      	b.n	8008efa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	73fb      	strb	r3, [r7, #15]
    break;
 8008eec:	e005      	b.n	8008efa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eee:	2302      	movs	r3, #2
 8008ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef2:	e002      	b.n	8008efa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef8:	bf00      	nop
  }
  return usb_status;  
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008f1e:	78fa      	ldrb	r2, [r7, #3]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fa f9b0 	bl	8003288 <HAL_PCD_EP_SetStall>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d816      	bhi.n	8008f60 <USBD_LL_StallEP+0x5c>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <USBD_LL_StallEP+0x34>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008f4f 	.word	0x08008f4f
 8008f40:	08008f55 	.word	0x08008f55
 8008f44:	08008f5b 	.word	0x08008f5b
    case HAL_OK :
      usb_status = USBD_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4c:	e00b      	b.n	8008f66 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f4e:	2302      	movs	r3, #2
 8008f50:	73fb      	strb	r3, [r7, #15]
    break;
 8008f52:	e008      	b.n	8008f66 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
    break;
 8008f58:	e005      	b.n	8008f66 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5e:	e002      	b.n	8008f66 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f60:	2302      	movs	r3, #2
 8008f62:	73fb      	strb	r3, [r7, #15]
    break;
 8008f64:	bf00      	nop
  }
  return usb_status;  
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008f8a:	78fa      	ldrb	r2, [r7, #3]
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fa f9d6 	bl	8003340 <HAL_PCD_EP_ClrStall>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d816      	bhi.n	8008fcc <USBD_LL_ClearStallEP+0x5c>
 8008f9e:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <USBD_LL_ClearStallEP+0x34>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fb5 	.word	0x08008fb5
 8008fa8:	08008fbb 	.word	0x08008fbb
 8008fac:	08008fc1 	.word	0x08008fc1
 8008fb0:	08008fc7 	.word	0x08008fc7
    case HAL_OK :
      usb_status = USBD_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb8:	e00b      	b.n	8008fd2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fba:	2302      	movs	r3, #2
 8008fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fbe:	e008      	b.n	8008fd2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc4:	e005      	b.n	8008fd2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fca:	e002      	b.n	8008fd2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd0:	bf00      	nop
  }
  return usb_status; 
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008fee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da0b      	bge.n	8009010 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4613      	mov	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	333a      	adds	r3, #58	; 0x3a
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	e00b      	b.n	8009028 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	4613      	mov	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	440b      	add	r3, r1
 8009022:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8009026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	4611      	mov	r1, r2
 8009052:	4618      	mov	r0, r3
 8009054:	f7f9 ff96 	bl	8002f84 <HAL_PCD_SetAddress>
 8009058:	4603      	mov	r3, r0
 800905a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b03      	cmp	r3, #3
 8009060:	d816      	bhi.n	8009090 <USBD_LL_SetUSBAddress+0x5c>
 8009062:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <USBD_LL_SetUSBAddress+0x34>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	08009079 	.word	0x08009079
 800906c:	0800907f 	.word	0x0800907f
 8009070:	08009085 	.word	0x08009085
 8009074:	0800908b 	.word	0x0800908b
    case HAL_OK :
      usb_status = USBD_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
    break;
 800907c:	e00b      	b.n	8009096 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800907e:	2302      	movs	r3, #2
 8009080:	73fb      	strb	r3, [r7, #15]
    break;
 8009082:	e008      	b.n	8009096 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009084:	2301      	movs	r3, #1
 8009086:	73fb      	strb	r3, [r7, #15]
    break;
 8009088:	e005      	b.n	8009096 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800908a:	2302      	movs	r3, #2
 800908c:	73fb      	strb	r3, [r7, #15]
    break;
 800908e:	e002      	b.n	8009096 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009090:	2302      	movs	r3, #2
 8009092:	73fb      	strb	r3, [r7, #15]
    break;
 8009094:	bf00      	nop
  }
  return usb_status;  
 8009096:	7bfb      	ldrb	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	607a      	str	r2, [r7, #4]
 80090aa:	461a      	mov	r2, r3
 80090ac:	460b      	mov	r3, r1
 80090ae:	72fb      	strb	r3, [r7, #11]
 80090b0:	4613      	mov	r3, r2
 80090b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80090c2:	893b      	ldrh	r3, [r7, #8]
 80090c4:	7af9      	ldrb	r1, [r7, #11]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	f7fa f894 	bl	80031f4 <HAL_PCD_EP_Transmit>
 80090cc:	4603      	mov	r3, r0
 80090ce:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80090d0:	7dbb      	ldrb	r3, [r7, #22]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d816      	bhi.n	8009104 <USBD_LL_Transmit+0x64>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <USBD_LL_Transmit+0x3c>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	080090ed 	.word	0x080090ed
 80090e0:	080090f3 	.word	0x080090f3
 80090e4:	080090f9 	.word	0x080090f9
 80090e8:	080090ff 	.word	0x080090ff
    case HAL_OK :
      usb_status = USBD_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	75fb      	strb	r3, [r7, #23]
    break;
 80090f0:	e00b      	b.n	800910a <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090f2:	2302      	movs	r3, #2
 80090f4:	75fb      	strb	r3, [r7, #23]
    break;
 80090f6:	e008      	b.n	800910a <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090f8:	2301      	movs	r3, #1
 80090fa:	75fb      	strb	r3, [r7, #23]
    break;
 80090fc:	e005      	b.n	800910a <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090fe:	2302      	movs	r3, #2
 8009100:	75fb      	strb	r3, [r7, #23]
    break;
 8009102:	e002      	b.n	800910a <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009104:	2302      	movs	r3, #2
 8009106:	75fb      	strb	r3, [r7, #23]
    break;
 8009108:	bf00      	nop
  }
  return usb_status;    
 800910a:	7dfb      	ldrb	r3, [r7, #23]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	607a      	str	r2, [r7, #4]
 800911e:	461a      	mov	r2, r3
 8009120:	460b      	mov	r3, r1
 8009122:	72fb      	strb	r3, [r7, #11]
 8009124:	4613      	mov	r3, r2
 8009126:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009136:	893b      	ldrh	r3, [r7, #8]
 8009138:	7af9      	ldrb	r1, [r7, #11]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	f7f9 fff6 	bl	800312c <HAL_PCD_EP_Receive>
 8009140:	4603      	mov	r3, r0
 8009142:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009144:	7dbb      	ldrb	r3, [r7, #22]
 8009146:	2b03      	cmp	r3, #3
 8009148:	d816      	bhi.n	8009178 <USBD_LL_PrepareReceive+0x64>
 800914a:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <USBD_LL_PrepareReceive+0x3c>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	08009161 	.word	0x08009161
 8009154:	08009167 	.word	0x08009167
 8009158:	0800916d 	.word	0x0800916d
 800915c:	08009173 	.word	0x08009173
    case HAL_OK :
      usb_status = USBD_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	75fb      	strb	r3, [r7, #23]
    break;
 8009164:	e00b      	b.n	800917e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009166:	2302      	movs	r3, #2
 8009168:	75fb      	strb	r3, [r7, #23]
    break;
 800916a:	e008      	b.n	800917e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800916c:	2301      	movs	r3, #1
 800916e:	75fb      	strb	r3, [r7, #23]
    break;
 8009170:	e005      	b.n	800917e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009172:	2302      	movs	r3, #2
 8009174:	75fb      	strb	r3, [r7, #23]
    break;
 8009176:	e002      	b.n	800917e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009178:	2302      	movs	r3, #2
 800917a:	75fb      	strb	r3, [r7, #23]
    break;
 800917c:	bf00      	nop
  }
  return usb_status; 
 800917e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fa f80e 	bl	80031c0 <HAL_PCD_EP_GetRxCount>
 80091a4:	4603      	mov	r3, r0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop

080091b0 <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2212      	movs	r2, #18
 80091c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091c2:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	2000015c 	.word	0x2000015c

080091d4 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2204      	movs	r2, #4
 80091e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	20000170 	.word	0x20000170

080091f8 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d105      	bne.n	8009216 <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	4907      	ldr	r1, [pc, #28]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
 800920e:	4808      	ldr	r0, [pc, #32]	; (8009230 <USBD_FS_ProductStrDescriptor+0x38>)
 8009210:	f7fe fc42 	bl	8007a98 <USBD_GetString>
 8009214:	e004      	b.n	8009220 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
 800921a:	4805      	ldr	r0, [pc, #20]	; (8009230 <USBD_FS_ProductStrDescriptor+0x38>)
 800921c:	f7fe fc3c 	bl	8007a98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009220:	4b02      	ldr	r3, [pc, #8]	; (800922c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000fb4 	.word	0x20000fb4
 8009230:	0800c27c 	.word	0x0800c27c

08009234 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	4904      	ldr	r1, [pc, #16]	; (8009254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009244:	4804      	ldr	r0, [pc, #16]	; (8009258 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009246:	f7fe fc27 	bl	8007a98 <USBD_GetString>
  return USBD_StrDesc;
 800924a:	4b02      	ldr	r3, [pc, #8]	; (8009254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000fb4 	.word	0x20000fb4
 8009258:	0800c294 	.word	0x0800c294

0800925c <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	6039      	str	r1, [r7, #0]
 8009266:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	4907      	ldr	r1, [pc, #28]	; (8009290 <USBD_FS_SerialStrDescriptor+0x34>)
 8009272:	4808      	ldr	r0, [pc, #32]	; (8009294 <USBD_FS_SerialStrDescriptor+0x38>)
 8009274:	f7fe fc10 	bl	8007a98 <USBD_GetString>
 8009278:	e004      	b.n	8009284 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4904      	ldr	r1, [pc, #16]	; (8009290 <USBD_FS_SerialStrDescriptor+0x34>)
 800927e:	4805      	ldr	r0, [pc, #20]	; (8009294 <USBD_FS_SerialStrDescriptor+0x38>)
 8009280:	f7fe fc0a 	bl	8007a98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009284:	4b02      	ldr	r3, [pc, #8]	; (8009290 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000fb4 	.word	0x20000fb4
 8009294:	0800c2a8 	.word	0x0800c2a8

08009298 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4907      	ldr	r1, [pc, #28]	; (80092cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ae:	4808      	ldr	r0, [pc, #32]	; (80092d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092b0:	f7fe fbf2 	bl	8007a98 <USBD_GetString>
 80092b4:	e004      	b.n	80092c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	4904      	ldr	r1, [pc, #16]	; (80092cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ba:	4805      	ldr	r0, [pc, #20]	; (80092d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092bc:	f7fe fbec 	bl	8007a98 <USBD_GetString>
  }
  return USBD_StrDesc;  
 80092c0:	4b02      	ldr	r3, [pc, #8]	; (80092cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000fb4 	.word	0x20000fb4
 80092d0:	0800c2b8 	.word	0x0800c2b8

080092d4 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	6039      	str	r1, [r7, #0]
 80092de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d105      	bne.n	80092f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	4907      	ldr	r1, [pc, #28]	; (8009308 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ea:	4808      	ldr	r0, [pc, #32]	; (800930c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092ec:	f7fe fbd4 	bl	8007a98 <USBD_GetString>
 80092f0:	e004      	b.n	80092fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4904      	ldr	r1, [pc, #16]	; (8009308 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092f6:	4805      	ldr	r0, [pc, #20]	; (800930c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092f8:	f7fe fbce 	bl	8007a98 <USBD_GetString>
  }
  return USBD_StrDesc;  
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20000fb4 	.word	0x20000fb4
 800930c:	0800c2c4 	.word	0x0800c2c4

08009310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009348 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009316:	e003      	b.n	8009320 <LoopCopyDataInit>

08009318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009318:	4b0c      	ldr	r3, [pc, #48]	; (800934c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800931a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800931c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800931e:	3104      	adds	r1, #4

08009320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009320:	480b      	ldr	r0, [pc, #44]	; (8009350 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009322:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009328:	d3f6      	bcc.n	8009318 <CopyDataInit>
  ldr  r2, =_sbss
 800932a:	4a0b      	ldr	r2, [pc, #44]	; (8009358 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800932c:	e002      	b.n	8009334 <LoopFillZerobss>

0800932e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800932e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009330:	f842 3b04 	str.w	r3, [r2], #4

08009334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009334:	4b09      	ldr	r3, [pc, #36]	; (800935c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009338:	d3f9      	bcc.n	800932e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800933a:	f7ff f95d 	bl	80085f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800933e:	f000 f811 	bl	8009364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009342:	f7fe ff83 	bl	800824c <main>
  bx  lr    
 8009346:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009348:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800934c:	0800c464 	.word	0x0800c464
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009350:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009354:	200006b0 	.word	0x200006b0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8009358:	200006b0 	.word	0x200006b0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800935c:	200011b8 	.word	0x200011b8

08009360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009360:	e7fe      	b.n	8009360 <ADC_IRQHandler>
	...

08009364 <__libc_init_array>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <__libc_init_array+0x3c>)
 8009368:	4c0e      	ldr	r4, [pc, #56]	; (80093a4 <__libc_init_array+0x40>)
 800936a:	1ae4      	subs	r4, r4, r3
 800936c:	10a4      	asrs	r4, r4, #2
 800936e:	2500      	movs	r5, #0
 8009370:	461e      	mov	r6, r3
 8009372:	42a5      	cmp	r5, r4
 8009374:	d004      	beq.n	8009380 <__libc_init_array+0x1c>
 8009376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800937a:	4798      	blx	r3
 800937c:	3501      	adds	r5, #1
 800937e:	e7f8      	b.n	8009372 <__libc_init_array+0xe>
 8009380:	f002 ff2e 	bl	800c1e0 <_init>
 8009384:	4c08      	ldr	r4, [pc, #32]	; (80093a8 <__libc_init_array+0x44>)
 8009386:	4b09      	ldr	r3, [pc, #36]	; (80093ac <__libc_init_array+0x48>)
 8009388:	1ae4      	subs	r4, r4, r3
 800938a:	10a4      	asrs	r4, r4, #2
 800938c:	2500      	movs	r5, #0
 800938e:	461e      	mov	r6, r3
 8009390:	42a5      	cmp	r5, r4
 8009392:	d004      	beq.n	800939e <__libc_init_array+0x3a>
 8009394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009398:	4798      	blx	r3
 800939a:	3501      	adds	r5, #1
 800939c:	e7f8      	b.n	8009390 <__libc_init_array+0x2c>
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	0800c45c 	.word	0x0800c45c
 80093a4:	0800c45c 	.word	0x0800c45c
 80093a8:	0800c460 	.word	0x0800c460
 80093ac:	0800c45c 	.word	0x0800c45c

080093b0 <malloc>:
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <malloc+0xc>)
 80093b2:	4601      	mov	r1, r0
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	f000 b80b 	b.w	80093d0 <_malloc_r>
 80093ba:	bf00      	nop
 80093bc:	20000674 	.word	0x20000674

080093c0 <free>:
 80093c0:	4b02      	ldr	r3, [pc, #8]	; (80093cc <free+0xc>)
 80093c2:	4601      	mov	r1, r0
 80093c4:	6818      	ldr	r0, [r3, #0]
 80093c6:	f002 b8e1 	b.w	800b58c <_free_r>
 80093ca:	bf00      	nop
 80093cc:	20000674 	.word	0x20000674

080093d0 <_malloc_r>:
 80093d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	f101 040b 	add.w	r4, r1, #11
 80093d8:	2c16      	cmp	r4, #22
 80093da:	b085      	sub	sp, #20
 80093dc:	4681      	mov	r9, r0
 80093de:	d903      	bls.n	80093e8 <_malloc_r+0x18>
 80093e0:	f034 0407 	bics.w	r4, r4, #7
 80093e4:	d501      	bpl.n	80093ea <_malloc_r+0x1a>
 80093e6:	e002      	b.n	80093ee <_malloc_r+0x1e>
 80093e8:	2410      	movs	r4, #16
 80093ea:	428c      	cmp	r4, r1
 80093ec:	d203      	bcs.n	80093f6 <_malloc_r+0x26>
 80093ee:	230c      	movs	r3, #12
 80093f0:	f8c9 3000 	str.w	r3, [r9]
 80093f4:	e1ea      	b.n	80097cc <_malloc_r+0x3fc>
 80093f6:	4648      	mov	r0, r9
 80093f8:	f000 fa0a 	bl	8009810 <__malloc_lock>
 80093fc:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009400:	4d9e      	ldr	r5, [pc, #632]	; (800967c <_malloc_r+0x2ac>)
 8009402:	d217      	bcs.n	8009434 <_malloc_r+0x64>
 8009404:	f104 0208 	add.w	r2, r4, #8
 8009408:	442a      	add	r2, r5
 800940a:	f1a2 0108 	sub.w	r1, r2, #8
 800940e:	6856      	ldr	r6, [r2, #4]
 8009410:	428e      	cmp	r6, r1
 8009412:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009416:	d102      	bne.n	800941e <_malloc_r+0x4e>
 8009418:	68d6      	ldr	r6, [r2, #12]
 800941a:	42b2      	cmp	r2, r6
 800941c:	d008      	beq.n	8009430 <_malloc_r+0x60>
 800941e:	6873      	ldr	r3, [r6, #4]
 8009420:	68f2      	ldr	r2, [r6, #12]
 8009422:	68b1      	ldr	r1, [r6, #8]
 8009424:	f023 0303 	bic.w	r3, r3, #3
 8009428:	60ca      	str	r2, [r1, #12]
 800942a:	4433      	add	r3, r6
 800942c:	6091      	str	r1, [r2, #8]
 800942e:	e02f      	b.n	8009490 <_malloc_r+0xc0>
 8009430:	3302      	adds	r3, #2
 8009432:	e03d      	b.n	80094b0 <_malloc_r+0xe0>
 8009434:	0a63      	lsrs	r3, r4, #9
 8009436:	d01a      	beq.n	800946e <_malloc_r+0x9e>
 8009438:	2b04      	cmp	r3, #4
 800943a:	d802      	bhi.n	8009442 <_malloc_r+0x72>
 800943c:	09a3      	lsrs	r3, r4, #6
 800943e:	3338      	adds	r3, #56	; 0x38
 8009440:	e018      	b.n	8009474 <_malloc_r+0xa4>
 8009442:	2b14      	cmp	r3, #20
 8009444:	d801      	bhi.n	800944a <_malloc_r+0x7a>
 8009446:	335b      	adds	r3, #91	; 0x5b
 8009448:	e014      	b.n	8009474 <_malloc_r+0xa4>
 800944a:	2b54      	cmp	r3, #84	; 0x54
 800944c:	d802      	bhi.n	8009454 <_malloc_r+0x84>
 800944e:	0b23      	lsrs	r3, r4, #12
 8009450:	336e      	adds	r3, #110	; 0x6e
 8009452:	e00f      	b.n	8009474 <_malloc_r+0xa4>
 8009454:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009458:	d802      	bhi.n	8009460 <_malloc_r+0x90>
 800945a:	0be3      	lsrs	r3, r4, #15
 800945c:	3377      	adds	r3, #119	; 0x77
 800945e:	e009      	b.n	8009474 <_malloc_r+0xa4>
 8009460:	f240 5254 	movw	r2, #1364	; 0x554
 8009464:	4293      	cmp	r3, r2
 8009466:	d804      	bhi.n	8009472 <_malloc_r+0xa2>
 8009468:	0ca3      	lsrs	r3, r4, #18
 800946a:	337c      	adds	r3, #124	; 0x7c
 800946c:	e002      	b.n	8009474 <_malloc_r+0xa4>
 800946e:	233f      	movs	r3, #63	; 0x3f
 8009470:	e000      	b.n	8009474 <_malloc_r+0xa4>
 8009472:	237e      	movs	r3, #126	; 0x7e
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800947a:	f1a2 0008 	sub.w	r0, r2, #8
 800947e:	6856      	ldr	r6, [r2, #4]
 8009480:	e00c      	b.n	800949c <_malloc_r+0xcc>
 8009482:	2900      	cmp	r1, #0
 8009484:	68f1      	ldr	r1, [r6, #12]
 8009486:	db08      	blt.n	800949a <_malloc_r+0xca>
 8009488:	68b3      	ldr	r3, [r6, #8]
 800948a:	60d9      	str	r1, [r3, #12]
 800948c:	608b      	str	r3, [r1, #8]
 800948e:	18b3      	adds	r3, r6, r2
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	605a      	str	r2, [r3, #4]
 8009498:	e1a3      	b.n	80097e2 <_malloc_r+0x412>
 800949a:	460e      	mov	r6, r1
 800949c:	4286      	cmp	r6, r0
 800949e:	d006      	beq.n	80094ae <_malloc_r+0xde>
 80094a0:	6872      	ldr	r2, [r6, #4]
 80094a2:	f022 0203 	bic.w	r2, r2, #3
 80094a6:	1b11      	subs	r1, r2, r4
 80094a8:	290f      	cmp	r1, #15
 80094aa:	ddea      	ble.n	8009482 <_malloc_r+0xb2>
 80094ac:	3b01      	subs	r3, #1
 80094ae:	3301      	adds	r3, #1
 80094b0:	4a72      	ldr	r2, [pc, #456]	; (800967c <_malloc_r+0x2ac>)
 80094b2:	692e      	ldr	r6, [r5, #16]
 80094b4:	f102 0708 	add.w	r7, r2, #8
 80094b8:	42be      	cmp	r6, r7
 80094ba:	4639      	mov	r1, r7
 80094bc:	d079      	beq.n	80095b2 <_malloc_r+0x1e2>
 80094be:	6870      	ldr	r0, [r6, #4]
 80094c0:	f020 0003 	bic.w	r0, r0, #3
 80094c4:	ebc4 0e00 	rsb	lr, r4, r0
 80094c8:	f1be 0f0f 	cmp.w	lr, #15
 80094cc:	dd0d      	ble.n	80094ea <_malloc_r+0x11a>
 80094ce:	1933      	adds	r3, r6, r4
 80094d0:	f044 0401 	orr.w	r4, r4, #1
 80094d4:	6074      	str	r4, [r6, #4]
 80094d6:	6153      	str	r3, [r2, #20]
 80094d8:	6113      	str	r3, [r2, #16]
 80094da:	f04e 0201 	orr.w	r2, lr, #1
 80094de:	60df      	str	r7, [r3, #12]
 80094e0:	609f      	str	r7, [r3, #8]
 80094e2:	605a      	str	r2, [r3, #4]
 80094e4:	f843 e00e 	str.w	lr, [r3, lr]
 80094e8:	e17b      	b.n	80097e2 <_malloc_r+0x412>
 80094ea:	f1be 0f00 	cmp.w	lr, #0
 80094ee:	6157      	str	r7, [r2, #20]
 80094f0:	6117      	str	r7, [r2, #16]
 80094f2:	db05      	blt.n	8009500 <_malloc_r+0x130>
 80094f4:	4430      	add	r0, r6
 80094f6:	6843      	ldr	r3, [r0, #4]
 80094f8:	f043 0301 	orr.w	r3, r3, #1
 80094fc:	6043      	str	r3, [r0, #4]
 80094fe:	e170      	b.n	80097e2 <_malloc_r+0x412>
 8009500:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009504:	d215      	bcs.n	8009532 <_malloc_r+0x162>
 8009506:	08c0      	lsrs	r0, r0, #3
 8009508:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 800950c:	2701      	movs	r7, #1
 800950e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8009512:	6857      	ldr	r7, [r2, #4]
 8009514:	3001      	adds	r0, #1
 8009516:	ea4e 0707 	orr.w	r7, lr, r7
 800951a:	6057      	str	r7, [r2, #4]
 800951c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8009520:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8009524:	f8c6 e008 	str.w	lr, [r6, #8]
 8009528:	3f08      	subs	r7, #8
 800952a:	60f7      	str	r7, [r6, #12]
 800952c:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8009530:	e03d      	b.n	80095ae <_malloc_r+0x1de>
 8009532:	0a42      	lsrs	r2, r0, #9
 8009534:	2a04      	cmp	r2, #4
 8009536:	d802      	bhi.n	800953e <_malloc_r+0x16e>
 8009538:	0982      	lsrs	r2, r0, #6
 800953a:	3238      	adds	r2, #56	; 0x38
 800953c:	e015      	b.n	800956a <_malloc_r+0x19a>
 800953e:	2a14      	cmp	r2, #20
 8009540:	d801      	bhi.n	8009546 <_malloc_r+0x176>
 8009542:	325b      	adds	r2, #91	; 0x5b
 8009544:	e011      	b.n	800956a <_malloc_r+0x19a>
 8009546:	2a54      	cmp	r2, #84	; 0x54
 8009548:	d802      	bhi.n	8009550 <_malloc_r+0x180>
 800954a:	0b02      	lsrs	r2, r0, #12
 800954c:	326e      	adds	r2, #110	; 0x6e
 800954e:	e00c      	b.n	800956a <_malloc_r+0x19a>
 8009550:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009554:	d802      	bhi.n	800955c <_malloc_r+0x18c>
 8009556:	0bc2      	lsrs	r2, r0, #15
 8009558:	3277      	adds	r2, #119	; 0x77
 800955a:	e006      	b.n	800956a <_malloc_r+0x19a>
 800955c:	f240 5754 	movw	r7, #1364	; 0x554
 8009560:	42ba      	cmp	r2, r7
 8009562:	bf9a      	itte	ls
 8009564:	0c82      	lsrls	r2, r0, #18
 8009566:	327c      	addls	r2, #124	; 0x7c
 8009568:	227e      	movhi	r2, #126	; 0x7e
 800956a:	1c57      	adds	r7, r2, #1
 800956c:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009570:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009574:	f8df c104 	ldr.w	ip, [pc, #260]	; 800967c <_malloc_r+0x2ac>
 8009578:	45be      	cmp	lr, r7
 800957a:	d10d      	bne.n	8009598 <_malloc_r+0x1c8>
 800957c:	2001      	movs	r0, #1
 800957e:	1092      	asrs	r2, r2, #2
 8009580:	fa00 f202 	lsl.w	r2, r0, r2
 8009584:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8009588:	4310      	orrs	r0, r2
 800958a:	f8cc 0004 	str.w	r0, [ip, #4]
 800958e:	4672      	mov	r2, lr
 8009590:	e009      	b.n	80095a6 <_malloc_r+0x1d6>
 8009592:	68bf      	ldr	r7, [r7, #8]
 8009594:	45be      	cmp	lr, r7
 8009596:	d004      	beq.n	80095a2 <_malloc_r+0x1d2>
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	f022 0203 	bic.w	r2, r2, #3
 800959e:	4290      	cmp	r0, r2
 80095a0:	d3f7      	bcc.n	8009592 <_malloc_r+0x1c2>
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	46be      	mov	lr, r7
 80095a6:	60f2      	str	r2, [r6, #12]
 80095a8:	f8c6 e008 	str.w	lr, [r6, #8]
 80095ac:	6096      	str	r6, [r2, #8]
 80095ae:	f8ce 600c 	str.w	r6, [lr, #12]
 80095b2:	2001      	movs	r0, #1
 80095b4:	109a      	asrs	r2, r3, #2
 80095b6:	fa00 f202 	lsl.w	r2, r0, r2
 80095ba:	6868      	ldr	r0, [r5, #4]
 80095bc:	4282      	cmp	r2, r0
 80095be:	d85f      	bhi.n	8009680 <_malloc_r+0x2b0>
 80095c0:	4202      	tst	r2, r0
 80095c2:	d106      	bne.n	80095d2 <_malloc_r+0x202>
 80095c4:	f023 0303 	bic.w	r3, r3, #3
 80095c8:	0052      	lsls	r2, r2, #1
 80095ca:	4202      	tst	r2, r0
 80095cc:	f103 0304 	add.w	r3, r3, #4
 80095d0:	d0fa      	beq.n	80095c8 <_malloc_r+0x1f8>
 80095d2:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80095d6:	46c2      	mov	sl, r8
 80095d8:	469c      	mov	ip, r3
 80095da:	f8da 600c 	ldr.w	r6, [sl, #12]
 80095de:	4556      	cmp	r6, sl
 80095e0:	d02c      	beq.n	800963c <_malloc_r+0x26c>
 80095e2:	6870      	ldr	r0, [r6, #4]
 80095e4:	68f7      	ldr	r7, [r6, #12]
 80095e6:	f020 0003 	bic.w	r0, r0, #3
 80095ea:	ebc4 0e00 	rsb	lr, r4, r0
 80095ee:	f1be 0f0f 	cmp.w	lr, #15
 80095f2:	dd11      	ble.n	8009618 <_malloc_r+0x248>
 80095f4:	1933      	adds	r3, r6, r4
 80095f6:	f044 0401 	orr.w	r4, r4, #1
 80095fa:	6074      	str	r4, [r6, #4]
 80095fc:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8009600:	60d7      	str	r7, [r2, #12]
 8009602:	60ba      	str	r2, [r7, #8]
 8009604:	f04e 0201 	orr.w	r2, lr, #1
 8009608:	616b      	str	r3, [r5, #20]
 800960a:	612b      	str	r3, [r5, #16]
 800960c:	60d9      	str	r1, [r3, #12]
 800960e:	6099      	str	r1, [r3, #8]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	f843 e00e 	str.w	lr, [r3, lr]
 8009616:	e00b      	b.n	8009630 <_malloc_r+0x260>
 8009618:	f1be 0f00 	cmp.w	lr, #0
 800961c:	db0c      	blt.n	8009638 <_malloc_r+0x268>
 800961e:	1833      	adds	r3, r6, r0
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	f042 0201 	orr.w	r2, r2, #1
 8009626:	605a      	str	r2, [r3, #4]
 8009628:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800962c:	60df      	str	r7, [r3, #12]
 800962e:	60bb      	str	r3, [r7, #8]
 8009630:	4648      	mov	r0, r9
 8009632:	f000 f8ee 	bl	8009812 <__malloc_unlock>
 8009636:	e0d8      	b.n	80097ea <_malloc_r+0x41a>
 8009638:	463e      	mov	r6, r7
 800963a:	e7d0      	b.n	80095de <_malloc_r+0x20e>
 800963c:	f10c 0c01 	add.w	ip, ip, #1
 8009640:	f01c 0f03 	tst.w	ip, #3
 8009644:	f10a 0a08 	add.w	sl, sl, #8
 8009648:	d1c7      	bne.n	80095da <_malloc_r+0x20a>
 800964a:	0798      	lsls	r0, r3, #30
 800964c:	d104      	bne.n	8009658 <_malloc_r+0x288>
 800964e:	686b      	ldr	r3, [r5, #4]
 8009650:	ea23 0302 	bic.w	r3, r3, r2
 8009654:	606b      	str	r3, [r5, #4]
 8009656:	e005      	b.n	8009664 <_malloc_r+0x294>
 8009658:	f858 0908 	ldr.w	r0, [r8], #-8
 800965c:	4580      	cmp	r8, r0
 800965e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009662:	d0f2      	beq.n	800964a <_malloc_r+0x27a>
 8009664:	6868      	ldr	r0, [r5, #4]
 8009666:	0052      	lsls	r2, r2, #1
 8009668:	4282      	cmp	r2, r0
 800966a:	d809      	bhi.n	8009680 <_malloc_r+0x2b0>
 800966c:	b142      	cbz	r2, 8009680 <_malloc_r+0x2b0>
 800966e:	4663      	mov	r3, ip
 8009670:	4202      	tst	r2, r0
 8009672:	d1ae      	bne.n	80095d2 <_malloc_r+0x202>
 8009674:	3304      	adds	r3, #4
 8009676:	0052      	lsls	r2, r2, #1
 8009678:	e7fa      	b.n	8009670 <_malloc_r+0x2a0>
 800967a:	bf00      	nop
 800967c:	20000174 	.word	0x20000174
 8009680:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009684:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009688:	f026 0603 	bic.w	r6, r6, #3
 800968c:	42b4      	cmp	r4, r6
 800968e:	d803      	bhi.n	8009698 <_malloc_r+0x2c8>
 8009690:	1b33      	subs	r3, r6, r4
 8009692:	2b0f      	cmp	r3, #15
 8009694:	f300 809c 	bgt.w	80097d0 <_malloc_r+0x400>
 8009698:	4a56      	ldr	r2, [pc, #344]	; (80097f4 <_malloc_r+0x424>)
 800969a:	4957      	ldr	r1, [pc, #348]	; (80097f8 <_malloc_r+0x428>)
 800969c:	6812      	ldr	r2, [r2, #0]
 800969e:	6808      	ldr	r0, [r1, #0]
 80096a0:	9101      	str	r1, [sp, #4]
 80096a2:	f102 0810 	add.w	r8, r2, #16
 80096a6:	4a55      	ldr	r2, [pc, #340]	; (80097fc <_malloc_r+0x42c>)
 80096a8:	9203      	str	r2, [sp, #12]
 80096aa:	3001      	adds	r0, #1
 80096ac:	bf18      	it	ne
 80096ae:	f102 31ff 	addne.w	r1, r2, #4294967295
 80096b2:	44a0      	add	r8, r4
 80096b4:	bf1e      	ittt	ne
 80096b6:	4488      	addne	r8, r1
 80096b8:	4251      	negne	r1, r2
 80096ba:	ea01 0808 	andne.w	r8, r1, r8
 80096be:	eb0b 0306 	add.w	r3, fp, r6
 80096c2:	4641      	mov	r1, r8
 80096c4:	4648      	mov	r0, r9
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	f000 f8a4 	bl	8009814 <_sbrk_r>
 80096cc:	1c42      	adds	r2, r0, #1
 80096ce:	4607      	mov	r7, r0
 80096d0:	d06f      	beq.n	80097b2 <_malloc_r+0x3e2>
 80096d2:	9b02      	ldr	r3, [sp, #8]
 80096d4:	9a03      	ldr	r2, [sp, #12]
 80096d6:	4283      	cmp	r3, r0
 80096d8:	d901      	bls.n	80096de <_malloc_r+0x30e>
 80096da:	45ab      	cmp	fp, r5
 80096dc:	d169      	bne.n	80097b2 <_malloc_r+0x3e2>
 80096de:	f8df a128 	ldr.w	sl, [pc, #296]	; 8009808 <_malloc_r+0x438>
 80096e2:	f8df c128 	ldr.w	ip, [pc, #296]	; 800980c <_malloc_r+0x43c>
 80096e6:	f8da 0000 	ldr.w	r0, [sl]
 80096ea:	42bb      	cmp	r3, r7
 80096ec:	4440      	add	r0, r8
 80096ee:	f8ca 0000 	str.w	r0, [sl]
 80096f2:	d108      	bne.n	8009706 <_malloc_r+0x336>
 80096f4:	ea13 0f0c 	tst.w	r3, ip
 80096f8:	d105      	bne.n	8009706 <_malloc_r+0x336>
 80096fa:	68ab      	ldr	r3, [r5, #8]
 80096fc:	4446      	add	r6, r8
 80096fe:	f046 0601 	orr.w	r6, r6, #1
 8009702:	605e      	str	r6, [r3, #4]
 8009704:	e049      	b.n	800979a <_malloc_r+0x3ca>
 8009706:	9901      	ldr	r1, [sp, #4]
 8009708:	f8d1 e000 	ldr.w	lr, [r1]
 800970c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009710:	bf15      	itete	ne
 8009712:	1afb      	subne	r3, r7, r3
 8009714:	4b38      	ldreq	r3, [pc, #224]	; (80097f8 <_malloc_r+0x428>)
 8009716:	181b      	addne	r3, r3, r0
 8009718:	601f      	streq	r7, [r3, #0]
 800971a:	bf18      	it	ne
 800971c:	f8ca 3000 	strne.w	r3, [sl]
 8009720:	f017 0307 	ands.w	r3, r7, #7
 8009724:	bf1c      	itt	ne
 8009726:	f1c3 0308 	rsbne	r3, r3, #8
 800972a:	18ff      	addne	r7, r7, r3
 800972c:	44b8      	add	r8, r7
 800972e:	441a      	add	r2, r3
 8009730:	ea08 080c 	and.w	r8, r8, ip
 8009734:	ebc8 0802 	rsb	r8, r8, r2
 8009738:	4641      	mov	r1, r8
 800973a:	4648      	mov	r0, r9
 800973c:	f000 f86a 	bl	8009814 <_sbrk_r>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	bf04      	itt	eq
 8009744:	4638      	moveq	r0, r7
 8009746:	f04f 0800 	moveq.w	r8, #0
 800974a:	f8da 3000 	ldr.w	r3, [sl]
 800974e:	60af      	str	r7, [r5, #8]
 8009750:	1bc2      	subs	r2, r0, r7
 8009752:	4442      	add	r2, r8
 8009754:	4443      	add	r3, r8
 8009756:	f042 0201 	orr.w	r2, r2, #1
 800975a:	45ab      	cmp	fp, r5
 800975c:	f8ca 3000 	str.w	r3, [sl]
 8009760:	607a      	str	r2, [r7, #4]
 8009762:	d01a      	beq.n	800979a <_malloc_r+0x3ca>
 8009764:	2e0f      	cmp	r6, #15
 8009766:	d802      	bhi.n	800976e <_malloc_r+0x39e>
 8009768:	2301      	movs	r3, #1
 800976a:	607b      	str	r3, [r7, #4]
 800976c:	e021      	b.n	80097b2 <_malloc_r+0x3e2>
 800976e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009772:	3e0c      	subs	r6, #12
 8009774:	f026 0607 	bic.w	r6, r6, #7
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	4333      	orrs	r3, r6
 800977e:	f8cb 3004 	str.w	r3, [fp, #4]
 8009782:	eb0b 0306 	add.w	r3, fp, r6
 8009786:	2205      	movs	r2, #5
 8009788:	2e0f      	cmp	r6, #15
 800978a:	605a      	str	r2, [r3, #4]
 800978c:	609a      	str	r2, [r3, #8]
 800978e:	d904      	bls.n	800979a <_malloc_r+0x3ca>
 8009790:	f10b 0108 	add.w	r1, fp, #8
 8009794:	4648      	mov	r0, r9
 8009796:	f001 fef9 	bl	800b58c <_free_r>
 800979a:	4a19      	ldr	r2, [pc, #100]	; (8009800 <_malloc_r+0x430>)
 800979c:	f8da 3000 	ldr.w	r3, [sl]
 80097a0:	6811      	ldr	r1, [r2, #0]
 80097a2:	428b      	cmp	r3, r1
 80097a4:	bf88      	it	hi
 80097a6:	6013      	strhi	r3, [r2, #0]
 80097a8:	4a16      	ldr	r2, [pc, #88]	; (8009804 <_malloc_r+0x434>)
 80097aa:	6811      	ldr	r1, [r2, #0]
 80097ac:	428b      	cmp	r3, r1
 80097ae:	bf88      	it	hi
 80097b0:	6013      	strhi	r3, [r2, #0]
 80097b2:	68ab      	ldr	r3, [r5, #8]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	f022 0203 	bic.w	r2, r2, #3
 80097ba:	4294      	cmp	r4, r2
 80097bc:	eba2 0304 	sub.w	r3, r2, r4
 80097c0:	d801      	bhi.n	80097c6 <_malloc_r+0x3f6>
 80097c2:	2b0f      	cmp	r3, #15
 80097c4:	dc04      	bgt.n	80097d0 <_malloc_r+0x400>
 80097c6:	4648      	mov	r0, r9
 80097c8:	f000 f823 	bl	8009812 <__malloc_unlock>
 80097cc:	2600      	movs	r6, #0
 80097ce:	e00c      	b.n	80097ea <_malloc_r+0x41a>
 80097d0:	68ae      	ldr	r6, [r5, #8]
 80097d2:	f044 0201 	orr.w	r2, r4, #1
 80097d6:	4434      	add	r4, r6
 80097d8:	f043 0301 	orr.w	r3, r3, #1
 80097dc:	6072      	str	r2, [r6, #4]
 80097de:	60ac      	str	r4, [r5, #8]
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	4648      	mov	r0, r9
 80097e4:	f000 f815 	bl	8009812 <__malloc_unlock>
 80097e8:	3608      	adds	r6, #8
 80097ea:	4630      	mov	r0, r6
 80097ec:	b005      	add	sp, #20
 80097ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f2:	bf00      	nop
 80097f4:	200006d8 	.word	0x200006d8
 80097f8:	20000580 	.word	0x20000580
 80097fc:	00000080 	.word	0x00000080
 8009800:	200006d4 	.word	0x200006d4
 8009804:	200006d0 	.word	0x200006d0
 8009808:	200006dc 	.word	0x200006dc
 800980c:	0000007f 	.word	0x0000007f

08009810 <__malloc_lock>:
 8009810:	4770      	bx	lr

08009812 <__malloc_unlock>:
 8009812:	4770      	bx	lr

08009814 <_sbrk_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4c06      	ldr	r4, [pc, #24]	; (8009830 <_sbrk_r+0x1c>)
 8009818:	2300      	movs	r3, #0
 800981a:	4605      	mov	r5, r0
 800981c:	4608      	mov	r0, r1
 800981e:	6023      	str	r3, [r4, #0]
 8009820:	f002 fcd0 	bl	800c1c4 <_sbrk>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_sbrk_r+0x1a>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	b103      	cbz	r3, 800982e <_sbrk_r+0x1a>
 800982c:	602b      	str	r3, [r5, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	200011b4 	.word	0x200011b4

08009834 <sprintf>:
 8009834:	b40e      	push	{r1, r2, r3}
 8009836:	b500      	push	{lr}
 8009838:	b09c      	sub	sp, #112	; 0x70
 800983a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800983e:	ab1d      	add	r3, sp, #116	; 0x74
 8009840:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009844:	9002      	str	r0, [sp, #8]
 8009846:	9006      	str	r0, [sp, #24]
 8009848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800984c:	480a      	ldr	r0, [pc, #40]	; (8009878 <sprintf+0x44>)
 800984e:	9104      	str	r1, [sp, #16]
 8009850:	9107      	str	r1, [sp, #28]
 8009852:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009856:	f853 2b04 	ldr.w	r2, [r3], #4
 800985a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800985e:	6800      	ldr	r0, [r0, #0]
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	a902      	add	r1, sp, #8
 8009864:	f000 f848 	bl	80098f8 <_svfprintf_r>
 8009868:	9b02      	ldr	r3, [sp, #8]
 800986a:	2200      	movs	r2, #0
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	b01c      	add	sp, #112	; 0x70
 8009870:	f85d eb04 	ldr.w	lr, [sp], #4
 8009874:	b003      	add	sp, #12
 8009876:	4770      	bx	lr
 8009878:	20000674 	.word	0x20000674

0800987c <strlcpy>:
 800987c:	b510      	push	{r4, lr}
 800987e:	460b      	mov	r3, r1
 8009880:	b152      	cbz	r2, 8009898 <strlcpy+0x1c>
 8009882:	3a01      	subs	r2, #1
 8009884:	d006      	beq.n	8009894 <strlcpy+0x18>
 8009886:	f813 4b01 	ldrb.w	r4, [r3], #1
 800988a:	f800 4b01 	strb.w	r4, [r0], #1
 800988e:	2c00      	cmp	r4, #0
 8009890:	d1f7      	bne.n	8009882 <strlcpy+0x6>
 8009892:	e005      	b.n	80098a0 <strlcpy+0x24>
 8009894:	2200      	movs	r2, #0
 8009896:	7002      	strb	r2, [r0, #0]
 8009898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800989c:	2a00      	cmp	r2, #0
 800989e:	d1fb      	bne.n	8009898 <strlcpy+0x1c>
 80098a0:	1a58      	subs	r0, r3, r1
 80098a2:	3801      	subs	r0, #1
 80098a4:	bd10      	pop	{r4, pc}

080098a6 <strncmp>:
 80098a6:	b530      	push	{r4, r5, lr}
 80098a8:	b182      	cbz	r2, 80098cc <strncmp+0x26>
 80098aa:	1e45      	subs	r5, r0, #1
 80098ac:	3901      	subs	r1, #1
 80098ae:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80098b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80098b6:	42a3      	cmp	r3, r4
 80098b8:	d106      	bne.n	80098c8 <strncmp+0x22>
 80098ba:	43ec      	mvns	r4, r5
 80098bc:	4414      	add	r4, r2
 80098be:	42e0      	cmn	r0, r4
 80098c0:	d001      	beq.n	80098c6 <strncmp+0x20>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1f3      	bne.n	80098ae <strncmp+0x8>
 80098c6:	461c      	mov	r4, r3
 80098c8:	1b18      	subs	r0, r3, r4
 80098ca:	bd30      	pop	{r4, r5, pc}
 80098cc:	4610      	mov	r0, r2
 80098ce:	bd30      	pop	{r4, r5, pc}

080098d0 <strncpy>:
 80098d0:	b510      	push	{r4, lr}
 80098d2:	4603      	mov	r3, r0
 80098d4:	b142      	cbz	r2, 80098e8 <strncpy+0x18>
 80098d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098da:	f803 4b01 	strb.w	r4, [r3], #1
 80098de:	3a01      	subs	r2, #1
 80098e0:	2c00      	cmp	r4, #0
 80098e2:	d1f7      	bne.n	80098d4 <strncpy+0x4>
 80098e4:	441a      	add	r2, r3
 80098e6:	e000      	b.n	80098ea <strncpy+0x1a>
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d002      	beq.n	80098f4 <strncpy+0x24>
 80098ee:	f803 4b01 	strb.w	r4, [r3], #1
 80098f2:	e7fa      	b.n	80098ea <strncpy+0x1a>
 80098f4:	bd10      	pop	{r4, pc}
	...

080098f8 <_svfprintf_r>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	b0bd      	sub	sp, #244	; 0xf4
 80098fe:	468b      	mov	fp, r1
 8009900:	9205      	str	r2, [sp, #20]
 8009902:	461f      	mov	r7, r3
 8009904:	4682      	mov	sl, r0
 8009906:	f001 feff 	bl	800b708 <_localeconv_r>
 800990a:	6803      	ldr	r3, [r0, #0]
 800990c:	930d      	str	r3, [sp, #52]	; 0x34
 800990e:	4618      	mov	r0, r3
 8009910:	f7f6 fc5e 	bl	80001d0 <strlen>
 8009914:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009918:	9008      	str	r0, [sp, #32]
 800991a:	0619      	lsls	r1, r3, #24
 800991c:	d515      	bpl.n	800994a <_svfprintf_r+0x52>
 800991e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009922:	b993      	cbnz	r3, 800994a <_svfprintf_r+0x52>
 8009924:	2140      	movs	r1, #64	; 0x40
 8009926:	4650      	mov	r0, sl
 8009928:	f7ff fd52 	bl	80093d0 <_malloc_r>
 800992c:	f8cb 0000 	str.w	r0, [fp]
 8009930:	f8cb 0010 	str.w	r0, [fp, #16]
 8009934:	b930      	cbnz	r0, 8009944 <_svfprintf_r+0x4c>
 8009936:	230c      	movs	r3, #12
 8009938:	f8ca 3000 	str.w	r3, [sl]
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	f000 bf95 	b.w	800a86e <_svfprintf_r+0xf76>
 8009944:	2340      	movs	r3, #64	; 0x40
 8009946:	f8cb 3014 	str.w	r3, [fp, #20]
 800994a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8009bb0 <_svfprintf_r+0x2b8>
 800994e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009952:	2300      	movs	r3, #0
 8009954:	ac2c      	add	r4, sp, #176	; 0xb0
 8009956:	941f      	str	r4, [sp, #124]	; 0x7c
 8009958:	9321      	str	r3, [sp, #132]	; 0x84
 800995a:	9320      	str	r3, [sp, #128]	; 0x80
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	9311      	str	r3, [sp, #68]	; 0x44
 8009960:	9310      	str	r3, [sp, #64]	; 0x40
 8009962:	930a      	str	r3, [sp, #40]	; 0x28
 8009964:	9d05      	ldr	r5, [sp, #20]
 8009966:	462b      	mov	r3, r5
 8009968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800996c:	b11a      	cbz	r2, 8009976 <_svfprintf_r+0x7e>
 800996e:	2a25      	cmp	r2, #37	; 0x25
 8009970:	d001      	beq.n	8009976 <_svfprintf_r+0x7e>
 8009972:	461d      	mov	r5, r3
 8009974:	e7f7      	b.n	8009966 <_svfprintf_r+0x6e>
 8009976:	9b05      	ldr	r3, [sp, #20]
 8009978:	1aee      	subs	r6, r5, r3
 800997a:	d017      	beq.n	80099ac <_svfprintf_r+0xb4>
 800997c:	e884 0048 	stmia.w	r4, {r3, r6}
 8009980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009982:	4433      	add	r3, r6
 8009984:	9321      	str	r3, [sp, #132]	; 0x84
 8009986:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009988:	3301      	adds	r3, #1
 800998a:	2b07      	cmp	r3, #7
 800998c:	9320      	str	r3, [sp, #128]	; 0x80
 800998e:	dc01      	bgt.n	8009994 <_svfprintf_r+0x9c>
 8009990:	3408      	adds	r4, #8
 8009992:	e008      	b.n	80099a6 <_svfprintf_r+0xae>
 8009994:	aa1f      	add	r2, sp, #124	; 0x7c
 8009996:	4659      	mov	r1, fp
 8009998:	4650      	mov	r0, sl
 800999a:	f002 f99b 	bl	800bcd4 <__ssprint_r>
 800999e:	2800      	cmp	r0, #0
 80099a0:	f040 862c 	bne.w	800a5fc <_svfprintf_r+0xd04>
 80099a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80099a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a8:	4433      	add	r3, r6
 80099aa:	930a      	str	r3, [sp, #40]	; 0x28
 80099ac:	782b      	ldrb	r3, [r5, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 861d 	beq.w	800a5ee <_svfprintf_r+0xcf6>
 80099b4:	2200      	movs	r2, #0
 80099b6:	1c6b      	adds	r3, r5, #1
 80099b8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80099bc:	4611      	mov	r1, r2
 80099be:	f04f 39ff 	mov.w	r9, #4294967295
 80099c2:	9209      	str	r2, [sp, #36]	; 0x24
 80099c4:	4615      	mov	r5, r2
 80099c6:	200a      	movs	r0, #10
 80099c8:	1c5e      	adds	r6, r3, #1
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	9605      	str	r6, [sp, #20]
 80099ce:	9302      	str	r3, [sp, #8]
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	3b20      	subs	r3, #32
 80099d4:	2b58      	cmp	r3, #88	; 0x58
 80099d6:	f200 8263 	bhi.w	8009ea0 <_svfprintf_r+0x5a8>
 80099da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80099de:	005c      	.short	0x005c
 80099e0:	02610261 	.word	0x02610261
 80099e4:	0261006b 	.word	0x0261006b
 80099e8:	02610261 	.word	0x02610261
 80099ec:	02610261 	.word	0x02610261
 80099f0:	006e0261 	.word	0x006e0261
 80099f4:	02610059 	.word	0x02610059
 80099f8:	007c0079 	.word	0x007c0079
 80099fc:	00a30261 	.word	0x00a30261
 8009a00:	00a600a6 	.word	0x00a600a6
 8009a04:	00a600a6 	.word	0x00a600a6
 8009a08:	00a600a6 	.word	0x00a600a6
 8009a0c:	00a600a6 	.word	0x00a600a6
 8009a10:	026100a6 	.word	0x026100a6
 8009a14:	02610261 	.word	0x02610261
 8009a18:	02610261 	.word	0x02610261
 8009a1c:	02610261 	.word	0x02610261
 8009a20:	02610261 	.word	0x02610261
 8009a24:	00d60261 	.word	0x00d60261
 8009a28:	0261010b 	.word	0x0261010b
 8009a2c:	0261010b 	.word	0x0261010b
 8009a30:	02610261 	.word	0x02610261
 8009a34:	00b90261 	.word	0x00b90261
 8009a38:	02610261 	.word	0x02610261
 8009a3c:	02610152 	.word	0x02610152
 8009a40:	02610261 	.word	0x02610261
 8009a44:	02610261 	.word	0x02610261
 8009a48:	02610199 	.word	0x02610199
 8009a4c:	00660261 	.word	0x00660261
 8009a50:	02610261 	.word	0x02610261
 8009a54:	02610261 	.word	0x02610261
 8009a58:	02610261 	.word	0x02610261
 8009a5c:	02610261 	.word	0x02610261
 8009a60:	02610261 	.word	0x02610261
 8009a64:	006100cd 	.word	0x006100cd
 8009a68:	010b010b 	.word	0x010b010b
 8009a6c:	00bc010b 	.word	0x00bc010b
 8009a70:	02610061 	.word	0x02610061
 8009a74:	00bf0261 	.word	0x00bf0261
 8009a78:	01340261 	.word	0x01340261
 8009a7c:	016f0154 	.word	0x016f0154
 8009a80:	026100ca 	.word	0x026100ca
 8009a84:	02610180 	.word	0x02610180
 8009a88:	0261019b 	.word	0x0261019b
 8009a8c:	01b30261 	.word	0x01b30261
 8009a90:	2201      	movs	r2, #1
 8009a92:	212b      	movs	r1, #43	; 0x2b
 8009a94:	e002      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009a96:	b909      	cbnz	r1, 8009a9c <_svfprintf_r+0x1a4>
 8009a98:	2201      	movs	r2, #1
 8009a9a:	2120      	movs	r1, #32
 8009a9c:	9b05      	ldr	r3, [sp, #20]
 8009a9e:	e793      	b.n	80099c8 <_svfprintf_r+0xd0>
 8009aa0:	2a00      	cmp	r2, #0
 8009aa2:	d077      	beq.n	8009b94 <_svfprintf_r+0x29c>
 8009aa4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8009aa8:	e074      	b.n	8009b94 <_svfprintf_r+0x29c>
 8009aaa:	b10a      	cbz	r2, 8009ab0 <_svfprintf_r+0x1b8>
 8009aac:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8009ab0:	4b41      	ldr	r3, [pc, #260]	; (8009bb8 <_svfprintf_r+0x2c0>)
 8009ab2:	e14b      	b.n	8009d4c <_svfprintf_r+0x454>
 8009ab4:	f045 0501 	orr.w	r5, r5, #1
 8009ab8:	e7f0      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009aba:	683e      	ldr	r6, [r7, #0]
 8009abc:	9609      	str	r6, [sp, #36]	; 0x24
 8009abe:	2e00      	cmp	r6, #0
 8009ac0:	f107 0304 	add.w	r3, r7, #4
 8009ac4:	db01      	blt.n	8009aca <_svfprintf_r+0x1d2>
 8009ac6:	461f      	mov	r7, r3
 8009ac8:	e7e8      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009aca:	4276      	negs	r6, r6
 8009acc:	9609      	str	r6, [sp, #36]	; 0x24
 8009ace:	461f      	mov	r7, r3
 8009ad0:	f045 0504 	orr.w	r5, r5, #4
 8009ad4:	e7e2      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009ad6:	9e05      	ldr	r6, [sp, #20]
 8009ad8:	9b05      	ldr	r3, [sp, #20]
 8009ada:	7836      	ldrb	r6, [r6, #0]
 8009adc:	9602      	str	r6, [sp, #8]
 8009ade:	2e2a      	cmp	r6, #42	; 0x2a
 8009ae0:	f103 0301 	add.w	r3, r3, #1
 8009ae4:	d002      	beq.n	8009aec <_svfprintf_r+0x1f4>
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	e00a      	b.n	8009b02 <_svfprintf_r+0x20a>
 8009aec:	f8d7 9000 	ldr.w	r9, [r7]
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	1d3e      	adds	r6, r7, #4
 8009af4:	f1b9 0f00 	cmp.w	r9, #0
 8009af8:	4637      	mov	r7, r6
 8009afa:	dacf      	bge.n	8009a9c <_svfprintf_r+0x1a4>
 8009afc:	f04f 39ff 	mov.w	r9, #4294967295
 8009b00:	e7cc      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009b02:	9305      	str	r3, [sp, #20]
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	3b30      	subs	r3, #48	; 0x30
 8009b08:	2b09      	cmp	r3, #9
 8009b0a:	d808      	bhi.n	8009b1e <_svfprintf_r+0x226>
 8009b0c:	fb00 3909 	mla	r9, r0, r9, r3
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	461e      	mov	r6, r3
 8009b14:	f816 3b01 	ldrb.w	r3, [r6], #1
 8009b18:	9302      	str	r3, [sp, #8]
 8009b1a:	4633      	mov	r3, r6
 8009b1c:	e7f1      	b.n	8009b02 <_svfprintf_r+0x20a>
 8009b1e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8009b22:	e755      	b.n	80099d0 <_svfprintf_r+0xd8>
 8009b24:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8009b28:	e7b8      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b2e:	9b02      	ldr	r3, [sp, #8]
 8009b30:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b32:	3b30      	subs	r3, #48	; 0x30
 8009b34:	fb00 3306 	mla	r3, r0, r6, r3
 8009b38:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3a:	9b05      	ldr	r3, [sp, #20]
 8009b3c:	461e      	mov	r6, r3
 8009b3e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8009b42:	9302      	str	r3, [sp, #8]
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	9605      	str	r6, [sp, #20]
 8009b48:	3b30      	subs	r3, #48	; 0x30
 8009b4a:	2b09      	cmp	r3, #9
 8009b4c:	d9ef      	bls.n	8009b2e <_svfprintf_r+0x236>
 8009b4e:	e73f      	b.n	80099d0 <_svfprintf_r+0xd8>
 8009b50:	f045 0508 	orr.w	r5, r5, #8
 8009b54:	e7a2      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009b56:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8009b5a:	e79f      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009b5c:	9b05      	ldr	r3, [sp, #20]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	2b6c      	cmp	r3, #108	; 0x6c
 8009b62:	d103      	bne.n	8009b6c <_svfprintf_r+0x274>
 8009b64:	9b05      	ldr	r3, [sp, #20]
 8009b66:	3301      	adds	r3, #1
 8009b68:	9305      	str	r3, [sp, #20]
 8009b6a:	e002      	b.n	8009b72 <_svfprintf_r+0x27a>
 8009b6c:	f045 0510 	orr.w	r5, r5, #16
 8009b70:	e794      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009b72:	f045 0520 	orr.w	r5, r5, #32
 8009b76:	e791      	b.n	8009a9c <_svfprintf_r+0x1a4>
 8009b78:	1d3b      	adds	r3, r7, #4
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	2600      	movs	r6, #0
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8009b84:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8009b88:	e199      	b.n	8009ebe <_svfprintf_r+0x5c6>
 8009b8a:	b10a      	cbz	r2, 8009b90 <_svfprintf_r+0x298>
 8009b8c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8009b90:	f045 0510 	orr.w	r5, r5, #16
 8009b94:	06aa      	lsls	r2, r5, #26
 8009b96:	d511      	bpl.n	8009bbc <_svfprintf_r+0x2c4>
 8009b98:	3707      	adds	r7, #7
 8009b9a:	f027 0707 	bic.w	r7, r7, #7
 8009b9e:	f107 0308 	add.w	r3, r7, #8
 8009ba2:	9303      	str	r3, [sp, #12]
 8009ba4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009ba8:	e017      	b.n	8009bda <_svfprintf_r+0x2e2>
 8009baa:	bf00      	nop
 8009bac:	f3af 8000 	nop.w
	...
 8009bb8:	0800c30c 	.word	0x0800c30c
 8009bbc:	f015 0f10 	tst.w	r5, #16
 8009bc0:	f107 0304 	add.w	r3, r7, #4
 8009bc4:	d002      	beq.n	8009bcc <_svfprintf_r+0x2d4>
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	683e      	ldr	r6, [r7, #0]
 8009bca:	e005      	b.n	8009bd8 <_svfprintf_r+0x2e0>
 8009bcc:	683e      	ldr	r6, [r7, #0]
 8009bce:	9303      	str	r3, [sp, #12]
 8009bd0:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009bd4:	bf18      	it	ne
 8009bd6:	b236      	sxthne	r6, r6
 8009bd8:	17f7      	asrs	r7, r6, #31
 8009bda:	2e00      	cmp	r6, #0
 8009bdc:	f177 0300 	sbcs.w	r3, r7, #0
 8009be0:	f280 80de 	bge.w	8009da0 <_svfprintf_r+0x4a8>
 8009be4:	4276      	negs	r6, r6
 8009be6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009bea:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009bee:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009bf2:	e0d5      	b.n	8009da0 <_svfprintf_r+0x4a8>
 8009bf4:	b10a      	cbz	r2, 8009bfa <_svfprintf_r+0x302>
 8009bf6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8009bfa:	3707      	adds	r7, #7
 8009bfc:	f027 0707 	bic.w	r7, r7, #7
 8009c00:	f107 0308 	add.w	r3, r7, #8
 8009c04:	9303      	str	r3, [sp, #12]
 8009c06:	ed97 7b00 	vldr	d7, [r7]
 8009c0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c0e:	9b06      	ldr	r3, [sp, #24]
 8009c10:	9312      	str	r3, [sp, #72]	; 0x48
 8009c12:	9b07      	ldr	r3, [sp, #28]
 8009c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c18:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	4bab      	ldr	r3, [pc, #684]	; (8009ecc <_svfprintf_r+0x5d4>)
 8009c20:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009c24:	f7f6 ff7e 	bl	8000b24 <__aeabi_dcmpun>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	f040 84f1 	bne.w	800a610 <_svfprintf_r+0xd18>
 8009c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c32:	4ba6      	ldr	r3, [pc, #664]	; (8009ecc <_svfprintf_r+0x5d4>)
 8009c34:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009c38:	f7f6 ff56 	bl	8000ae8 <__aeabi_dcmple>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f040 84e7 	bne.w	800a610 <_svfprintf_r+0xd18>
 8009c42:	f000 bdfd 	b.w	800a840 <_svfprintf_r+0xf48>
 8009c46:	b10a      	cbz	r2, 8009c4c <_svfprintf_r+0x354>
 8009c48:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8009c4c:	f015 0f20 	tst.w	r5, #32
 8009c50:	f107 0304 	add.w	r3, r7, #4
 8009c54:	d007      	beq.n	8009c66 <_svfprintf_r+0x36e>
 8009c56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	17ce      	asrs	r6, r1, #31
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	4631      	mov	r1, r6
 8009c60:	e9c2 0100 	strd	r0, r1, [r2]
 8009c64:	e00b      	b.n	8009c7e <_svfprintf_r+0x386>
 8009c66:	06e9      	lsls	r1, r5, #27
 8009c68:	d406      	bmi.n	8009c78 <_svfprintf_r+0x380>
 8009c6a:	066a      	lsls	r2, r5, #25
 8009c6c:	d504      	bpl.n	8009c78 <_svfprintf_r+0x380>
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8009c74:	8011      	strh	r1, [r2, #0]
 8009c76:	e002      	b.n	8009c7e <_svfprintf_r+0x386>
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c7c:	6011      	str	r1, [r2, #0]
 8009c7e:	461f      	mov	r7, r3
 8009c80:	e670      	b.n	8009964 <_svfprintf_r+0x6c>
 8009c82:	f045 0510 	orr.w	r5, r5, #16
 8009c86:	f015 0320 	ands.w	r3, r5, #32
 8009c8a:	d009      	beq.n	8009ca0 <_svfprintf_r+0x3a8>
 8009c8c:	3707      	adds	r7, #7
 8009c8e:	f027 0707 	bic.w	r7, r7, #7
 8009c92:	f107 0308 	add.w	r3, r7, #8
 8009c96:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009c9a:	9303      	str	r3, [sp, #12]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e07b      	b.n	8009d98 <_svfprintf_r+0x4a0>
 8009ca0:	1d3a      	adds	r2, r7, #4
 8009ca2:	f015 0110 	ands.w	r1, r5, #16
 8009ca6:	9203      	str	r2, [sp, #12]
 8009ca8:	d105      	bne.n	8009cb6 <_svfprintf_r+0x3be>
 8009caa:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8009cae:	d002      	beq.n	8009cb6 <_svfprintf_r+0x3be>
 8009cb0:	883e      	ldrh	r6, [r7, #0]
 8009cb2:	2700      	movs	r7, #0
 8009cb4:	e7f2      	b.n	8009c9c <_svfprintf_r+0x3a4>
 8009cb6:	683e      	ldr	r6, [r7, #0]
 8009cb8:	2700      	movs	r7, #0
 8009cba:	e06d      	b.n	8009d98 <_svfprintf_r+0x4a0>
 8009cbc:	1d3b      	adds	r3, r7, #4
 8009cbe:	9303      	str	r3, [sp, #12]
 8009cc0:	2330      	movs	r3, #48	; 0x30
 8009cc2:	2278      	movs	r2, #120	; 0x78
 8009cc4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8009cc8:	4b81      	ldr	r3, [pc, #516]	; (8009ed0 <_svfprintf_r+0x5d8>)
 8009cca:	683e      	ldr	r6, [r7, #0]
 8009ccc:	9311      	str	r3, [sp, #68]	; 0x44
 8009cce:	2700      	movs	r7, #0
 8009cd0:	f045 0502 	orr.w	r5, r5, #2
 8009cd4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8009cd8:	2302      	movs	r3, #2
 8009cda:	9202      	str	r2, [sp, #8]
 8009cdc:	e05c      	b.n	8009d98 <_svfprintf_r+0x4a0>
 8009cde:	2600      	movs	r6, #0
 8009ce0:	1d3b      	adds	r3, r7, #4
 8009ce2:	45b1      	cmp	r9, r6
 8009ce4:	9303      	str	r3, [sp, #12]
 8009ce6:	f8d7 8000 	ldr.w	r8, [r7]
 8009cea:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8009cee:	db0a      	blt.n	8009d06 <_svfprintf_r+0x40e>
 8009cf0:	464a      	mov	r2, r9
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	f7f6 fa73 	bl	80001e0 <memchr>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	f000 80ea 	beq.w	8009ed4 <_svfprintf_r+0x5dc>
 8009d00:	ebc8 0900 	rsb	r9, r8, r0
 8009d04:	e0e7      	b.n	8009ed6 <_svfprintf_r+0x5de>
 8009d06:	4640      	mov	r0, r8
 8009d08:	f7f6 fa62 	bl	80001d0 <strlen>
 8009d0c:	4681      	mov	r9, r0
 8009d0e:	e0e2      	b.n	8009ed6 <_svfprintf_r+0x5de>
 8009d10:	f045 0510 	orr.w	r5, r5, #16
 8009d14:	06ae      	lsls	r6, r5, #26
 8009d16:	d508      	bpl.n	8009d2a <_svfprintf_r+0x432>
 8009d18:	3707      	adds	r7, #7
 8009d1a:	f027 0707 	bic.w	r7, r7, #7
 8009d1e:	f107 0308 	add.w	r3, r7, #8
 8009d22:	9303      	str	r3, [sp, #12]
 8009d24:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009d28:	e00a      	b.n	8009d40 <_svfprintf_r+0x448>
 8009d2a:	1d3b      	adds	r3, r7, #4
 8009d2c:	f015 0f10 	tst.w	r5, #16
 8009d30:	9303      	str	r3, [sp, #12]
 8009d32:	d103      	bne.n	8009d3c <_svfprintf_r+0x444>
 8009d34:	0668      	lsls	r0, r5, #25
 8009d36:	d501      	bpl.n	8009d3c <_svfprintf_r+0x444>
 8009d38:	883e      	ldrh	r6, [r7, #0]
 8009d3a:	e000      	b.n	8009d3e <_svfprintf_r+0x446>
 8009d3c:	683e      	ldr	r6, [r7, #0]
 8009d3e:	2700      	movs	r7, #0
 8009d40:	2301      	movs	r3, #1
 8009d42:	e029      	b.n	8009d98 <_svfprintf_r+0x4a0>
 8009d44:	b10a      	cbz	r2, 8009d4a <_svfprintf_r+0x452>
 8009d46:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8009d4a:	4b61      	ldr	r3, [pc, #388]	; (8009ed0 <_svfprintf_r+0x5d8>)
 8009d4c:	9311      	str	r3, [sp, #68]	; 0x44
 8009d4e:	06a9      	lsls	r1, r5, #26
 8009d50:	d508      	bpl.n	8009d64 <_svfprintf_r+0x46c>
 8009d52:	3707      	adds	r7, #7
 8009d54:	f027 0707 	bic.w	r7, r7, #7
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	9303      	str	r3, [sp, #12]
 8009d5e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009d62:	e00a      	b.n	8009d7a <_svfprintf_r+0x482>
 8009d64:	1d3b      	adds	r3, r7, #4
 8009d66:	f015 0f10 	tst.w	r5, #16
 8009d6a:	9303      	str	r3, [sp, #12]
 8009d6c:	d103      	bne.n	8009d76 <_svfprintf_r+0x47e>
 8009d6e:	066a      	lsls	r2, r5, #25
 8009d70:	d501      	bpl.n	8009d76 <_svfprintf_r+0x47e>
 8009d72:	883e      	ldrh	r6, [r7, #0]
 8009d74:	e000      	b.n	8009d78 <_svfprintf_r+0x480>
 8009d76:	683e      	ldr	r6, [r7, #0]
 8009d78:	2700      	movs	r7, #0
 8009d7a:	07eb      	lsls	r3, r5, #31
 8009d7c:	d50b      	bpl.n	8009d96 <_svfprintf_r+0x49e>
 8009d7e:	ea56 0307 	orrs.w	r3, r6, r7
 8009d82:	d008      	beq.n	8009d96 <_svfprintf_r+0x49e>
 8009d84:	2330      	movs	r3, #48	; 0x30
 8009d86:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8009d8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009d8e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8009d92:	f045 0502 	orr.w	r5, r5, #2
 8009d96:	2302      	movs	r3, #2
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8009d9e:	e000      	b.n	8009da2 <_svfprintf_r+0x4aa>
 8009da0:	2301      	movs	r3, #1
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	f2c0 855c 	blt.w	800a862 <_svfprintf_r+0xf6a>
 8009daa:	ea56 0207 	orrs.w	r2, r6, r7
 8009dae:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8009db2:	d103      	bne.n	8009dbc <_svfprintf_r+0x4c4>
 8009db4:	f1b9 0f00 	cmp.w	r9, #0
 8009db8:	d05f      	beq.n	8009e7a <_svfprintf_r+0x582>
 8009dba:	e006      	b.n	8009dca <_svfprintf_r+0x4d2>
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d025      	beq.n	8009e0e <_svfprintf_r+0x516>
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d046      	beq.n	8009e54 <_svfprintf_r+0x55c>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	e007      	b.n	8009dda <_svfprintf_r+0x4e2>
 8009dca:	460d      	mov	r5, r1
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d022      	beq.n	8009e16 <_svfprintf_r+0x51e>
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d03d      	beq.n	8009e50 <_svfprintf_r+0x558>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	2600      	movs	r6, #0
 8009dd8:	2700      	movs	r7, #0
 8009dda:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8009dde:	08f2      	lsrs	r2, r6, #3
 8009de0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8009de4:	08f8      	lsrs	r0, r7, #3
 8009de6:	f006 0307 	and.w	r3, r6, #7
 8009dea:	4607      	mov	r7, r0
 8009dec:	4616      	mov	r6, r2
 8009dee:	3330      	adds	r3, #48	; 0x30
 8009df0:	ea56 0207 	orrs.w	r2, r6, r7
 8009df4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009df8:	d1f1      	bne.n	8009dde <_svfprintf_r+0x4e6>
 8009dfa:	07e8      	lsls	r0, r5, #31
 8009dfc:	d548      	bpl.n	8009e90 <_svfprintf_r+0x598>
 8009dfe:	2b30      	cmp	r3, #48	; 0x30
 8009e00:	d046      	beq.n	8009e90 <_svfprintf_r+0x598>
 8009e02:	2330      	movs	r3, #48	; 0x30
 8009e04:	f808 3c01 	strb.w	r3, [r8, #-1]
 8009e08:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e0c:	e040      	b.n	8009e90 <_svfprintf_r+0x598>
 8009e0e:	2f00      	cmp	r7, #0
 8009e10:	bf08      	it	eq
 8009e12:	2e0a      	cmpeq	r6, #10
 8009e14:	d205      	bcs.n	8009e22 <_svfprintf_r+0x52a>
 8009e16:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8009e1a:	3630      	adds	r6, #48	; 0x30
 8009e1c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8009e20:	e029      	b.n	8009e76 <_svfprintf_r+0x57e>
 8009e22:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	220a      	movs	r2, #10
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f7f6 feb7 	bl	8000ba0 <__aeabi_uldivmod>
 8009e32:	3230      	adds	r2, #48	; 0x30
 8009e34:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	220a      	movs	r2, #10
 8009e40:	f7f6 feae 	bl	8000ba0 <__aeabi_uldivmod>
 8009e44:	4606      	mov	r6, r0
 8009e46:	460f      	mov	r7, r1
 8009e48:	ea56 0307 	orrs.w	r3, r6, r7
 8009e4c:	d1eb      	bne.n	8009e26 <_svfprintf_r+0x52e>
 8009e4e:	e012      	b.n	8009e76 <_svfprintf_r+0x57e>
 8009e50:	2600      	movs	r6, #0
 8009e52:	2700      	movs	r7, #0
 8009e54:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8009e58:	f006 030f 	and.w	r3, r6, #15
 8009e5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e5e:	5cd3      	ldrb	r3, [r2, r3]
 8009e60:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009e64:	0933      	lsrs	r3, r6, #4
 8009e66:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8009e6a:	093a      	lsrs	r2, r7, #4
 8009e6c:	461e      	mov	r6, r3
 8009e6e:	4617      	mov	r7, r2
 8009e70:	ea56 0307 	orrs.w	r3, r6, r7
 8009e74:	d1f0      	bne.n	8009e58 <_svfprintf_r+0x560>
 8009e76:	4629      	mov	r1, r5
 8009e78:	e00a      	b.n	8009e90 <_svfprintf_r+0x598>
 8009e7a:	b93b      	cbnz	r3, 8009e8c <_svfprintf_r+0x594>
 8009e7c:	07ea      	lsls	r2, r5, #31
 8009e7e:	d505      	bpl.n	8009e8c <_svfprintf_r+0x594>
 8009e80:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8009e84:	2330      	movs	r3, #48	; 0x30
 8009e86:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8009e8a:	e001      	b.n	8009e90 <_svfprintf_r+0x598>
 8009e8c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8009e90:	464e      	mov	r6, r9
 8009e92:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8009e96:	ebc8 0909 	rsb	r9, r8, r9
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	2700      	movs	r7, #0
 8009e9e:	e01b      	b.n	8009ed8 <_svfprintf_r+0x5e0>
 8009ea0:	b10a      	cbz	r2, 8009ea6 <_svfprintf_r+0x5ae>
 8009ea2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8009ea6:	9b02      	ldr	r3, [sp, #8]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 83a0 	beq.w	800a5ee <_svfprintf_r+0xcf6>
 8009eae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009eb2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8009eb6:	2600      	movs	r6, #0
 8009eb8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8009ebc:	9703      	str	r7, [sp, #12]
 8009ebe:	f04f 0901 	mov.w	r9, #1
 8009ec2:	4637      	mov	r7, r6
 8009ec4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8009ec8:	e006      	b.n	8009ed8 <_svfprintf_r+0x5e0>
 8009eca:	bf00      	nop
 8009ecc:	7fefffff 	.word	0x7fefffff
 8009ed0:	0800c31d 	.word	0x0800c31d
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	4637      	mov	r7, r6
 8009ed8:	454e      	cmp	r6, r9
 8009eda:	4633      	mov	r3, r6
 8009edc:	bfb8      	it	lt
 8009ede:	464b      	movlt	r3, r9
 8009ee0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ee2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8009ee6:	b113      	cbz	r3, 8009eee <_svfprintf_r+0x5f6>
 8009ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eea:	3301      	adds	r3, #1
 8009eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eee:	f015 0302 	ands.w	r3, r5, #2
 8009ef2:	9314      	str	r3, [sp, #80]	; 0x50
 8009ef4:	bf1e      	ittt	ne
 8009ef6:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8009ef8:	3302      	addne	r3, #2
 8009efa:	930b      	strne	r3, [sp, #44]	; 0x2c
 8009efc:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8009f00:	9315      	str	r3, [sp, #84]	; 0x54
 8009f02:	d139      	bne.n	8009f78 <_svfprintf_r+0x680>
 8009f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f08:	1a9b      	subs	r3, r3, r2
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	930c      	str	r3, [sp, #48]	; 0x30
 8009f0e:	dd33      	ble.n	8009f78 <_svfprintf_r+0x680>
 8009f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f12:	2b10      	cmp	r3, #16
 8009f14:	4ba6      	ldr	r3, [pc, #664]	; (800a1b0 <_svfprintf_r+0x8b8>)
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	dd18      	ble.n	8009f4c <_svfprintf_r+0x654>
 8009f1a:	2310      	movs	r3, #16
 8009f1c:	6063      	str	r3, [r4, #4]
 8009f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f20:	3310      	adds	r3, #16
 8009f22:	9321      	str	r3, [sp, #132]	; 0x84
 8009f24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f26:	3301      	adds	r3, #1
 8009f28:	2b07      	cmp	r3, #7
 8009f2a:	9320      	str	r3, [sp, #128]	; 0x80
 8009f2c:	dc01      	bgt.n	8009f32 <_svfprintf_r+0x63a>
 8009f2e:	3408      	adds	r4, #8
 8009f30:	e008      	b.n	8009f44 <_svfprintf_r+0x64c>
 8009f32:	aa1f      	add	r2, sp, #124	; 0x7c
 8009f34:	4659      	mov	r1, fp
 8009f36:	4650      	mov	r0, sl
 8009f38:	f001 fecc 	bl	800bcd4 <__ssprint_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f040 835d 	bne.w	800a5fc <_svfprintf_r+0xd04>
 8009f42:	ac2c      	add	r4, sp, #176	; 0xb0
 8009f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f46:	3b10      	subs	r3, #16
 8009f48:	930c      	str	r3, [sp, #48]	; 0x30
 8009f4a:	e7e1      	b.n	8009f10 <_svfprintf_r+0x618>
 8009f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f4e:	6063      	str	r3, [r4, #4]
 8009f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f54:	4413      	add	r3, r2
 8009f56:	9321      	str	r3, [sp, #132]	; 0x84
 8009f58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	2b07      	cmp	r3, #7
 8009f5e:	9320      	str	r3, [sp, #128]	; 0x80
 8009f60:	dc01      	bgt.n	8009f66 <_svfprintf_r+0x66e>
 8009f62:	3408      	adds	r4, #8
 8009f64:	e008      	b.n	8009f78 <_svfprintf_r+0x680>
 8009f66:	aa1f      	add	r2, sp, #124	; 0x7c
 8009f68:	4659      	mov	r1, fp
 8009f6a:	4650      	mov	r0, sl
 8009f6c:	f001 feb2 	bl	800bcd4 <__ssprint_r>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	f040 8343 	bne.w	800a5fc <_svfprintf_r+0xd04>
 8009f76:	ac2c      	add	r4, sp, #176	; 0xb0
 8009f78:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8009f7c:	b1bb      	cbz	r3, 8009fae <_svfprintf_r+0x6b6>
 8009f7e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8009f82:	6023      	str	r3, [r4, #0]
 8009f84:	2301      	movs	r3, #1
 8009f86:	6063      	str	r3, [r4, #4]
 8009f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	9321      	str	r3, [sp, #132]	; 0x84
 8009f8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f90:	3301      	adds	r3, #1
 8009f92:	2b07      	cmp	r3, #7
 8009f94:	9320      	str	r3, [sp, #128]	; 0x80
 8009f96:	dc01      	bgt.n	8009f9c <_svfprintf_r+0x6a4>
 8009f98:	3408      	adds	r4, #8
 8009f9a:	e008      	b.n	8009fae <_svfprintf_r+0x6b6>
 8009f9c:	aa1f      	add	r2, sp, #124	; 0x7c
 8009f9e:	4659      	mov	r1, fp
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	f001 fe97 	bl	800bcd4 <__ssprint_r>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f040 8328 	bne.w	800a5fc <_svfprintf_r+0xd04>
 8009fac:	ac2c      	add	r4, sp, #176	; 0xb0
 8009fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fb0:	b1b3      	cbz	r3, 8009fe0 <_svfprintf_r+0x6e8>
 8009fb2:	ab18      	add	r3, sp, #96	; 0x60
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	9321      	str	r3, [sp, #132]	; 0x84
 8009fc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	2b07      	cmp	r3, #7
 8009fc6:	9320      	str	r3, [sp, #128]	; 0x80
 8009fc8:	dc01      	bgt.n	8009fce <_svfprintf_r+0x6d6>
 8009fca:	3408      	adds	r4, #8
 8009fcc:	e008      	b.n	8009fe0 <_svfprintf_r+0x6e8>
 8009fce:	aa1f      	add	r2, sp, #124	; 0x7c
 8009fd0:	4659      	mov	r1, fp
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	f001 fe7e 	bl	800bcd4 <__ssprint_r>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f040 830f 	bne.w	800a5fc <_svfprintf_r+0xd04>
 8009fde:	ac2c      	add	r4, sp, #176	; 0xb0
 8009fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fe2:	2b80      	cmp	r3, #128	; 0x80
 8009fe4:	d135      	bne.n	800a052 <_svfprintf_r+0x75a>
 8009fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fea:	1a9b      	subs	r3, r3, r2
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dd30      	ble.n	800a052 <_svfprintf_r+0x75a>
 8009ff0:	4a70      	ldr	r2, [pc, #448]	; (800a1b4 <_svfprintf_r+0x8bc>)
 8009ff2:	6022      	str	r2, [r4, #0]
 8009ff4:	2b10      	cmp	r3, #16
 8009ff6:	dd18      	ble.n	800a02a <_svfprintf_r+0x732>
 8009ff8:	2210      	movs	r2, #16
 8009ffa:	6062      	str	r2, [r4, #4]
 8009ffc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ffe:	3210      	adds	r2, #16
 800a000:	9221      	str	r2, [sp, #132]	; 0x84
 800a002:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a004:	3201      	adds	r2, #1
 800a006:	2a07      	cmp	r2, #7
 800a008:	9220      	str	r2, [sp, #128]	; 0x80
 800a00a:	dc01      	bgt.n	800a010 <_svfprintf_r+0x718>
 800a00c:	3408      	adds	r4, #8
 800a00e:	e00a      	b.n	800a026 <_svfprintf_r+0x72e>
 800a010:	aa1f      	add	r2, sp, #124	; 0x7c
 800a012:	4659      	mov	r1, fp
 800a014:	4650      	mov	r0, sl
 800a016:	930c      	str	r3, [sp, #48]	; 0x30
 800a018:	f001 fe5c 	bl	800bcd4 <__ssprint_r>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	f040 82ed 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a024:	ac2c      	add	r4, sp, #176	; 0xb0
 800a026:	3b10      	subs	r3, #16
 800a028:	e7e2      	b.n	8009ff0 <_svfprintf_r+0x6f8>
 800a02a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	4413      	add	r3, r2
 800a030:	9321      	str	r3, [sp, #132]	; 0x84
 800a032:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a034:	3301      	adds	r3, #1
 800a036:	2b07      	cmp	r3, #7
 800a038:	9320      	str	r3, [sp, #128]	; 0x80
 800a03a:	dc01      	bgt.n	800a040 <_svfprintf_r+0x748>
 800a03c:	3408      	adds	r4, #8
 800a03e:	e008      	b.n	800a052 <_svfprintf_r+0x75a>
 800a040:	aa1f      	add	r2, sp, #124	; 0x7c
 800a042:	4659      	mov	r1, fp
 800a044:	4650      	mov	r0, sl
 800a046:	f001 fe45 	bl	800bcd4 <__ssprint_r>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	f040 82d6 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a050:	ac2c      	add	r4, sp, #176	; 0xb0
 800a052:	ebc9 0606 	rsb	r6, r9, r6
 800a056:	2e00      	cmp	r6, #0
 800a058:	dd2e      	ble.n	800a0b8 <_svfprintf_r+0x7c0>
 800a05a:	4b56      	ldr	r3, [pc, #344]	; (800a1b4 <_svfprintf_r+0x8bc>)
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	2e10      	cmp	r6, #16
 800a060:	dd16      	ble.n	800a090 <_svfprintf_r+0x798>
 800a062:	2310      	movs	r3, #16
 800a064:	6063      	str	r3, [r4, #4]
 800a066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a068:	3310      	adds	r3, #16
 800a06a:	9321      	str	r3, [sp, #132]	; 0x84
 800a06c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a06e:	3301      	adds	r3, #1
 800a070:	2b07      	cmp	r3, #7
 800a072:	9320      	str	r3, [sp, #128]	; 0x80
 800a074:	dc01      	bgt.n	800a07a <_svfprintf_r+0x782>
 800a076:	3408      	adds	r4, #8
 800a078:	e008      	b.n	800a08c <_svfprintf_r+0x794>
 800a07a:	aa1f      	add	r2, sp, #124	; 0x7c
 800a07c:	4659      	mov	r1, fp
 800a07e:	4650      	mov	r0, sl
 800a080:	f001 fe28 	bl	800bcd4 <__ssprint_r>
 800a084:	2800      	cmp	r0, #0
 800a086:	f040 82b9 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a08a:	ac2c      	add	r4, sp, #176	; 0xb0
 800a08c:	3e10      	subs	r6, #16
 800a08e:	e7e4      	b.n	800a05a <_svfprintf_r+0x762>
 800a090:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a092:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a094:	6066      	str	r6, [r4, #4]
 800a096:	3301      	adds	r3, #1
 800a098:	4406      	add	r6, r0
 800a09a:	2b07      	cmp	r3, #7
 800a09c:	9621      	str	r6, [sp, #132]	; 0x84
 800a09e:	9320      	str	r3, [sp, #128]	; 0x80
 800a0a0:	dc01      	bgt.n	800a0a6 <_svfprintf_r+0x7ae>
 800a0a2:	3408      	adds	r4, #8
 800a0a4:	e008      	b.n	800a0b8 <_svfprintf_r+0x7c0>
 800a0a6:	aa1f      	add	r2, sp, #124	; 0x7c
 800a0a8:	4659      	mov	r1, fp
 800a0aa:	4650      	mov	r0, sl
 800a0ac:	f001 fe12 	bl	800bcd4 <__ssprint_r>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f040 82a3 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a0b6:	ac2c      	add	r4, sp, #176	; 0xb0
 800a0b8:	05eb      	lsls	r3, r5, #23
 800a0ba:	d414      	bmi.n	800a0e6 <_svfprintf_r+0x7ee>
 800a0bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0be:	e884 0300 	stmia.w	r4, {r8, r9}
 800a0c2:	444b      	add	r3, r9
 800a0c4:	9321      	str	r3, [sp, #132]	; 0x84
 800a0c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	2b07      	cmp	r3, #7
 800a0cc:	9320      	str	r3, [sp, #128]	; 0x80
 800a0ce:	f340 8244 	ble.w	800a55a <_svfprintf_r+0xc62>
 800a0d2:	aa1f      	add	r2, sp, #124	; 0x7c
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	4650      	mov	r0, sl
 800a0d8:	f001 fdfc 	bl	800bcd4 <__ssprint_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f040 828d 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a0e2:	ac2c      	add	r4, sp, #176	; 0xb0
 800a0e4:	e23a      	b.n	800a55c <_svfprintf_r+0xc64>
 800a0e6:	9b02      	ldr	r3, [sp, #8]
 800a0e8:	2b65      	cmp	r3, #101	; 0x65
 800a0ea:	f340 81ad 	ble.w	800a448 <_svfprintf_r+0xb50>
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0f6:	f7f6 fce3 	bl	8000ac0 <__aeabi_dcmpeq>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d05e      	beq.n	800a1bc <_svfprintf_r+0x8c4>
 800a0fe:	4b2e      	ldr	r3, [pc, #184]	; (800a1b8 <_svfprintf_r+0x8c0>)
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	2301      	movs	r3, #1
 800a104:	6063      	str	r3, [r4, #4]
 800a106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a108:	3301      	adds	r3, #1
 800a10a:	9321      	str	r3, [sp, #132]	; 0x84
 800a10c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a10e:	3301      	adds	r3, #1
 800a110:	2b07      	cmp	r3, #7
 800a112:	9320      	str	r3, [sp, #128]	; 0x80
 800a114:	dc01      	bgt.n	800a11a <_svfprintf_r+0x822>
 800a116:	3408      	adds	r4, #8
 800a118:	e008      	b.n	800a12c <_svfprintf_r+0x834>
 800a11a:	aa1f      	add	r2, sp, #124	; 0x7c
 800a11c:	4659      	mov	r1, fp
 800a11e:	4650      	mov	r0, sl
 800a120:	f001 fdd8 	bl	800bcd4 <__ssprint_r>
 800a124:	2800      	cmp	r0, #0
 800a126:	f040 8269 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a12a:	ac2c      	add	r4, sp, #176	; 0xb0
 800a12c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a12e:	9a04      	ldr	r2, [sp, #16]
 800a130:	4293      	cmp	r3, r2
 800a132:	db02      	blt.n	800a13a <_svfprintf_r+0x842>
 800a134:	07ee      	lsls	r6, r5, #31
 800a136:	f140 8211 	bpl.w	800a55c <_svfprintf_r+0xc64>
 800a13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	9b08      	ldr	r3, [sp, #32]
 800a140:	6063      	str	r3, [r4, #4]
 800a142:	9a08      	ldr	r2, [sp, #32]
 800a144:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a146:	4413      	add	r3, r2
 800a148:	9321      	str	r3, [sp, #132]	; 0x84
 800a14a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a14c:	3301      	adds	r3, #1
 800a14e:	2b07      	cmp	r3, #7
 800a150:	9320      	str	r3, [sp, #128]	; 0x80
 800a152:	dc01      	bgt.n	800a158 <_svfprintf_r+0x860>
 800a154:	3408      	adds	r4, #8
 800a156:	e008      	b.n	800a16a <_svfprintf_r+0x872>
 800a158:	aa1f      	add	r2, sp, #124	; 0x7c
 800a15a:	4659      	mov	r1, fp
 800a15c:	4650      	mov	r0, sl
 800a15e:	f001 fdb9 	bl	800bcd4 <__ssprint_r>
 800a162:	2800      	cmp	r0, #0
 800a164:	f040 824a 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a168:	ac2c      	add	r4, sp, #176	; 0xb0
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	1e5e      	subs	r6, r3, #1
 800a16e:	2e00      	cmp	r6, #0
 800a170:	f340 81f4 	ble.w	800a55c <_svfprintf_r+0xc64>
 800a174:	4f0f      	ldr	r7, [pc, #60]	; (800a1b4 <_svfprintf_r+0x8bc>)
 800a176:	f04f 0810 	mov.w	r8, #16
 800a17a:	2e10      	cmp	r6, #16
 800a17c:	f340 8159 	ble.w	800a432 <_svfprintf_r+0xb3a>
 800a180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a182:	3310      	adds	r3, #16
 800a184:	9321      	str	r3, [sp, #132]	; 0x84
 800a186:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a188:	3301      	adds	r3, #1
 800a18a:	2b07      	cmp	r3, #7
 800a18c:	e884 0180 	stmia.w	r4, {r7, r8}
 800a190:	9320      	str	r3, [sp, #128]	; 0x80
 800a192:	dc01      	bgt.n	800a198 <_svfprintf_r+0x8a0>
 800a194:	3408      	adds	r4, #8
 800a196:	e008      	b.n	800a1aa <_svfprintf_r+0x8b2>
 800a198:	aa1f      	add	r2, sp, #124	; 0x7c
 800a19a:	4659      	mov	r1, fp
 800a19c:	4650      	mov	r0, sl
 800a19e:	f001 fd99 	bl	800bcd4 <__ssprint_r>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f040 822a 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a1a8:	ac2c      	add	r4, sp, #176	; 0xb0
 800a1aa:	3e10      	subs	r6, #16
 800a1ac:	e7e5      	b.n	800a17a <_svfprintf_r+0x882>
 800a1ae:	bf00      	nop
 800a1b0:	0800c330 	.word	0x0800c330
 800a1b4:	0800c2ec 	.word	0x0800c2ec
 800a1b8:	0800c32e 	.word	0x0800c32e
 800a1bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	dc7c      	bgt.n	800a2bc <_svfprintf_r+0x9c4>
 800a1c2:	4b9f      	ldr	r3, [pc, #636]	; (800a440 <_svfprintf_r+0xb48>)
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	9321      	str	r3, [sp, #132]	; 0x84
 800a1d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	2b07      	cmp	r3, #7
 800a1d6:	9320      	str	r3, [sp, #128]	; 0x80
 800a1d8:	dc01      	bgt.n	800a1de <_svfprintf_r+0x8e6>
 800a1da:	3408      	adds	r4, #8
 800a1dc:	e008      	b.n	800a1f0 <_svfprintf_r+0x8f8>
 800a1de:	aa1f      	add	r2, sp, #124	; 0x7c
 800a1e0:	4659      	mov	r1, fp
 800a1e2:	4650      	mov	r0, sl
 800a1e4:	f001 fd76 	bl	800bcd4 <__ssprint_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	f040 8207 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a1ee:	ac2c      	add	r4, sp, #176	; 0xb0
 800a1f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1f2:	b923      	cbnz	r3, 800a1fe <_svfprintf_r+0x906>
 800a1f4:	9b04      	ldr	r3, [sp, #16]
 800a1f6:	b913      	cbnz	r3, 800a1fe <_svfprintf_r+0x906>
 800a1f8:	07e8      	lsls	r0, r5, #31
 800a1fa:	f140 81af 	bpl.w	800a55c <_svfprintf_r+0xc64>
 800a1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	6063      	str	r3, [r4, #4]
 800a206:	9a08      	ldr	r2, [sp, #32]
 800a208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a20a:	4413      	add	r3, r2
 800a20c:	9321      	str	r3, [sp, #132]	; 0x84
 800a20e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a210:	3301      	adds	r3, #1
 800a212:	2b07      	cmp	r3, #7
 800a214:	9320      	str	r3, [sp, #128]	; 0x80
 800a216:	dc02      	bgt.n	800a21e <_svfprintf_r+0x926>
 800a218:	f104 0308 	add.w	r3, r4, #8
 800a21c:	e008      	b.n	800a230 <_svfprintf_r+0x938>
 800a21e:	aa1f      	add	r2, sp, #124	; 0x7c
 800a220:	4659      	mov	r1, fp
 800a222:	4650      	mov	r0, sl
 800a224:	f001 fd56 	bl	800bcd4 <__ssprint_r>
 800a228:	2800      	cmp	r0, #0
 800a22a:	f040 81e7 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a22e:	ab2c      	add	r3, sp, #176	; 0xb0
 800a230:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a232:	4276      	negs	r6, r6
 800a234:	2e00      	cmp	r6, #0
 800a236:	dd30      	ble.n	800a29a <_svfprintf_r+0x9a2>
 800a238:	4f82      	ldr	r7, [pc, #520]	; (800a444 <_svfprintf_r+0xb4c>)
 800a23a:	2410      	movs	r4, #16
 800a23c:	2e10      	cmp	r6, #16
 800a23e:	dd16      	ble.n	800a26e <_svfprintf_r+0x976>
 800a240:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a242:	601f      	str	r7, [r3, #0]
 800a244:	3210      	adds	r2, #16
 800a246:	9221      	str	r2, [sp, #132]	; 0x84
 800a248:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a24a:	605c      	str	r4, [r3, #4]
 800a24c:	3201      	adds	r2, #1
 800a24e:	2a07      	cmp	r2, #7
 800a250:	9220      	str	r2, [sp, #128]	; 0x80
 800a252:	dc01      	bgt.n	800a258 <_svfprintf_r+0x960>
 800a254:	3308      	adds	r3, #8
 800a256:	e008      	b.n	800a26a <_svfprintf_r+0x972>
 800a258:	aa1f      	add	r2, sp, #124	; 0x7c
 800a25a:	4659      	mov	r1, fp
 800a25c:	4650      	mov	r0, sl
 800a25e:	f001 fd39 	bl	800bcd4 <__ssprint_r>
 800a262:	2800      	cmp	r0, #0
 800a264:	f040 81ca 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a268:	ab2c      	add	r3, sp, #176	; 0xb0
 800a26a:	3e10      	subs	r6, #16
 800a26c:	e7e6      	b.n	800a23c <_svfprintf_r+0x944>
 800a26e:	4a75      	ldr	r2, [pc, #468]	; (800a444 <_svfprintf_r+0xb4c>)
 800a270:	e883 0044 	stmia.w	r3, {r2, r6}
 800a274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a276:	4416      	add	r6, r2
 800a278:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a27a:	9621      	str	r6, [sp, #132]	; 0x84
 800a27c:	3201      	adds	r2, #1
 800a27e:	2a07      	cmp	r2, #7
 800a280:	9220      	str	r2, [sp, #128]	; 0x80
 800a282:	dc01      	bgt.n	800a288 <_svfprintf_r+0x990>
 800a284:	3308      	adds	r3, #8
 800a286:	e008      	b.n	800a29a <_svfprintf_r+0x9a2>
 800a288:	aa1f      	add	r2, sp, #124	; 0x7c
 800a28a:	4659      	mov	r1, fp
 800a28c:	4650      	mov	r0, sl
 800a28e:	f001 fd21 	bl	800bcd4 <__ssprint_r>
 800a292:	2800      	cmp	r0, #0
 800a294:	f040 81b2 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a298:	ab2c      	add	r3, sp, #176	; 0xb0
 800a29a:	9a04      	ldr	r2, [sp, #16]
 800a29c:	605a      	str	r2, [r3, #4]
 800a29e:	9904      	ldr	r1, [sp, #16]
 800a2a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2a2:	f8c3 8000 	str.w	r8, [r3]
 800a2a6:	440a      	add	r2, r1
 800a2a8:	9221      	str	r2, [sp, #132]	; 0x84
 800a2aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a2ac:	3201      	adds	r2, #1
 800a2ae:	2a07      	cmp	r2, #7
 800a2b0:	9220      	str	r2, [sp, #128]	; 0x80
 800a2b2:	f73f af0e 	bgt.w	800a0d2 <_svfprintf_r+0x7da>
 800a2b6:	f103 0408 	add.w	r4, r3, #8
 800a2ba:	e14f      	b.n	800a55c <_svfprintf_r+0xc64>
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	42bb      	cmp	r3, r7
 800a2c0:	bfa8      	it	ge
 800a2c2:	463b      	movge	r3, r7
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	461e      	mov	r6, r3
 800a2c8:	dd15      	ble.n	800a2f6 <_svfprintf_r+0x9fe>
 800a2ca:	6063      	str	r3, [r4, #4]
 800a2cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ce:	f8c4 8000 	str.w	r8, [r4]
 800a2d2:	4433      	add	r3, r6
 800a2d4:	9321      	str	r3, [sp, #132]	; 0x84
 800a2d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a2d8:	3301      	adds	r3, #1
 800a2da:	2b07      	cmp	r3, #7
 800a2dc:	9320      	str	r3, [sp, #128]	; 0x80
 800a2de:	dc01      	bgt.n	800a2e4 <_svfprintf_r+0x9ec>
 800a2e0:	3408      	adds	r4, #8
 800a2e2:	e008      	b.n	800a2f6 <_svfprintf_r+0x9fe>
 800a2e4:	aa1f      	add	r2, sp, #124	; 0x7c
 800a2e6:	4659      	mov	r1, fp
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	f001 fcf3 	bl	800bcd4 <__ssprint_r>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	f040 8184 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a2f4:	ac2c      	add	r4, sp, #176	; 0xb0
 800a2f6:	2e00      	cmp	r6, #0
 800a2f8:	bfac      	ite	ge
 800a2fa:	1bbe      	subge	r6, r7, r6
 800a2fc:	463e      	movlt	r6, r7
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	dd30      	ble.n	800a364 <_svfprintf_r+0xa6c>
 800a302:	f04f 0910 	mov.w	r9, #16
 800a306:	4b4f      	ldr	r3, [pc, #316]	; (800a444 <_svfprintf_r+0xb4c>)
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	2e10      	cmp	r6, #16
 800a30c:	dd16      	ble.n	800a33c <_svfprintf_r+0xa44>
 800a30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a310:	f8c4 9004 	str.w	r9, [r4, #4]
 800a314:	3310      	adds	r3, #16
 800a316:	9321      	str	r3, [sp, #132]	; 0x84
 800a318:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a31a:	3301      	adds	r3, #1
 800a31c:	2b07      	cmp	r3, #7
 800a31e:	9320      	str	r3, [sp, #128]	; 0x80
 800a320:	dc01      	bgt.n	800a326 <_svfprintf_r+0xa2e>
 800a322:	3408      	adds	r4, #8
 800a324:	e008      	b.n	800a338 <_svfprintf_r+0xa40>
 800a326:	aa1f      	add	r2, sp, #124	; 0x7c
 800a328:	4659      	mov	r1, fp
 800a32a:	4650      	mov	r0, sl
 800a32c:	f001 fcd2 	bl	800bcd4 <__ssprint_r>
 800a330:	2800      	cmp	r0, #0
 800a332:	f040 8163 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a336:	ac2c      	add	r4, sp, #176	; 0xb0
 800a338:	3e10      	subs	r6, #16
 800a33a:	e7e4      	b.n	800a306 <_svfprintf_r+0xa0e>
 800a33c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a33e:	6066      	str	r6, [r4, #4]
 800a340:	441e      	add	r6, r3
 800a342:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a344:	9621      	str	r6, [sp, #132]	; 0x84
 800a346:	3301      	adds	r3, #1
 800a348:	2b07      	cmp	r3, #7
 800a34a:	9320      	str	r3, [sp, #128]	; 0x80
 800a34c:	dc01      	bgt.n	800a352 <_svfprintf_r+0xa5a>
 800a34e:	3408      	adds	r4, #8
 800a350:	e008      	b.n	800a364 <_svfprintf_r+0xa6c>
 800a352:	aa1f      	add	r2, sp, #124	; 0x7c
 800a354:	4659      	mov	r1, fp
 800a356:	4650      	mov	r0, sl
 800a358:	f001 fcbc 	bl	800bcd4 <__ssprint_r>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f040 814d 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a362:	ac2c      	add	r4, sp, #176	; 0xb0
 800a364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a366:	9a04      	ldr	r2, [sp, #16]
 800a368:	4293      	cmp	r3, r2
 800a36a:	4447      	add	r7, r8
 800a36c:	db01      	blt.n	800a372 <_svfprintf_r+0xa7a>
 800a36e:	07e9      	lsls	r1, r5, #31
 800a370:	d517      	bpl.n	800a3a2 <_svfprintf_r+0xaaa>
 800a372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	6063      	str	r3, [r4, #4]
 800a37a:	9a08      	ldr	r2, [sp, #32]
 800a37c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a37e:	4413      	add	r3, r2
 800a380:	9321      	str	r3, [sp, #132]	; 0x84
 800a382:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a384:	3301      	adds	r3, #1
 800a386:	2b07      	cmp	r3, #7
 800a388:	9320      	str	r3, [sp, #128]	; 0x80
 800a38a:	dc01      	bgt.n	800a390 <_svfprintf_r+0xa98>
 800a38c:	3408      	adds	r4, #8
 800a38e:	e008      	b.n	800a3a2 <_svfprintf_r+0xaaa>
 800a390:	aa1f      	add	r2, sp, #124	; 0x7c
 800a392:	4659      	mov	r1, fp
 800a394:	4650      	mov	r0, sl
 800a396:	f001 fc9d 	bl	800bcd4 <__ssprint_r>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	f040 812e 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a3a0:	ac2c      	add	r4, sp, #176	; 0xb0
 800a3a2:	9b04      	ldr	r3, [sp, #16]
 800a3a4:	9a04      	ldr	r2, [sp, #16]
 800a3a6:	eb08 0603 	add.w	r6, r8, r3
 800a3aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3ac:	1bf6      	subs	r6, r6, r7
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	429e      	cmp	r6, r3
 800a3b2:	bfa8      	it	ge
 800a3b4:	461e      	movge	r6, r3
 800a3b6:	2e00      	cmp	r6, #0
 800a3b8:	dd14      	ble.n	800a3e4 <_svfprintf_r+0xaec>
 800a3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3bc:	6027      	str	r7, [r4, #0]
 800a3be:	4433      	add	r3, r6
 800a3c0:	9321      	str	r3, [sp, #132]	; 0x84
 800a3c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a3c4:	6066      	str	r6, [r4, #4]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	2b07      	cmp	r3, #7
 800a3ca:	9320      	str	r3, [sp, #128]	; 0x80
 800a3cc:	dc01      	bgt.n	800a3d2 <_svfprintf_r+0xada>
 800a3ce:	3408      	adds	r4, #8
 800a3d0:	e008      	b.n	800a3e4 <_svfprintf_r+0xaec>
 800a3d2:	aa1f      	add	r2, sp, #124	; 0x7c
 800a3d4:	4659      	mov	r1, fp
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	f001 fc7c 	bl	800bcd4 <__ssprint_r>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	f040 810d 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a3e2:	ac2c      	add	r4, sp, #176	; 0xb0
 800a3e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3e6:	9a04      	ldr	r2, [sp, #16]
 800a3e8:	2e00      	cmp	r6, #0
 800a3ea:	eba2 0303 	sub.w	r3, r2, r3
 800a3ee:	bfac      	ite	ge
 800a3f0:	1b9e      	subge	r6, r3, r6
 800a3f2:	461e      	movlt	r6, r3
 800a3f4:	2e00      	cmp	r6, #0
 800a3f6:	f340 80b1 	ble.w	800a55c <_svfprintf_r+0xc64>
 800a3fa:	4f12      	ldr	r7, [pc, #72]	; (800a444 <_svfprintf_r+0xb4c>)
 800a3fc:	f04f 0810 	mov.w	r8, #16
 800a400:	2e10      	cmp	r6, #16
 800a402:	dd16      	ble.n	800a432 <_svfprintf_r+0xb3a>
 800a404:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a406:	3310      	adds	r3, #16
 800a408:	9321      	str	r3, [sp, #132]	; 0x84
 800a40a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a40c:	3301      	adds	r3, #1
 800a40e:	2b07      	cmp	r3, #7
 800a410:	e884 0180 	stmia.w	r4, {r7, r8}
 800a414:	9320      	str	r3, [sp, #128]	; 0x80
 800a416:	dc01      	bgt.n	800a41c <_svfprintf_r+0xb24>
 800a418:	3408      	adds	r4, #8
 800a41a:	e008      	b.n	800a42e <_svfprintf_r+0xb36>
 800a41c:	aa1f      	add	r2, sp, #124	; 0x7c
 800a41e:	4659      	mov	r1, fp
 800a420:	4650      	mov	r0, sl
 800a422:	f001 fc57 	bl	800bcd4 <__ssprint_r>
 800a426:	2800      	cmp	r0, #0
 800a428:	f040 80e8 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a42c:	ac2c      	add	r4, sp, #176	; 0xb0
 800a42e:	3e10      	subs	r6, #16
 800a430:	e7e6      	b.n	800a400 <_svfprintf_r+0xb08>
 800a432:	4b04      	ldr	r3, [pc, #16]	; (800a444 <_svfprintf_r+0xb4c>)
 800a434:	e884 0048 	stmia.w	r4, {r3, r6}
 800a438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a43a:	441e      	add	r6, r3
 800a43c:	9621      	str	r6, [sp, #132]	; 0x84
 800a43e:	e642      	b.n	800a0c6 <_svfprintf_r+0x7ce>
 800a440:	0800c32e 	.word	0x0800c32e
 800a444:	0800c2ec 	.word	0x0800c2ec
 800a448:	9b04      	ldr	r3, [sp, #16]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	dc01      	bgt.n	800a452 <_svfprintf_r+0xb5a>
 800a44e:	07ea      	lsls	r2, r5, #31
 800a450:	d573      	bpl.n	800a53a <_svfprintf_r+0xc42>
 800a452:	2301      	movs	r3, #1
 800a454:	6063      	str	r3, [r4, #4]
 800a456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a458:	f8c4 8000 	str.w	r8, [r4]
 800a45c:	3301      	adds	r3, #1
 800a45e:	9321      	str	r3, [sp, #132]	; 0x84
 800a460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a462:	3301      	adds	r3, #1
 800a464:	2b07      	cmp	r3, #7
 800a466:	9320      	str	r3, [sp, #128]	; 0x80
 800a468:	dc01      	bgt.n	800a46e <_svfprintf_r+0xb76>
 800a46a:	3408      	adds	r4, #8
 800a46c:	e008      	b.n	800a480 <_svfprintf_r+0xb88>
 800a46e:	aa1f      	add	r2, sp, #124	; 0x7c
 800a470:	4659      	mov	r1, fp
 800a472:	4650      	mov	r0, sl
 800a474:	f001 fc2e 	bl	800bcd4 <__ssprint_r>
 800a478:	2800      	cmp	r0, #0
 800a47a:	f040 80bf 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a47e:	ac2c      	add	r4, sp, #176	; 0xb0
 800a480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	9b08      	ldr	r3, [sp, #32]
 800a486:	6063      	str	r3, [r4, #4]
 800a488:	9a08      	ldr	r2, [sp, #32]
 800a48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a48c:	4413      	add	r3, r2
 800a48e:	9321      	str	r3, [sp, #132]	; 0x84
 800a490:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a492:	3301      	adds	r3, #1
 800a494:	2b07      	cmp	r3, #7
 800a496:	9320      	str	r3, [sp, #128]	; 0x80
 800a498:	dc01      	bgt.n	800a49e <_svfprintf_r+0xba6>
 800a49a:	3408      	adds	r4, #8
 800a49c:	e008      	b.n	800a4b0 <_svfprintf_r+0xbb8>
 800a49e:	aa1f      	add	r2, sp, #124	; 0x7c
 800a4a0:	4659      	mov	r1, fp
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	f001 fc16 	bl	800bcd4 <__ssprint_r>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	f040 80a7 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a4ae:	ac2c      	add	r4, sp, #176	; 0xb0
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4b8:	f7f6 fb02 	bl	8000ac0 <__aeabi_dcmpeq>
 800a4bc:	9b04      	ldr	r3, [sp, #16]
 800a4be:	1e5e      	subs	r6, r3, #1
 800a4c0:	b9b8      	cbnz	r0, 800a4f2 <_svfprintf_r+0xbfa>
 800a4c2:	f108 0301 	add.w	r3, r8, #1
 800a4c6:	e884 0048 	stmia.w	r4, {r3, r6}
 800a4ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4cc:	9a04      	ldr	r2, [sp, #16]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	4413      	add	r3, r2
 800a4d2:	9321      	str	r3, [sp, #132]	; 0x84
 800a4d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	2b07      	cmp	r3, #7
 800a4da:	9320      	str	r3, [sp, #128]	; 0x80
 800a4dc:	dd34      	ble.n	800a548 <_svfprintf_r+0xc50>
 800a4de:	aa1f      	add	r2, sp, #124	; 0x7c
 800a4e0:	4659      	mov	r1, fp
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	f001 fbf6 	bl	800bcd4 <__ssprint_r>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f040 8087 	bne.w	800a5fc <_svfprintf_r+0xd04>
 800a4ee:	ac2c      	add	r4, sp, #176	; 0xb0
 800a4f0:	e02b      	b.n	800a54a <_svfprintf_r+0xc52>
 800a4f2:	2e00      	cmp	r6, #0
 800a4f4:	dd29      	ble.n	800a54a <_svfprintf_r+0xc52>
 800a4f6:	4fa7      	ldr	r7, [pc, #668]	; (800a794 <_svfprintf_r+0xe9c>)
 800a4f8:	f04f 0810 	mov.w	r8, #16
 800a4fc:	2e10      	cmp	r6, #16
 800a4fe:	dd15      	ble.n	800a52c <_svfprintf_r+0xc34>
 800a500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a502:	3310      	adds	r3, #16
 800a504:	9321      	str	r3, [sp, #132]	; 0x84
 800a506:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a508:	3301      	adds	r3, #1
 800a50a:	2b07      	cmp	r3, #7
 800a50c:	e884 0180 	stmia.w	r4, {r7, r8}
 800a510:	9320      	str	r3, [sp, #128]	; 0x80
 800a512:	dc01      	bgt.n	800a518 <_svfprintf_r+0xc20>
 800a514:	3408      	adds	r4, #8
 800a516:	e007      	b.n	800a528 <_svfprintf_r+0xc30>
 800a518:	aa1f      	add	r2, sp, #124	; 0x7c
 800a51a:	4659      	mov	r1, fp
 800a51c:	4650      	mov	r0, sl
 800a51e:	f001 fbd9 	bl	800bcd4 <__ssprint_r>
 800a522:	2800      	cmp	r0, #0
 800a524:	d16a      	bne.n	800a5fc <_svfprintf_r+0xd04>
 800a526:	ac2c      	add	r4, sp, #176	; 0xb0
 800a528:	3e10      	subs	r6, #16
 800a52a:	e7e7      	b.n	800a4fc <_svfprintf_r+0xc04>
 800a52c:	4b99      	ldr	r3, [pc, #612]	; (800a794 <_svfprintf_r+0xe9c>)
 800a52e:	e884 0048 	stmia.w	r4, {r3, r6}
 800a532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a534:	441e      	add	r6, r3
 800a536:	9621      	str	r6, [sp, #132]	; 0x84
 800a538:	e7cc      	b.n	800a4d4 <_svfprintf_r+0xbdc>
 800a53a:	2301      	movs	r3, #1
 800a53c:	6063      	str	r3, [r4, #4]
 800a53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a540:	f8c4 8000 	str.w	r8, [r4]
 800a544:	3301      	adds	r3, #1
 800a546:	e7c4      	b.n	800a4d2 <_svfprintf_r+0xbda>
 800a548:	3408      	adds	r4, #8
 800a54a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a550:	6063      	str	r3, [r4, #4]
 800a552:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a554:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a556:	4413      	add	r3, r2
 800a558:	e5b4      	b.n	800a0c4 <_svfprintf_r+0x7cc>
 800a55a:	3408      	adds	r4, #8
 800a55c:	076b      	lsls	r3, r5, #29
 800a55e:	d40b      	bmi.n	800a578 <_svfprintf_r+0xc80>
 800a560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a566:	428a      	cmp	r2, r1
 800a568:	bfac      	ite	ge
 800a56a:	189b      	addge	r3, r3, r2
 800a56c:	185b      	addlt	r3, r3, r1
 800a56e:	930a      	str	r3, [sp, #40]	; 0x28
 800a570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a572:	2b00      	cmp	r3, #0
 800a574:	d035      	beq.n	800a5e2 <_svfprintf_r+0xcea>
 800a576:	e02e      	b.n	800a5d6 <_svfprintf_r+0xcde>
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a57c:	1a9d      	subs	r5, r3, r2
 800a57e:	2d00      	cmp	r5, #0
 800a580:	ddee      	ble.n	800a560 <_svfprintf_r+0xc68>
 800a582:	2610      	movs	r6, #16
 800a584:	4b84      	ldr	r3, [pc, #528]	; (800a798 <_svfprintf_r+0xea0>)
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	2d10      	cmp	r5, #16
 800a58a:	dd13      	ble.n	800a5b4 <_svfprintf_r+0xcbc>
 800a58c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a58e:	6066      	str	r6, [r4, #4]
 800a590:	3310      	adds	r3, #16
 800a592:	9321      	str	r3, [sp, #132]	; 0x84
 800a594:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a596:	3301      	adds	r3, #1
 800a598:	2b07      	cmp	r3, #7
 800a59a:	9320      	str	r3, [sp, #128]	; 0x80
 800a59c:	dc01      	bgt.n	800a5a2 <_svfprintf_r+0xcaa>
 800a59e:	3408      	adds	r4, #8
 800a5a0:	e006      	b.n	800a5b0 <_svfprintf_r+0xcb8>
 800a5a2:	aa1f      	add	r2, sp, #124	; 0x7c
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	f001 fb94 	bl	800bcd4 <__ssprint_r>
 800a5ac:	bb30      	cbnz	r0, 800a5fc <_svfprintf_r+0xd04>
 800a5ae:	ac2c      	add	r4, sp, #176	; 0xb0
 800a5b0:	3d10      	subs	r5, #16
 800a5b2:	e7e7      	b.n	800a584 <_svfprintf_r+0xc8c>
 800a5b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b6:	6065      	str	r5, [r4, #4]
 800a5b8:	441d      	add	r5, r3
 800a5ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a5bc:	9521      	str	r5, [sp, #132]	; 0x84
 800a5be:	3301      	adds	r3, #1
 800a5c0:	2b07      	cmp	r3, #7
 800a5c2:	9320      	str	r3, [sp, #128]	; 0x80
 800a5c4:	ddcc      	ble.n	800a560 <_svfprintf_r+0xc68>
 800a5c6:	aa1f      	add	r2, sp, #124	; 0x7c
 800a5c8:	4659      	mov	r1, fp
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	f001 fb82 	bl	800bcd4 <__ssprint_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d0c5      	beq.n	800a560 <_svfprintf_r+0xc68>
 800a5d4:	e012      	b.n	800a5fc <_svfprintf_r+0xd04>
 800a5d6:	aa1f      	add	r2, sp, #124	; 0x7c
 800a5d8:	4659      	mov	r1, fp
 800a5da:	4650      	mov	r0, sl
 800a5dc:	f001 fb7a 	bl	800bcd4 <__ssprint_r>
 800a5e0:	b960      	cbnz	r0, 800a5fc <_svfprintf_r+0xd04>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9320      	str	r3, [sp, #128]	; 0x80
 800a5e6:	9f03      	ldr	r7, [sp, #12]
 800a5e8:	ac2c      	add	r4, sp, #176	; 0xb0
 800a5ea:	f7ff b9bb 	b.w	8009964 <_svfprintf_r+0x6c>
 800a5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5f0:	b123      	cbz	r3, 800a5fc <_svfprintf_r+0xd04>
 800a5f2:	aa1f      	add	r2, sp, #124	; 0x7c
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	4650      	mov	r0, sl
 800a5f8:	f001 fb6c 	bl	800bcd4 <__ssprint_r>
 800a5fc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a600:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a606:	bf18      	it	ne
 800a608:	f04f 33ff 	movne.w	r3, #4294967295
 800a60c:	4618      	mov	r0, r3
 800a60e:	e12e      	b.n	800a86e <_svfprintf_r+0xf76>
 800a610:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a614:	4610      	mov	r0, r2
 800a616:	4619      	mov	r1, r3
 800a618:	f7f6 fa84 	bl	8000b24 <__aeabi_dcmpun>
 800a61c:	b160      	cbz	r0, 800a638 <_svfprintf_r+0xd40>
 800a61e:	4b5f      	ldr	r3, [pc, #380]	; (800a79c <_svfprintf_r+0xea4>)
 800a620:	4a5f      	ldr	r2, [pc, #380]	; (800a7a0 <_svfprintf_r+0xea8>)
 800a622:	9902      	ldr	r1, [sp, #8]
 800a624:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800a628:	2947      	cmp	r1, #71	; 0x47
 800a62a:	bfcc      	ite	gt
 800a62c:	4690      	movgt	r8, r2
 800a62e:	4698      	movle	r8, r3
 800a630:	f04f 0903 	mov.w	r9, #3
 800a634:	2600      	movs	r6, #0
 800a636:	e44e      	b.n	8009ed6 <_svfprintf_r+0x5de>
 800a638:	f1b9 3fff 	cmp.w	r9, #4294967295
 800a63c:	d00a      	beq.n	800a654 <_svfprintf_r+0xd5c>
 800a63e:	9b02      	ldr	r3, [sp, #8]
 800a640:	f023 0320 	bic.w	r3, r3, #32
 800a644:	2b47      	cmp	r3, #71	; 0x47
 800a646:	d107      	bne.n	800a658 <_svfprintf_r+0xd60>
 800a648:	f1b9 0f00 	cmp.w	r9, #0
 800a64c:	bf08      	it	eq
 800a64e:	f04f 0901 	moveq.w	r9, #1
 800a652:	e001      	b.n	800a658 <_svfprintf_r+0xd60>
 800a654:	f04f 0906 	mov.w	r9, #6
 800a658:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800a65c:	930c      	str	r3, [sp, #48]	; 0x30
 800a65e:	9b07      	ldr	r3, [sp, #28]
 800a660:	2b00      	cmp	r3, #0
 800a662:	da07      	bge.n	800a674 <_svfprintf_r+0xd7c>
 800a664:	9b06      	ldr	r3, [sp, #24]
 800a666:	930e      	str	r3, [sp, #56]	; 0x38
 800a668:	9b07      	ldr	r3, [sp, #28]
 800a66a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a66e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a670:	232d      	movs	r3, #45	; 0x2d
 800a672:	e004      	b.n	800a67e <_svfprintf_r+0xd86>
 800a674:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a678:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800a67c:	2300      	movs	r3, #0
 800a67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a680:	9b02      	ldr	r3, [sp, #8]
 800a682:	f023 0720 	bic.w	r7, r3, #32
 800a686:	2f46      	cmp	r7, #70	; 0x46
 800a688:	d004      	beq.n	800a694 <_svfprintf_r+0xd9c>
 800a68a:	2f45      	cmp	r7, #69	; 0x45
 800a68c:	d105      	bne.n	800a69a <_svfprintf_r+0xda2>
 800a68e:	f109 0601 	add.w	r6, r9, #1
 800a692:	e003      	b.n	800a69c <_svfprintf_r+0xda4>
 800a694:	464e      	mov	r6, r9
 800a696:	2103      	movs	r1, #3
 800a698:	e001      	b.n	800a69e <_svfprintf_r+0xda6>
 800a69a:	464e      	mov	r6, r9
 800a69c:	2102      	movs	r1, #2
 800a69e:	ab1d      	add	r3, sp, #116	; 0x74
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	ab1a      	add	r3, sp, #104	; 0x68
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	4632      	mov	r2, r6
 800a6a8:	ab19      	add	r3, sp, #100	; 0x64
 800a6aa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800a6ae:	4650      	mov	r0, sl
 800a6b0:	f000 f976 	bl	800a9a0 <_dtoa_r>
 800a6b4:	2f47      	cmp	r7, #71	; 0x47
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	d102      	bne.n	800a6c0 <_svfprintf_r+0xdc8>
 800a6ba:	07eb      	lsls	r3, r5, #31
 800a6bc:	f140 80cd 	bpl.w	800a85a <_svfprintf_r+0xf62>
 800a6c0:	eb08 0306 	add.w	r3, r8, r6
 800a6c4:	2f46      	cmp	r7, #70	; 0x46
 800a6c6:	9304      	str	r3, [sp, #16]
 800a6c8:	d111      	bne.n	800a6ee <_svfprintf_r+0xdf6>
 800a6ca:	f898 3000 	ldrb.w	r3, [r8]
 800a6ce:	2b30      	cmp	r3, #48	; 0x30
 800a6d0:	d109      	bne.n	800a6e6 <_svfprintf_r+0xdee>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6da:	f7f6 f9f1 	bl	8000ac0 <__aeabi_dcmpeq>
 800a6de:	b910      	cbnz	r0, 800a6e6 <_svfprintf_r+0xdee>
 800a6e0:	f1c6 0601 	rsb	r6, r6, #1
 800a6e4:	9619      	str	r6, [sp, #100]	; 0x64
 800a6e6:	9a04      	ldr	r2, [sp, #16]
 800a6e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6ea:	441a      	add	r2, r3
 800a6ec:	9204      	str	r2, [sp, #16]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6f6:	f7f6 f9e3 	bl	8000ac0 <__aeabi_dcmpeq>
 800a6fa:	b908      	cbnz	r0, 800a700 <_svfprintf_r+0xe08>
 800a6fc:	2230      	movs	r2, #48	; 0x30
 800a6fe:	e002      	b.n	800a706 <_svfprintf_r+0xe0e>
 800a700:	9b04      	ldr	r3, [sp, #16]
 800a702:	931d      	str	r3, [sp, #116]	; 0x74
 800a704:	e007      	b.n	800a716 <_svfprintf_r+0xe1e>
 800a706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a708:	9904      	ldr	r1, [sp, #16]
 800a70a:	4299      	cmp	r1, r3
 800a70c:	d903      	bls.n	800a716 <_svfprintf_r+0xe1e>
 800a70e:	1c59      	adds	r1, r3, #1
 800a710:	911d      	str	r1, [sp, #116]	; 0x74
 800a712:	701a      	strb	r2, [r3, #0]
 800a714:	e7f7      	b.n	800a706 <_svfprintf_r+0xe0e>
 800a716:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a718:	2f47      	cmp	r7, #71	; 0x47
 800a71a:	ebc8 0303 	rsb	r3, r8, r3
 800a71e:	9304      	str	r3, [sp, #16]
 800a720:	d108      	bne.n	800a734 <_svfprintf_r+0xe3c>
 800a722:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a724:	1cdf      	adds	r7, r3, #3
 800a726:	db01      	blt.n	800a72c <_svfprintf_r+0xe34>
 800a728:	4599      	cmp	r9, r3
 800a72a:	da68      	bge.n	800a7fe <_svfprintf_r+0xf06>
 800a72c:	9b02      	ldr	r3, [sp, #8]
 800a72e:	3b02      	subs	r3, #2
 800a730:	9302      	str	r3, [sp, #8]
 800a732:	e002      	b.n	800a73a <_svfprintf_r+0xe42>
 800a734:	9b02      	ldr	r3, [sp, #8]
 800a736:	2b65      	cmp	r3, #101	; 0x65
 800a738:	dc4a      	bgt.n	800a7d0 <_svfprintf_r+0xed8>
 800a73a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a73c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a740:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800a744:	3b01      	subs	r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	9319      	str	r3, [sp, #100]	; 0x64
 800a74a:	bfba      	itte	lt
 800a74c:	425b      	neglt	r3, r3
 800a74e:	222d      	movlt	r2, #45	; 0x2d
 800a750:	222b      	movge	r2, #43	; 0x2b
 800a752:	2b09      	cmp	r3, #9
 800a754:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800a758:	dd24      	ble.n	800a7a4 <_svfprintf_r+0xeac>
 800a75a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800a75e:	200a      	movs	r0, #10
 800a760:	fb93 f1f0 	sdiv	r1, r3, r0
 800a764:	fb00 3311 	mls	r3, r0, r1, r3
 800a768:	3330      	adds	r3, #48	; 0x30
 800a76a:	2909      	cmp	r1, #9
 800a76c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800a770:	460b      	mov	r3, r1
 800a772:	dcf5      	bgt.n	800a760 <_svfprintf_r+0xe68>
 800a774:	3330      	adds	r3, #48	; 0x30
 800a776:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a77a:	1e51      	subs	r1, r2, #1
 800a77c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800a780:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800a784:	4281      	cmp	r1, r0
 800a786:	461a      	mov	r2, r3
 800a788:	d213      	bcs.n	800a7b2 <_svfprintf_r+0xeba>
 800a78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a78e:	f803 2b01 	strb.w	r2, [r3], #1
 800a792:	e7f7      	b.n	800a784 <_svfprintf_r+0xe8c>
 800a794:	0800c2ec 	.word	0x0800c2ec
 800a798:	0800c330 	.word	0x0800c330
 800a79c:	0800c304 	.word	0x0800c304
 800a7a0:	0800c308 	.word	0x0800c308
 800a7a4:	2230      	movs	r2, #48	; 0x30
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800a7ac:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a7b0:	aa1c      	add	r2, sp, #112	; 0x70
 800a7b2:	ab1b      	add	r3, sp, #108	; 0x6c
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	9a04      	ldr	r2, [sp, #16]
 800a7b8:	9310      	str	r3, [sp, #64]	; 0x40
 800a7ba:	2a01      	cmp	r2, #1
 800a7bc:	eb03 0902 	add.w	r9, r3, r2
 800a7c0:	dc02      	bgt.n	800a7c8 <_svfprintf_r+0xed0>
 800a7c2:	f015 0701 	ands.w	r7, r5, #1
 800a7c6:	d032      	beq.n	800a82e <_svfprintf_r+0xf36>
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	2700      	movs	r7, #0
 800a7cc:	4499      	add	r9, r3
 800a7ce:	e02e      	b.n	800a82e <_svfprintf_r+0xf36>
 800a7d0:	9b02      	ldr	r3, [sp, #8]
 800a7d2:	2b66      	cmp	r3, #102	; 0x66
 800a7d4:	d113      	bne.n	800a7fe <_svfprintf_r+0xf06>
 800a7d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dd07      	ble.n	800a7ec <_svfprintf_r+0xef4>
 800a7dc:	f1b9 0f00 	cmp.w	r9, #0
 800a7e0:	d101      	bne.n	800a7e6 <_svfprintf_r+0xeee>
 800a7e2:	07ee      	lsls	r6, r5, #31
 800a7e4:	d521      	bpl.n	800a82a <_svfprintf_r+0xf32>
 800a7e6:	9a08      	ldr	r2, [sp, #32]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	e006      	b.n	800a7fa <_svfprintf_r+0xf02>
 800a7ec:	f1b9 0f00 	cmp.w	r9, #0
 800a7f0:	d101      	bne.n	800a7f6 <_svfprintf_r+0xefe>
 800a7f2:	07ed      	lsls	r5, r5, #31
 800a7f4:	d514      	bpl.n	800a820 <_svfprintf_r+0xf28>
 800a7f6:	9b08      	ldr	r3, [sp, #32]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	444b      	add	r3, r9
 800a7fc:	e015      	b.n	800a82a <_svfprintf_r+0xf32>
 800a7fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a800:	9a04      	ldr	r2, [sp, #16]
 800a802:	4293      	cmp	r3, r2
 800a804:	db03      	blt.n	800a80e <_svfprintf_r+0xf16>
 800a806:	07e8      	lsls	r0, r5, #31
 800a808:	d50d      	bpl.n	800a826 <_svfprintf_r+0xf2e>
 800a80a:	9a08      	ldr	r2, [sp, #32]
 800a80c:	e006      	b.n	800a81c <_svfprintf_r+0xf24>
 800a80e:	9a04      	ldr	r2, [sp, #16]
 800a810:	9908      	ldr	r1, [sp, #32]
 800a812:	2b00      	cmp	r3, #0
 800a814:	440a      	add	r2, r1
 800a816:	dc05      	bgt.n	800a824 <_svfprintf_r+0xf2c>
 800a818:	f1c3 0301 	rsb	r3, r3, #1
 800a81c:	4413      	add	r3, r2
 800a81e:	e002      	b.n	800a826 <_svfprintf_r+0xf2e>
 800a820:	2301      	movs	r3, #1
 800a822:	e002      	b.n	800a82a <_svfprintf_r+0xf32>
 800a824:	4613      	mov	r3, r2
 800a826:	2267      	movs	r2, #103	; 0x67
 800a828:	9202      	str	r2, [sp, #8]
 800a82a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a82c:	4699      	mov	r9, r3
 800a82e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a830:	b113      	cbz	r3, 800a838 <_svfprintf_r+0xf40>
 800a832:	232d      	movs	r3, #45	; 0x2d
 800a834:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800a838:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a83a:	2600      	movs	r6, #0
 800a83c:	f7ff bb4c 	b.w	8009ed8 <_svfprintf_r+0x5e0>
 800a840:	2200      	movs	r2, #0
 800a842:	2300      	movs	r3, #0
 800a844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a848:	f7f6 f944 	bl	8000ad4 <__aeabi_dcmplt>
 800a84c:	b110      	cbz	r0, 800a854 <_svfprintf_r+0xf5c>
 800a84e:	232d      	movs	r3, #45	; 0x2d
 800a850:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800a854:	4b07      	ldr	r3, [pc, #28]	; (800a874 <_svfprintf_r+0xf7c>)
 800a856:	4a08      	ldr	r2, [pc, #32]	; (800a878 <_svfprintf_r+0xf80>)
 800a858:	e6e3      	b.n	800a622 <_svfprintf_r+0xd2a>
 800a85a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a85c:	1a1b      	subs	r3, r3, r0
 800a85e:	9304      	str	r3, [sp, #16]
 800a860:	e75f      	b.n	800a722 <_svfprintf_r+0xe2a>
 800a862:	ea56 0207 	orrs.w	r2, r6, r7
 800a866:	f47f aaaa 	bne.w	8009dbe <_svfprintf_r+0x4c6>
 800a86a:	f7ff baaf 	b.w	8009dcc <_svfprintf_r+0x4d4>
 800a86e:	b03d      	add	sp, #244	; 0xf4
 800a870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	0800c2fc 	.word	0x0800c2fc
 800a878:	0800c300 	.word	0x0800c300

0800a87c <quorem>:
 800a87c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	6903      	ldr	r3, [r0, #16]
 800a882:	690c      	ldr	r4, [r1, #16]
 800a884:	429c      	cmp	r4, r3
 800a886:	4680      	mov	r8, r0
 800a888:	f300 8083 	bgt.w	800a992 <quorem+0x116>
 800a88c:	3c01      	subs	r4, #1
 800a88e:	f101 0714 	add.w	r7, r1, #20
 800a892:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800a896:	f100 0614 	add.w	r6, r0, #20
 800a89a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a89e:	eb06 030e 	add.w	r3, r6, lr
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	3501      	adds	r5, #1
 800a8a6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800a8aa:	fbb3 f5f5 	udiv	r5, r3, r5
 800a8ae:	eb07 090e 	add.w	r9, r7, lr
 800a8b2:	2d00      	cmp	r5, #0
 800a8b4:	d039      	beq.n	800a92a <quorem+0xae>
 800a8b6:	f04f 0a00 	mov.w	sl, #0
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	46b4      	mov	ip, r6
 800a8be:	46d3      	mov	fp, sl
 800a8c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8c4:	b293      	uxth	r3, r2
 800a8c6:	fb05 a303 	mla	r3, r5, r3, sl
 800a8ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	ebc3 030b 	rsb	r3, r3, fp
 800a8d4:	0c12      	lsrs	r2, r2, #16
 800a8d6:	f8bc b000 	ldrh.w	fp, [ip]
 800a8da:	fb05 a202 	mla	r2, r5, r2, sl
 800a8de:	fa13 f38b 	uxtah	r3, r3, fp
 800a8e2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a8e6:	fa1f fb82 	uxth.w	fp, r2
 800a8ea:	f8dc 2000 	ldr.w	r2, [ip]
 800a8ee:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a8f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8fc:	4581      	cmp	r9, r0
 800a8fe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a902:	f84c 3b04 	str.w	r3, [ip], #4
 800a906:	d2db      	bcs.n	800a8c0 <quorem+0x44>
 800a908:	f856 300e 	ldr.w	r3, [r6, lr]
 800a90c:	b96b      	cbnz	r3, 800a92a <quorem+0xae>
 800a90e:	9b01      	ldr	r3, [sp, #4]
 800a910:	3b04      	subs	r3, #4
 800a912:	429e      	cmp	r6, r3
 800a914:	461a      	mov	r2, r3
 800a916:	d302      	bcc.n	800a91e <quorem+0xa2>
 800a918:	f8c8 4010 	str.w	r4, [r8, #16]
 800a91c:	e005      	b.n	800a92a <quorem+0xae>
 800a91e:	6812      	ldr	r2, [r2, #0]
 800a920:	3b04      	subs	r3, #4
 800a922:	2a00      	cmp	r2, #0
 800a924:	d1f8      	bne.n	800a918 <quorem+0x9c>
 800a926:	3c01      	subs	r4, #1
 800a928:	e7f3      	b.n	800a912 <quorem+0x96>
 800a92a:	4640      	mov	r0, r8
 800a92c:	f001 f909 	bl	800bb42 <__mcmp>
 800a930:	2800      	cmp	r0, #0
 800a932:	db2c      	blt.n	800a98e <quorem+0x112>
 800a934:	3501      	adds	r5, #1
 800a936:	4630      	mov	r0, r6
 800a938:	f04f 0e00 	mov.w	lr, #0
 800a93c:	f857 1b04 	ldr.w	r1, [r7], #4
 800a940:	f8d0 c000 	ldr.w	ip, [r0]
 800a944:	b28a      	uxth	r2, r1
 800a946:	ebc2 030e 	rsb	r3, r2, lr
 800a94a:	0c09      	lsrs	r1, r1, #16
 800a94c:	fa13 f38c 	uxtah	r3, r3, ip
 800a950:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800a954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a958:	b29b      	uxth	r3, r3
 800a95a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a95e:	45b9      	cmp	r9, r7
 800a960:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a964:	f840 3b04 	str.w	r3, [r0], #4
 800a968:	d2e8      	bcs.n	800a93c <quorem+0xc0>
 800a96a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a96e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a972:	b962      	cbnz	r2, 800a98e <quorem+0x112>
 800a974:	3b04      	subs	r3, #4
 800a976:	429e      	cmp	r6, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	d302      	bcc.n	800a982 <quorem+0x106>
 800a97c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a980:	e005      	b.n	800a98e <quorem+0x112>
 800a982:	6812      	ldr	r2, [r2, #0]
 800a984:	3b04      	subs	r3, #4
 800a986:	2a00      	cmp	r2, #0
 800a988:	d1f8      	bne.n	800a97c <quorem+0x100>
 800a98a:	3c01      	subs	r4, #1
 800a98c:	e7f3      	b.n	800a976 <quorem+0xfa>
 800a98e:	4628      	mov	r0, r5
 800a990:	e000      	b.n	800a994 <quorem+0x118>
 800a992:	2000      	movs	r0, #0
 800a994:	b003      	add	sp, #12
 800a996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99a:	0000      	movs	r0, r0
 800a99c:	0000      	movs	r0, r0
	...

0800a9a0 <_dtoa_r>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	ec59 8b10 	vmov	r8, r9, d0
 800a9a8:	b097      	sub	sp, #92	; 0x5c
 800a9aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9ac:	9106      	str	r1, [sp, #24]
 800a9ae:	4682      	mov	sl, r0
 800a9b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a9b2:	9310      	str	r3, [sp, #64]	; 0x40
 800a9b4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800a9b6:	e9cd 8900 	strd	r8, r9, [sp]
 800a9ba:	b945      	cbnz	r5, 800a9ce <_dtoa_r+0x2e>
 800a9bc:	2010      	movs	r0, #16
 800a9be:	f7fe fcf7 	bl	80093b0 <malloc>
 800a9c2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800a9c6:	6045      	str	r5, [r0, #4]
 800a9c8:	6085      	str	r5, [r0, #8]
 800a9ca:	6005      	str	r5, [r0, #0]
 800a9cc:	60c5      	str	r5, [r0, #12]
 800a9ce:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	b159      	cbz	r1, 800a9ee <_dtoa_r+0x4e>
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	604a      	str	r2, [r1, #4]
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4093      	lsls	r3, r2
 800a9de:	608b      	str	r3, [r1, #8]
 800a9e0:	4650      	mov	r0, sl
 800a9e2:	f000 fed5 	bl	800b790 <_Bfree>
 800a9e6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	9b01      	ldr	r3, [sp, #4]
 800a9f0:	4a9f      	ldr	r2, [pc, #636]	; (800ac70 <_dtoa_r+0x2d0>)
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bfbf      	itttt	lt
 800a9f6:	2301      	movlt	r3, #1
 800a9f8:	6023      	strlt	r3, [r4, #0]
 800a9fa:	9b01      	ldrlt	r3, [sp, #4]
 800a9fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa00:	bfb8      	it	lt
 800aa02:	9301      	strlt	r3, [sp, #4]
 800aa04:	9f01      	ldr	r7, [sp, #4]
 800aa06:	bfa4      	itt	ge
 800aa08:	2300      	movge	r3, #0
 800aa0a:	6023      	strge	r3, [r4, #0]
 800aa0c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800aa10:	0d1b      	lsrs	r3, r3, #20
 800aa12:	051b      	lsls	r3, r3, #20
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d11d      	bne.n	800aa54 <_dtoa_r+0xb4>
 800aa18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	9b00      	ldr	r3, [sp, #0]
 800aa22:	b943      	cbnz	r3, 800aa36 <_dtoa_r+0x96>
 800aa24:	4a93      	ldr	r2, [pc, #588]	; (800ac74 <_dtoa_r+0x2d4>)
 800aa26:	4b94      	ldr	r3, [pc, #592]	; (800ac78 <_dtoa_r+0x2d8>)
 800aa28:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	bf14      	ite	ne
 800aa30:	4618      	movne	r0, r3
 800aa32:	4610      	moveq	r0, r2
 800aa34:	e000      	b.n	800aa38 <_dtoa_r+0x98>
 800aa36:	4890      	ldr	r0, [pc, #576]	; (800ac78 <_dtoa_r+0x2d8>)
 800aa38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 854a 	beq.w	800b4d4 <_dtoa_r+0xb34>
 800aa40:	78c3      	ldrb	r3, [r0, #3]
 800aa42:	b113      	cbz	r3, 800aa4a <_dtoa_r+0xaa>
 800aa44:	f100 0308 	add.w	r3, r0, #8
 800aa48:	e000      	b.n	800aa4c <_dtoa_r+0xac>
 800aa4a:	1cc3      	adds	r3, r0, #3
 800aa4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	f000 bd40 	b.w	800b4d4 <_dtoa_r+0xb34>
 800aa54:	e9dd 4500 	ldrd	r4, r5, [sp]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	4629      	mov	r1, r5
 800aa60:	f7f6 f82e 	bl	8000ac0 <__aeabi_dcmpeq>
 800aa64:	4680      	mov	r8, r0
 800aa66:	b158      	cbz	r0, 800aa80 <_dtoa_r+0xe0>
 800aa68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 8522 	beq.w	800b4ba <_dtoa_r+0xb1a>
 800aa76:	4881      	ldr	r0, [pc, #516]	; (800ac7c <_dtoa_r+0x2dc>)
 800aa78:	6018      	str	r0, [r3, #0]
 800aa7a:	3801      	subs	r0, #1
 800aa7c:	f000 bd2a 	b.w	800b4d4 <_dtoa_r+0xb34>
 800aa80:	aa14      	add	r2, sp, #80	; 0x50
 800aa82:	a915      	add	r1, sp, #84	; 0x54
 800aa84:	ec45 4b10 	vmov	d0, r4, r5
 800aa88:	4650      	mov	r0, sl
 800aa8a:	f001 f8d5 	bl	800bc38 <__d2b>
 800aa8e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa92:	9002      	str	r0, [sp, #8]
 800aa94:	b15e      	cbz	r6, 800aaae <_dtoa_r+0x10e>
 800aa96:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aa9a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aaa4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800aaa8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800aaac:	e01d      	b.n	800aaea <_dtoa_r+0x14a>
 800aaae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aab0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800aab2:	441e      	add	r6, r3
 800aab4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800aab8:	2b20      	cmp	r3, #32
 800aaba:	dd0a      	ble.n	800aad2 <_dtoa_r+0x132>
 800aabc:	9a00      	ldr	r2, [sp, #0]
 800aabe:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800aac2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800aac6:	fa22 f000 	lsr.w	r0, r2, r0
 800aaca:	fa07 f303 	lsl.w	r3, r7, r3
 800aace:	4318      	orrs	r0, r3
 800aad0:	e004      	b.n	800aadc <_dtoa_r+0x13c>
 800aad2:	f1c3 0020 	rsb	r0, r3, #32
 800aad6:	9b00      	ldr	r3, [sp, #0]
 800aad8:	fa03 f000 	lsl.w	r0, r3, r0
 800aadc:	f7f5 fd12 	bl	8000504 <__aeabi_ui2d>
 800aae0:	2301      	movs	r3, #1
 800aae2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aae6:	3e01      	subs	r6, #1
 800aae8:	9311      	str	r3, [sp, #68]	; 0x44
 800aaea:	2200      	movs	r2, #0
 800aaec:	4b64      	ldr	r3, [pc, #400]	; (800ac80 <_dtoa_r+0x2e0>)
 800aaee:	f7f5 fbcb 	bl	8000288 <__aeabi_dsub>
 800aaf2:	a359      	add	r3, pc, #356	; (adr r3, 800ac58 <_dtoa_r+0x2b8>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f7f5 fd7a 	bl	80005f0 <__aeabi_dmul>
 800aafc:	a358      	add	r3, pc, #352	; (adr r3, 800ac60 <_dtoa_r+0x2c0>)
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	f7f5 fbc3 	bl	800028c <__adddf3>
 800ab06:	4604      	mov	r4, r0
 800ab08:	4630      	mov	r0, r6
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	f7f5 fd0a 	bl	8000524 <__aeabi_i2d>
 800ab10:	a355      	add	r3, pc, #340	; (adr r3, 800ac68 <_dtoa_r+0x2c8>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fd6b 	bl	80005f0 <__aeabi_dmul>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4620      	mov	r0, r4
 800ab20:	4629      	mov	r1, r5
 800ab22:	f7f5 fbb3 	bl	800028c <__adddf3>
 800ab26:	4604      	mov	r4, r0
 800ab28:	460d      	mov	r5, r1
 800ab2a:	f7f6 f811 	bl	8000b50 <__aeabi_d2iz>
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4683      	mov	fp, r0
 800ab32:	2300      	movs	r3, #0
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f5 ffcc 	bl	8000ad4 <__aeabi_dcmplt>
 800ab3c:	b158      	cbz	r0, 800ab56 <_dtoa_r+0x1b6>
 800ab3e:	4658      	mov	r0, fp
 800ab40:	f7f5 fcf0 	bl	8000524 <__aeabi_i2d>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 ffb8 	bl	8000ac0 <__aeabi_dcmpeq>
 800ab50:	b908      	cbnz	r0, 800ab56 <_dtoa_r+0x1b6>
 800ab52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab56:	f1bb 0f16 	cmp.w	fp, #22
 800ab5a:	d80d      	bhi.n	800ab78 <_dtoa_r+0x1d8>
 800ab5c:	4949      	ldr	r1, [pc, #292]	; (800ac84 <_dtoa_r+0x2e4>)
 800ab5e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ab62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab6a:	f7f5 ffd1 	bl	8000b10 <__aeabi_dcmpgt>
 800ab6e:	b130      	cbz	r0, 800ab7e <_dtoa_r+0x1de>
 800ab70:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab74:	2300      	movs	r3, #0
 800ab76:	e000      	b.n	800ab7a <_dtoa_r+0x1da>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab7c:	e000      	b.n	800ab80 <_dtoa_r+0x1e0>
 800ab7e:	900d      	str	r0, [sp, #52]	; 0x34
 800ab80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab82:	1b9e      	subs	r6, r3, r6
 800ab84:	1e73      	subs	r3, r6, #1
 800ab86:	9305      	str	r3, [sp, #20]
 800ab88:	bf43      	ittte	mi
 800ab8a:	f1c3 0900 	rsbmi	r9, r3, #0
 800ab8e:	2300      	movmi	r3, #0
 800ab90:	9305      	strmi	r3, [sp, #20]
 800ab92:	f04f 0900 	movpl.w	r9, #0
 800ab96:	f1bb 0f00 	cmp.w	fp, #0
 800ab9a:	db07      	blt.n	800abac <_dtoa_r+0x20c>
 800ab9c:	9b05      	ldr	r3, [sp, #20]
 800ab9e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800aba2:	445b      	add	r3, fp
 800aba4:	9305      	str	r3, [sp, #20]
 800aba6:	2300      	movs	r3, #0
 800aba8:	9307      	str	r3, [sp, #28]
 800abaa:	e006      	b.n	800abba <_dtoa_r+0x21a>
 800abac:	f1cb 0300 	rsb	r3, fp, #0
 800abb0:	9307      	str	r3, [sp, #28]
 800abb2:	2300      	movs	r3, #0
 800abb4:	ebcb 0909 	rsb	r9, fp, r9
 800abb8:	930c      	str	r3, [sp, #48]	; 0x30
 800abba:	9b06      	ldr	r3, [sp, #24]
 800abbc:	2b09      	cmp	r3, #9
 800abbe:	d827      	bhi.n	800ac10 <_dtoa_r+0x270>
 800abc0:	2b05      	cmp	r3, #5
 800abc2:	bfc4      	itt	gt
 800abc4:	3b04      	subgt	r3, #4
 800abc6:	9306      	strgt	r3, [sp, #24]
 800abc8:	9b06      	ldr	r3, [sp, #24]
 800abca:	f1a3 0302 	sub.w	r3, r3, #2
 800abce:	bfcc      	ite	gt
 800abd0:	2500      	movgt	r5, #0
 800abd2:	2501      	movle	r5, #1
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d820      	bhi.n	800ac1a <_dtoa_r+0x27a>
 800abd8:	e8df f003 	tbb	[pc, r3]
 800abdc:	04020e06 	.word	0x04020e06
 800abe0:	2301      	movs	r3, #1
 800abe2:	e002      	b.n	800abea <_dtoa_r+0x24a>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e008      	b.n	800abfa <_dtoa_r+0x25a>
 800abe8:	2300      	movs	r3, #0
 800abea:	9308      	str	r3, [sp, #32]
 800abec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dd1c      	ble.n	800ac2c <_dtoa_r+0x28c>
 800abf2:	9303      	str	r3, [sp, #12]
 800abf4:	4698      	mov	r8, r3
 800abf6:	e01e      	b.n	800ac36 <_dtoa_r+0x296>
 800abf8:	2300      	movs	r3, #0
 800abfa:	9308      	str	r3, [sp, #32]
 800abfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfe:	445b      	add	r3, fp
 800ac00:	f103 0801 	add.w	r8, r3, #1
 800ac04:	9303      	str	r3, [sp, #12]
 800ac06:	4643      	mov	r3, r8
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	bfb8      	it	lt
 800ac0c:	2301      	movlt	r3, #1
 800ac0e:	e012      	b.n	800ac36 <_dtoa_r+0x296>
 800ac10:	2501      	movs	r5, #1
 800ac12:	2300      	movs	r3, #0
 800ac14:	9306      	str	r3, [sp, #24]
 800ac16:	9508      	str	r5, [sp, #32]
 800ac18:	e001      	b.n	800ac1e <_dtoa_r+0x27e>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	9308      	str	r3, [sp, #32]
 800ac1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac22:	9303      	str	r3, [sp, #12]
 800ac24:	4698      	mov	r8, r3
 800ac26:	2200      	movs	r2, #0
 800ac28:	2312      	movs	r3, #18
 800ac2a:	e003      	b.n	800ac34 <_dtoa_r+0x294>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	9303      	str	r3, [sp, #12]
 800ac30:	4698      	mov	r8, r3
 800ac32:	461a      	mov	r2, r3
 800ac34:	9209      	str	r2, [sp, #36]	; 0x24
 800ac36:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	6062      	str	r2, [r4, #4]
 800ac3e:	2104      	movs	r1, #4
 800ac40:	f101 0214 	add.w	r2, r1, #20
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d81f      	bhi.n	800ac88 <_dtoa_r+0x2e8>
 800ac48:	6862      	ldr	r2, [r4, #4]
 800ac4a:	3201      	adds	r2, #1
 800ac4c:	6062      	str	r2, [r4, #4]
 800ac4e:	0049      	lsls	r1, r1, #1
 800ac50:	e7f6      	b.n	800ac40 <_dtoa_r+0x2a0>
 800ac52:	bf00      	nop
 800ac54:	f3af 8000 	nop.w
 800ac58:	636f4361 	.word	0x636f4361
 800ac5c:	3fd287a7 	.word	0x3fd287a7
 800ac60:	8b60c8b3 	.word	0x8b60c8b3
 800ac64:	3fc68a28 	.word	0x3fc68a28
 800ac68:	509f79fb 	.word	0x509f79fb
 800ac6c:	3fd34413 	.word	0x3fd34413
 800ac70:	7ff00000 	.word	0x7ff00000
 800ac74:	0800c340 	.word	0x0800c340
 800ac78:	0800c349 	.word	0x0800c349
 800ac7c:	0800c32f 	.word	0x0800c32f
 800ac80:	3ff80000 	.word	0x3ff80000
 800ac84:	0800c358 	.word	0x0800c358
 800ac88:	6861      	ldr	r1, [r4, #4]
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	f000 fd4b 	bl	800b726 <_Balloc>
 800ac90:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800ac94:	6020      	str	r0, [r4, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	9304      	str	r3, [sp, #16]
 800ac9a:	f1b8 0f0e 	cmp.w	r8, #14
 800ac9e:	f200 815d 	bhi.w	800af5c <_dtoa_r+0x5bc>
 800aca2:	2d00      	cmp	r5, #0
 800aca4:	f000 815a 	beq.w	800af5c <_dtoa_r+0x5bc>
 800aca8:	ed9d 7b00 	vldr	d7, [sp]
 800acac:	f1bb 0f00 	cmp.w	fp, #0
 800acb0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800acb4:	dd31      	ble.n	800ad1a <_dtoa_r+0x37a>
 800acb6:	4aa0      	ldr	r2, [pc, #640]	; (800af38 <_dtoa_r+0x598>)
 800acb8:	f00b 030f 	and.w	r3, fp, #15
 800acbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acc0:	ed93 7b00 	vldr	d7, [r3]
 800acc4:	ea4f 142b 	mov.w	r4, fp, asr #4
 800acc8:	06e2      	lsls	r2, r4, #27
 800acca:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800acce:	d50c      	bpl.n	800acea <_dtoa_r+0x34a>
 800acd0:	4b9a      	ldr	r3, [pc, #616]	; (800af3c <_dtoa_r+0x59c>)
 800acd2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800acd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acda:	f7f5 fdb3 	bl	8000844 <__aeabi_ddiv>
 800acde:	f004 040f 	and.w	r4, r4, #15
 800ace2:	e9cd 0100 	strd	r0, r1, [sp]
 800ace6:	2603      	movs	r6, #3
 800ace8:	e000      	b.n	800acec <_dtoa_r+0x34c>
 800acea:	2602      	movs	r6, #2
 800acec:	4d93      	ldr	r5, [pc, #588]	; (800af3c <_dtoa_r+0x59c>)
 800acee:	b16c      	cbz	r4, 800ad0c <_dtoa_r+0x36c>
 800acf0:	07e3      	lsls	r3, r4, #31
 800acf2:	d508      	bpl.n	800ad06 <_dtoa_r+0x366>
 800acf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800acf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acfc:	f7f5 fc78 	bl	80005f0 <__aeabi_dmul>
 800ad00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ad04:	3601      	adds	r6, #1
 800ad06:	1064      	asrs	r4, r4, #1
 800ad08:	3508      	adds	r5, #8
 800ad0a:	e7f0      	b.n	800acee <_dtoa_r+0x34e>
 800ad0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad14:	f7f5 fd96 	bl	8000844 <__aeabi_ddiv>
 800ad18:	e020      	b.n	800ad5c <_dtoa_r+0x3bc>
 800ad1a:	f1cb 0400 	rsb	r4, fp, #0
 800ad1e:	b304      	cbz	r4, 800ad62 <_dtoa_r+0x3c2>
 800ad20:	4b85      	ldr	r3, [pc, #532]	; (800af38 <_dtoa_r+0x598>)
 800ad22:	4d86      	ldr	r5, [pc, #536]	; (800af3c <_dtoa_r+0x59c>)
 800ad24:	f004 020f 	and.w	r2, r4, #15
 800ad28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad34:	f7f5 fc5c 	bl	80005f0 <__aeabi_dmul>
 800ad38:	e9cd 0100 	strd	r0, r1, [sp]
 800ad3c:	1124      	asrs	r4, r4, #4
 800ad3e:	2300      	movs	r3, #0
 800ad40:	2602      	movs	r6, #2
 800ad42:	b154      	cbz	r4, 800ad5a <_dtoa_r+0x3ba>
 800ad44:	07e7      	lsls	r7, r4, #31
 800ad46:	d505      	bpl.n	800ad54 <_dtoa_r+0x3b4>
 800ad48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad4c:	f7f5 fc50 	bl	80005f0 <__aeabi_dmul>
 800ad50:	3601      	adds	r6, #1
 800ad52:	2301      	movs	r3, #1
 800ad54:	1064      	asrs	r4, r4, #1
 800ad56:	3508      	adds	r5, #8
 800ad58:	e7f3      	b.n	800ad42 <_dtoa_r+0x3a2>
 800ad5a:	b11b      	cbz	r3, 800ad64 <_dtoa_r+0x3c4>
 800ad5c:	e9cd 0100 	strd	r0, r1, [sp]
 800ad60:	e000      	b.n	800ad64 <_dtoa_r+0x3c4>
 800ad62:	2602      	movs	r6, #2
 800ad64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad66:	b1eb      	cbz	r3, 800ada4 <_dtoa_r+0x404>
 800ad68:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4b74      	ldr	r3, [pc, #464]	; (800af40 <_dtoa_r+0x5a0>)
 800ad70:	4620      	mov	r0, r4
 800ad72:	4629      	mov	r1, r5
 800ad74:	f7f5 feae 	bl	8000ad4 <__aeabi_dcmplt>
 800ad78:	b1a0      	cbz	r0, 800ada4 <_dtoa_r+0x404>
 800ad7a:	f1b8 0f00 	cmp.w	r8, #0
 800ad7e:	d011      	beq.n	800ada4 <_dtoa_r+0x404>
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f340 80e6 	ble.w	800af54 <_dtoa_r+0x5b4>
 800ad88:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ad8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ad8e:	2200      	movs	r2, #0
 800ad90:	4b6c      	ldr	r3, [pc, #432]	; (800af44 <_dtoa_r+0x5a4>)
 800ad92:	4620      	mov	r0, r4
 800ad94:	4629      	mov	r1, r5
 800ad96:	f7f5 fc2b 	bl	80005f0 <__aeabi_dmul>
 800ad9a:	3601      	adds	r6, #1
 800ad9c:	e9cd 0100 	strd	r0, r1, [sp]
 800ada0:	9f03      	ldr	r7, [sp, #12]
 800ada2:	e002      	b.n	800adaa <_dtoa_r+0x40a>
 800ada4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ada8:	4647      	mov	r7, r8
 800adaa:	4630      	mov	r0, r6
 800adac:	f7f5 fbba 	bl	8000524 <__aeabi_i2d>
 800adb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adb4:	f7f5 fc1c 	bl	80005f0 <__aeabi_dmul>
 800adb8:	2200      	movs	r2, #0
 800adba:	4b63      	ldr	r3, [pc, #396]	; (800af48 <_dtoa_r+0x5a8>)
 800adbc:	f7f5 fa66 	bl	800028c <__adddf3>
 800adc0:	4604      	mov	r4, r0
 800adc2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800adc6:	b9cf      	cbnz	r7, 800adfc <_dtoa_r+0x45c>
 800adc8:	2200      	movs	r2, #0
 800adca:	4b60      	ldr	r3, [pc, #384]	; (800af4c <_dtoa_r+0x5ac>)
 800adcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800add0:	f7f5 fa5a 	bl	8000288 <__aeabi_dsub>
 800add4:	4622      	mov	r2, r4
 800add6:	462b      	mov	r3, r5
 800add8:	e9cd 0100 	strd	r0, r1, [sp]
 800addc:	f7f5 fe98 	bl	8000b10 <__aeabi_dcmpgt>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	f040 8241 	bne.w	800b268 <_dtoa_r+0x8c8>
 800ade6:	4622      	mov	r2, r4
 800ade8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800adec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf0:	f7f5 fe70 	bl	8000ad4 <__aeabi_dcmplt>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f040 822e 	bne.w	800b256 <_dtoa_r+0x8b6>
 800adfa:	e0ab      	b.n	800af54 <_dtoa_r+0x5b4>
 800adfc:	9a08      	ldr	r2, [sp, #32]
 800adfe:	4b4e      	ldr	r3, [pc, #312]	; (800af38 <_dtoa_r+0x598>)
 800ae00:	1e79      	subs	r1, r7, #1
 800ae02:	2a00      	cmp	r2, #0
 800ae04:	d04a      	beq.n	800ae9c <_dtoa_r+0x4fc>
 800ae06:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	2000      	movs	r0, #0
 800ae10:	494f      	ldr	r1, [pc, #316]	; (800af50 <_dtoa_r+0x5b0>)
 800ae12:	f7f5 fd17 	bl	8000844 <__aeabi_ddiv>
 800ae16:	4622      	mov	r2, r4
 800ae18:	462b      	mov	r3, r5
 800ae1a:	f7f5 fa35 	bl	8000288 <__aeabi_dsub>
 800ae1e:	9c04      	ldr	r4, [sp, #16]
 800ae20:	4605      	mov	r5, r0
 800ae22:	460e      	mov	r6, r1
 800ae24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae28:	f7f5 fe92 	bl	8000b50 <__aeabi_d2iz>
 800ae2c:	9012      	str	r0, [sp, #72]	; 0x48
 800ae2e:	f7f5 fb79 	bl	8000524 <__aeabi_i2d>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae3a:	f7f5 fa25 	bl	8000288 <__aeabi_dsub>
 800ae3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae40:	3330      	adds	r3, #48	; 0x30
 800ae42:	f804 3b01 	strb.w	r3, [r4], #1
 800ae46:	462a      	mov	r2, r5
 800ae48:	4633      	mov	r3, r6
 800ae4a:	e9cd 0100 	strd	r0, r1, [sp]
 800ae4e:	f7f5 fe41 	bl	8000ad4 <__aeabi_dcmplt>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	f040 8321 	bne.w	800b49a <_dtoa_r+0xafa>
 800ae58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	4938      	ldr	r1, [pc, #224]	; (800af40 <_dtoa_r+0x5a0>)
 800ae60:	f7f5 fa12 	bl	8000288 <__aeabi_dsub>
 800ae64:	462a      	mov	r2, r5
 800ae66:	4633      	mov	r3, r6
 800ae68:	f7f5 fe34 	bl	8000ad4 <__aeabi_dcmplt>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	f040 80d2 	bne.w	800b016 <_dtoa_r+0x676>
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	1ae3      	subs	r3, r4, r3
 800ae76:	42bb      	cmp	r3, r7
 800ae78:	da6c      	bge.n	800af54 <_dtoa_r+0x5b4>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	4b31      	ldr	r3, [pc, #196]	; (800af44 <_dtoa_r+0x5a4>)
 800ae7e:	4628      	mov	r0, r5
 800ae80:	4631      	mov	r1, r6
 800ae82:	f7f5 fbb5 	bl	80005f0 <__aeabi_dmul>
 800ae86:	2200      	movs	r2, #0
 800ae88:	4605      	mov	r5, r0
 800ae8a:	460e      	mov	r6, r1
 800ae8c:	4b2d      	ldr	r3, [pc, #180]	; (800af44 <_dtoa_r+0x5a4>)
 800ae8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae92:	f7f5 fbad 	bl	80005f0 <__aeabi_dmul>
 800ae96:	e9cd 0100 	strd	r0, r1, [sp]
 800ae9a:	e7c3      	b.n	800ae24 <_dtoa_r+0x484>
 800ae9c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aea0:	4622      	mov	r2, r4
 800aea2:	462b      	mov	r3, r5
 800aea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea8:	f7f5 fba2 	bl	80005f0 <__aeabi_dmul>
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800aeb2:	19dc      	adds	r4, r3, r7
 800aeb4:	461d      	mov	r5, r3
 800aeb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeba:	f7f5 fe49 	bl	8000b50 <__aeabi_d2iz>
 800aebe:	4606      	mov	r6, r0
 800aec0:	f7f5 fb30 	bl	8000524 <__aeabi_i2d>
 800aec4:	3630      	adds	r6, #48	; 0x30
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aece:	f7f5 f9db 	bl	8000288 <__aeabi_dsub>
 800aed2:	f805 6b01 	strb.w	r6, [r5], #1
 800aed6:	42ac      	cmp	r4, r5
 800aed8:	e9cd 0100 	strd	r0, r1, [sp]
 800aedc:	f04f 0200 	mov.w	r2, #0
 800aee0:	d123      	bne.n	800af2a <_dtoa_r+0x58a>
 800aee2:	4b1b      	ldr	r3, [pc, #108]	; (800af50 <_dtoa_r+0x5b0>)
 800aee4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800aee8:	f7f5 f9d0 	bl	800028c <__adddf3>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aef4:	f7f5 fe0c 	bl	8000b10 <__aeabi_dcmpgt>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	f040 808c 	bne.w	800b016 <_dtoa_r+0x676>
 800aefe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800af02:	2000      	movs	r0, #0
 800af04:	4912      	ldr	r1, [pc, #72]	; (800af50 <_dtoa_r+0x5b0>)
 800af06:	f7f5 f9bf 	bl	8000288 <__aeabi_dsub>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af12:	f7f5 fddf 	bl	8000ad4 <__aeabi_dcmplt>
 800af16:	b1e8      	cbz	r0, 800af54 <_dtoa_r+0x5b4>
 800af18:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800af1c:	2b30      	cmp	r3, #48	; 0x30
 800af1e:	f104 32ff 	add.w	r2, r4, #4294967295
 800af22:	f040 82ba 	bne.w	800b49a <_dtoa_r+0xafa>
 800af26:	4614      	mov	r4, r2
 800af28:	e7f6      	b.n	800af18 <_dtoa_r+0x578>
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <_dtoa_r+0x5a4>)
 800af2c:	f7f5 fb60 	bl	80005f0 <__aeabi_dmul>
 800af30:	e9cd 0100 	strd	r0, r1, [sp]
 800af34:	e7bf      	b.n	800aeb6 <_dtoa_r+0x516>
 800af36:	bf00      	nop
 800af38:	0800c358 	.word	0x0800c358
 800af3c:	0800c420 	.word	0x0800c420
 800af40:	3ff00000 	.word	0x3ff00000
 800af44:	40240000 	.word	0x40240000
 800af48:	401c0000 	.word	0x401c0000
 800af4c:	40140000 	.word	0x40140000
 800af50:	3fe00000 	.word	0x3fe00000
 800af54:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800af58:	e88d 0018 	stmia.w	sp, {r3, r4}
 800af5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af5e:	2b00      	cmp	r3, #0
 800af60:	db7c      	blt.n	800b05c <_dtoa_r+0x6bc>
 800af62:	f1bb 0f0e 	cmp.w	fp, #14
 800af66:	dc79      	bgt.n	800b05c <_dtoa_r+0x6bc>
 800af68:	4b8f      	ldr	r3, [pc, #572]	; (800b1a8 <_dtoa_r+0x808>)
 800af6a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af6e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800af72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af74:	2b00      	cmp	r3, #0
 800af76:	da14      	bge.n	800afa2 <_dtoa_r+0x602>
 800af78:	f1b8 0f00 	cmp.w	r8, #0
 800af7c:	dc11      	bgt.n	800afa2 <_dtoa_r+0x602>
 800af7e:	f040 816c 	bne.w	800b25a <_dtoa_r+0x8ba>
 800af82:	2200      	movs	r2, #0
 800af84:	4b89      	ldr	r3, [pc, #548]	; (800b1ac <_dtoa_r+0x80c>)
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	f7f5 fb31 	bl	80005f0 <__aeabi_dmul>
 800af8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af92:	f7f5 fdb3 	bl	8000afc <__aeabi_dcmpge>
 800af96:	4645      	mov	r5, r8
 800af98:	4646      	mov	r6, r8
 800af9a:	2800      	cmp	r0, #0
 800af9c:	f040 815f 	bne.w	800b25e <_dtoa_r+0x8be>
 800afa0:	e166      	b.n	800b270 <_dtoa_r+0x8d0>
 800afa2:	9c04      	ldr	r4, [sp, #16]
 800afa4:	4632      	mov	r2, r6
 800afa6:	463b      	mov	r3, r7
 800afa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afac:	f7f5 fc4a 	bl	8000844 <__aeabi_ddiv>
 800afb0:	f7f5 fdce 	bl	8000b50 <__aeabi_d2iz>
 800afb4:	4605      	mov	r5, r0
 800afb6:	f7f5 fab5 	bl	8000524 <__aeabi_i2d>
 800afba:	4632      	mov	r2, r6
 800afbc:	463b      	mov	r3, r7
 800afbe:	f7f5 fb17 	bl	80005f0 <__aeabi_dmul>
 800afc2:	460b      	mov	r3, r1
 800afc4:	4602      	mov	r2, r0
 800afc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afca:	f7f5 f95d 	bl	8000288 <__aeabi_dsub>
 800afce:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800afd2:	f804 eb01 	strb.w	lr, [r4], #1
 800afd6:	9b04      	ldr	r3, [sp, #16]
 800afd8:	ebc3 0e04 	rsb	lr, r3, r4
 800afdc:	45f0      	cmp	r8, lr
 800afde:	e9cd 0100 	strd	r0, r1, [sp]
 800afe2:	d12e      	bne.n	800b042 <_dtoa_r+0x6a2>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	f7f5 f950 	bl	800028c <__adddf3>
 800afec:	4680      	mov	r8, r0
 800afee:	4689      	mov	r9, r1
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	4630      	mov	r0, r6
 800aff6:	4639      	mov	r1, r7
 800aff8:	f7f5 fd6c 	bl	8000ad4 <__aeabi_dcmplt>
 800affc:	b978      	cbnz	r0, 800b01e <_dtoa_r+0x67e>
 800affe:	4642      	mov	r2, r8
 800b000:	464b      	mov	r3, r9
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 fd5b 	bl	8000ac0 <__aeabi_dcmpeq>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f000 8247 	beq.w	800b49e <_dtoa_r+0xafe>
 800b010:	07e9      	lsls	r1, r5, #31
 800b012:	d404      	bmi.n	800b01e <_dtoa_r+0x67e>
 800b014:	e243      	b.n	800b49e <_dtoa_r+0xafe>
 800b016:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b01a:	e000      	b.n	800b01e <_dtoa_r+0x67e>
 800b01c:	461c      	mov	r4, r3
 800b01e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800b022:	2a39      	cmp	r2, #57	; 0x39
 800b024:	f104 33ff 	add.w	r3, r4, #4294967295
 800b028:	d107      	bne.n	800b03a <_dtoa_r+0x69a>
 800b02a:	9a04      	ldr	r2, [sp, #16]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d1f5      	bne.n	800b01c <_dtoa_r+0x67c>
 800b030:	9904      	ldr	r1, [sp, #16]
 800b032:	2230      	movs	r2, #48	; 0x30
 800b034:	f10b 0b01 	add.w	fp, fp, #1
 800b038:	700a      	strb	r2, [r1, #0]
 800b03a:	781a      	ldrb	r2, [r3, #0]
 800b03c:	3201      	adds	r2, #1
 800b03e:	701a      	strb	r2, [r3, #0]
 800b040:	e22d      	b.n	800b49e <_dtoa_r+0xafe>
 800b042:	2200      	movs	r2, #0
 800b044:	4b5a      	ldr	r3, [pc, #360]	; (800b1b0 <_dtoa_r+0x810>)
 800b046:	f7f5 fad3 	bl	80005f0 <__aeabi_dmul>
 800b04a:	2200      	movs	r2, #0
 800b04c:	2300      	movs	r3, #0
 800b04e:	e9cd 0100 	strd	r0, r1, [sp]
 800b052:	f7f5 fd35 	bl	8000ac0 <__aeabi_dcmpeq>
 800b056:	2800      	cmp	r0, #0
 800b058:	d0a4      	beq.n	800afa4 <_dtoa_r+0x604>
 800b05a:	e220      	b.n	800b49e <_dtoa_r+0xafe>
 800b05c:	9a08      	ldr	r2, [sp, #32]
 800b05e:	2a00      	cmp	r2, #0
 800b060:	d02d      	beq.n	800b0be <_dtoa_r+0x71e>
 800b062:	9a06      	ldr	r2, [sp, #24]
 800b064:	2a01      	cmp	r2, #1
 800b066:	dc0a      	bgt.n	800b07e <_dtoa_r+0x6de>
 800b068:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b06a:	b112      	cbz	r2, 800b072 <_dtoa_r+0x6d2>
 800b06c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b070:	e002      	b.n	800b078 <_dtoa_r+0x6d8>
 800b072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b074:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b078:	9d07      	ldr	r5, [sp, #28]
 800b07a:	464c      	mov	r4, r9
 800b07c:	e015      	b.n	800b0aa <_dtoa_r+0x70a>
 800b07e:	9b07      	ldr	r3, [sp, #28]
 800b080:	f108 35ff 	add.w	r5, r8, #4294967295
 800b084:	42ab      	cmp	r3, r5
 800b086:	bfbf      	itttt	lt
 800b088:	9b07      	ldrlt	r3, [sp, #28]
 800b08a:	9507      	strlt	r5, [sp, #28]
 800b08c:	1aea      	sublt	r2, r5, r3
 800b08e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800b090:	bfb7      	itett	lt
 800b092:	189b      	addlt	r3, r3, r2
 800b094:	1b5d      	subge	r5, r3, r5
 800b096:	930c      	strlt	r3, [sp, #48]	; 0x30
 800b098:	2500      	movlt	r5, #0
 800b09a:	f1b8 0f00 	cmp.w	r8, #0
 800b09e:	bfb9      	ittee	lt
 800b0a0:	ebc8 0409 	rsblt	r4, r8, r9
 800b0a4:	2300      	movlt	r3, #0
 800b0a6:	464c      	movge	r4, r9
 800b0a8:	4643      	movge	r3, r8
 800b0aa:	9a05      	ldr	r2, [sp, #20]
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	441a      	add	r2, r3
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	4499      	add	r9, r3
 800b0b4:	9205      	str	r2, [sp, #20]
 800b0b6:	f000 fc0a 	bl	800b8ce <__i2b>
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	e002      	b.n	800b0c4 <_dtoa_r+0x724>
 800b0be:	9d07      	ldr	r5, [sp, #28]
 800b0c0:	9e08      	ldr	r6, [sp, #32]
 800b0c2:	464c      	mov	r4, r9
 800b0c4:	b15c      	cbz	r4, 800b0de <_dtoa_r+0x73e>
 800b0c6:	9b05      	ldr	r3, [sp, #20]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dd08      	ble.n	800b0de <_dtoa_r+0x73e>
 800b0cc:	42a3      	cmp	r3, r4
 800b0ce:	9a05      	ldr	r2, [sp, #20]
 800b0d0:	bfa8      	it	ge
 800b0d2:	4623      	movge	r3, r4
 800b0d4:	ebc3 0909 	rsb	r9, r3, r9
 800b0d8:	1ae4      	subs	r4, r4, r3
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	9305      	str	r3, [sp, #20]
 800b0de:	9b07      	ldr	r3, [sp, #28]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dd1d      	ble.n	800b120 <_dtoa_r+0x780>
 800b0e4:	9b08      	ldr	r3, [sp, #32]
 800b0e6:	b1ab      	cbz	r3, 800b114 <_dtoa_r+0x774>
 800b0e8:	b185      	cbz	r5, 800b10c <_dtoa_r+0x76c>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	462a      	mov	r2, r5
 800b0ee:	4650      	mov	r0, sl
 800b0f0:	f000 fc88 	bl	800ba04 <__pow5mult>
 800b0f4:	9a02      	ldr	r2, [sp, #8]
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f000 fbf0 	bl	800b8e0 <__multiply>
 800b100:	9902      	ldr	r1, [sp, #8]
 800b102:	4607      	mov	r7, r0
 800b104:	4650      	mov	r0, sl
 800b106:	f000 fb43 	bl	800b790 <_Bfree>
 800b10a:	9702      	str	r7, [sp, #8]
 800b10c:	9b07      	ldr	r3, [sp, #28]
 800b10e:	1b5a      	subs	r2, r3, r5
 800b110:	d006      	beq.n	800b120 <_dtoa_r+0x780>
 800b112:	e000      	b.n	800b116 <_dtoa_r+0x776>
 800b114:	9a07      	ldr	r2, [sp, #28]
 800b116:	9902      	ldr	r1, [sp, #8]
 800b118:	4650      	mov	r0, sl
 800b11a:	f000 fc73 	bl	800ba04 <__pow5mult>
 800b11e:	9002      	str	r0, [sp, #8]
 800b120:	2101      	movs	r1, #1
 800b122:	4650      	mov	r0, sl
 800b124:	f000 fbd3 	bl	800b8ce <__i2b>
 800b128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b12a:	4605      	mov	r5, r0
 800b12c:	b35b      	cbz	r3, 800b186 <_dtoa_r+0x7e6>
 800b12e:	461a      	mov	r2, r3
 800b130:	4601      	mov	r1, r0
 800b132:	4650      	mov	r0, sl
 800b134:	f000 fc66 	bl	800ba04 <__pow5mult>
 800b138:	9b06      	ldr	r3, [sp, #24]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	4605      	mov	r5, r0
 800b13e:	dc18      	bgt.n	800b172 <_dtoa_r+0x7d2>
 800b140:	9b00      	ldr	r3, [sp, #0]
 800b142:	b983      	cbnz	r3, 800b166 <_dtoa_r+0x7c6>
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b14a:	b973      	cbnz	r3, 800b16a <_dtoa_r+0x7ca>
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800b152:	0d3f      	lsrs	r7, r7, #20
 800b154:	053f      	lsls	r7, r7, #20
 800b156:	b14f      	cbz	r7, 800b16c <_dtoa_r+0x7cc>
 800b158:	9b05      	ldr	r3, [sp, #20]
 800b15a:	3301      	adds	r3, #1
 800b15c:	f109 0901 	add.w	r9, r9, #1
 800b160:	9305      	str	r3, [sp, #20]
 800b162:	2701      	movs	r7, #1
 800b164:	e002      	b.n	800b16c <_dtoa_r+0x7cc>
 800b166:	2700      	movs	r7, #0
 800b168:	e000      	b.n	800b16c <_dtoa_r+0x7cc>
 800b16a:	9f00      	ldr	r7, [sp, #0]
 800b16c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b16e:	b173      	cbz	r3, 800b18e <_dtoa_r+0x7ee>
 800b170:	e000      	b.n	800b174 <_dtoa_r+0x7d4>
 800b172:	2700      	movs	r7, #0
 800b174:	692b      	ldr	r3, [r5, #16]
 800b176:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b17a:	6918      	ldr	r0, [r3, #16]
 800b17c:	f000 fb5a 	bl	800b834 <__hi0bits>
 800b180:	f1c0 0020 	rsb	r0, r0, #32
 800b184:	e004      	b.n	800b190 <_dtoa_r+0x7f0>
 800b186:	9b06      	ldr	r3, [sp, #24]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	ddd9      	ble.n	800b140 <_dtoa_r+0x7a0>
 800b18c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b18e:	2001      	movs	r0, #1
 800b190:	9b05      	ldr	r3, [sp, #20]
 800b192:	4418      	add	r0, r3
 800b194:	f010 001f 	ands.w	r0, r0, #31
 800b198:	d00e      	beq.n	800b1b8 <_dtoa_r+0x818>
 800b19a:	f1c0 0320 	rsb	r3, r0, #32
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	dd08      	ble.n	800b1b4 <_dtoa_r+0x814>
 800b1a2:	f1c0 001c 	rsb	r0, r0, #28
 800b1a6:	e008      	b.n	800b1ba <_dtoa_r+0x81a>
 800b1a8:	0800c358 	.word	0x0800c358
 800b1ac:	40140000 	.word	0x40140000
 800b1b0:	40240000 	.word	0x40240000
 800b1b4:	d006      	beq.n	800b1c4 <_dtoa_r+0x824>
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	301c      	adds	r0, #28
 800b1ba:	9b05      	ldr	r3, [sp, #20]
 800b1bc:	4403      	add	r3, r0
 800b1be:	4481      	add	r9, r0
 800b1c0:	4404      	add	r4, r0
 800b1c2:	9305      	str	r3, [sp, #20]
 800b1c4:	f1b9 0f00 	cmp.w	r9, #0
 800b1c8:	dd05      	ble.n	800b1d6 <_dtoa_r+0x836>
 800b1ca:	464a      	mov	r2, r9
 800b1cc:	9902      	ldr	r1, [sp, #8]
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	f000 fc66 	bl	800baa0 <__lshift>
 800b1d4:	9002      	str	r0, [sp, #8]
 800b1d6:	9b05      	ldr	r3, [sp, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dd05      	ble.n	800b1e8 <_dtoa_r+0x848>
 800b1dc:	4629      	mov	r1, r5
 800b1de:	461a      	mov	r2, r3
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	f000 fc5d 	bl	800baa0 <__lshift>
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ea:	b1eb      	cbz	r3, 800b228 <_dtoa_r+0x888>
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	9802      	ldr	r0, [sp, #8]
 800b1f0:	f000 fca7 	bl	800bb42 <__mcmp>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	da17      	bge.n	800b228 <_dtoa_r+0x888>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	220a      	movs	r2, #10
 800b1fc:	9902      	ldr	r1, [sp, #8]
 800b1fe:	4650      	mov	r0, sl
 800b200:	f000 fadd 	bl	800b7be <__multadd>
 800b204:	9b08      	ldr	r3, [sp, #32]
 800b206:	9002      	str	r0, [sp, #8]
 800b208:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 8158 	beq.w	800b4c2 <_dtoa_r+0xb22>
 800b212:	2300      	movs	r3, #0
 800b214:	4631      	mov	r1, r6
 800b216:	220a      	movs	r2, #10
 800b218:	4650      	mov	r0, sl
 800b21a:	f000 fad0 	bl	800b7be <__multadd>
 800b21e:	9b03      	ldr	r3, [sp, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	4606      	mov	r6, r0
 800b224:	dc37      	bgt.n	800b296 <_dtoa_r+0x8f6>
 800b226:	e033      	b.n	800b290 <_dtoa_r+0x8f0>
 800b228:	f1b8 0f00 	cmp.w	r8, #0
 800b22c:	dc2a      	bgt.n	800b284 <_dtoa_r+0x8e4>
 800b22e:	9b06      	ldr	r3, [sp, #24]
 800b230:	2b02      	cmp	r3, #2
 800b232:	dd27      	ble.n	800b284 <_dtoa_r+0x8e4>
 800b234:	f8cd 800c 	str.w	r8, [sp, #12]
 800b238:	9b03      	ldr	r3, [sp, #12]
 800b23a:	b983      	cbnz	r3, 800b25e <_dtoa_r+0x8be>
 800b23c:	4629      	mov	r1, r5
 800b23e:	2205      	movs	r2, #5
 800b240:	4650      	mov	r0, sl
 800b242:	f000 fabc 	bl	800b7be <__multadd>
 800b246:	4601      	mov	r1, r0
 800b248:	4605      	mov	r5, r0
 800b24a:	9802      	ldr	r0, [sp, #8]
 800b24c:	f000 fc79 	bl	800bb42 <__mcmp>
 800b250:	2800      	cmp	r0, #0
 800b252:	dc0d      	bgt.n	800b270 <_dtoa_r+0x8d0>
 800b254:	e003      	b.n	800b25e <_dtoa_r+0x8be>
 800b256:	463d      	mov	r5, r7
 800b258:	e000      	b.n	800b25c <_dtoa_r+0x8bc>
 800b25a:	2500      	movs	r5, #0
 800b25c:	462e      	mov	r6, r5
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	9c04      	ldr	r4, [sp, #16]
 800b262:	ea6f 0b03 	mvn.w	fp, r3
 800b266:	e00a      	b.n	800b27e <_dtoa_r+0x8de>
 800b268:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b26c:	463d      	mov	r5, r7
 800b26e:	463e      	mov	r6, r7
 800b270:	9b04      	ldr	r3, [sp, #16]
 800b272:	9a04      	ldr	r2, [sp, #16]
 800b274:	1c5c      	adds	r4, r3, #1
 800b276:	2331      	movs	r3, #49	; 0x31
 800b278:	7013      	strb	r3, [r2, #0]
 800b27a:	f10b 0b01 	add.w	fp, fp, #1
 800b27e:	46b0      	mov	r8, r6
 800b280:	2600      	movs	r6, #0
 800b282:	e0f7      	b.n	800b474 <_dtoa_r+0xad4>
 800b284:	9b08      	ldr	r3, [sp, #32]
 800b286:	f8cd 800c 	str.w	r8, [sp, #12]
 800b28a:	b923      	cbnz	r3, 800b296 <_dtoa_r+0x8f6>
 800b28c:	9c04      	ldr	r4, [sp, #16]
 800b28e:	e0b1      	b.n	800b3f4 <_dtoa_r+0xa54>
 800b290:	9b06      	ldr	r3, [sp, #24]
 800b292:	2b02      	cmp	r3, #2
 800b294:	dcd0      	bgt.n	800b238 <_dtoa_r+0x898>
 800b296:	2c00      	cmp	r4, #0
 800b298:	dd05      	ble.n	800b2a6 <_dtoa_r+0x906>
 800b29a:	4631      	mov	r1, r6
 800b29c:	4622      	mov	r2, r4
 800b29e:	4650      	mov	r0, sl
 800b2a0:	f000 fbfe 	bl	800baa0 <__lshift>
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	b19f      	cbz	r7, 800b2d0 <_dtoa_r+0x930>
 800b2a8:	6871      	ldr	r1, [r6, #4]
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	f000 fa3b 	bl	800b726 <_Balloc>
 800b2b0:	6932      	ldr	r2, [r6, #16]
 800b2b2:	3202      	adds	r2, #2
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	0092      	lsls	r2, r2, #2
 800b2b8:	f106 010c 	add.w	r1, r6, #12
 800b2bc:	300c      	adds	r0, #12
 800b2be:	f000 fa27 	bl	800b710 <memcpy>
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	4650      	mov	r0, sl
 800b2c8:	f000 fbea 	bl	800baa0 <__lshift>
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	e000      	b.n	800b2d2 <_dtoa_r+0x932>
 800b2d0:	46b0      	mov	r8, r6
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	9305      	str	r3, [sp, #20]
 800b2de:	4629      	mov	r1, r5
 800b2e0:	9802      	ldr	r0, [sp, #8]
 800b2e2:	f7ff facb 	bl	800a87c <quorem>
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800b2ee:	9802      	ldr	r0, [sp, #8]
 800b2f0:	f000 fc27 	bl	800bb42 <__mcmp>
 800b2f4:	4642      	mov	r2, r8
 800b2f6:	9000      	str	r0, [sp, #0]
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	f000 fc3d 	bl	800bb7a <__mdiff>
 800b300:	68c3      	ldr	r3, [r0, #12]
 800b302:	4602      	mov	r2, r0
 800b304:	b93b      	cbnz	r3, 800b316 <_dtoa_r+0x976>
 800b306:	4601      	mov	r1, r0
 800b308:	9007      	str	r0, [sp, #28]
 800b30a:	9802      	ldr	r0, [sp, #8]
 800b30c:	f000 fc19 	bl	800bb42 <__mcmp>
 800b310:	9a07      	ldr	r2, [sp, #28]
 800b312:	4603      	mov	r3, r0
 800b314:	e000      	b.n	800b318 <_dtoa_r+0x978>
 800b316:	2301      	movs	r3, #1
 800b318:	4611      	mov	r1, r2
 800b31a:	4650      	mov	r0, sl
 800b31c:	9307      	str	r3, [sp, #28]
 800b31e:	f000 fa37 	bl	800b790 <_Bfree>
 800b322:	9b07      	ldr	r3, [sp, #28]
 800b324:	b94b      	cbnz	r3, 800b33a <_dtoa_r+0x99a>
 800b326:	9a06      	ldr	r2, [sp, #24]
 800b328:	b93a      	cbnz	r2, 800b33a <_dtoa_r+0x99a>
 800b32a:	9a05      	ldr	r2, [sp, #20]
 800b32c:	b92a      	cbnz	r2, 800b33a <_dtoa_r+0x99a>
 800b32e:	2f39      	cmp	r7, #57	; 0x39
 800b330:	d028      	beq.n	800b384 <_dtoa_r+0x9e4>
 800b332:	9b00      	ldr	r3, [sp, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	dc1a      	bgt.n	800b36e <_dtoa_r+0x9ce>
 800b338:	e01b      	b.n	800b372 <_dtoa_r+0x9d2>
 800b33a:	9a00      	ldr	r2, [sp, #0]
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	db04      	blt.n	800b34a <_dtoa_r+0x9aa>
 800b340:	d11a      	bne.n	800b378 <_dtoa_r+0x9d8>
 800b342:	9a06      	ldr	r2, [sp, #24]
 800b344:	b9c2      	cbnz	r2, 800b378 <_dtoa_r+0x9d8>
 800b346:	9a05      	ldr	r2, [sp, #20]
 800b348:	b9b2      	cbnz	r2, 800b378 <_dtoa_r+0x9d8>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	dd11      	ble.n	800b372 <_dtoa_r+0x9d2>
 800b34e:	2201      	movs	r2, #1
 800b350:	9902      	ldr	r1, [sp, #8]
 800b352:	4650      	mov	r0, sl
 800b354:	f000 fba4 	bl	800baa0 <__lshift>
 800b358:	4629      	mov	r1, r5
 800b35a:	9002      	str	r0, [sp, #8]
 800b35c:	f000 fbf1 	bl	800bb42 <__mcmp>
 800b360:	2800      	cmp	r0, #0
 800b362:	dc02      	bgt.n	800b36a <_dtoa_r+0x9ca>
 800b364:	d105      	bne.n	800b372 <_dtoa_r+0x9d2>
 800b366:	07fa      	lsls	r2, r7, #31
 800b368:	d503      	bpl.n	800b372 <_dtoa_r+0x9d2>
 800b36a:	2f39      	cmp	r7, #57	; 0x39
 800b36c:	d00a      	beq.n	800b384 <_dtoa_r+0x9e4>
 800b36e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800b372:	f109 0401 	add.w	r4, r9, #1
 800b376:	e00c      	b.n	800b392 <_dtoa_r+0x9f2>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f109 0401 	add.w	r4, r9, #1
 800b37e:	dd0b      	ble.n	800b398 <_dtoa_r+0x9f8>
 800b380:	2f39      	cmp	r7, #57	; 0x39
 800b382:	d105      	bne.n	800b390 <_dtoa_r+0x9f0>
 800b384:	2339      	movs	r3, #57	; 0x39
 800b386:	f889 3000 	strb.w	r3, [r9]
 800b38a:	f109 0901 	add.w	r9, r9, #1
 800b38e:	e054      	b.n	800b43a <_dtoa_r+0xa9a>
 800b390:	3701      	adds	r7, #1
 800b392:	f889 7000 	strb.w	r7, [r9]
 800b396:	e06d      	b.n	800b474 <_dtoa_r+0xad4>
 800b398:	9b04      	ldr	r3, [sp, #16]
 800b39a:	9a03      	ldr	r2, [sp, #12]
 800b39c:	f804 7c01 	strb.w	r7, [r4, #-1]
 800b3a0:	1ae3      	subs	r3, r4, r3
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	46a1      	mov	r9, r4
 800b3a6:	d03a      	beq.n	800b41e <_dtoa_r+0xa7e>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	220a      	movs	r2, #10
 800b3ac:	9902      	ldr	r1, [sp, #8]
 800b3ae:	4650      	mov	r0, sl
 800b3b0:	f000 fa05 	bl	800b7be <__multadd>
 800b3b4:	4546      	cmp	r6, r8
 800b3b6:	9002      	str	r0, [sp, #8]
 800b3b8:	f04f 0300 	mov.w	r3, #0
 800b3bc:	f04f 020a 	mov.w	r2, #10
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	d104      	bne.n	800b3d0 <_dtoa_r+0xa30>
 800b3c6:	f000 f9fa 	bl	800b7be <__multadd>
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	4680      	mov	r8, r0
 800b3ce:	e786      	b.n	800b2de <_dtoa_r+0x93e>
 800b3d0:	f000 f9f5 	bl	800b7be <__multadd>
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	2300      	movs	r3, #0
 800b3da:	220a      	movs	r2, #10
 800b3dc:	4650      	mov	r0, sl
 800b3de:	f000 f9ee 	bl	800b7be <__multadd>
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	e77b      	b.n	800b2de <_dtoa_r+0x93e>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	220a      	movs	r2, #10
 800b3ea:	9902      	ldr	r1, [sp, #8]
 800b3ec:	4650      	mov	r0, sl
 800b3ee:	f000 f9e6 	bl	800b7be <__multadd>
 800b3f2:	9002      	str	r0, [sp, #8]
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	9802      	ldr	r0, [sp, #8]
 800b3f8:	f7ff fa40 	bl	800a87c <quorem>
 800b3fc:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800b400:	f804 7b01 	strb.w	r7, [r4], #1
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	9a03      	ldr	r2, [sp, #12]
 800b408:	1ae3      	subs	r3, r4, r3
 800b40a:	4293      	cmp	r3, r2
 800b40c:	dbeb      	blt.n	800b3e6 <_dtoa_r+0xa46>
 800b40e:	9b04      	ldr	r3, [sp, #16]
 800b410:	2a01      	cmp	r2, #1
 800b412:	bfac      	ite	ge
 800b414:	189b      	addge	r3, r3, r2
 800b416:	3301      	addlt	r3, #1
 800b418:	46b0      	mov	r8, r6
 800b41a:	4699      	mov	r9, r3
 800b41c:	2600      	movs	r6, #0
 800b41e:	2201      	movs	r2, #1
 800b420:	9902      	ldr	r1, [sp, #8]
 800b422:	4650      	mov	r0, sl
 800b424:	f000 fb3c 	bl	800baa0 <__lshift>
 800b428:	4629      	mov	r1, r5
 800b42a:	9002      	str	r0, [sp, #8]
 800b42c:	f000 fb89 	bl	800bb42 <__mcmp>
 800b430:	2800      	cmp	r0, #0
 800b432:	dc02      	bgt.n	800b43a <_dtoa_r+0xa9a>
 800b434:	d115      	bne.n	800b462 <_dtoa_r+0xac2>
 800b436:	07fb      	lsls	r3, r7, #31
 800b438:	d513      	bpl.n	800b462 <_dtoa_r+0xac2>
 800b43a:	464c      	mov	r4, r9
 800b43c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800b440:	2b39      	cmp	r3, #57	; 0x39
 800b442:	f104 32ff 	add.w	r2, r4, #4294967295
 800b446:	d109      	bne.n	800b45c <_dtoa_r+0xabc>
 800b448:	9b04      	ldr	r3, [sp, #16]
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d104      	bne.n	800b458 <_dtoa_r+0xab8>
 800b44e:	f10b 0b01 	add.w	fp, fp, #1
 800b452:	2331      	movs	r3, #49	; 0x31
 800b454:	9a04      	ldr	r2, [sp, #16]
 800b456:	e002      	b.n	800b45e <_dtoa_r+0xabe>
 800b458:	4614      	mov	r4, r2
 800b45a:	e7ef      	b.n	800b43c <_dtoa_r+0xa9c>
 800b45c:	3301      	adds	r3, #1
 800b45e:	7013      	strb	r3, [r2, #0]
 800b460:	e008      	b.n	800b474 <_dtoa_r+0xad4>
 800b462:	464c      	mov	r4, r9
 800b464:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800b468:	2b30      	cmp	r3, #48	; 0x30
 800b46a:	f104 32ff 	add.w	r2, r4, #4294967295
 800b46e:	d101      	bne.n	800b474 <_dtoa_r+0xad4>
 800b470:	4614      	mov	r4, r2
 800b472:	e7f7      	b.n	800b464 <_dtoa_r+0xac4>
 800b474:	4629      	mov	r1, r5
 800b476:	4650      	mov	r0, sl
 800b478:	f000 f98a 	bl	800b790 <_Bfree>
 800b47c:	f1b8 0f00 	cmp.w	r8, #0
 800b480:	d00d      	beq.n	800b49e <_dtoa_r+0xafe>
 800b482:	b12e      	cbz	r6, 800b490 <_dtoa_r+0xaf0>
 800b484:	4546      	cmp	r6, r8
 800b486:	d003      	beq.n	800b490 <_dtoa_r+0xaf0>
 800b488:	4631      	mov	r1, r6
 800b48a:	4650      	mov	r0, sl
 800b48c:	f000 f980 	bl	800b790 <_Bfree>
 800b490:	4641      	mov	r1, r8
 800b492:	4650      	mov	r0, sl
 800b494:	f000 f97c 	bl	800b790 <_Bfree>
 800b498:	e001      	b.n	800b49e <_dtoa_r+0xafe>
 800b49a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b49e:	9902      	ldr	r1, [sp, #8]
 800b4a0:	4650      	mov	r0, sl
 800b4a2:	f000 f975 	bl	800b790 <_Bfree>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4aa:	7023      	strb	r3, [r4, #0]
 800b4ac:	f10b 0301 	add.w	r3, fp, #1
 800b4b0:	6013      	str	r3, [r2, #0]
 800b4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4b4:	b11b      	cbz	r3, 800b4be <_dtoa_r+0xb1e>
 800b4b6:	601c      	str	r4, [r3, #0]
 800b4b8:	e001      	b.n	800b4be <_dtoa_r+0xb1e>
 800b4ba:	4808      	ldr	r0, [pc, #32]	; (800b4dc <_dtoa_r+0xb3c>)
 800b4bc:	e00a      	b.n	800b4d4 <_dtoa_r+0xb34>
 800b4be:	9804      	ldr	r0, [sp, #16]
 800b4c0:	e008      	b.n	800b4d4 <_dtoa_r+0xb34>
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f73f aee1 	bgt.w	800b28c <_dtoa_r+0x8ec>
 800b4ca:	9b06      	ldr	r3, [sp, #24]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	f77f aedd 	ble.w	800b28c <_dtoa_r+0x8ec>
 800b4d2:	e6b1      	b.n	800b238 <_dtoa_r+0x898>
 800b4d4:	b017      	add	sp, #92	; 0x5c
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	bf00      	nop
 800b4dc:	0800c32e 	.word	0x0800c32e

0800b4e0 <_malloc_trim_r>:
 800b4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4e4:	4f25      	ldr	r7, [pc, #148]	; (800b57c <_malloc_trim_r+0x9c>)
 800b4e6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800b588 <_malloc_trim_r+0xa8>
 800b4ea:	4689      	mov	r9, r1
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	f7fe f98f 	bl	8009810 <__malloc_lock>
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	685d      	ldr	r5, [r3, #4]
 800b4f6:	f1a8 0411 	sub.w	r4, r8, #17
 800b4fa:	f025 0503 	bic.w	r5, r5, #3
 800b4fe:	442c      	add	r4, r5
 800b500:	ebc9 0404 	rsb	r4, r9, r4
 800b504:	fbb4 f4f8 	udiv	r4, r4, r8
 800b508:	3c01      	subs	r4, #1
 800b50a:	fb08 f404 	mul.w	r4, r8, r4
 800b50e:	4544      	cmp	r4, r8
 800b510:	da05      	bge.n	800b51e <_malloc_trim_r+0x3e>
 800b512:	4630      	mov	r0, r6
 800b514:	f7fe f97d 	bl	8009812 <__malloc_unlock>
 800b518:	2000      	movs	r0, #0
 800b51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51e:	2100      	movs	r1, #0
 800b520:	4630      	mov	r0, r6
 800b522:	f7fe f977 	bl	8009814 <_sbrk_r>
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	442b      	add	r3, r5
 800b52a:	4298      	cmp	r0, r3
 800b52c:	d1f1      	bne.n	800b512 <_malloc_trim_r+0x32>
 800b52e:	4261      	negs	r1, r4
 800b530:	4630      	mov	r0, r6
 800b532:	f7fe f96f 	bl	8009814 <_sbrk_r>
 800b536:	3001      	adds	r0, #1
 800b538:	d110      	bne.n	800b55c <_malloc_trim_r+0x7c>
 800b53a:	2100      	movs	r1, #0
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7fe f969 	bl	8009814 <_sbrk_r>
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	1a83      	subs	r3, r0, r2
 800b546:	2b0f      	cmp	r3, #15
 800b548:	dde3      	ble.n	800b512 <_malloc_trim_r+0x32>
 800b54a:	490d      	ldr	r1, [pc, #52]	; (800b580 <_malloc_trim_r+0xa0>)
 800b54c:	6809      	ldr	r1, [r1, #0]
 800b54e:	1a40      	subs	r0, r0, r1
 800b550:	490c      	ldr	r1, [pc, #48]	; (800b584 <_malloc_trim_r+0xa4>)
 800b552:	f043 0301 	orr.w	r3, r3, #1
 800b556:	6008      	str	r0, [r1, #0]
 800b558:	6053      	str	r3, [r2, #4]
 800b55a:	e7da      	b.n	800b512 <_malloc_trim_r+0x32>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4a09      	ldr	r2, [pc, #36]	; (800b584 <_malloc_trim_r+0xa4>)
 800b560:	1b2d      	subs	r5, r5, r4
 800b562:	f045 0501 	orr.w	r5, r5, #1
 800b566:	605d      	str	r5, [r3, #4]
 800b568:	6813      	ldr	r3, [r2, #0]
 800b56a:	4630      	mov	r0, r6
 800b56c:	1b1c      	subs	r4, r3, r4
 800b56e:	6014      	str	r4, [r2, #0]
 800b570:	f7fe f94f 	bl	8009812 <__malloc_unlock>
 800b574:	2001      	movs	r0, #1
 800b576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b57a:	bf00      	nop
 800b57c:	20000174 	.word	0x20000174
 800b580:	20000580 	.word	0x20000580
 800b584:	200006dc 	.word	0x200006dc
 800b588:	00000080 	.word	0x00000080

0800b58c <_free_r>:
 800b58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b590:	4604      	mov	r4, r0
 800b592:	4688      	mov	r8, r1
 800b594:	2900      	cmp	r1, #0
 800b596:	f000 80ad 	beq.w	800b6f4 <_free_r+0x168>
 800b59a:	f7fe f939 	bl	8009810 <__malloc_lock>
 800b59e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b5a2:	4d55      	ldr	r5, [pc, #340]	; (800b6f8 <_free_r+0x16c>)
 800b5a4:	f022 0001 	bic.w	r0, r2, #1
 800b5a8:	f1a8 0308 	sub.w	r3, r8, #8
 800b5ac:	181f      	adds	r7, r3, r0
 800b5ae:	68a9      	ldr	r1, [r5, #8]
 800b5b0:	687e      	ldr	r6, [r7, #4]
 800b5b2:	428f      	cmp	r7, r1
 800b5b4:	f026 0603 	bic.w	r6, r6, #3
 800b5b8:	f002 0201 	and.w	r2, r2, #1
 800b5bc:	d11b      	bne.n	800b5f6 <_free_r+0x6a>
 800b5be:	4430      	add	r0, r6
 800b5c0:	b93a      	cbnz	r2, 800b5d2 <_free_r+0x46>
 800b5c2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	4410      	add	r0, r2
 800b5ca:	6899      	ldr	r1, [r3, #8]
 800b5cc:	68da      	ldr	r2, [r3, #12]
 800b5ce:	60ca      	str	r2, [r1, #12]
 800b5d0:	6091      	str	r1, [r2, #8]
 800b5d2:	f040 0201 	orr.w	r2, r0, #1
 800b5d6:	605a      	str	r2, [r3, #4]
 800b5d8:	60ab      	str	r3, [r5, #8]
 800b5da:	4b48      	ldr	r3, [pc, #288]	; (800b6fc <_free_r+0x170>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4298      	cmp	r0, r3
 800b5e0:	d304      	bcc.n	800b5ec <_free_r+0x60>
 800b5e2:	4b47      	ldr	r3, [pc, #284]	; (800b700 <_free_r+0x174>)
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	6819      	ldr	r1, [r3, #0]
 800b5e8:	f7ff ff7a 	bl	800b4e0 <_malloc_trim_r>
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f2:	f7fe b90e 	b.w	8009812 <__malloc_unlock>
 800b5f6:	607e      	str	r6, [r7, #4]
 800b5f8:	b97a      	cbnz	r2, 800b61a <_free_r+0x8e>
 800b5fa:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800b5fe:	1a5b      	subs	r3, r3, r1
 800b600:	4408      	add	r0, r1
 800b602:	6899      	ldr	r1, [r3, #8]
 800b604:	f105 0e08 	add.w	lr, r5, #8
 800b608:	4571      	cmp	r1, lr
 800b60a:	d008      	beq.n	800b61e <_free_r+0x92>
 800b60c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b610:	f8c1 e00c 	str.w	lr, [r1, #12]
 800b614:	f8ce 1008 	str.w	r1, [lr, #8]
 800b618:	e002      	b.n	800b620 <_free_r+0x94>
 800b61a:	2200      	movs	r2, #0
 800b61c:	e000      	b.n	800b620 <_free_r+0x94>
 800b61e:	2201      	movs	r2, #1
 800b620:	19b9      	adds	r1, r7, r6
 800b622:	6849      	ldr	r1, [r1, #4]
 800b624:	07c9      	lsls	r1, r1, #31
 800b626:	d40e      	bmi.n	800b646 <_free_r+0xba>
 800b628:	4430      	add	r0, r6
 800b62a:	68b9      	ldr	r1, [r7, #8]
 800b62c:	b942      	cbnz	r2, 800b640 <_free_r+0xb4>
 800b62e:	4e35      	ldr	r6, [pc, #212]	; (800b704 <_free_r+0x178>)
 800b630:	42b1      	cmp	r1, r6
 800b632:	d105      	bne.n	800b640 <_free_r+0xb4>
 800b634:	616b      	str	r3, [r5, #20]
 800b636:	612b      	str	r3, [r5, #16]
 800b638:	2201      	movs	r2, #1
 800b63a:	60d9      	str	r1, [r3, #12]
 800b63c:	6099      	str	r1, [r3, #8]
 800b63e:	e002      	b.n	800b646 <_free_r+0xba>
 800b640:	68fe      	ldr	r6, [r7, #12]
 800b642:	60ce      	str	r6, [r1, #12]
 800b644:	60b1      	str	r1, [r6, #8]
 800b646:	f040 0101 	orr.w	r1, r0, #1
 800b64a:	6059      	str	r1, [r3, #4]
 800b64c:	5018      	str	r0, [r3, r0]
 800b64e:	2a00      	cmp	r2, #0
 800b650:	d1cc      	bne.n	800b5ec <_free_r+0x60>
 800b652:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b656:	d212      	bcs.n	800b67e <_free_r+0xf2>
 800b658:	08c0      	lsrs	r0, r0, #3
 800b65a:	1081      	asrs	r1, r0, #2
 800b65c:	2201      	movs	r2, #1
 800b65e:	fa02 f101 	lsl.w	r1, r2, r1
 800b662:	686a      	ldr	r2, [r5, #4]
 800b664:	3001      	adds	r0, #1
 800b666:	430a      	orrs	r2, r1
 800b668:	606a      	str	r2, [r5, #4]
 800b66a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800b66e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800b672:	6099      	str	r1, [r3, #8]
 800b674:	3a08      	subs	r2, #8
 800b676:	60da      	str	r2, [r3, #12]
 800b678:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800b67c:	e038      	b.n	800b6f0 <_free_r+0x164>
 800b67e:	0a42      	lsrs	r2, r0, #9
 800b680:	2a04      	cmp	r2, #4
 800b682:	d802      	bhi.n	800b68a <_free_r+0xfe>
 800b684:	0982      	lsrs	r2, r0, #6
 800b686:	3238      	adds	r2, #56	; 0x38
 800b688:	e015      	b.n	800b6b6 <_free_r+0x12a>
 800b68a:	2a14      	cmp	r2, #20
 800b68c:	d801      	bhi.n	800b692 <_free_r+0x106>
 800b68e:	325b      	adds	r2, #91	; 0x5b
 800b690:	e011      	b.n	800b6b6 <_free_r+0x12a>
 800b692:	2a54      	cmp	r2, #84	; 0x54
 800b694:	d802      	bhi.n	800b69c <_free_r+0x110>
 800b696:	0b02      	lsrs	r2, r0, #12
 800b698:	326e      	adds	r2, #110	; 0x6e
 800b69a:	e00c      	b.n	800b6b6 <_free_r+0x12a>
 800b69c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b6a0:	d802      	bhi.n	800b6a8 <_free_r+0x11c>
 800b6a2:	0bc2      	lsrs	r2, r0, #15
 800b6a4:	3277      	adds	r2, #119	; 0x77
 800b6a6:	e006      	b.n	800b6b6 <_free_r+0x12a>
 800b6a8:	f240 5154 	movw	r1, #1364	; 0x554
 800b6ac:	428a      	cmp	r2, r1
 800b6ae:	bf9a      	itte	ls
 800b6b0:	0c82      	lsrls	r2, r0, #18
 800b6b2:	327c      	addls	r2, #124	; 0x7c
 800b6b4:	227e      	movhi	r2, #126	; 0x7e
 800b6b6:	1c51      	adds	r1, r2, #1
 800b6b8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800b6bc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800b6c0:	4f0d      	ldr	r7, [pc, #52]	; (800b6f8 <_free_r+0x16c>)
 800b6c2:	428e      	cmp	r6, r1
 800b6c4:	d10b      	bne.n	800b6de <_free_r+0x152>
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	1092      	asrs	r2, r2, #2
 800b6ca:	fa01 f202 	lsl.w	r2, r1, r2
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	4311      	orrs	r1, r2
 800b6d2:	6079      	str	r1, [r7, #4]
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	e008      	b.n	800b6ea <_free_r+0x15e>
 800b6d8:	6889      	ldr	r1, [r1, #8]
 800b6da:	428e      	cmp	r6, r1
 800b6dc:	d004      	beq.n	800b6e8 <_free_r+0x15c>
 800b6de:	684a      	ldr	r2, [r1, #4]
 800b6e0:	f022 0203 	bic.w	r2, r2, #3
 800b6e4:	4290      	cmp	r0, r2
 800b6e6:	d3f7      	bcc.n	800b6d8 <_free_r+0x14c>
 800b6e8:	68ce      	ldr	r6, [r1, #12]
 800b6ea:	60de      	str	r6, [r3, #12]
 800b6ec:	6099      	str	r1, [r3, #8]
 800b6ee:	60b3      	str	r3, [r6, #8]
 800b6f0:	60cb      	str	r3, [r1, #12]
 800b6f2:	e77b      	b.n	800b5ec <_free_r+0x60>
 800b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f8:	20000174 	.word	0x20000174
 800b6fc:	2000057c 	.word	0x2000057c
 800b700:	200006d8 	.word	0x200006d8
 800b704:	2000017c 	.word	0x2000017c

0800b708 <_localeconv_r>:
 800b708:	4800      	ldr	r0, [pc, #0]	; (800b70c <_localeconv_r+0x4>)
 800b70a:	4770      	bx	lr
 800b70c:	20000678 	.word	0x20000678

0800b710 <memcpy>:
 800b710:	b510      	push	{r4, lr}
 800b712:	1e43      	subs	r3, r0, #1
 800b714:	440a      	add	r2, r1
 800b716:	4291      	cmp	r1, r2
 800b718:	d004      	beq.n	800b724 <memcpy+0x14>
 800b71a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b71e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b722:	e7f8      	b.n	800b716 <memcpy+0x6>
 800b724:	bd10      	pop	{r4, pc}

0800b726 <_Balloc>:
 800b726:	b570      	push	{r4, r5, r6, lr}
 800b728:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b72a:	4604      	mov	r4, r0
 800b72c:	460e      	mov	r6, r1
 800b72e:	b93d      	cbnz	r5, 800b740 <_Balloc+0x1a>
 800b730:	2010      	movs	r0, #16
 800b732:	f7fd fe3d 	bl	80093b0 <malloc>
 800b736:	6260      	str	r0, [r4, #36]	; 0x24
 800b738:	6045      	str	r5, [r0, #4]
 800b73a:	6085      	str	r5, [r0, #8]
 800b73c:	6005      	str	r5, [r0, #0]
 800b73e:	60c5      	str	r5, [r0, #12]
 800b740:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b742:	68eb      	ldr	r3, [r5, #12]
 800b744:	b143      	cbz	r3, 800b758 <_Balloc+0x32>
 800b746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b74e:	b178      	cbz	r0, 800b770 <_Balloc+0x4a>
 800b750:	6802      	ldr	r2, [r0, #0]
 800b752:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b756:	e017      	b.n	800b788 <_Balloc+0x62>
 800b758:	2221      	movs	r2, #33	; 0x21
 800b75a:	2104      	movs	r1, #4
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fb38 	bl	800bdd2 <_calloc_r>
 800b762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b764:	60e8      	str	r0, [r5, #12]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1ec      	bne.n	800b746 <_Balloc+0x20>
 800b76c:	2000      	movs	r0, #0
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
 800b770:	2101      	movs	r1, #1
 800b772:	fa01 f506 	lsl.w	r5, r1, r6
 800b776:	1d6a      	adds	r2, r5, #5
 800b778:	0092      	lsls	r2, r2, #2
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fb29 	bl	800bdd2 <_calloc_r>
 800b780:	2800      	cmp	r0, #0
 800b782:	d0f3      	beq.n	800b76c <_Balloc+0x46>
 800b784:	6046      	str	r6, [r0, #4]
 800b786:	6085      	str	r5, [r0, #8]
 800b788:	2300      	movs	r3, #0
 800b78a:	6103      	str	r3, [r0, #16]
 800b78c:	60c3      	str	r3, [r0, #12]
 800b78e:	bd70      	pop	{r4, r5, r6, pc}

0800b790 <_Bfree>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b794:	4606      	mov	r6, r0
 800b796:	460d      	mov	r5, r1
 800b798:	b93c      	cbnz	r4, 800b7aa <_Bfree+0x1a>
 800b79a:	2010      	movs	r0, #16
 800b79c:	f7fd fe08 	bl	80093b0 <malloc>
 800b7a0:	6270      	str	r0, [r6, #36]	; 0x24
 800b7a2:	6044      	str	r4, [r0, #4]
 800b7a4:	6084      	str	r4, [r0, #8]
 800b7a6:	6004      	str	r4, [r0, #0]
 800b7a8:	60c4      	str	r4, [r0, #12]
 800b7aa:	b13d      	cbz	r5, 800b7bc <_Bfree+0x2c>
 800b7ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b7ae:	686a      	ldr	r2, [r5, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7b6:	6029      	str	r1, [r5, #0]
 800b7b8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b7bc:	bd70      	pop	{r4, r5, r6, pc}

0800b7be <__multadd>:
 800b7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c2:	690d      	ldr	r5, [r1, #16]
 800b7c4:	461f      	mov	r7, r3
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	f101 0e14 	add.w	lr, r1, #20
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f8de 0000 	ldr.w	r0, [lr]
 800b7d4:	b281      	uxth	r1, r0
 800b7d6:	fb02 7101 	mla	r1, r2, r1, r7
 800b7da:	0c0f      	lsrs	r7, r1, #16
 800b7dc:	0c00      	lsrs	r0, r0, #16
 800b7de:	fb02 7000 	mla	r0, r2, r0, r7
 800b7e2:	b289      	uxth	r1, r1
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b7ea:	429d      	cmp	r5, r3
 800b7ec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b7f0:	f84e 1b04 	str.w	r1, [lr], #4
 800b7f4:	dcec      	bgt.n	800b7d0 <__multadd+0x12>
 800b7f6:	b1d7      	cbz	r7, 800b82e <__multadd+0x70>
 800b7f8:	68a3      	ldr	r3, [r4, #8]
 800b7fa:	429d      	cmp	r5, r3
 800b7fc:	db12      	blt.n	800b824 <__multadd+0x66>
 800b7fe:	6861      	ldr	r1, [r4, #4]
 800b800:	4630      	mov	r0, r6
 800b802:	3101      	adds	r1, #1
 800b804:	f7ff ff8f 	bl	800b726 <_Balloc>
 800b808:	6922      	ldr	r2, [r4, #16]
 800b80a:	3202      	adds	r2, #2
 800b80c:	f104 010c 	add.w	r1, r4, #12
 800b810:	4680      	mov	r8, r0
 800b812:	0092      	lsls	r2, r2, #2
 800b814:	300c      	adds	r0, #12
 800b816:	f7ff ff7b 	bl	800b710 <memcpy>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4630      	mov	r0, r6
 800b81e:	f7ff ffb7 	bl	800b790 <_Bfree>
 800b822:	4644      	mov	r4, r8
 800b824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b828:	3501      	adds	r5, #1
 800b82a:	615f      	str	r7, [r3, #20]
 800b82c:	6125      	str	r5, [r4, #16]
 800b82e:	4620      	mov	r0, r4
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b834 <__hi0bits>:
 800b834:	0c03      	lsrs	r3, r0, #16
 800b836:	041b      	lsls	r3, r3, #16
 800b838:	b913      	cbnz	r3, 800b840 <__hi0bits+0xc>
 800b83a:	0400      	lsls	r0, r0, #16
 800b83c:	2310      	movs	r3, #16
 800b83e:	e000      	b.n	800b842 <__hi0bits+0xe>
 800b840:	2300      	movs	r3, #0
 800b842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b846:	bf04      	itt	eq
 800b848:	0200      	lsleq	r0, r0, #8
 800b84a:	3308      	addeq	r3, #8
 800b84c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b850:	bf04      	itt	eq
 800b852:	0100      	lsleq	r0, r0, #4
 800b854:	3304      	addeq	r3, #4
 800b856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b85a:	bf04      	itt	eq
 800b85c:	0080      	lsleq	r0, r0, #2
 800b85e:	3302      	addeq	r3, #2
 800b860:	2800      	cmp	r0, #0
 800b862:	db03      	blt.n	800b86c <__hi0bits+0x38>
 800b864:	0042      	lsls	r2, r0, #1
 800b866:	d503      	bpl.n	800b870 <__hi0bits+0x3c>
 800b868:	1c58      	adds	r0, r3, #1
 800b86a:	4770      	bx	lr
 800b86c:	4618      	mov	r0, r3
 800b86e:	4770      	bx	lr
 800b870:	2020      	movs	r0, #32
 800b872:	4770      	bx	lr

0800b874 <__lo0bits>:
 800b874:	6803      	ldr	r3, [r0, #0]
 800b876:	f013 0207 	ands.w	r2, r3, #7
 800b87a:	d00b      	beq.n	800b894 <__lo0bits+0x20>
 800b87c:	07d9      	lsls	r1, r3, #31
 800b87e:	d422      	bmi.n	800b8c6 <__lo0bits+0x52>
 800b880:	079a      	lsls	r2, r3, #30
 800b882:	bf4b      	itete	mi
 800b884:	085b      	lsrmi	r3, r3, #1
 800b886:	089b      	lsrpl	r3, r3, #2
 800b888:	6003      	strmi	r3, [r0, #0]
 800b88a:	6003      	strpl	r3, [r0, #0]
 800b88c:	bf4c      	ite	mi
 800b88e:	2001      	movmi	r0, #1
 800b890:	2002      	movpl	r0, #2
 800b892:	4770      	bx	lr
 800b894:	b299      	uxth	r1, r3
 800b896:	b909      	cbnz	r1, 800b89c <__lo0bits+0x28>
 800b898:	0c1b      	lsrs	r3, r3, #16
 800b89a:	2210      	movs	r2, #16
 800b89c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b8a0:	bf04      	itt	eq
 800b8a2:	0a1b      	lsreq	r3, r3, #8
 800b8a4:	3208      	addeq	r2, #8
 800b8a6:	0719      	lsls	r1, r3, #28
 800b8a8:	bf04      	itt	eq
 800b8aa:	091b      	lsreq	r3, r3, #4
 800b8ac:	3204      	addeq	r2, #4
 800b8ae:	0799      	lsls	r1, r3, #30
 800b8b0:	bf04      	itt	eq
 800b8b2:	089b      	lsreq	r3, r3, #2
 800b8b4:	3202      	addeq	r2, #2
 800b8b6:	07d9      	lsls	r1, r3, #31
 800b8b8:	d402      	bmi.n	800b8c0 <__lo0bits+0x4c>
 800b8ba:	085b      	lsrs	r3, r3, #1
 800b8bc:	d005      	beq.n	800b8ca <__lo0bits+0x56>
 800b8be:	3201      	adds	r2, #1
 800b8c0:	6003      	str	r3, [r0, #0]
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	4770      	bx	lr
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	4770      	bx	lr
 800b8ca:	2020      	movs	r0, #32
 800b8cc:	4770      	bx	lr

0800b8ce <__i2b>:
 800b8ce:	b510      	push	{r4, lr}
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	f7ff ff27 	bl	800b726 <_Balloc>
 800b8d8:	2201      	movs	r2, #1
 800b8da:	6144      	str	r4, [r0, #20]
 800b8dc:	6102      	str	r2, [r0, #16]
 800b8de:	bd10      	pop	{r4, pc}

0800b8e0 <__multiply>:
 800b8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	690a      	ldr	r2, [r1, #16]
 800b8e8:	6923      	ldr	r3, [r4, #16]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	bfb8      	it	lt
 800b8ee:	460b      	movlt	r3, r1
 800b8f0:	4688      	mov	r8, r1
 800b8f2:	bfbc      	itt	lt
 800b8f4:	46a0      	movlt	r8, r4
 800b8f6:	461c      	movlt	r4, r3
 800b8f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b900:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b904:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b908:	eb07 0609 	add.w	r6, r7, r9
 800b90c:	429e      	cmp	r6, r3
 800b90e:	bfc8      	it	gt
 800b910:	3101      	addgt	r1, #1
 800b912:	f7ff ff08 	bl	800b726 <_Balloc>
 800b916:	f100 0514 	add.w	r5, r0, #20
 800b91a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800b91e:	462b      	mov	r3, r5
 800b920:	2200      	movs	r2, #0
 800b922:	4563      	cmp	r3, ip
 800b924:	d202      	bcs.n	800b92c <__multiply+0x4c>
 800b926:	f843 2b04 	str.w	r2, [r3], #4
 800b92a:	e7fa      	b.n	800b922 <__multiply+0x42>
 800b92c:	f104 0214 	add.w	r2, r4, #20
 800b930:	f108 0114 	add.w	r1, r8, #20
 800b934:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b938:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	9b00      	ldr	r3, [sp, #0]
 800b940:	9201      	str	r2, [sp, #4]
 800b942:	4293      	cmp	r3, r2
 800b944:	d957      	bls.n	800b9f6 <__multiply+0x116>
 800b946:	f8b2 b000 	ldrh.w	fp, [r2]
 800b94a:	f1bb 0f00 	cmp.w	fp, #0
 800b94e:	d023      	beq.n	800b998 <__multiply+0xb8>
 800b950:	4689      	mov	r9, r1
 800b952:	46ae      	mov	lr, r5
 800b954:	f04f 0800 	mov.w	r8, #0
 800b958:	f859 4b04 	ldr.w	r4, [r9], #4
 800b95c:	f8be a000 	ldrh.w	sl, [lr]
 800b960:	b2a3      	uxth	r3, r4
 800b962:	fb0b a303 	mla	r3, fp, r3, sl
 800b966:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b96a:	f8de 4000 	ldr.w	r4, [lr]
 800b96e:	4443      	add	r3, r8
 800b970:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b974:	fb0b 840a 	mla	r4, fp, sl, r8
 800b978:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b97c:	46f2      	mov	sl, lr
 800b97e:	b29b      	uxth	r3, r3
 800b980:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b984:	454f      	cmp	r7, r9
 800b986:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b98a:	f84a 3b04 	str.w	r3, [sl], #4
 800b98e:	d901      	bls.n	800b994 <__multiply+0xb4>
 800b990:	46d6      	mov	lr, sl
 800b992:	e7e1      	b.n	800b958 <__multiply+0x78>
 800b994:	f8ce 8004 	str.w	r8, [lr, #4]
 800b998:	9b01      	ldr	r3, [sp, #4]
 800b99a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b99e:	3204      	adds	r2, #4
 800b9a0:	f1ba 0f00 	cmp.w	sl, #0
 800b9a4:	d021      	beq.n	800b9ea <__multiply+0x10a>
 800b9a6:	682b      	ldr	r3, [r5, #0]
 800b9a8:	462c      	mov	r4, r5
 800b9aa:	4689      	mov	r9, r1
 800b9ac:	f04f 0800 	mov.w	r8, #0
 800b9b0:	f8b9 e000 	ldrh.w	lr, [r9]
 800b9b4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800b9b8:	fb0a be0e 	mla	lr, sl, lr, fp
 800b9bc:	44f0      	add	r8, lr
 800b9be:	46a3      	mov	fp, r4
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800b9c6:	f84b 3b04 	str.w	r3, [fp], #4
 800b9ca:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9ce:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800b9d2:	0c1b      	lsrs	r3, r3, #16
 800b9d4:	fb0a e303 	mla	r3, sl, r3, lr
 800b9d8:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800b9dc:	454f      	cmp	r7, r9
 800b9de:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800b9e2:	d901      	bls.n	800b9e8 <__multiply+0x108>
 800b9e4:	465c      	mov	r4, fp
 800b9e6:	e7e3      	b.n	800b9b0 <__multiply+0xd0>
 800b9e8:	6063      	str	r3, [r4, #4]
 800b9ea:	3504      	adds	r5, #4
 800b9ec:	e7a7      	b.n	800b93e <__multiply+0x5e>
 800b9ee:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800b9f2:	b913      	cbnz	r3, 800b9fa <__multiply+0x11a>
 800b9f4:	3e01      	subs	r6, #1
 800b9f6:	2e00      	cmp	r6, #0
 800b9f8:	dcf9      	bgt.n	800b9ee <__multiply+0x10e>
 800b9fa:	6106      	str	r6, [r0, #16]
 800b9fc:	b003      	add	sp, #12
 800b9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ba04 <__pow5mult>:
 800ba04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba08:	4615      	mov	r5, r2
 800ba0a:	f012 0203 	ands.w	r2, r2, #3
 800ba0e:	4606      	mov	r6, r0
 800ba10:	460f      	mov	r7, r1
 800ba12:	d007      	beq.n	800ba24 <__pow5mult+0x20>
 800ba14:	3a01      	subs	r2, #1
 800ba16:	4c21      	ldr	r4, [pc, #132]	; (800ba9c <__pow5mult+0x98>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba1e:	f7ff fece 	bl	800b7be <__multadd>
 800ba22:	4607      	mov	r7, r0
 800ba24:	10ad      	asrs	r5, r5, #2
 800ba26:	d036      	beq.n	800ba96 <__pow5mult+0x92>
 800ba28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba2a:	b93c      	cbnz	r4, 800ba3c <__pow5mult+0x38>
 800ba2c:	2010      	movs	r0, #16
 800ba2e:	f7fd fcbf 	bl	80093b0 <malloc>
 800ba32:	6270      	str	r0, [r6, #36]	; 0x24
 800ba34:	6044      	str	r4, [r0, #4]
 800ba36:	6084      	str	r4, [r0, #8]
 800ba38:	6004      	str	r4, [r0, #0]
 800ba3a:	60c4      	str	r4, [r0, #12]
 800ba3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba44:	b94c      	cbnz	r4, 800ba5a <__pow5mult+0x56>
 800ba46:	f240 2171 	movw	r1, #625	; 0x271
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ff3f 	bl	800b8ce <__i2b>
 800ba50:	2300      	movs	r3, #0
 800ba52:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba56:	4604      	mov	r4, r0
 800ba58:	6003      	str	r3, [r0, #0]
 800ba5a:	f04f 0800 	mov.w	r8, #0
 800ba5e:	07eb      	lsls	r3, r5, #31
 800ba60:	d50a      	bpl.n	800ba78 <__pow5mult+0x74>
 800ba62:	4639      	mov	r1, r7
 800ba64:	4622      	mov	r2, r4
 800ba66:	4630      	mov	r0, r6
 800ba68:	f7ff ff3a 	bl	800b8e0 <__multiply>
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	4681      	mov	r9, r0
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7ff fe8d 	bl	800b790 <_Bfree>
 800ba76:	464f      	mov	r7, r9
 800ba78:	106d      	asrs	r5, r5, #1
 800ba7a:	d00c      	beq.n	800ba96 <__pow5mult+0x92>
 800ba7c:	6820      	ldr	r0, [r4, #0]
 800ba7e:	b108      	cbz	r0, 800ba84 <__pow5mult+0x80>
 800ba80:	4604      	mov	r4, r0
 800ba82:	e7ec      	b.n	800ba5e <__pow5mult+0x5a>
 800ba84:	4622      	mov	r2, r4
 800ba86:	4621      	mov	r1, r4
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7ff ff29 	bl	800b8e0 <__multiply>
 800ba8e:	6020      	str	r0, [r4, #0]
 800ba90:	f8c0 8000 	str.w	r8, [r0]
 800ba94:	e7f4      	b.n	800ba80 <__pow5mult+0x7c>
 800ba96:	4638      	mov	r0, r7
 800ba98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9c:	0800c448 	.word	0x0800c448

0800baa0 <__lshift>:
 800baa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa4:	460c      	mov	r4, r1
 800baa6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800baaa:	6926      	ldr	r6, [r4, #16]
 800baac:	6849      	ldr	r1, [r1, #4]
 800baae:	68a3      	ldr	r3, [r4, #8]
 800bab0:	4456      	add	r6, sl
 800bab2:	4607      	mov	r7, r0
 800bab4:	4691      	mov	r9, r2
 800bab6:	1c75      	adds	r5, r6, #1
 800bab8:	42ab      	cmp	r3, r5
 800baba:	da02      	bge.n	800bac2 <__lshift+0x22>
 800babc:	3101      	adds	r1, #1
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	e7fa      	b.n	800bab8 <__lshift+0x18>
 800bac2:	4638      	mov	r0, r7
 800bac4:	f7ff fe2f 	bl	800b726 <_Balloc>
 800bac8:	2300      	movs	r3, #0
 800baca:	4680      	mov	r8, r0
 800bacc:	f100 0114 	add.w	r1, r0, #20
 800bad0:	461a      	mov	r2, r3
 800bad2:	4553      	cmp	r3, sl
 800bad4:	da03      	bge.n	800bade <__lshift+0x3e>
 800bad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bada:	3301      	adds	r3, #1
 800badc:	e7f9      	b.n	800bad2 <__lshift+0x32>
 800bade:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800bae2:	6920      	ldr	r0, [r4, #16]
 800bae4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bae8:	f019 091f 	ands.w	r9, r9, #31
 800baec:	f104 0114 	add.w	r1, r4, #20
 800baf0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800baf4:	d014      	beq.n	800bb20 <__lshift+0x80>
 800baf6:	f1c9 0c20 	rsb	ip, r9, #32
 800bafa:	2200      	movs	r2, #0
 800bafc:	6808      	ldr	r0, [r1, #0]
 800bafe:	fa00 f009 	lsl.w	r0, r0, r9
 800bb02:	4302      	orrs	r2, r0
 800bb04:	469a      	mov	sl, r3
 800bb06:	f843 2b04 	str.w	r2, [r3], #4
 800bb0a:	f851 2b04 	ldr.w	r2, [r1], #4
 800bb0e:	458e      	cmp	lr, r1
 800bb10:	fa22 f20c 	lsr.w	r2, r2, ip
 800bb14:	d8f2      	bhi.n	800bafc <__lshift+0x5c>
 800bb16:	f8ca 2004 	str.w	r2, [sl, #4]
 800bb1a:	b142      	cbz	r2, 800bb2e <__lshift+0x8e>
 800bb1c:	1cb5      	adds	r5, r6, #2
 800bb1e:	e006      	b.n	800bb2e <__lshift+0x8e>
 800bb20:	3b04      	subs	r3, #4
 800bb22:	f851 2b04 	ldr.w	r2, [r1], #4
 800bb26:	f843 2f04 	str.w	r2, [r3, #4]!
 800bb2a:	458e      	cmp	lr, r1
 800bb2c:	d8f9      	bhi.n	800bb22 <__lshift+0x82>
 800bb2e:	3d01      	subs	r5, #1
 800bb30:	4638      	mov	r0, r7
 800bb32:	f8c8 5010 	str.w	r5, [r8, #16]
 800bb36:	4621      	mov	r1, r4
 800bb38:	f7ff fe2a 	bl	800b790 <_Bfree>
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bb42 <__mcmp>:
 800bb42:	6903      	ldr	r3, [r0, #16]
 800bb44:	690a      	ldr	r2, [r1, #16]
 800bb46:	1a9b      	subs	r3, r3, r2
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	d111      	bne.n	800bb70 <__mcmp+0x2e>
 800bb4c:	0092      	lsls	r2, r2, #2
 800bb4e:	3014      	adds	r0, #20
 800bb50:	3114      	adds	r1, #20
 800bb52:	1883      	adds	r3, r0, r2
 800bb54:	440a      	add	r2, r1
 800bb56:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800bb5a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bb5e:	428c      	cmp	r4, r1
 800bb60:	d002      	beq.n	800bb68 <__mcmp+0x26>
 800bb62:	d307      	bcc.n	800bb74 <__mcmp+0x32>
 800bb64:	2001      	movs	r0, #1
 800bb66:	bd10      	pop	{r4, pc}
 800bb68:	4298      	cmp	r0, r3
 800bb6a:	d3f4      	bcc.n	800bb56 <__mcmp+0x14>
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	bd10      	pop	{r4, pc}
 800bb70:	4618      	mov	r0, r3
 800bb72:	bd10      	pop	{r4, pc}
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	bd10      	pop	{r4, pc}

0800bb7a <__mdiff>:
 800bb7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb7e:	460c      	mov	r4, r1
 800bb80:	4607      	mov	r7, r0
 800bb82:	4611      	mov	r1, r2
 800bb84:	4620      	mov	r0, r4
 800bb86:	4615      	mov	r5, r2
 800bb88:	f7ff ffdb 	bl	800bb42 <__mcmp>
 800bb8c:	1e06      	subs	r6, r0, #0
 800bb8e:	d108      	bne.n	800bba2 <__mdiff+0x28>
 800bb90:	4631      	mov	r1, r6
 800bb92:	4638      	mov	r0, r7
 800bb94:	f7ff fdc7 	bl	800b726 <_Balloc>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	6103      	str	r3, [r0, #16]
 800bb9c:	6146      	str	r6, [r0, #20]
 800bb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bba2:	bfbc      	itt	lt
 800bba4:	4623      	movlt	r3, r4
 800bba6:	462c      	movlt	r4, r5
 800bba8:	4638      	mov	r0, r7
 800bbaa:	6861      	ldr	r1, [r4, #4]
 800bbac:	bfba      	itte	lt
 800bbae:	461d      	movlt	r5, r3
 800bbb0:	2601      	movlt	r6, #1
 800bbb2:	2600      	movge	r6, #0
 800bbb4:	f7ff fdb7 	bl	800b726 <_Balloc>
 800bbb8:	692b      	ldr	r3, [r5, #16]
 800bbba:	60c6      	str	r6, [r0, #12]
 800bbbc:	6926      	ldr	r6, [r4, #16]
 800bbbe:	f105 0914 	add.w	r9, r5, #20
 800bbc2:	3414      	adds	r4, #20
 800bbc4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800bbc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bbcc:	f100 0514 	add.w	r5, r0, #20
 800bbd0:	f04f 0c00 	mov.w	ip, #0
 800bbd4:	f854 3b04 	ldr.w	r3, [r4], #4
 800bbd8:	f859 2b04 	ldr.w	r2, [r9], #4
 800bbdc:	fa1c f183 	uxtah	r1, ip, r3
 800bbe0:	fa1f fe82 	uxth.w	lr, r2
 800bbe4:	0c12      	lsrs	r2, r2, #16
 800bbe6:	ebce 0101 	rsb	r1, lr, r1
 800bbea:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800bbee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bbf2:	b289      	uxth	r1, r1
 800bbf4:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bbf8:	45c8      	cmp	r8, r9
 800bbfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bbfe:	46a6      	mov	lr, r4
 800bc00:	f845 3b04 	str.w	r3, [r5], #4
 800bc04:	d8e6      	bhi.n	800bbd4 <__mdiff+0x5a>
 800bc06:	45be      	cmp	lr, r7
 800bc08:	d20e      	bcs.n	800bc28 <__mdiff+0xae>
 800bc0a:	f85e 1b04 	ldr.w	r1, [lr], #4
 800bc0e:	fa1c f281 	uxtah	r2, ip, r1
 800bc12:	1413      	asrs	r3, r2, #16
 800bc14:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800bc18:	b292      	uxth	r2, r2
 800bc1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bc22:	f845 2b04 	str.w	r2, [r5], #4
 800bc26:	e7ee      	b.n	800bc06 <__mdiff+0x8c>
 800bc28:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bc2c:	b90b      	cbnz	r3, 800bc32 <__mdiff+0xb8>
 800bc2e:	3e01      	subs	r6, #1
 800bc30:	e7fa      	b.n	800bc28 <__mdiff+0xae>
 800bc32:	6106      	str	r6, [r0, #16]
 800bc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bc38 <__d2b>:
 800bc38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc3c:	460e      	mov	r6, r1
 800bc3e:	2101      	movs	r1, #1
 800bc40:	ec59 8b10 	vmov	r8, r9, d0
 800bc44:	4615      	mov	r5, r2
 800bc46:	f7ff fd6e 	bl	800b726 <_Balloc>
 800bc4a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bc4e:	4607      	mov	r7, r0
 800bc50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc54:	b10c      	cbz	r4, 800bc5a <__d2b+0x22>
 800bc56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	f1b8 0f00 	cmp.w	r8, #0
 800bc60:	d019      	beq.n	800bc96 <__d2b+0x5e>
 800bc62:	a802      	add	r0, sp, #8
 800bc64:	f840 8d08 	str.w	r8, [r0, #-8]!
 800bc68:	f7ff fe04 	bl	800b874 <__lo0bits>
 800bc6c:	9b00      	ldr	r3, [sp, #0]
 800bc6e:	b148      	cbz	r0, 800bc84 <__d2b+0x4c>
 800bc70:	9a01      	ldr	r2, [sp, #4]
 800bc72:	f1c0 0120 	rsb	r1, r0, #32
 800bc76:	fa02 f101 	lsl.w	r1, r2, r1
 800bc7a:	430b      	orrs	r3, r1
 800bc7c:	40c2      	lsrs	r2, r0
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	9201      	str	r2, [sp, #4]
 800bc82:	e000      	b.n	800bc86 <__d2b+0x4e>
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	61bb      	str	r3, [r7, #24]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	bf14      	ite	ne
 800bc8e:	2102      	movne	r1, #2
 800bc90:	2101      	moveq	r1, #1
 800bc92:	6139      	str	r1, [r7, #16]
 800bc94:	e007      	b.n	800bca6 <__d2b+0x6e>
 800bc96:	a801      	add	r0, sp, #4
 800bc98:	f7ff fdec 	bl	800b874 <__lo0bits>
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	2101      	movs	r1, #1
 800bca2:	6139      	str	r1, [r7, #16]
 800bca4:	3020      	adds	r0, #32
 800bca6:	b134      	cbz	r4, 800bcb6 <__d2b+0x7e>
 800bca8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bcac:	4404      	add	r4, r0
 800bcae:	6034      	str	r4, [r6, #0]
 800bcb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bcb4:	e009      	b.n	800bcca <__d2b+0x92>
 800bcb6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bcba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcbe:	6030      	str	r0, [r6, #0]
 800bcc0:	6918      	ldr	r0, [r3, #16]
 800bcc2:	f7ff fdb7 	bl	800b834 <__hi0bits>
 800bcc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bcca:	6028      	str	r0, [r5, #0]
 800bccc:	4638      	mov	r0, r7
 800bcce:	b003      	add	sp, #12
 800bcd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bcd4 <__ssprint_r>:
 800bcd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd8:	4693      	mov	fp, r2
 800bcda:	6892      	ldr	r2, [r2, #8]
 800bcdc:	4681      	mov	r9, r0
 800bcde:	460c      	mov	r4, r1
 800bce0:	b34a      	cbz	r2, 800bd36 <__ssprint_r+0x62>
 800bce2:	2300      	movs	r3, #0
 800bce4:	f8db a000 	ldr.w	sl, [fp]
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	461f      	mov	r7, r3
 800bcec:	e006      	b.n	800bcfc <__ssprint_r+0x28>
 800bcee:	f8da 3000 	ldr.w	r3, [sl]
 800bcf2:	f8da 7004 	ldr.w	r7, [sl, #4]
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	f10a 0a08 	add.w	sl, sl, #8
 800bcfc:	2f00      	cmp	r7, #0
 800bcfe:	d0f6      	beq.n	800bcee <__ssprint_r+0x1a>
 800bd00:	68a6      	ldr	r6, [r4, #8]
 800bd02:	42b7      	cmp	r7, r6
 800bd04:	d360      	bcc.n	800bdc8 <__ssprint_r+0xf4>
 800bd06:	89a0      	ldrh	r0, [r4, #12]
 800bd08:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800bd0c:	d117      	bne.n	800bd3e <__ssprint_r+0x6a>
 800bd0e:	42b7      	cmp	r7, r6
 800bd10:	d35a      	bcc.n	800bdc8 <__ssprint_r+0xf4>
 800bd12:	4632      	mov	r2, r6
 800bd14:	9901      	ldr	r1, [sp, #4]
 800bd16:	6820      	ldr	r0, [r4, #0]
 800bd18:	f000 f888 	bl	800be2c <memmove>
 800bd1c:	68a2      	ldr	r2, [r4, #8]
 800bd1e:	1b92      	subs	r2, r2, r6
 800bd20:	60a2      	str	r2, [r4, #8]
 800bd22:	6822      	ldr	r2, [r4, #0]
 800bd24:	4416      	add	r6, r2
 800bd26:	f8db 2008 	ldr.w	r2, [fp, #8]
 800bd2a:	6026      	str	r6, [r4, #0]
 800bd2c:	1bd7      	subs	r7, r2, r7
 800bd2e:	f8cb 7008 	str.w	r7, [fp, #8]
 800bd32:	2f00      	cmp	r7, #0
 800bd34:	d1db      	bne.n	800bcee <__ssprint_r+0x1a>
 800bd36:	2000      	movs	r0, #0
 800bd38:	f8cb 0004 	str.w	r0, [fp, #4]
 800bd3c:	e046      	b.n	800bdcc <__ssprint_r+0xf8>
 800bd3e:	6825      	ldr	r5, [r4, #0]
 800bd40:	6921      	ldr	r1, [r4, #16]
 800bd42:	ebc1 0805 	rsb	r8, r1, r5
 800bd46:	f108 0201 	add.w	r2, r8, #1
 800bd4a:	6965      	ldr	r5, [r4, #20]
 800bd4c:	443a      	add	r2, r7
 800bd4e:	2302      	movs	r3, #2
 800bd50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd54:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd58:	4295      	cmp	r5, r2
 800bd5a:	bf38      	it	cc
 800bd5c:	4615      	movcc	r5, r2
 800bd5e:	0543      	lsls	r3, r0, #21
 800bd60:	d510      	bpl.n	800bd84 <__ssprint_r+0xb0>
 800bd62:	4629      	mov	r1, r5
 800bd64:	4648      	mov	r0, r9
 800bd66:	f7fd fb33 	bl	80093d0 <_malloc_r>
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	b1a0      	cbz	r0, 800bd98 <__ssprint_r+0xc4>
 800bd6e:	4642      	mov	r2, r8
 800bd70:	6921      	ldr	r1, [r4, #16]
 800bd72:	f7ff fccd 	bl	800b710 <memcpy>
 800bd76:	89a2      	ldrh	r2, [r4, #12]
 800bd78:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bd7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd80:	81a2      	strh	r2, [r4, #12]
 800bd82:	e018      	b.n	800bdb6 <__ssprint_r+0xe2>
 800bd84:	462a      	mov	r2, r5
 800bd86:	4648      	mov	r0, r9
 800bd88:	f000 f874 	bl	800be74 <_realloc_r>
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	b990      	cbnz	r0, 800bdb6 <__ssprint_r+0xe2>
 800bd90:	6921      	ldr	r1, [r4, #16]
 800bd92:	4648      	mov	r0, r9
 800bd94:	f7ff fbfa 	bl	800b58c <_free_r>
 800bd98:	220c      	movs	r2, #12
 800bd9a:	f8c9 2000 	str.w	r2, [r9]
 800bd9e:	89a2      	ldrh	r2, [r4, #12]
 800bda0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bda4:	81a2      	strh	r2, [r4, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8cb 2008 	str.w	r2, [fp, #8]
 800bdac:	f8cb 2004 	str.w	r2, [fp, #4]
 800bdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb4:	e00a      	b.n	800bdcc <__ssprint_r+0xf8>
 800bdb6:	6126      	str	r6, [r4, #16]
 800bdb8:	6165      	str	r5, [r4, #20]
 800bdba:	4446      	add	r6, r8
 800bdbc:	ebc8 0505 	rsb	r5, r8, r5
 800bdc0:	6026      	str	r6, [r4, #0]
 800bdc2:	60a5      	str	r5, [r4, #8]
 800bdc4:	463e      	mov	r6, r7
 800bdc6:	e7a2      	b.n	800bd0e <__ssprint_r+0x3a>
 800bdc8:	463e      	mov	r6, r7
 800bdca:	e7a2      	b.n	800bd12 <__ssprint_r+0x3e>
 800bdcc:	b003      	add	sp, #12
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdd2 <_calloc_r>:
 800bdd2:	b510      	push	{r4, lr}
 800bdd4:	4351      	muls	r1, r2
 800bdd6:	f7fd fafb 	bl	80093d0 <_malloc_r>
 800bdda:	4604      	mov	r4, r0
 800bddc:	b320      	cbz	r0, 800be28 <_calloc_r+0x56>
 800bdde:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800bde2:	f022 0203 	bic.w	r2, r2, #3
 800bde6:	3a04      	subs	r2, #4
 800bde8:	2a24      	cmp	r2, #36	; 0x24
 800bdea:	d81a      	bhi.n	800be22 <_calloc_r+0x50>
 800bdec:	2a13      	cmp	r2, #19
 800bdee:	d912      	bls.n	800be16 <_calloc_r+0x44>
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	2a1b      	cmp	r2, #27
 800bdf4:	6001      	str	r1, [r0, #0]
 800bdf6:	6041      	str	r1, [r0, #4]
 800bdf8:	d802      	bhi.n	800be00 <_calloc_r+0x2e>
 800bdfa:	f100 0308 	add.w	r3, r0, #8
 800bdfe:	e00b      	b.n	800be18 <_calloc_r+0x46>
 800be00:	2a24      	cmp	r2, #36	; 0x24
 800be02:	6081      	str	r1, [r0, #8]
 800be04:	60c1      	str	r1, [r0, #12]
 800be06:	bf11      	iteee	ne
 800be08:	f100 0310 	addne.w	r3, r0, #16
 800be0c:	6101      	streq	r1, [r0, #16]
 800be0e:	f100 0318 	addeq.w	r3, r0, #24
 800be12:	6141      	streq	r1, [r0, #20]
 800be14:	e000      	b.n	800be18 <_calloc_r+0x46>
 800be16:	4603      	mov	r3, r0
 800be18:	2200      	movs	r2, #0
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	605a      	str	r2, [r3, #4]
 800be1e:	609a      	str	r2, [r3, #8]
 800be20:	e002      	b.n	800be28 <_calloc_r+0x56>
 800be22:	2100      	movs	r1, #0
 800be24:	f000 f81d 	bl	800be62 <memset>
 800be28:	4620      	mov	r0, r4
 800be2a:	bd10      	pop	{r4, pc}

0800be2c <memmove>:
 800be2c:	4288      	cmp	r0, r1
 800be2e:	b510      	push	{r4, lr}
 800be30:	eb01 0302 	add.w	r3, r1, r2
 800be34:	d801      	bhi.n	800be3a <memmove+0xe>
 800be36:	1e42      	subs	r2, r0, #1
 800be38:	e00b      	b.n	800be52 <memmove+0x26>
 800be3a:	4298      	cmp	r0, r3
 800be3c:	d2fb      	bcs.n	800be36 <memmove+0xa>
 800be3e:	1881      	adds	r1, r0, r2
 800be40:	1ad2      	subs	r2, r2, r3
 800be42:	42d3      	cmn	r3, r2
 800be44:	d004      	beq.n	800be50 <memmove+0x24>
 800be46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800be4e:	e7f8      	b.n	800be42 <memmove+0x16>
 800be50:	bd10      	pop	{r4, pc}
 800be52:	4299      	cmp	r1, r3
 800be54:	d004      	beq.n	800be60 <memmove+0x34>
 800be56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be5a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be5e:	e7f8      	b.n	800be52 <memmove+0x26>
 800be60:	bd10      	pop	{r4, pc}

0800be62 <memset>:
 800be62:	4402      	add	r2, r0
 800be64:	4603      	mov	r3, r0
 800be66:	4293      	cmp	r3, r2
 800be68:	d002      	beq.n	800be70 <memset+0xe>
 800be6a:	f803 1b01 	strb.w	r1, [r3], #1
 800be6e:	e7fa      	b.n	800be66 <memset+0x4>
 800be70:	4770      	bx	lr
	...

0800be74 <_realloc_r>:
 800be74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	4681      	mov	r9, r0
 800be7a:	460c      	mov	r4, r1
 800be7c:	b929      	cbnz	r1, 800be8a <_realloc_r+0x16>
 800be7e:	4611      	mov	r1, r2
 800be80:	b003      	add	sp, #12
 800be82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be86:	f7fd baa3 	b.w	80093d0 <_malloc_r>
 800be8a:	9201      	str	r2, [sp, #4]
 800be8c:	f7fd fcc0 	bl	8009810 <__malloc_lock>
 800be90:	9a01      	ldr	r2, [sp, #4]
 800be92:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800be96:	f102 080b 	add.w	r8, r2, #11
 800be9a:	f1b8 0f16 	cmp.w	r8, #22
 800be9e:	f1a4 0b08 	sub.w	fp, r4, #8
 800bea2:	f02e 0503 	bic.w	r5, lr, #3
 800bea6:	d903      	bls.n	800beb0 <_realloc_r+0x3c>
 800bea8:	f038 0807 	bics.w	r8, r8, #7
 800beac:	d502      	bpl.n	800beb4 <_realloc_r+0x40>
 800beae:	e003      	b.n	800beb8 <_realloc_r+0x44>
 800beb0:	f04f 0810 	mov.w	r8, #16
 800beb4:	4590      	cmp	r8, r2
 800beb6:	d204      	bcs.n	800bec2 <_realloc_r+0x4e>
 800beb8:	230c      	movs	r3, #12
 800beba:	f8c9 3000 	str.w	r3, [r9]
 800bebe:	2000      	movs	r0, #0
 800bec0:	e17d      	b.n	800c1be <_realloc_r+0x34a>
 800bec2:	45a8      	cmp	r8, r5
 800bec4:	f340 8150 	ble.w	800c168 <_realloc_r+0x2f4>
 800bec8:	4ba6      	ldr	r3, [pc, #664]	; (800c164 <_realloc_r+0x2f0>)
 800beca:	6898      	ldr	r0, [r3, #8]
 800becc:	eb0b 0105 	add.w	r1, fp, r5
 800bed0:	4281      	cmp	r1, r0
 800bed2:	684f      	ldr	r7, [r1, #4]
 800bed4:	d005      	beq.n	800bee2 <_realloc_r+0x6e>
 800bed6:	f027 0601 	bic.w	r6, r7, #1
 800beda:	440e      	add	r6, r1
 800bedc:	6876      	ldr	r6, [r6, #4]
 800bede:	07f6      	lsls	r6, r6, #31
 800bee0:	d426      	bmi.n	800bf30 <_realloc_r+0xbc>
 800bee2:	f027 0a03 	bic.w	sl, r7, #3
 800bee6:	4281      	cmp	r1, r0
 800bee8:	eb05 070a 	add.w	r7, r5, sl
 800beec:	d118      	bne.n	800bf20 <_realloc_r+0xac>
 800beee:	f108 0610 	add.w	r6, r8, #16
 800bef2:	42b7      	cmp	r7, r6
 800bef4:	db1f      	blt.n	800bf36 <_realloc_r+0xc2>
 800bef6:	eb0b 0008 	add.w	r0, fp, r8
 800befa:	ebc8 0707 	rsb	r7, r8, r7
 800befe:	f047 0701 	orr.w	r7, r7, #1
 800bf02:	6098      	str	r0, [r3, #8]
 800bf04:	6047      	str	r7, [r0, #4]
 800bf06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	ea43 0308 	orr.w	r3, r3, r8
 800bf12:	4648      	mov	r0, r9
 800bf14:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf18:	f7fd fc7b 	bl	8009812 <__malloc_unlock>
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	e14e      	b.n	800c1be <_realloc_r+0x34a>
 800bf20:	45b8      	cmp	r8, r7
 800bf22:	dc08      	bgt.n	800bf36 <_realloc_r+0xc2>
 800bf24:	68cb      	ldr	r3, [r1, #12]
 800bf26:	688a      	ldr	r2, [r1, #8]
 800bf28:	463d      	mov	r5, r7
 800bf2a:	60d3      	str	r3, [r2, #12]
 800bf2c:	609a      	str	r2, [r3, #8]
 800bf2e:	e11b      	b.n	800c168 <_realloc_r+0x2f4>
 800bf30:	f04f 0a00 	mov.w	sl, #0
 800bf34:	4651      	mov	r1, sl
 800bf36:	f01e 0f01 	tst.w	lr, #1
 800bf3a:	f040 80c3 	bne.w	800c0c4 <_realloc_r+0x250>
 800bf3e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800bf42:	ebc7 070b 	rsb	r7, r7, fp
 800bf46:	687e      	ldr	r6, [r7, #4]
 800bf48:	f026 0603 	bic.w	r6, r6, #3
 800bf4c:	442e      	add	r6, r5
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	f000 8083 	beq.w	800c05a <_realloc_r+0x1e6>
 800bf54:	4281      	cmp	r1, r0
 800bf56:	44b2      	add	sl, r6
 800bf58:	d147      	bne.n	800bfea <_realloc_r+0x176>
 800bf5a:	f108 0110 	add.w	r1, r8, #16
 800bf5e:	458a      	cmp	sl, r1
 800bf60:	db7b      	blt.n	800c05a <_realloc_r+0x1e6>
 800bf62:	463e      	mov	r6, r7
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800bf6a:	60ca      	str	r2, [r1, #12]
 800bf6c:	6091      	str	r1, [r2, #8]
 800bf6e:	1f2a      	subs	r2, r5, #4
 800bf70:	2a24      	cmp	r2, #36	; 0x24
 800bf72:	d825      	bhi.n	800bfc0 <_realloc_r+0x14c>
 800bf74:	2a13      	cmp	r2, #19
 800bf76:	d91b      	bls.n	800bfb0 <_realloc_r+0x13c>
 800bf78:	6821      	ldr	r1, [r4, #0]
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	6861      	ldr	r1, [r4, #4]
 800bf7e:	60f9      	str	r1, [r7, #12]
 800bf80:	2a1b      	cmp	r2, #27
 800bf82:	d803      	bhi.n	800bf8c <_realloc_r+0x118>
 800bf84:	f107 0210 	add.w	r2, r7, #16
 800bf88:	3408      	adds	r4, #8
 800bf8a:	e012      	b.n	800bfb2 <_realloc_r+0x13e>
 800bf8c:	68a1      	ldr	r1, [r4, #8]
 800bf8e:	6139      	str	r1, [r7, #16]
 800bf90:	68e1      	ldr	r1, [r4, #12]
 800bf92:	6179      	str	r1, [r7, #20]
 800bf94:	2a24      	cmp	r2, #36	; 0x24
 800bf96:	bf01      	itttt	eq
 800bf98:	6922      	ldreq	r2, [r4, #16]
 800bf9a:	61ba      	streq	r2, [r7, #24]
 800bf9c:	6961      	ldreq	r1, [r4, #20]
 800bf9e:	61f9      	streq	r1, [r7, #28]
 800bfa0:	bf19      	ittee	ne
 800bfa2:	f107 0218 	addne.w	r2, r7, #24
 800bfa6:	3410      	addne	r4, #16
 800bfa8:	f107 0220 	addeq.w	r2, r7, #32
 800bfac:	3418      	addeq	r4, #24
 800bfae:	e000      	b.n	800bfb2 <_realloc_r+0x13e>
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	6821      	ldr	r1, [r4, #0]
 800bfb4:	6011      	str	r1, [r2, #0]
 800bfb6:	6861      	ldr	r1, [r4, #4]
 800bfb8:	6051      	str	r1, [r2, #4]
 800bfba:	68a1      	ldr	r1, [r4, #8]
 800bfbc:	6091      	str	r1, [r2, #8]
 800bfbe:	e005      	b.n	800bfcc <_realloc_r+0x158>
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	f7ff ff31 	bl	800be2c <memmove>
 800bfca:	9b01      	ldr	r3, [sp, #4]
 800bfcc:	eb07 0208 	add.w	r2, r7, r8
 800bfd0:	ebc8 0a0a 	rsb	sl, r8, sl
 800bfd4:	609a      	str	r2, [r3, #8]
 800bfd6:	f04a 0301 	orr.w	r3, sl, #1
 800bfda:	6053      	str	r3, [r2, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	ea43 0308 	orr.w	r3, r3, r8
 800bfe6:	607b      	str	r3, [r7, #4]
 800bfe8:	e0b6      	b.n	800c158 <_realloc_r+0x2e4>
 800bfea:	45d0      	cmp	r8, sl
 800bfec:	dc35      	bgt.n	800c05a <_realloc_r+0x1e6>
 800bfee:	68cb      	ldr	r3, [r1, #12]
 800bff0:	688a      	ldr	r2, [r1, #8]
 800bff2:	4638      	mov	r0, r7
 800bff4:	60d3      	str	r3, [r2, #12]
 800bff6:	609a      	str	r2, [r3, #8]
 800bff8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	60d3      	str	r3, [r2, #12]
 800c000:	609a      	str	r2, [r3, #8]
 800c002:	1f2a      	subs	r2, r5, #4
 800c004:	2a24      	cmp	r2, #36	; 0x24
 800c006:	d823      	bhi.n	800c050 <_realloc_r+0x1dc>
 800c008:	2a13      	cmp	r2, #19
 800c00a:	d91a      	bls.n	800c042 <_realloc_r+0x1ce>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	60bb      	str	r3, [r7, #8]
 800c010:	6863      	ldr	r3, [r4, #4]
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	2a1b      	cmp	r2, #27
 800c016:	d803      	bhi.n	800c020 <_realloc_r+0x1ac>
 800c018:	f107 0010 	add.w	r0, r7, #16
 800c01c:	3408      	adds	r4, #8
 800c01e:	e010      	b.n	800c042 <_realloc_r+0x1ce>
 800c020:	68a3      	ldr	r3, [r4, #8]
 800c022:	613b      	str	r3, [r7, #16]
 800c024:	68e3      	ldr	r3, [r4, #12]
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	2a24      	cmp	r2, #36	; 0x24
 800c02a:	bf01      	itttt	eq
 800c02c:	6923      	ldreq	r3, [r4, #16]
 800c02e:	61bb      	streq	r3, [r7, #24]
 800c030:	6963      	ldreq	r3, [r4, #20]
 800c032:	61fb      	streq	r3, [r7, #28]
 800c034:	bf19      	ittee	ne
 800c036:	f107 0018 	addne.w	r0, r7, #24
 800c03a:	3410      	addne	r4, #16
 800c03c:	f107 0020 	addeq.w	r0, r7, #32
 800c040:	3418      	addeq	r4, #24
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	6003      	str	r3, [r0, #0]
 800c046:	6863      	ldr	r3, [r4, #4]
 800c048:	6043      	str	r3, [r0, #4]
 800c04a:	68a3      	ldr	r3, [r4, #8]
 800c04c:	6083      	str	r3, [r0, #8]
 800c04e:	e002      	b.n	800c056 <_realloc_r+0x1e2>
 800c050:	4621      	mov	r1, r4
 800c052:	f7ff feeb 	bl	800be2c <memmove>
 800c056:	4655      	mov	r5, sl
 800c058:	e02e      	b.n	800c0b8 <_realloc_r+0x244>
 800c05a:	45b0      	cmp	r8, r6
 800c05c:	dc32      	bgt.n	800c0c4 <_realloc_r+0x250>
 800c05e:	4638      	mov	r0, r7
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c066:	60d3      	str	r3, [r2, #12]
 800c068:	609a      	str	r2, [r3, #8]
 800c06a:	1f2a      	subs	r2, r5, #4
 800c06c:	2a24      	cmp	r2, #36	; 0x24
 800c06e:	d825      	bhi.n	800c0bc <_realloc_r+0x248>
 800c070:	2a13      	cmp	r2, #19
 800c072:	d91a      	bls.n	800c0aa <_realloc_r+0x236>
 800c074:	6823      	ldr	r3, [r4, #0]
 800c076:	60bb      	str	r3, [r7, #8]
 800c078:	6863      	ldr	r3, [r4, #4]
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	2a1b      	cmp	r2, #27
 800c07e:	d803      	bhi.n	800c088 <_realloc_r+0x214>
 800c080:	f107 0010 	add.w	r0, r7, #16
 800c084:	3408      	adds	r4, #8
 800c086:	e010      	b.n	800c0aa <_realloc_r+0x236>
 800c088:	68a3      	ldr	r3, [r4, #8]
 800c08a:	613b      	str	r3, [r7, #16]
 800c08c:	68e3      	ldr	r3, [r4, #12]
 800c08e:	617b      	str	r3, [r7, #20]
 800c090:	2a24      	cmp	r2, #36	; 0x24
 800c092:	bf01      	itttt	eq
 800c094:	6923      	ldreq	r3, [r4, #16]
 800c096:	61bb      	streq	r3, [r7, #24]
 800c098:	6963      	ldreq	r3, [r4, #20]
 800c09a:	61fb      	streq	r3, [r7, #28]
 800c09c:	bf19      	ittee	ne
 800c09e:	f107 0018 	addne.w	r0, r7, #24
 800c0a2:	3410      	addne	r4, #16
 800c0a4:	f107 0020 	addeq.w	r0, r7, #32
 800c0a8:	3418      	addeq	r4, #24
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	6863      	ldr	r3, [r4, #4]
 800c0b0:	6043      	str	r3, [r0, #4]
 800c0b2:	68a3      	ldr	r3, [r4, #8]
 800c0b4:	6083      	str	r3, [r0, #8]
 800c0b6:	4635      	mov	r5, r6
 800c0b8:	46bb      	mov	fp, r7
 800c0ba:	e055      	b.n	800c168 <_realloc_r+0x2f4>
 800c0bc:	4621      	mov	r1, r4
 800c0be:	f7ff feb5 	bl	800be2c <memmove>
 800c0c2:	e7f8      	b.n	800c0b6 <_realloc_r+0x242>
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4648      	mov	r0, r9
 800c0c8:	f7fd f982 	bl	80093d0 <_malloc_r>
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d042      	beq.n	800c158 <_realloc_r+0x2e4>
 800c0d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c0d6:	f023 0301 	bic.w	r3, r3, #1
 800c0da:	f1a0 0208 	sub.w	r2, r0, #8
 800c0de:	445b      	add	r3, fp
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d105      	bne.n	800c0f0 <_realloc_r+0x27c>
 800c0e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c0e8:	f023 0303 	bic.w	r3, r3, #3
 800c0ec:	441d      	add	r5, r3
 800c0ee:	e03b      	b.n	800c168 <_realloc_r+0x2f4>
 800c0f0:	1f2a      	subs	r2, r5, #4
 800c0f2:	2a24      	cmp	r2, #36	; 0x24
 800c0f4:	d829      	bhi.n	800c14a <_realloc_r+0x2d6>
 800c0f6:	2a13      	cmp	r2, #19
 800c0f8:	d91e      	bls.n	800c138 <_realloc_r+0x2c4>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	6863      	ldr	r3, [r4, #4]
 800c100:	6043      	str	r3, [r0, #4]
 800c102:	2a1b      	cmp	r2, #27
 800c104:	d804      	bhi.n	800c110 <_realloc_r+0x29c>
 800c106:	f100 0308 	add.w	r3, r0, #8
 800c10a:	f104 0208 	add.w	r2, r4, #8
 800c10e:	e015      	b.n	800c13c <_realloc_r+0x2c8>
 800c110:	68a3      	ldr	r3, [r4, #8]
 800c112:	6083      	str	r3, [r0, #8]
 800c114:	68e3      	ldr	r3, [r4, #12]
 800c116:	60c3      	str	r3, [r0, #12]
 800c118:	2a24      	cmp	r2, #36	; 0x24
 800c11a:	bf01      	itttt	eq
 800c11c:	6923      	ldreq	r3, [r4, #16]
 800c11e:	6103      	streq	r3, [r0, #16]
 800c120:	6961      	ldreq	r1, [r4, #20]
 800c122:	6141      	streq	r1, [r0, #20]
 800c124:	bf19      	ittee	ne
 800c126:	f100 0310 	addne.w	r3, r0, #16
 800c12a:	f104 0210 	addne.w	r2, r4, #16
 800c12e:	f100 0318 	addeq.w	r3, r0, #24
 800c132:	f104 0218 	addeq.w	r2, r4, #24
 800c136:	e001      	b.n	800c13c <_realloc_r+0x2c8>
 800c138:	4603      	mov	r3, r0
 800c13a:	4622      	mov	r2, r4
 800c13c:	6811      	ldr	r1, [r2, #0]
 800c13e:	6019      	str	r1, [r3, #0]
 800c140:	6851      	ldr	r1, [r2, #4]
 800c142:	6059      	str	r1, [r3, #4]
 800c144:	6892      	ldr	r2, [r2, #8]
 800c146:	609a      	str	r2, [r3, #8]
 800c148:	e002      	b.n	800c150 <_realloc_r+0x2dc>
 800c14a:	4621      	mov	r1, r4
 800c14c:	f7ff fe6e 	bl	800be2c <memmove>
 800c150:	4621      	mov	r1, r4
 800c152:	4648      	mov	r0, r9
 800c154:	f7ff fa1a 	bl	800b58c <_free_r>
 800c158:	4648      	mov	r0, r9
 800c15a:	f7fd fb5a 	bl	8009812 <__malloc_unlock>
 800c15e:	4630      	mov	r0, r6
 800c160:	e02d      	b.n	800c1be <_realloc_r+0x34a>
 800c162:	bf00      	nop
 800c164:	20000174 	.word	0x20000174
 800c168:	ebc8 0205 	rsb	r2, r8, r5
 800c16c:	2a0f      	cmp	r2, #15
 800c16e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c172:	d914      	bls.n	800c19e <_realloc_r+0x32a>
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	eb0b 0108 	add.w	r1, fp, r8
 800c17c:	ea43 0308 	orr.w	r3, r3, r8
 800c180:	f8cb 3004 	str.w	r3, [fp, #4]
 800c184:	f042 0301 	orr.w	r3, r2, #1
 800c188:	440a      	add	r2, r1
 800c18a:	604b      	str	r3, [r1, #4]
 800c18c:	6853      	ldr	r3, [r2, #4]
 800c18e:	f043 0301 	orr.w	r3, r3, #1
 800c192:	6053      	str	r3, [r2, #4]
 800c194:	3108      	adds	r1, #8
 800c196:	4648      	mov	r0, r9
 800c198:	f7ff f9f8 	bl	800b58c <_free_r>
 800c19c:	e00a      	b.n	800c1b4 <_realloc_r+0x340>
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	432b      	orrs	r3, r5
 800c1a4:	eb0b 0205 	add.w	r2, fp, r5
 800c1a8:	f8cb 3004 	str.w	r3, [fp, #4]
 800c1ac:	6853      	ldr	r3, [r2, #4]
 800c1ae:	f043 0301 	orr.w	r3, r3, #1
 800c1b2:	6053      	str	r3, [r2, #4]
 800c1b4:	4648      	mov	r0, r9
 800c1b6:	f7fd fb2c 	bl	8009812 <__malloc_unlock>
 800c1ba:	f10b 0008 	add.w	r0, fp, #8
 800c1be:	b003      	add	sp, #12
 800c1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1c4 <_sbrk>:
 800c1c4:	4b04      	ldr	r3, [pc, #16]	; (800c1d8 <_sbrk+0x14>)
 800c1c6:	6819      	ldr	r1, [r3, #0]
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	b909      	cbnz	r1, 800c1d0 <_sbrk+0xc>
 800c1cc:	4903      	ldr	r1, [pc, #12]	; (800c1dc <_sbrk+0x18>)
 800c1ce:	6019      	str	r1, [r3, #0]
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	4402      	add	r2, r0
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	4770      	bx	lr
 800c1d8:	20000704 	.word	0x20000704
 800c1dc:	200011b8 	.word	0x200011b8

0800c1e0 <_init>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	bf00      	nop
 800c1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e6:	bc08      	pop	{r3}
 800c1e8:	469e      	mov	lr, r3
 800c1ea:	4770      	bx	lr

0800c1ec <_fini>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	bf00      	nop
 800c1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f2:	bc08      	pop	{r3}
 800c1f4:	469e      	mov	lr, r3
 800c1f6:	4770      	bx	lr
