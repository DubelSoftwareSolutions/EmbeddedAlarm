
C:\Users\Krzysztof\Documents\Studia\Semestr 6\Sterowniki Robotów\sterop\AlarmZL41Project\Debug\AlarmZL41Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080084dc  080084dc  000184dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000670  20000000  080084e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020670  2**0
                  CONTENTS
  7 .bss          00000a5c  20000670  20000670  00020670  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200010cc  200010cc  00020670  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020670  2**0
                  CONTENTS, READONLY
 10 .debug_info   000182b2  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003b5a  00000000  00000000  00038952  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017c0  00000000  00000000  0003c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001588  00000000  00000000  0003dc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a880  00000000  00000000  0003f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000067d9  00000000  00000000  00049a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00050251  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000062dc  00000000  00000000  000502d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000670 	.word	0x20000670
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800843c 	.word	0x0800843c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000674 	.word	0x20000674
 80001c4:	0800843c 	.word	0x0800843c

080001c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001cc:	4a0e      	ldr	r2, [pc, #56]	; (8000208 <HAL_Init+0x40>)
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_Init+0x40>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001d8:	4a0b      	ldr	r2, [pc, #44]	; (8000208 <HAL_Init+0x40>)
 80001da:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <HAL_Init+0x40>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	4a08      	ldr	r2, [pc, #32]	; (8000208 <HAL_Init+0x40>)
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <HAL_Init+0x40>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f0:	2003      	movs	r0, #3
 80001f2:	f000 f929 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 f808 	bl	800020c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80001fc:	f006 fe68 	bl	8006ed0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000200:	2300      	movs	r3, #0
}
 8000202:	4618      	mov	r0, r3
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40023c00 	.word	0x40023c00

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <HAL_InitTick+0x30>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a09      	ldr	r2, [pc, #36]	; (8000240 <HAL_InitTick+0x34>)
 800021a:	fba2 2303 	umull	r2, r3, r2, r3
 800021e:	099b      	lsrs	r3, r3, #6
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f947 	bl	80004b4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000226:	2200      	movs	r2, #0
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	f04f 30ff 	mov.w	r0, #4294967295
 800022e:	f000 f917 	bl	8000460 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000232:	2300      	movs	r3, #0
}
 8000234:	4618      	mov	r0, r3
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000124 	.word	0x20000124
 8000240:	10624dd3 	.word	0x10624dd3

08000244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  uwTick++;
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <HAL_IncTick+0x18>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3301      	adds	r3, #1
 800024e:	4a03      	ldr	r2, [pc, #12]	; (800025c <HAL_IncTick+0x18>)
 8000250:	6013      	str	r3, [r2, #0]
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	200006c8 	.word	0x200006c8

08000260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  return uwTick;
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <HAL_GetTick+0x14>)
 8000266:	681b      	ldr	r3, [r3, #0]
}
 8000268:	4618      	mov	r0, r3
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	200006c8 	.word	0x200006c8

08000278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000280:	f7ff ffee 	bl	8000260 <HAL_GetTick>
 8000284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000290:	d002      	beq.n	8000298 <HAL_Delay+0x20>
  {
     wait++;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000298:	bf00      	nop
 800029a:	f7ff ffe1 	bl	8000260 <HAL_GetTick>
 800029e:	4602      	mov	r2, r0
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	1ad2      	subs	r2, r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f7      	bcc.n	800029a <HAL_Delay+0x22>
  {
  }
}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop

080002b4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f003 0307 	and.w	r3, r3, #7
 80002c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <NVIC_SetPriorityGrouping+0x44>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002d0:	4013      	ands	r3, r2
 80002d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002e6:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <NVIC_SetPriorityGrouping+0x44>)
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	60d3      	str	r3, [r2, #12]
}
 80002ec:	bf00      	nop
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <NVIC_GetPriorityGrouping+0x18>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000308:	0a1b      	lsrs	r3, r3, #8
}
 800030a:	4618      	mov	r0, r3
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000322:	4909      	ldr	r1, [pc, #36]	; (8000348 <NVIC_EnableIRQ+0x30>)
 8000324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000328:	095b      	lsrs	r3, r3, #5
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	f002 021f 	and.w	r2, r2, #31
 8000330:	2001      	movs	r0, #1
 8000332:	fa00 f202 	lsl.w	r2, r0, r2
 8000336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e100 	.word	0xe000e100

0800034c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	6039      	str	r1, [r7, #0]
 8000356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	da0b      	bge.n	8000378 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000360:	490d      	ldr	r1, [pc, #52]	; (8000398 <NVIC_SetPriority+0x4c>)
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	f003 030f 	and.w	r3, r3, #15
 8000368:	3b04      	subs	r3, #4
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	0112      	lsls	r2, r2, #4
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	440b      	add	r3, r1
 8000374:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000376:	e009      	b.n	800038c <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	4908      	ldr	r1, [pc, #32]	; (800039c <NVIC_SetPriority+0x50>)
 800037a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	0112      	lsls	r2, r2, #4
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	440b      	add	r3, r1
 8000388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	e000ed00 	.word	0xe000ed00
 800039c:	e000e100 	.word	0xe000e100

080003a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b089      	sub	sp, #36	; 0x24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b4:	69fb      	ldr	r3, [r7, #28]
 80003b6:	f1c3 0307 	rsb	r3, r3, #7
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	bf28      	it	cs
 80003be:	2304      	movcs	r3, #4
 80003c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3304      	adds	r3, #4
 80003c6:	2b06      	cmp	r3, #6
 80003c8:	d902      	bls.n	80003d0 <NVIC_EncodePriority+0x30>
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3b03      	subs	r3, #3
 80003ce:	e000      	b.n	80003d2 <NVIC_EncodePriority+0x32>
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d4:	2201      	movs	r2, #1
 80003d6:	69bb      	ldr	r3, [r7, #24]
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	1e5a      	subs	r2, r3, #1
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	401a      	ands	r2, r3
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e6:	2101      	movs	r1, #1
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	1e59      	subs	r1, r3, #1
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80003f4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3724      	adds	r7, #36	; 0x24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop

08000404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3b01      	subs	r3, #1
 8000410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000414:	d301      	bcc.n	800041a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000416:	2301      	movs	r3, #1
 8000418:	e00f      	b.n	800043a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <SysTick_Config+0x40>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000422:	210f      	movs	r1, #15
 8000424:	f04f 30ff 	mov.w	r0, #4294967295
 8000428:	f7ff ff90 	bl	800034c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <SysTick_Config+0x40>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SysTick_Config+0x40>)
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000e010 	.word	0xe000e010

08000448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff2f 	bl	80002b4 <NVIC_SetPriorityGrouping>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop

08000460 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
 800046c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000472:	f7ff ff43 	bl	80002fc <NVIC_GetPriorityGrouping>
 8000476:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	68b9      	ldr	r1, [r7, #8]
 800047c:	6978      	ldr	r0, [r7, #20]
 800047e:	f7ff ff8f 	bl	80003a0 <NVIC_EncodePriority>
 8000482:	4602      	mov	r2, r0
 8000484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000488:	4611      	mov	r1, r2
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff5e 	bl	800034c <NVIC_SetPriority>
}
 8000490:	bf00      	nop
 8000492:	3718      	adds	r7, #24
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff36 	bl	8000318 <NVIC_EnableIRQ>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff ffa1 	bl	8000404 <SysTick_Config>
 80004c2:	4603      	mov	r3, r0
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d106      	bne.n	80004e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004da:	4a09      	ldr	r2, [pc, #36]	; (8000500 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80004e6:	e005      	b.n	80004f4 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f023 0304 	bic.w	r3, r3, #4
 80004f2:	6013      	str	r3, [r2, #0]
  }
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	e000e010 	.word	0xe000e010

08000504 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000508:	f000 f802 	bl	8000510 <HAL_SYSTICK_Callback>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b02      	cmp	r3, #2
 8000532:	d004      	beq.n	800053e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	e00c      	b.n	8000558 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2205      	movs	r2, #5
 8000542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	6812      	ldr	r2, [r2, #0]
 800054e:	6812      	ldr	r2, [r2, #0]
 8000550:	f022 0201 	bic.w	r2, r2, #1
 8000554:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000564:	b480      	push	{r7}
 8000566:	b089      	sub	sp, #36	; 0x24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
 800057e:	e16b      	b.n	8000858 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000580:	2201      	movs	r2, #1
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	429a      	cmp	r2, r3
 800059a:	f040 815a 	bne.w	8000852 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d003      	beq.n	80005ae <HAL_GPIO_Init+0x4a>
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	2b12      	cmp	r3, #18
 80005ac:	d123      	bne.n	80005f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	08da      	lsrs	r2, r3, #3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3208      	adds	r2, #8
 80005b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f003 0307 	and.w	r3, r3, #7
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	220f      	movs	r2, #15
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	69ba      	ldr	r2, [r7, #24]
 80005ce:	4013      	ands	r3, r2
 80005d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	691a      	ldr	r2, [r3, #16]
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	f003 0307 	and.w	r3, r3, #7
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	08da      	lsrs	r2, r3, #3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3208      	adds	r2, #8
 80005f0:	69b9      	ldr	r1, [r7, #24]
 80005f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	2203      	movs	r2, #3
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	69ba      	ldr	r2, [r7, #24]
 800060a:	4013      	ands	r3, r2
 800060c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f003 0203 	and.w	r2, r3, #3
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	69ba      	ldr	r2, [r7, #24]
 8000620:	4313      	orrs	r3, r2
 8000622:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d00b      	beq.n	800064a <HAL_GPIO_Init+0xe6>
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d007      	beq.n	800064a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800063e:	2b11      	cmp	r3, #17
 8000640:	d003      	beq.n	800064a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	2b12      	cmp	r3, #18
 8000648:	d130      	bne.n	80006ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	2203      	movs	r2, #3
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43db      	mvns	r3, r3
 800065c:	69ba      	ldr	r2, [r7, #24]
 800065e:	4013      	ands	r3, r2
 8000660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68da      	ldr	r2, [r3, #12]
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	4313      	orrs	r3, r2
 8000672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	69ba      	ldr	r2, [r7, #24]
 8000678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000680:	2201      	movs	r2, #1
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	69ba      	ldr	r2, [r7, #24]
 800068c:	4013      	ands	r3, r2
 800068e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	091b      	lsrs	r3, r3, #4
 8000696:	f003 0201 	and.w	r2, r3, #1
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2203      	movs	r2, #3
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	69ba      	ldr	r2, [r7, #24]
 80006c0:	4013      	ands	r3, r2
 80006c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	69ba      	ldr	r2, [r7, #24]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	f000 80b4 	beq.w	8000852 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4a5f      	ldr	r2, [pc, #380]	; (800086c <HAL_GPIO_Init+0x308>)
 80006f0:	4b5e      	ldr	r3, [pc, #376]	; (800086c <HAL_GPIO_Init+0x308>)
 80006f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f8:	6453      	str	r3, [r2, #68]	; 0x44
 80006fa:	4b5c      	ldr	r3, [pc, #368]	; (800086c <HAL_GPIO_Init+0x308>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000706:	4a5a      	ldr	r2, [pc, #360]	; (8000870 <HAL_GPIO_Init+0x30c>)
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	3302      	adds	r3, #2
 800070e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f003 0303 	and.w	r3, r3, #3
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	220f      	movs	r2, #15
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43db      	mvns	r3, r3
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	4013      	ands	r3, r2
 8000728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a51      	ldr	r2, [pc, #324]	; (8000874 <HAL_GPIO_Init+0x310>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d02b      	beq.n	800078a <HAL_GPIO_Init+0x226>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a50      	ldr	r2, [pc, #320]	; (8000878 <HAL_GPIO_Init+0x314>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d025      	beq.n	8000786 <HAL_GPIO_Init+0x222>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a4f      	ldr	r2, [pc, #316]	; (800087c <HAL_GPIO_Init+0x318>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d01f      	beq.n	8000782 <HAL_GPIO_Init+0x21e>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a4e      	ldr	r2, [pc, #312]	; (8000880 <HAL_GPIO_Init+0x31c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d019      	beq.n	800077e <HAL_GPIO_Init+0x21a>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a4d      	ldr	r2, [pc, #308]	; (8000884 <HAL_GPIO_Init+0x320>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d013      	beq.n	800077a <HAL_GPIO_Init+0x216>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a4c      	ldr	r2, [pc, #304]	; (8000888 <HAL_GPIO_Init+0x324>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d00d      	beq.n	8000776 <HAL_GPIO_Init+0x212>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a4b      	ldr	r2, [pc, #300]	; (800088c <HAL_GPIO_Init+0x328>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d007      	beq.n	8000772 <HAL_GPIO_Init+0x20e>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a4a      	ldr	r2, [pc, #296]	; (8000890 <HAL_GPIO_Init+0x32c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d101      	bne.n	800076e <HAL_GPIO_Init+0x20a>
 800076a:	2307      	movs	r3, #7
 800076c:	e00e      	b.n	800078c <HAL_GPIO_Init+0x228>
 800076e:	2308      	movs	r3, #8
 8000770:	e00c      	b.n	800078c <HAL_GPIO_Init+0x228>
 8000772:	2306      	movs	r3, #6
 8000774:	e00a      	b.n	800078c <HAL_GPIO_Init+0x228>
 8000776:	2305      	movs	r3, #5
 8000778:	e008      	b.n	800078c <HAL_GPIO_Init+0x228>
 800077a:	2304      	movs	r3, #4
 800077c:	e006      	b.n	800078c <HAL_GPIO_Init+0x228>
 800077e:	2303      	movs	r3, #3
 8000780:	e004      	b.n	800078c <HAL_GPIO_Init+0x228>
 8000782:	2302      	movs	r3, #2
 8000784:	e002      	b.n	800078c <HAL_GPIO_Init+0x228>
 8000786:	2301      	movs	r3, #1
 8000788:	e000      	b.n	800078c <HAL_GPIO_Init+0x228>
 800078a:	2300      	movs	r3, #0
 800078c:	69fa      	ldr	r2, [r7, #28]
 800078e:	f002 0203 	and.w	r2, r2, #3
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	4093      	lsls	r3, r2
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	4313      	orrs	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800079c:	4934      	ldr	r1, [pc, #208]	; (8000870 <HAL_GPIO_Init+0x30c>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	089b      	lsrs	r3, r3, #2
 80007a2:	3302      	adds	r3, #2
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007aa:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <HAL_GPIO_Init+0x330>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	43db      	mvns	r3, r3
 80007b4:	69ba      	ldr	r2, [r7, #24]
 80007b6:	4013      	ands	r3, r2
 80007b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80007ce:	4a31      	ldr	r2, [pc, #196]	; (8000894 <HAL_GPIO_Init+0x330>)
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <HAL_GPIO_Init+0x330>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	43db      	mvns	r3, r3
 80007de:	69ba      	ldr	r2, [r7, #24]
 80007e0:	4013      	ands	r3, r2
 80007e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d003      	beq.n	80007f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80007f0:	69ba      	ldr	r2, [r7, #24]
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80007f8:	4a26      	ldr	r2, [pc, #152]	; (8000894 <HAL_GPIO_Init+0x330>)
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <HAL_GPIO_Init+0x330>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	43db      	mvns	r3, r3
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	4013      	ands	r3, r2
 800080c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d003      	beq.n	8000822 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <HAL_GPIO_Init+0x330>)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_GPIO_Init+0x330>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	43db      	mvns	r3, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4013      	ands	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000840:	2b00      	cmp	r3, #0
 8000842:	d003      	beq.n	800084c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4313      	orrs	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800084c:	4a11      	ldr	r2, [pc, #68]	; (8000894 <HAL_GPIO_Init+0x330>)
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3301      	adds	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	f67f ae90 	bls.w	8000580 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000860:	bf00      	nop
 8000862:	3724      	adds	r7, #36	; 0x24
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	40023800 	.word	0x40023800
 8000870:	40013800 	.word	0x40013800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40021000 	.word	0x40021000
 8000888:	40021400 	.word	0x40021400
 800088c:	40021800 	.word	0x40021800
 8000890:	40021c00 	.word	0x40021c00
 8000894:	40013c00 	.word	0x40013c00

08000898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	4013      	ands	r3, r2
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 ffde 	bl	8006878 <HAL_GPIO_EXTI_Callback>
  }
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013c00 	.word	0x40013c00

080008c8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e0c8      	b.n	8000a74 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d106      	bne.n	80008fc <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f006 f9a4 	bl	8006c44 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2224      	movs	r2, #36	; 0x24
 8000900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	f022 0201 	bic.w	r2, r2, #1
 8000912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000914:	f002 f860 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8000918:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	4a57      	ldr	r2, [pc, #348]	; (8000a7c <HAL_I2C_Init+0x1b4>)
 800091e:	fba2 2303 	umull	r2, r3, r2, r3
 8000922:	0c9b      	lsrs	r3, r3, #18
 8000924:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4952      	ldr	r1, [pc, #328]	; (8000a80 <HAL_I2C_Init+0x1b8>)
 8000938:	428b      	cmp	r3, r1
 800093a:	d802      	bhi.n	8000942 <HAL_I2C_Init+0x7a>
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3301      	adds	r3, #1
 8000940:	e009      	b.n	8000956 <HAL_I2C_Init+0x8e>
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000948:	fb01 f303 	mul.w	r3, r1, r3
 800094c:	494d      	ldr	r1, [pc, #308]	; (8000a84 <HAL_I2C_Init+0x1bc>)
 800094e:	fba1 1303 	umull	r1, r3, r1, r3
 8000952:	099b      	lsrs	r3, r3, #6
 8000954:	3301      	adds	r3, #1
 8000956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6819      	ldr	r1, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	4a47      	ldr	r2, [pc, #284]	; (8000a80 <HAL_I2C_Init+0x1b8>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d812      	bhi.n	800098c <HAL_I2C_Init+0xc4>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000976:	2b03      	cmp	r3, #3
 8000978:	d906      	bls.n	8000988 <HAL_I2C_Init+0xc0>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	e045      	b.n	8000a14 <HAL_I2C_Init+0x14c>
 8000988:	2304      	movs	r3, #4
 800098a:	e043      	b.n	8000a14 <HAL_I2C_Init+0x14c>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10f      	bne.n	80009b4 <HAL_I2C_Init+0xec>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf0c      	ite	eq
 80009ac:	2301      	moveq	r3, #1
 80009ae:	2300      	movne	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	e010      	b.n	80009d6 <HAL_I2C_Init+0x10e>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	4613      	mov	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	009a      	lsls	r2, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf0c      	ite	eq
 80009d0:	2301      	moveq	r3, #1
 80009d2:	2300      	movne	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_I2C_Init+0x116>
 80009da:	2301      	movs	r3, #1
 80009dc:	e01a      	b.n	8000a14 <HAL_I2C_Init+0x14c>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10a      	bne.n	80009fc <HAL_I2C_Init+0x134>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	4613      	mov	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fa:	e00b      	b.n	8000a14 <HAL_I2C_Init+0x14c>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	009a      	lsls	r2, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a14:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	69d1      	ldr	r1, [r2, #28]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6a12      	ldr	r2, [r2, #32]
 8000a22:	430a      	orrs	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	6911      	ldr	r1, [r2, #16]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	68d2      	ldr	r2, [r2, #12]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	6951      	ldr	r1, [r2, #20]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	6992      	ldr	r2, [r2, #24]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	6812      	ldr	r2, [r2, #0]
 8000a50:	f042 0201 	orr.w	r2, r2, #1
 8000a54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2220      	movs	r2, #32
 8000a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	431bde83 	.word	0x431bde83
 8000a80:	000186a0 	.word	0x000186a0
 8000a84:	10624dd3 	.word	0x10624dd3

08000a88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	4608      	mov	r0, r1
 8000a92:	4611      	mov	r1, r2
 8000a94:	461a      	mov	r2, r3
 8000a96:	4603      	mov	r3, r0
 8000a98:	817b      	strh	r3, [r7, #10]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	813b      	strh	r3, [r7, #8]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000aa6:	f7ff fbdb 	bl	8000260 <HAL_GetTick>
 8000aaa:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b20      	cmp	r3, #32
 8000ab6:	f040 80e7 	bne.w	8000c88 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2319      	movs	r3, #25
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4974      	ldr	r1, [pc, #464]	; (8000c94 <HAL_I2C_Mem_Write+0x20c>)
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 f97b 	bl	8000dc0 <I2C_WaitOnFlagUntilTimeout>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	e0da      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d101      	bne.n	8000ae2 <HAL_I2C_Mem_Write+0x5a>
 8000ade:	2302      	movs	r3, #2
 8000ae0:	e0d3      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d107      	bne.n	8000b08 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	6812      	ldr	r2, [r2, #0]
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	f042 0201 	orr.w	r2, r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2221      	movs	r2, #33	; 0x21
 8000b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2240      	movs	r2, #64	; 0x40
 8000b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6a3a      	ldr	r2, [r7, #32]
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4a56      	ldr	r2, [pc, #344]	; (8000c98 <HAL_I2C_Mem_Write+0x210>)
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b4a:	88f8      	ldrh	r0, [r7, #6]
 8000b4c:	893a      	ldrh	r2, [r7, #8]
 8000b4e:	8979      	ldrh	r1, [r7, #10]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f000 f89e 	bl	8000c9c <I2C_RequestMemoryWrite>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d05e      	beq.n	8000c24 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d105      	bne.n	8000b7a <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e087      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e081      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f000 f9d8 	bl	8000f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00f      	beq.n	8000bb6 <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d109      	bne.n	8000bb2 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bac:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e06b      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e069      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	1c58      	adds	r0, r3, #1
 8000bc0:	68f9      	ldr	r1, [r7, #12]
 8000bc2:	6248      	str	r0, [r1, #36]	; 0x24
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d019      	beq.n	8000c24 <HAL_I2C_Mem_Write+0x19c>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d015      	beq.n	8000c24 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c00:	1c58      	adds	r0, r3, #1
 8000c02:	68f9      	ldr	r1, [r7, #12]
 8000c04:	6248      	str	r0, [r1, #36]	; 0x24
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	855a      	strh	r2, [r3, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    while(hi2c->XferSize > 0U)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1ac      	bne.n	8000b86 <HAL_I2C_Mem_Write+0xfe>
        hi2c->XferCount--;
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f000 f9c3 	bl	8000fbc <I2C_WaitOnBTFFlagUntilTimeout>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00f      	beq.n	8000c5c <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d109      	bne.n	8000c58 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c52:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e018      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e016      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	6812      	ldr	r2, [r2, #0]
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2220      	movs	r2, #32
 8000c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	e000      	b.n	8000c8a <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8000c88:	2302      	movs	r3, #2
  }
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	00100002 	.word	0x00100002
 8000c98:	ffff0000 	.word	0xffff0000

08000c9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4603      	mov	r3, r0
 8000cac:	817b      	strh	r3, [r7, #10]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	813b      	strh	r3, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f000 f874 	bl	8000dc0 <I2C_WaitOnFlagUntilTimeout>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e068      	b.n	8000db4 <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000cee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	6a3a      	ldr	r2, [r7, #32]
 8000cf4:	4931      	ldr	r1, [pc, #196]	; (8000dbc <I2C_RequestMemoryWrite+0x120>)
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 f8b4 	bl	8000e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d007      	beq.n	8000d12 <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d101      	bne.n	8000d0e <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e052      	b.n	8000db4 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e050      	b.n	8000db4 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2a:	6a39      	ldr	r1, [r7, #32]
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f907 	bl	8000f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00f      	beq.n	8000d58 <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d109      	bne.n	8000d54 <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d4e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e02f      	b.n	8000db4 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e02d      	b.n	8000db4 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d105      	bne.n	8000d6a <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	893a      	ldrh	r2, [r7, #8]
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	e023      	b.n	8000db2 <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	893a      	ldrh	r2, [r7, #8]
 8000d70:	0a12      	lsrs	r2, r2, #8
 8000d72:	b292      	uxth	r2, r2
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7a:	6a39      	ldr	r1, [r7, #32]
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f000 f8df 	bl	8000f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00f      	beq.n	8000da8 <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d109      	bne.n	8000da4 <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d9e:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e007      	b.n	8000db4 <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e005      	b.n	8000db4 <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	893a      	ldrh	r2, [r7, #8]
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	00010002 	.word	0x00010002

08000dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000dd0:	e01f      	b.n	8000e12 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d01b      	beq.n	8000e12 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d007      	beq.n	8000df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000de0:	f7ff fa3e 	bl	8000260 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	1ad2      	subs	r2, r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d910      	bls.n	8000e12 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2220      	movs	r2, #32
 8000dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e023      	b.n	8000e5a <I2C_WaitOnFlagUntilTimeout+0x9a>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	0c1b      	lsrs	r3, r3, #16
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d10d      	bne.n	8000e38 <I2C_WaitOnFlagUntilTimeout+0x78>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4013      	ands	r3, r2
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf0c      	ite	eq
 8000e2e:	2301      	moveq	r3, #1
 8000e30:	2300      	movne	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	e00c      	b.n	8000e52 <I2C_WaitOnFlagUntilTimeout+0x92>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4013      	ands	r3, r2
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d0bc      	beq.n	8000dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop

08000e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e72:	e03f      	b.n	8000ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d01c      	beq.n	8000ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000e9a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2220      	movs	r2, #32
 8000eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e03c      	b.n	8000f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec2:	d017      	beq.n	8000ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
 8000eca:	f7ff f9c9 	bl	8000260 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d90c      	bls.n	8000ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e020      	b.n	8000f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10c      	bne.n	8000f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	43da      	mvns	r2, r3
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	e00b      	b.n	8000f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xcc>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4013      	ands	r3, r2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bf14      	ite	ne
 8000f2a:	2301      	movne	r3, #1
 8000f2c:	2300      	moveq	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d19f      	bne.n	8000e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop

08000f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f4c:	e029      	b.n	8000fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f872 	bl	8001038 <I2C_IsAcknowledgeFailed>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e029      	b.n	8000fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d01d      	beq.n	8000fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8000f6c:	f7ff f978 	bl	8000260 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	1ad2      	subs	r2, r2, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d912      	bls.n	8000fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f043 0220 	orr.w	r2, r3, #32
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2220      	movs	r2, #32
 8000f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e007      	b.n	8000fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0ce      	beq.n	8000f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop

08000fbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000fc8:	e029      	b.n	800101e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f834 	bl	8001038 <I2C_IsAcknowledgeFailed>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e029      	b.n	800102e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d01d      	beq.n	800101e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8000fe8:	f7ff f93a 	bl	8000260 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	1ad2      	subs	r2, r2, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d912      	bls.n	800101e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f043 0220 	orr.w	r2, r3, #32
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2220      	movs	r2, #32
 800100e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e007      	b.n	800102e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0ce      	beq.n	8000fca <I2C_WaitOnBTFFlagUntilTimeout+0xe>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop

08001038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104a:	2b00      	cmp	r3, #0
 800104c:	d014      	beq.n	8001078 <I2C_IsAcknowledgeFailed+0x40>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001056:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2204      	movs	r2, #4
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2220      	movs	r2, #32
 8001068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <I2C_IsAcknowledgeFailed+0x42>
  }
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	b08f      	sub	sp, #60	; 0x3c
 800108c:	af0a      	add	r7, sp, #40	; 0x28
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e0f7      	b.n	800128e <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f006 f9bc 	bl	8007424 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f893 	bl	80041dc <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	687e      	ldr	r6, [r7, #4]
 80010be:	466d      	mov	r5, sp
 80010c0:	f106 0410 	add.w	r4, r6, #16
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d4:	1d33      	adds	r3, r6, #4
 80010d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f003 f81b 	bl	8004114 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 f88b 	bl	8004200 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e04c      	b.n	800118a <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	3339      	adds	r3, #57	; 0x39
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	b2d8      	uxtb	r0, r3
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3338      	adds	r3, #56	; 0x38
 8001118:	4602      	mov	r2, r0
 800111a:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	b298      	uxth	r0, r3
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	333e      	adds	r3, #62	; 0x3e
 8001130:	4602      	mov	r2, r0
 8001132:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	333b      	adds	r3, #59	; 0x3b
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	1a9b      	subs	r3, r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	3340      	adds	r3, #64	; 0x40
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	1a9b      	subs	r3, r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	3344      	adds	r3, #68	; 0x44
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	334c      	adds	r3, #76	; 0x4c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b0e      	cmp	r3, #14
 800118e:	d9af      	bls.n	80010f0 <HAL_PCD_Init+0x68>
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e05a      	b.n	800124c <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011c2:	4602      	mov	r2, r0
 80011c4:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	b298      	uxth	r0, r3
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	333e      	adds	r3, #62	; 0x3e
 80011da:	4602      	mov	r2, r0
 80011dc:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	1a9b      	subs	r3, r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3340      	adds	r3, #64	; 0x40
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b0e      	cmp	r3, #14
 8001250:	d9a1      	bls.n	8001196 <HAL_PCD_Init+0x10e>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	687e      	ldr	r6, [r7, #4]
 800125a:	466d      	mov	r5, sp
 800125c:	f106 0410 	add.w	r4, r6, #16
 8001260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800126c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001270:	1d33      	adds	r3, r6, #4
 8001272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001274:	6838      	ldr	r0, [r7, #0]
 8001276:	f002 ffeb 	bl	8004250 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f004 f80c 	bl	80052a4 <USB_DevDisconnect>
 return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop

08001298 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_PCD_Start+0x16>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e012      	b.n	80012d4 <HAL_PCD_Start+0x3c>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 ffda 	bl	8005274 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 ff77 	bl	80041b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8001302:	4b7b      	ldr	r3, [pc, #492]	; (80014f0 <HAL_PCD_IRQHandler+0x214>)
 8001304:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f004 f86e 	bl	80053ec <USB_GetMode>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 845d 	bne.w	8001bd2 <HAL_PCD_IRQHandler+0x8f6>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 ffd9 	bl	80052d4 <USB_ReadInterrupts>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8453 	beq.w	8001bd0 <HAL_PCD_IRQHandler+0x8f4>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f003 ffd0 	bl	80052d4 <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	6952      	ldr	r2, [r2, #20]
 8001348:	f002 0202 	and.w	r2, r2, #2
 800134c:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f003 ffbe 	bl	80052d4 <USB_ReadInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80b2 	beq.w	80014c8 <HAL_PCD_IRQHandler+0x1ec>
    {
      epnum = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f003 ffc7 	bl	8005300 <USB_ReadDevAllOutEpInterrupt>
 8001372:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8001374:	e0a4      	b.n	80014c0 <HAL_PCD_IRQHandler+0x1e4>
      {
        if (ep_intr & 0x1U)
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8099 	beq.w	80014b4 <HAL_PCD_IRQHandler+0x1d8>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f003 ffe7 	bl	8005360 <USB_ReadDevOutEPInterrupt>
 8001392:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d06b      	beq.n	8001476 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	2301      	movs	r3, #1
 80013ae:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d13c      	bne.n	8001432 <HAL_PCD_IRQHandler+0x156>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	0159      	lsls	r1, r3, #5
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	440b      	add	r3, r1
 80013d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013de:	1ad1      	subs	r1, r2, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4403      	add	r3, r0
 80013ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013f2:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140c:	4613      	mov	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4403      	add	r3, r0
 8001416:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4419      	add	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001422:	4613      	mov	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4403      	add	r3, r0
 800142c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001430:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f006 f843 	bl	80074c4 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d117      	bne.n	8001476 <HAL_PCD_IRQHandler+0x19a>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	2b00      	cmp	r3, #0
 800144a:	d114      	bne.n	8001476 <HAL_PCD_IRQHandler+0x19a>
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d108      	bne.n	8001476 <HAL_PCD_IRQHandler+0x19a>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800146e:	461a      	mov	r2, r3
 8001470:	2101      	movs	r1, #1
 8001472:	f003 ffff 	bl	8005474 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <HAL_PCD_IRQHandler+0x1bc>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f006 f80d 	bl	80074a0 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	4413      	add	r3, r2
 800148e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001492:	461a      	mov	r2, r3
 8001494:	2308      	movs	r3, #8
 8001496:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <HAL_PCD_IRQHandler+0x1d8>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ae:	461a      	mov	r2, r3
 80014b0:	2310      	movs	r3, #16
 80014b2:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	3301      	adds	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f47f af57 	bne.w	8001376 <HAL_PCD_IRQHandler+0x9a>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 ff01 	bl	80052d4 <USB_ReadInterrupts>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80c5 	beq.w	8001668 <HAL_PCD_IRQHandler+0x38c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 ff24 	bl	8005330 <USB_ReadDevAllInEpInterrupt>
 80014e8:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 80014ee:	e0b7      	b.n	8001660 <HAL_PCD_IRQHandler+0x384>
 80014f0:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80aa 	beq.w	8001654 <HAL_PCD_IRQHandler+0x378>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f003 ff44 	bl	8005398 <USB_ReadDevInEPInterrupt>
 8001510:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05a      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x2f6>
          {
            fifoemptymsk = 0x1U << epnum;
 800151c:	2201      	movs	r2, #1
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800152c:	4619      	mov	r1, r3
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	43db      	mvns	r3, r3
 800153a:	4013      	ands	r3, r2
 800153c:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	015a      	lsls	r2, r3, #5
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	4413      	add	r3, r2
 8001546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800154a:	461a      	mov	r2, r3
 800154c:	2301      	movs	r3, #1
 800154e:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d11b      	bne.n	8001590 <HAL_PCD_IRQHandler+0x2b4>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3344      	adds	r3, #68	; 0x44
 8001568:	6819      	ldr	r1, [r3, #0]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	1a9b      	subs	r3, r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4403      	add	r3, r0
 8001578:	3340      	adds	r3, #64	; 0x40
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4419      	add	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001582:	4613      	mov	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	1a9b      	subs	r3, r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4403      	add	r3, r0
 800158c:	3344      	adds	r3, #68	; 0x44
 800158e:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f005 ffb0 	bl	80074fc <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d116      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x2f6>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d113      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x2f6>
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	334c      	adds	r3, #76	; 0x4c
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d108      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x2f6>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80015ca:	461a      	mov	r2, r3
 80015cc:	2101      	movs	r1, #1
 80015ce:	f003 ff51 	bl	8005474 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x312>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2308      	movs	r3, #8
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x32e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2310      	movs	r3, #16
 8001608:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_PCD_IRQHandler+0x34a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001620:	461a      	mov	r2, r3
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_PCD_IRQHandler+0x366>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	015a      	lsls	r2, r3, #5
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	4413      	add	r3, r2
 8001638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800163c:	461a      	mov	r2, r3
 800163e:	2302      	movs	r3, #2
 8001640:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_PCD_IRQHandler+0x378>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 800164c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fcec 	bl	800202c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3301      	adds	r3, #1
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
      
      epnum = 0U;
      
      while ( ep_intr )
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f af46 	bne.w	80014f4 <HAL_PCD_IRQHandler+0x218>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fe31 	bl	80052d4 <USB_ReadInterrupts>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	da15      	bge.n	80016a4 <HAL_PCD_IRQHandler+0x3c8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167e:	461a      	mov	r2, r3
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f005 ffac 	bl	80075ec <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	6952      	ldr	r2, [r2, #20]
 800169e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016a2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fe13 	bl	80052d4 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d012      	beq.n	80016de <HAL_PCD_IRQHandler+0x402>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_PCD_IRQHandler+0x3f2>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f005 ff67 	bl	800759c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	6952      	ldr	r2, [r2, #20]
 80016d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016dc:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fdf6 	bl	80052d4 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8091 	beq.w	8001816 <HAL_PCD_IRQHandler+0x53a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fa:	461a      	mov	r2, r3
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2110      	movs	r1, #16
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fec9 	bl	80044a8 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171a:	e014      	b.n	8001746 <HAL_PCD_IRQHandler+0x46a>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001728:	461a      	mov	r2, r3
 800172a:	23ff      	movs	r3, #255	; 0xff
 800172c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173a:	461a      	mov	r2, r3
 800173c:	23ff      	movs	r3, #255	; 0xff
 800173e:	6093      	str	r3, [r2, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	3301      	adds	r3, #1
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174c:	429a      	cmp	r2, r3
 800174e:	d8e5      	bhi.n	800171c <HAL_PCD_IRQHandler+0x440>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001756:	461a      	mov	r2, r3
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001764:	461a      	mov	r2, r3
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001772:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	d018      	beq.n	80017ae <HAL_PCD_IRQHandler+0x4d2>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001782:	461a      	mov	r2, r3
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800178e:	f043 030b 	orr.w	r3, r3, #11
 8001792:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179c:	461a      	mov	r2, r3
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f043 030b 	orr.w	r3, r3, #11
 80017aa:	6453      	str	r3, [r2, #68]	; 0x44
 80017ac:	e015      	b.n	80017da <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b4:	461a      	mov	r2, r3
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f043 030b 	orr.w	r3, r3, #11
 80017c2:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ca:	461a      	mov	r2, r3
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f043 030b 	orr.w	r3, r3, #11
 80017d8:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e0:	461a      	mov	r2, r3
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017ee:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	b2d9      	uxtb	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001800:	461a      	mov	r2, r3
 8001802:	f003 fe37 	bl	8005474 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	6952      	ldr	r2, [r2, #20]
 8001810:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001814:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fd5a 	bl	80052d4 <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80da 	beq.w	80019e0 <HAL_PCD_IRQHandler+0x704>
    {
      USB_ActivateSetup(hpcd->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 fde9 	bl	8005408 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	68d2      	ldr	r2, [r2, #12]
 8001840:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001844:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fe8c 	bl	8004568 <USB_GetDevSpeed>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <HAL_PCD_IRQHandler+0x59a>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001862:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	68d2      	ldr	r2, [r2, #12]
 800186e:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	e0a9      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2203      	movs	r2, #3
 800187a:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2240      	movs	r2, #64	; 0x40
 8001880:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8001882:	f001 f89d 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8001886:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <HAL_PCD_IRQHandler+0x79c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d90c      	bls.n	80018aa <HAL_PCD_IRQHandler+0x5ce>
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4a7a      	ldr	r2, [pc, #488]	; (8001a7c <HAL_PCD_IRQHandler+0x7a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d808      	bhi.n	80018aa <HAL_PCD_IRQHandler+0x5ce>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	e08f      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4a73      	ldr	r2, [pc, #460]	; (8001a7c <HAL_PCD_IRQHandler+0x7a0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d90c      	bls.n	80018cc <HAL_PCD_IRQHandler+0x5f0>
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4a72      	ldr	r2, [pc, #456]	; (8001a80 <HAL_PCD_IRQHandler+0x7a4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d808      	bhi.n	80018cc <HAL_PCD_IRQHandler+0x5f0>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	68d2      	ldr	r2, [r2, #12]
 80018c4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	e07e      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4a6c      	ldr	r2, [pc, #432]	; (8001a80 <HAL_PCD_IRQHandler+0x7a4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d90c      	bls.n	80018ee <HAL_PCD_IRQHandler+0x612>
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4a6b      	ldr	r2, [pc, #428]	; (8001a84 <HAL_PCD_IRQHandler+0x7a8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d808      	bhi.n	80018ee <HAL_PCD_IRQHandler+0x612>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	68d2      	ldr	r2, [r2, #12]
 80018e6:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	e06d      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4a64      	ldr	r2, [pc, #400]	; (8001a84 <HAL_PCD_IRQHandler+0x7a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d90c      	bls.n	8001910 <HAL_PCD_IRQHandler+0x634>
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4a63      	ldr	r2, [pc, #396]	; (8001a88 <HAL_PCD_IRQHandler+0x7ac>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d808      	bhi.n	8001910 <HAL_PCD_IRQHandler+0x634>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	68d2      	ldr	r2, [r2, #12]
 8001908:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	e05c      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4a5d      	ldr	r2, [pc, #372]	; (8001a88 <HAL_PCD_IRQHandler+0x7ac>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d90c      	bls.n	8001932 <HAL_PCD_IRQHandler+0x656>
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4a5c      	ldr	r2, [pc, #368]	; (8001a8c <HAL_PCD_IRQHandler+0x7b0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d808      	bhi.n	8001932 <HAL_PCD_IRQHandler+0x656>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	68d2      	ldr	r2, [r2, #12]
 800192a:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	e04b      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4a55      	ldr	r2, [pc, #340]	; (8001a8c <HAL_PCD_IRQHandler+0x7b0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d90c      	bls.n	8001954 <HAL_PCD_IRQHandler+0x678>
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <HAL_PCD_IRQHandler+0x7b4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d808      	bhi.n	8001954 <HAL_PCD_IRQHandler+0x678>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	68d2      	ldr	r2, [r2, #12]
 800194c:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	e03a      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_PCD_IRQHandler+0x7b4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d90c      	bls.n	8001976 <HAL_PCD_IRQHandler+0x69a>
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <HAL_PCD_IRQHandler+0x7b8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d808      	bhi.n	8001976 <HAL_PCD_IRQHandler+0x69a>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	68d2      	ldr	r2, [r2, #12]
 800196e:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	e029      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_PCD_IRQHandler+0x7b8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d90c      	bls.n	8001998 <HAL_PCD_IRQHandler+0x6bc>
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <HAL_PCD_IRQHandler+0x7bc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d808      	bhi.n	8001998 <HAL_PCD_IRQHandler+0x6bc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	68d2      	ldr	r2, [r2, #12]
 8001990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	e018      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <HAL_PCD_IRQHandler+0x7bc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d90c      	bls.n	80019ba <HAL_PCD_IRQHandler+0x6de>
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4a3e      	ldr	r2, [pc, #248]	; (8001a9c <HAL_PCD_IRQHandler+0x7c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d808      	bhi.n	80019ba <HAL_PCD_IRQHandler+0x6de>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	68d2      	ldr	r2, [r2, #12]
 80019b2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	e007      	b.n	80019ca <HAL_PCD_IRQHandler+0x6ee>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	68d2      	ldr	r2, [r2, #12]
 80019c4:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80019c8:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f005 fdbe 	bl	800754c <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	6952      	ldr	r2, [r2, #20]
 80019da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fc75 	bl	80052d4 <USB_ReadInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d074      	beq.n	8001ade <HAL_PCD_IRQHandler+0x802>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	6992      	ldr	r2, [r2, #24]
 80019fe:	f022 0210 	bic.w	r2, r2, #16
 8001a02:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 020f 	and.w	r2, r3, #15
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	0c5b      	lsrs	r3, r3, #17
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d138      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x7c4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d049      	beq.n	8001ace <HAL_PCD_IRQHandler+0x7f2>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	68d9      	ldr	r1, [r3, #12]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6a38      	ldr	r0, [r7, #32]
 8001a4e:	f003 fae3 	bl	8005018 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a5e:	441a      	add	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a70:	441a      	add	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	619a      	str	r2, [r3, #24]
 8001a76:	e02a      	b.n	8001ace <HAL_PCD_IRQHandler+0x7f2>
 8001a78:	00d8acbf 	.word	0x00d8acbf
 8001a7c:	00e4e1bf 	.word	0x00e4e1bf
 8001a80:	00f423ff 	.word	0x00f423ff
 8001a84:	0106737f 	.word	0x0106737f
 8001a88:	011a499f 	.word	0x011a499f
 8001a8c:	01312cff 	.word	0x01312cff
 8001a90:	014ca43f 	.word	0x014ca43f
 8001a94:	016e35ff 	.word	0x016e35ff
 8001a98:	01a6ab1f 	.word	0x01a6ab1f
 8001a9c:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	0c5b      	lsrs	r3, r3, #17
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	2b06      	cmp	r3, #6
 8001aaa:	d110      	bne.n	8001ace <HAL_PCD_IRQHandler+0x7f2>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6a38      	ldr	r0, [r7, #32]
 8001ab8:	f003 faae 	bl	8005018 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac8:	441a      	add	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	6992      	ldr	r2, [r2, #24]
 8001ad8:	f042 0210 	orr.w	r2, r2, #16
 8001adc:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fbf6 	bl	80052d4 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00a      	beq.n	8001b08 <HAL_PCD_IRQHandler+0x82c>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f005 fd1c 	bl	8007530 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	6952      	ldr	r2, [r2, #20]
 8001b02:	f002 0208 	and.w	r2, r2, #8
 8001b06:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fbe1 	bl	80052d4 <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00d      	beq.n	8001b38 <HAL_PCD_IRQHandler+0x85c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f005 fd82 	bl	800762c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	6952      	ldr	r2, [r2, #20]
 8001b32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b36:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fbc9 	bl	80052d4 <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00d      	beq.n	8001b68 <HAL_PCD_IRQHandler+0x88c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 fd58 	bl	8007608 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	6952      	ldr	r2, [r2, #20]
 8001b62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b66:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fbb1 	bl	80052d4 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00a      	beq.n	8001b92 <HAL_PCD_IRQHandler+0x8b6>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f005 fd67 	bl	8007650 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	6952      	ldr	r2, [r2, #20]
 8001b8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b90:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fb9c 	bl	80052d4 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d015      	beq.n	8001bd2 <HAL_PCD_IRQHandler+0x8f6>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x8e2>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f005 fd57 	bl	800766c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	6851      	ldr	r1, [r2, #4]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	e000      	b.n	8001bd2 <HAL_PCD_IRQHandler+0x8f6>
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
    {
      return;
 8001bd0:	bf00      	nop
        HAL_PCD_DisconnectCallback(hpcd);
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8001bd2:	3730      	adds	r7, #48	; 0x30
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_PCD_SetAddress+0x1a>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e00f      	b.n	8001c12 <HAL_PCD_SetAddress+0x3a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fb10 	bl	8005228 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop

08001c1c <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	4608      	mov	r0, r1
 8001c26:	4611      	mov	r1, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	70fb      	strb	r3, [r7, #3]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	803b      	strh	r3, [r7, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8001c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da0b      	bge.n	8001c5a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	3338      	adds	r3, #56	; 0x38
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e00b      	b.n	8001c72 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	09db      	lsrs	r3, r3, #7
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001c8e:	883a      	ldrh	r2, [r7, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	78ba      	ldrb	r2, [r7, #2]
 8001c98:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8001cac:	78bb      	ldrb	r3, [r7, #2]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_PCD_EP_Open+0xaa>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e00e      	b.n	8001ce4 <HAL_PCD_EP_Open+0xc8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fc7d 	bl	80045d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8001cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da0b      	bge.n	8001d18 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	1a9b      	subs	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	3338      	adds	r3, #56	; 0x38
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	e00b      	b.n	8001d30 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	09db      	lsrs	r3, r3, #7
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_PCD_EP_Close+0x6e>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e00e      	b.n	8001d78 <HAL_PCD_EP_Close+0x8c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fcbd 	bl	80046e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	6979      	ldr	r1, [r7, #20]
 8001df2:	f002 ff7b 	bl	8004cec <USB_EP0StartXfer>
 8001df6:	e008      	b.n	8001e0a <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	f002 fd2f 	bl	8004868 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 020f 	and.w	r2, r3, #15
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	3338      	adds	r3, #56	; 0x38
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2201      	movs	r2, #1
 8001e84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d102      	bne.n	8001ea0 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001ea0:	7afb      	ldrb	r3, [r7, #11]
 8001ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6979      	ldr	r1, [r7, #20]
 8001eb8:	f002 ff18 	bl	8004cec <USB_EP0StartXfer>
 8001ebc:	e008      	b.n	8001ed0 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6979      	ldr	r1, [r7, #20]
 8001ecc:	f002 fccc 	bl	8004868 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop

08001edc <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da0b      	bge.n	8001f08 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3338      	adds	r3, #56	; 0x38
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e009      	b.n	8001f1c <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	09db      	lsrs	r3, r3, #7
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_PCD_EP_SetStall+0x70>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e01e      	b.n	8001f8a <HAL_PCD_EP_SetStall+0xae>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68f9      	ldr	r1, [r7, #12]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 f884 	bl	8005068 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	b2d9      	uxtb	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f003 fa7a 	bl	8005474 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop

08001f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	da0b      	bge.n	8001fc0 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3338      	adds	r3, #56	; 0x38
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e009      	b.n	8001fd4 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	09db      	lsrs	r3, r3, #7
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_PCD_EP_ClrStall+0x70>
 8002000:	2302      	movs	r3, #2
 8002002:	e00e      	b.n	8002022 <HAL_PCD_EP_ClrStall+0x8e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	4618      	mov	r0, r3
 8002014:	f003 f89a 	bl	800514c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop

0800202c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd: PCD handle
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	429a      	cmp	r2, r3
 800206a:	d202      	bcs.n	8002072 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3303      	adds	r3, #3
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800207a:	e02b      	b.n	80020d4 <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	429a      	cmp	r2, r3
 8002090:	d202      	bcs.n	8002098 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3303      	adds	r3, #3
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68d9      	ldr	r1, [r3, #12]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	b298      	uxth	r0, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4603      	mov	r3, r0
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f002 ff78 	bl	8004fac <USB_WritePacket>
    
    ep->xfer_buff  += len;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	441a      	add	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	441a      	add	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d909      	bls.n	80020fe <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	695b      	ldr	r3, [r3, #20]
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d203      	bcs.n	80020fe <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	695b      	ldr	r3, [r3, #20]
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
          (ep->xfer_count < ep->xfer_len) &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1be      	bne.n	800207c <PCD_WriteEmptyTxFifo+0x50>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d110      	bne.n	8002126 <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8002104:	2201      	movs	r2, #1
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002114:	4619      	mov	r1, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	4013      	ands	r3, r2
 8002124:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
 800213c:	4613      	mov	r3, r2
 800213e:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	883a      	ldrh	r2, [r7, #0]
 800215c:	0411      	lsls	r1, r2, #16
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	430a      	orrs	r2, r1
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
 8002164:	e028      	b.n	80021b8 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	4413      	add	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e00d      	b.n	8002196 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	3340      	adds	r3, #64	; 0x40
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
    for (i = 0; i < (fifo - 1); i++)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	3301      	adds	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	3b01      	subs	r3, #1
 800219c:	429a      	cmp	r2, r3
 800219e:	dbec      	blt.n	800217a <HAL_PCDEx_SetTxFiFo+0x4a>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	883a      	ldrh	r2, [r7, #0]
 80021aa:	0410      	lsls	r0, r2, #16
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	4302      	orrs	r2, r0
 80021b0:	3340      	adds	r3, #64	; 0x40
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop

080021c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd: PCD handle
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	887a      	ldrh	r2, [r7, #2]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d074      	beq.n	80022ee <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002204:	4ba4      	ldr	r3, [pc, #656]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b04      	cmp	r3, #4
 800220e:	d00b      	beq.n	8002228 <HAL_RCC_OscConfig+0x3c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002210:	4ba1      	ldr	r3, [pc, #644]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002218:	2b08      	cmp	r3, #8
 800221a:	d111      	bne.n	8002240 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221c:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <HAL_RCC_OscConfig+0x54>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	4b9b      	ldr	r3, [pc, #620]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d05b      	beq.n	80022ec <HAL_RCC_OscConfig+0x100>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d157      	bne.n	80022ec <HAL_RCC_OscConfig+0x100>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e225      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x6c>
 800224a:	4a93      	ldr	r2, [pc, #588]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e01d      	b.n	8002294 <HAL_RCC_OscConfig+0xa8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x90>
 8002262:	4a8d      	ldr	r2, [pc, #564]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4a8a      	ldr	r2, [pc, #552]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0xa8>
 800227c:	4a86      	ldr	r2, [pc, #536]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	4b86      	ldr	r3, [pc, #536]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4a83      	ldr	r2, [pc, #524]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800228a:	4b83      	ldr	r3, [pc, #524]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0xd8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fd ffe0 	bl	8000260 <HAL_GetTick>
 80022a0:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fd ffdc 	bl	8000260 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xca>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1ea      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b78      	ldr	r3, [pc, #480]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xb8>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x102>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fd ffcc 	bl	8000260 <HAL_GetTick>
 80022c8:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fd ffc8 	bl	8000260 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1d6      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	4b6e      	ldr	r3, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0xe0>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x102>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d077      	beq.n	80023ea <HAL_RCC_OscConfig+0x1fe>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800230e:	2b08      	cmp	r3, #8
 8002310:	d126      	bne.n	8002360 <HAL_RCC_OscConfig+0x174>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b61      	ldr	r3, [pc, #388]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d120      	bne.n	8002360 <HAL_RCC_OscConfig+0x174>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x14a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x14a>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e1aa      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002336:	4858      	ldr	r0, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	4b57      	ldr	r3, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6919      	ldr	r1, [r3, #16]
 8002344:	23f8      	movs	r3, #248	; 0xf8
 8002346:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	e044      	b.n	80023ea <HAL_RCC_OscConfig+0x1fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02a      	beq.n	80023be <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_RCC_OscConfig+0x2b0>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fd ff77 	bl	8000260 <HAL_GetTick>
 8002372:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002376:	f7fd ff73 	bl	8000260 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e181      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002388:	4b43      	ldr	r3, [pc, #268]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x18a>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4840      	ldr	r0, [pc, #256]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	4b40      	ldr	r3, [pc, #256]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6919      	ldr	r1, [r3, #16]
 80023a2:	23f8      	movs	r3, #248	; 0xf8
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	4313      	orrs	r3, r2
 80023ba:	6003      	str	r3, [r0, #0]
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0x1fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023be:	4b37      	ldr	r3, [pc, #220]	; (800249c <HAL_RCC_OscConfig+0x2b0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fd ff4c 	bl	8000260 <HAL_GetTick>
 80023c8:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023cc:	f7fd ff48 	bl	8000260 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e156      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x1e0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d030      	beq.n	8002458 <HAL_RCC_OscConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <HAL_RCC_OscConfig+0x2b4>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7fd ff2c 	bl	8000260 <HAL_GetTick>
 8002408:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x232>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240c:	f7fd ff28 	bl	8000260 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e136      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x220>
 800242a:	e015      	b.n	8002458 <HAL_RCC_OscConfig+0x26c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_RCC_OscConfig+0x2b4>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7fd ff15 	bl	8000260 <HAL_GetTick>
 8002436:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x260>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243a:	f7fd ff11 	bl	8000260 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e11f      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x24e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8087 	beq.w	8002574 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_RCC_OscConfig+0x2b8>)
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RCC_OscConfig+0x2b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800248e:	f7fd fee7 	bl	8000260 <HAL_GetTick>
 8002492:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002494:	e011      	b.n	80024ba <HAL_RCC_OscConfig+0x2ce>
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	42470000 	.word	0x42470000
 80024a0:	42470e80 	.word	0x42470e80
 80024a4:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024a8:	f7fd feda 	bl	8000260 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0e8      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024ba:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0x4a8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x2bc>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x2f0>
 80024ce:	4a72      	ldr	r2, [pc, #456]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	4b71      	ldr	r3, [pc, #452]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	e01c      	b.n	8002516 <HAL_RCC_OscConfig+0x32a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d10c      	bne.n	80024fe <HAL_RCC_OscConfig+0x312>
 80024e4:	4a6c      	ldr	r2, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024e6:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	4a69      	ldr	r2, [pc, #420]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	4b69      	ldr	r3, [pc, #420]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6713      	str	r3, [r2, #112]	; 0x70
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0x32a>
 80024fe:	4a66      	ldr	r2, [pc, #408]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
 800250a:	4a63      	ldr	r2, [pc, #396]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	4b62      	ldr	r3, [pc, #392]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d015      	beq.n	800254a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fd fe9f 	bl	8000260 <HAL_GetTick>
 8002522:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fd fe9b 	bl	8000260 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0a7      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	4b56      	ldr	r3, [pc, #344]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0ee      	beq.n	8002526 <HAL_RCC_OscConfig+0x33a>
 8002548:	e014      	b.n	8002574 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fd fe89 	bl	8000260 <HAL_GetTick>
 800254e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fd fe85 	bl	8000260 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e091      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ee      	bne.n	8002552 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8086 	beq.w	800268a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b08      	cmp	r3, #8
 8002588:	d07d      	beq.n	8002686 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d162      	bne.n	8002658 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b42      	ldr	r3, [pc, #264]	; (800269c <HAL_RCC_OscConfig+0x4b0>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fd fe62 	bl	8000260 <HAL_GetTick>
 800259c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fd fe5e 	bl	8000260 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e06c      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x3b4>
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025be:	4836      	ldr	r0, [pc, #216]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	1e59      	subs	r1, r3, #1
 80025f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	4313      	orrs	r3, r2
 8002628:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <HAL_RCC_OscConfig+0x4b0>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fd fe16 	bl	8000260 <HAL_GetTick>
 8002634:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fd fe12 	bl	8000260 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e020      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x44c>
 8002656:	e018      	b.n	800268a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCC_OscConfig+0x4b0>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fd fdff 	bl	8000260 <HAL_GetTick>
 8002662:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002666:	f7fd fdfb 	bl	8000260 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e009      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x47a>
 8002684:	e001      	b.n	800268a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3738      	adds	r7, #56	; 0x38
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40007000 	.word	0x40007000
 8002698:	40023800 	.word	0x40023800
 800269c:	42470060 	.word	0x42470060

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026ae:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_ClockConfig+0x214>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d20c      	bcs.n	80026d6 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026bc:	4b7d      	ldr	r3, [pc, #500]	; (80028b4 <HAL_RCC_ClockConfig+0x214>)
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026c4:	4b7b      	ldr	r3, [pc, #492]	; (80028b4 <HAL_RCC_ClockConfig+0x214>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 020f 	and.w	r2, r3, #15
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0ea      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e2:	4975      	ldr	r1, [pc, #468]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 80026e4:	4b74      	ldr	r3, [pc, #464]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8086 	beq.w	800280e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0c8      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002726:	2b03      	cmp	r3, #3
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0x9a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0b8      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0b0      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	495b      	ldr	r1, [pc, #364]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 800274c:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 0203 	bic.w	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fd fd80 	bl	8000260 <HAL_GetTick>
 8002760:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d112      	bne.n	8002790 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fd fd78 	bl	8000260 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e094      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002782:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d1ee      	bne.n	800276c <HAL_RCC_ClockConfig+0xcc>
 800278e:	e03e      	b.n	800280e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d112      	bne.n	80027be <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279a:	f7fd fd61 	bl	8000260 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e07d      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b0:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_ClockConfig+0xfa>
 80027bc:	e027      	b.n	800280e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d11d      	bne.n	8002802 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fd fd4a 	bl	8000260 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e066      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80027de:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d1ee      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x128>
 80027ea:	e010      	b.n	800280e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fd fd38 	bl	8000260 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e054      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1ee      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_RCC_ClockConfig+0x214>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 020f 	and.w	r2, r3, #15
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d90c      	bls.n	8002836 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_ClockConfig+0x214>)
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <HAL_RCC_ClockConfig+0x214>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 020f 	and.w	r2, r3, #15
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e03a      	b.n	80028ac <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002842:	491d      	ldr	r1, [pc, #116]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002860:	4915      	ldr	r1, [pc, #84]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4313      	orrs	r3, r2
 8002872:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002874:	f000 f826 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002878:	4601      	mov	r1, r0
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_RCC_ClockConfig+0x218>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002882:	23f0      	movs	r3, #240	; 0xf0
 8002884:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	4a08      	ldr	r2, [pc, #32]	; (80028bc <HAL_RCC_ClockConfig+0x21c>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	fa21 f303 	lsr.w	r3, r1, r3
 80028a0:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <HAL_RCC_ClockConfig+0x220>)
 80028a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fd fcb1 	bl	800020c <HAL_InitTick>
  
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023c00 	.word	0x40023c00
 80028b8:	40023800 	.word	0x40023800
 80028bc:	080084bc 	.word	0x080084bc
 80028c0:	20000124 	.word	0x20000124

080028c4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b08b      	sub	sp, #44	; 0x2c
 80028c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d006      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x30>
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d007      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x36>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d158      	bne.n	80029a0 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028f0:	623b      	str	r3, [r7, #32]
       break;
 80028f2:	e058      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f4:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f6:	623b      	str	r3, [r7, #32]
      break;
 80028f8:	e055      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002902:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002904:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d017      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002910:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fbb2 f2f3 	udiv	r2, r2, r3
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002920:	400b      	ands	r3, r1
 8002922:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002926:	60f9      	str	r1, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	fa91 f1a1 	rbit	r1, r1
 800292e:	60b9      	str	r1, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	fab1 f181 	clz	r1, r1
 8002936:	40cb      	lsrs	r3, r1
 8002938:	fb03 f302 	mul.w	r3, r3, r2
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	e016      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fbb2 f2f3 	udiv	r2, r2, r3
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002950:	400b      	ands	r3, r1
 8002952:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002956:	6179      	str	r1, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6979      	ldr	r1, [r7, #20]
 800295a:	fa91 f1a1 	rbit	r1, r1
 800295e:	6079      	str	r1, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	fab1 f181 	clz	r1, r1
 8002966:	40cb      	lsrs	r3, r1
 8002968:	fb03 f302 	mul.w	r3, r3, r2
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002976:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800297a:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	623b      	str	r3, [r7, #32]
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80029a2:	623b      	str	r3, [r7, #32]
      break;
 80029a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a6:	6a3b      	ldr	r3, [r7, #32]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	372c      	adds	r7, #44	; 0x2c
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40023800 	.word	0x40023800
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	017d7840 	.word	0x017d7840

080029c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000124 	.word	0x20000124

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80029de:	f7ff ffef 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029e2:	4601      	mov	r1, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80029f0:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	080084cc 	.word	0x080084cc

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002a22:	f7ff ffcd 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a26:	4601      	mov	r1, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8002a30:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a34:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	080084cc 	.word	0x080084cc

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d04a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a88:	4b6c      	ldr	r3, [pc, #432]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a8e:	f7fd fbe7 	bl	8000260 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a96:	f7fd fbe3 	bl	8000260 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0c5      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa8:	4b65      	ldr	r3, [pc, #404]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ab4:	4862      	ldr	r0, [pc, #392]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002abe:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002ad8:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif /* STM32F411xE */
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002af2:	4b52      	ldr	r3, [pc, #328]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002af8:	f7fd fbb2 	bl	8000260 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b00:	f7fd fbae 	bl	8000260 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e090      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b12:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8083 	beq.w	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b32:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b48:	4a3e      	ldr	r2, [pc, #248]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b54:	f7fd fb84 	bl	8000260 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7fd fb80 	bl	8000260 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e062      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    PWR->CR |= PWR_CR_DBP;
    
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b6e:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02f      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d028      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d014      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fd fb4e 	bl	8000260 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fd fb4a 	bl	8000260 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e02a      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002bf8:	4911      	ldr	r1, [pc, #68]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
 8002c12:	e005      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c1e:	6093      	str	r3, [r2, #8]
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	42470068 	.word	0x42470068
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42470e40 	.word	0x42470e40

08002c4c <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06d      	b.n	8002d3a <HAL_RTC_Init+0xee>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7f5b      	ldrb	r3, [r3, #29]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f004 f918 	bl	8006ea4 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	22ca      	movs	r2, #202	; 0xca
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2253      	movs	r2, #83	; 0x53
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9fe 	bl	800308c <RTC_EnterInitMode>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e048      	b.n	8002d3a <HAL_RTC_Init+0xee>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	6891      	ldr	r1, [r2, #8]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6850      	ldr	r0, [r2, #4]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6912      	ldr	r2, [r2, #16]
 8002cce:	4310      	orrs	r0, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6952      	ldr	r2, [r2, #20]
 8002cd4:	4302      	orrs	r2, r0
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d2      	ldr	r2, [r2, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	6911      	ldr	r1, [r2, #16]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6892      	ldr	r2, [r2, #8]
 8002cf2:	0412      	lsls	r2, r2, #16
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	68d2      	ldr	r2, [r2, #12]
 8002d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d06:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6992      	ldr	r2, [r2, #24]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	22ff      	movs	r2, #255	; 0xff
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop

08002d44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	7f1b      	ldrb	r3, [r3, #28]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_RTC_SetTime+0x1c>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e0b2      	b.n	8002ec6 <HAL_RTC_SetTime+0x182>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d126      	bne.n	8002dc0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f9aa 	bl	80030e4 <RTC_ByteToBcd2>
 8002d90:	4603      	mov	r3, r0
 8002d92:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f9a3 	bl	80030e4 <RTC_ByteToBcd2>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	021b      	lsls	r3, r3, #8
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002da2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	789b      	ldrb	r3, [r3, #2]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f99b 	bl	80030e4 <RTC_ByteToBcd2>
 8002dae:	4603      	mov	r3, r0
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002db0:	ea44 0203 	orr.w	r2, r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	78db      	ldrb	r3, [r3, #3]
 8002db8:	041b      	lsls	r3, r3, #16
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e020      	b.n	8002e02 <HAL_RTC_SetTime+0xbe>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
                        (((uint32_t)sTime->TimeFormat) << 16U));  
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f9a4 	bl	8003120 <RTC_Bcd2ToByte>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e002      	b.n	8002de4 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	021b      	lsls	r3, r3, #8
      sTime->TimeFormat = 0x00U;
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002df0:	4313      	orrs	r3, r2
              ((uint32_t)(sTime->Minutes) << 8U) | \
              ((uint32_t)sTime->Seconds) | \
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	7892      	ldrb	r2, [r2, #2]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002df6:	431a      	orrs	r2, r3
              ((uint32_t)sTime->Seconds) | \
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	78db      	ldrb	r3, [r3, #3]
 8002dfc:	041b      	lsls	r3, r3, #16
      sTime->TimeFormat = 0x00U;
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
              ((uint32_t)sTime->Seconds) | \
              ((uint32_t)(sTime->TimeFormat) << 16U));   
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	22ca      	movs	r2, #202	; 0xca
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2253      	movs	r2, #83	; 0x53
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f93a 	bl	800308c <RTC_EnterInitMode>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e047      	b.n	8002ec6 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e44:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	6892      	ldr	r2, [r2, #8]
 8002e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e54:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	6891      	ldr	r1, [r2, #8]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	68d0      	ldr	r0, [r2, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	6912      	ldr	r2, [r2, #16]
 8002e68:	4302      	orrs	r2, r0
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	68d2      	ldr	r2, [r2, #12]
 8002e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e7c:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d111      	bne.n	8002eb0 <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f8d5 	bl	800303c <HAL_RTC_WaitForSynchro>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e00a      	b.n	8002ec6 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	22ff      	movs	r2, #255	; 0xff
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd90      	pop	{r4, r7, pc}
 8002ece:	bf00      	nop

08002ed0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	7f1b      	ldrb	r3, [r3, #28]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_RTC_SetDate+0x1c>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0a2      	b.n	8003032 <HAL_RTC_SetDate+0x162>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10e      	bne.n	8002f1c <HAL_RTC_SetDate+0x4c>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	785b      	ldrb	r3, [r3, #1]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	f023 0310 	bic.w	r3, r3, #16
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	330a      	adds	r3, #10
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11c      	bne.n	8002f5c <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	78db      	ldrb	r3, [r3, #3]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f8dc 	bl	80030e4 <RTC_ByteToBcd2>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f8d5 	bl	80030e4 <RTC_ByteToBcd2>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	021b      	lsls	r3, r3, #8
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f3e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	789b      	ldrb	r3, [r3, #2]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f8cd 	bl	80030e4 <RTC_ByteToBcd2>
 8002f4a:	4603      	mov	r3, r0
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f4c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	035b      	lsls	r3, r3, #13
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e01c      	b.n	8002f96 <HAL_RTC_SetDate+0xc6>
                 ((uint32_t)sDate->WeekDay << 13U));   
  }
  else
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	785b      	ldrb	r3, [r3, #1]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f8dd 	bl	8003120 <RTC_Bcd2ToByte>
 8002f66:	4603      	mov	r3, r0
 8002f68:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	789b      	ldrb	r3, [r3, #2]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f8d6 	bl	8003120 <RTC_Bcd2ToByte>
 8002f74:	4603      	mov	r3, r0
 8002f76:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	78db      	ldrb	r3, [r3, #3]
 8002f7c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	021b      	lsls	r3, r3, #8
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f84:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Month) << 8U) | \
                  ((uint32_t)sDate->Date) | \
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	7892      	ldrb	r2, [r2, #2]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f8a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->Date) | \
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	035b      	lsls	r3, r3, #13
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
                  ((uint32_t)sDate->Date) | \
                  (((uint32_t)sDate->WeekDay) << 13U));  
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	22ca      	movs	r2, #202	; 0xca
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2253      	movs	r2, #83	; 0x53
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f870 	bl	800308c <RTC_EnterInitMode>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_RTC_SetDate+0xfa>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	22ff      	movs	r2, #255	; 0xff
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e033      	b.n	8003032 <HAL_RTC_SetDate+0x162>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fd8:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	68d2      	ldr	r2, [r2, #12]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe8:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <HAL_RTC_SetDate+0x14c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f81f 	bl	800303c <HAL_RTC_WaitForSynchro>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <HAL_RTC_SetDate+0x14c>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2204      	movs	r2, #4
 8003010:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e00a      	b.n	8003032 <HAL_RTC_SetDate+0x162>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 8003030:	2300      	movs	r3, #0
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	bd90      	pop	{r4, r7, pc}
 800303a:	bf00      	nop

0800303c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	68d2      	ldr	r2, [r2, #12]
 8003052:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003056:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003058:	f7fd f902 	bl	8000260 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800305e:	e009      	b.n	8003074 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003060:	f7fd f8fe 	bl	8000260 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800306e:	d901      	bls.n	8003074 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e007      	b.n	8003084 <HAL_RTC_WaitForSynchro+0x48>

    /* Get tick */
    tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RTC_WaitForSynchro+0x24>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d119      	bne.n	80030da <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f04f 32ff 	mov.w	r2, #4294967295
 80030ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030b0:	f7fd f8d6 	bl	8000260 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80030b6:	e009      	b.n	80030cc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80030b8:	f7fd f8d2 	bl	8000260 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030c6:	d901      	bls.n	80030cc <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e007      	b.n	80030dc <RTC_EnterInitMode+0x50>

    /* Get tick */
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ee      	beq.n	80030b8 <RTC_EnterInitMode+0x2c>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 80030f2:	e005      	b.n	8003100 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	3b0a      	subs	r3, #10
 80030fe:	71fb      	strb	r3, [r7, #7]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  
  while(Value >= 10U)
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	2b09      	cmp	r3, #9
 8003104:	d8f6      	bhi.n	80030f4 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	b2da      	uxtb	r2, r3
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	4313      	orrs	r3, r2
 8003112:	b2db      	uxtb	r3, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	4413      	add	r3, r2
 800314e:	b2db      	uxtb	r3, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3350      	adds	r3, #80	; 0x50
 8003172:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4413      	add	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
  
  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	601a      	str	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.                   
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3350      	adds	r3, #80	; 0x50
 80031a4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e01d      	b.n	800320e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f003 ff72 	bl	80070d0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 f966 	bl	80034d0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop

08003218 <HAL_TIM_Base_Stop_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	68d2      	ldr	r2, [r2, #12]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	f241 1311 	movw	r3, #4369	; 0x1111
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10f      	bne.n	8003260 <HAL_TIM_Base_Stop_IT+0x48>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a1a      	ldr	r2, [r3, #32]
 8003246:	f240 4344 	movw	r3, #1092	; 0x444
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <HAL_TIM_Base_Stop_IT+0x48>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d022      	beq.n	80032cc <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0202 	mvn.w	r2, #2
 800329c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8ee 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 80032b8:	e005      	b.n	80032c6 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8e0 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f8f1 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d022      	beq.n	8003320 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0204 	mvn.w	r2, #4
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8c4 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8b6 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8c7 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d022      	beq.n	8003374 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0208 	mvn.w	r2, #8
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2204      	movs	r2, #4
 800334a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f89a 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f88c 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f89d 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	d022      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0210 	mvn.w	r2, #16
 8003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2208      	movs	r2, #8
 800339e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f870 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f862 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f873 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0201 	mvn.w	r2, #1
 80033ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f003 fafa 	bl	80069e8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00e      	beq.n	8003420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003418:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f952 	bl	80036c4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003444:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f838 	bl	80034bc <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00e      	beq.n	8003478 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0220 	mvn.w	r2, #32
 8003470:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f91c 	bl	80036b0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a44      	ldr	r2, [pc, #272]	; (80035f8 <TIM_Base_SetConfig+0x128>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <TIM_Base_SetConfig+0x44>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f2:	d00f      	beq.n	8003514 <TIM_Base_SetConfig+0x44>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a41      	ldr	r2, [pc, #260]	; (80035fc <TIM_Base_SetConfig+0x12c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <TIM_Base_SetConfig+0x44>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a40      	ldr	r2, [pc, #256]	; (8003600 <TIM_Base_SetConfig+0x130>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <TIM_Base_SetConfig+0x44>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3f      	ldr	r2, [pc, #252]	; (8003604 <TIM_Base_SetConfig+0x134>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0x44>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3e      	ldr	r2, [pc, #248]	; (8003608 <TIM_Base_SetConfig+0x138>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <TIM_Base_SetConfig+0x48>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <TIM_Base_SetConfig+0x4a>
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a31      	ldr	r2, [pc, #196]	; (80035f8 <TIM_Base_SetConfig+0x128>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d02b      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353e:	d027      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a2e      	ldr	r2, [pc, #184]	; (80035fc <TIM_Base_SetConfig+0x12c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d023      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a2d      	ldr	r2, [pc, #180]	; (8003600 <TIM_Base_SetConfig+0x130>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d01f      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a2c      	ldr	r2, [pc, #176]	; (8003604 <TIM_Base_SetConfig+0x134>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d01b      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <TIM_Base_SetConfig+0x138>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d017      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a2a      	ldr	r2, [pc, #168]	; (800360c <TIM_Base_SetConfig+0x13c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <TIM_Base_SetConfig+0x140>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00f      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <TIM_Base_SetConfig+0x144>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a27      	ldr	r2, [pc, #156]	; (8003618 <TIM_Base_SetConfig+0x148>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a26      	ldr	r2, [pc, #152]	; (800361c <TIM_Base_SetConfig+0x14c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_Base_SetConfig+0xc0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a25      	ldr	r2, [pc, #148]	; (8003620 <TIM_Base_SetConfig+0x150>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d101      	bne.n	8003594 <TIM_Base_SetConfig+0xc4>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <TIM_Base_SetConfig+0xc6>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <TIM_Base_SetConfig+0x128>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_Base_SetConfig+0x102>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <TIM_Base_SetConfig+0x138>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <TIM_Base_SetConfig+0x106>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <TIM_Base_SetConfig+0x108>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	615a      	str	r2, [r3, #20]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40010400 	.word	0x40010400
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800
 8003618:	40001800 	.word	0x40001800
 800361c:	40001c00 	.word	0x40001c00
 8003620:	40002000 	.word	0x40002000

08003624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e032      	b.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	6852      	ldr	r2, [r2, #4]
 8003656:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800365a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	6851      	ldr	r1, [r2, #4]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800367c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	6891      	ldr	r1, [r2, #8]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	6852      	ldr	r2, [r2, #4]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
} 
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop

080036b0 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e03f      	b.n	800376a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f003 fd62 	bl	80071c8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2224      	movs	r2, #36	; 0x24
 8003708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	68d2      	ldr	r2, [r2, #12]
 8003716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800371a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fadd 	bl	8003cdc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	6912      	ldr	r2, [r2, #16]
 800372c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	6952      	ldr	r2, [r2, #20]
 800373c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003740:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	68d2      	ldr	r2, [r2, #12]
 800374c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003750:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop

08003774 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b20      	cmp	r3, #32
 800378c:	d130      	bne.n	80037f0 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_UART_Transmit_IT+0x26>
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e029      	b.n	80037f2 <HAL_UART_Transmit_IT+0x7e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Transmit_IT+0x38>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e022      	b.n	80037f2 <HAL_UART_Transmit_IT+0x7e>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	88fa      	ldrh	r2, [r7, #6]
 80037be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2221      	movs	r2, #33	; 0x21
 80037d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037ea:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;   
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	d138      	bne.n	800388c <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_UART_Receive_IT+0x26>
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e031      	b.n	800388e <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_UART_Receive_IT+0x38>
 8003834:	2302      	movs	r3, #2
 8003836:	e02a      	b.n	800388e <HAL_UART_Receive_IT+0x8e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	88fa      	ldrh	r2, [r7, #6]
 800384a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2222      	movs	r2, #34	; 0x22
 800385c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	6952      	ldr	r2, [r2, #20]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003886:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop

0800389c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_UART_IRQHandler+0x52>
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f97e 	bl	8003be8 <UART_Receive_IT>
      return;
 80038ec:	e0cc      	b.n	8003a88 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80ab 	beq.w	8003a4c <HAL_UART_IRQHandler+0x1b0>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <HAL_UART_IRQHandler+0x70>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80a0 	beq.w	8003a4c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_UART_IRQHandler+0x90>
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_UART_IRQHandler+0xb0>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	f043 0202 	orr.w	r2, r3, #2
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_UART_IRQHandler+0xd0>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	f043 0204 	orr.w	r2, r3, #4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_UART_IRQHandler+0xf0>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	f043 0208 	orr.w	r2, r3, #8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d078      	beq.n	8003a86 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_UART_IRQHandler+0x112>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f91d 	bl	8003be8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <HAL_UART_IRQHandler+0x13a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d031      	beq.n	8003a3a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f866 	bl	8003aa8 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d023      	beq.n	8003a32 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	6952      	ldr	r2, [r2, #20]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f8:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d013      	beq.n	8003a2a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_UART_IRQHandler+0x1f4>)
 8003a08:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fd86 	bl	8000520 <HAL_DMA_Abort_IT>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d016      	beq.n	8003a48 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a24:	4610      	mov	r0, r2
 8003a26:	4798      	blx	r3
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e00e      	b.n	8003a48 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f832 	bl	8003a94 <HAL_UART_ErrorCallback>
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	e00a      	b.n	8003a48 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f82e 	bl	8003a94 <HAL_UART_ErrorCallback>
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	e006      	b.n	8003a48 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f82a 	bl	8003a94 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a46:	e01e      	b.n	8003a86 <HAL_UART_IRQHandler+0x1ea>
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a48:	bf00      	nop
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
        huart->ErrorCode = HAL_UART_ERROR_NONE;
      }
    }
    return;
 8003a4a:	e01c      	b.n	8003a86 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_UART_IRQHandler+0x1cc>
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f853 	bl	8003b0c <UART_Transmit_IT>
    return;
 8003a66:	e00f      	b.n	8003a88 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_UART_IRQHandler+0x1ec>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f89b 	bl	8003bb8 <UART_EndTransmit_IT>
    return;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <HAL_UART_IRQHandler+0x1ec>
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
        huart->ErrorCode = HAL_UART_ERROR_NONE;
      }
    }
    return;
 8003a86:	bf00      	nop
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	08003ae5 	.word	0x08003ae5

08003a94 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	68d2      	ldr	r2, [r2, #12]
 8003aba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003abe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	6952      	ldr	r2, [r2, #20]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff ffc8 	bl	8003a94 <HAL_UART_ErrorCallback>
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b21      	cmp	r3, #33	; 0x21
 8003b1e:	d143      	bne.n	8003ba8 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b28:	d119      	bne.n	8003b5e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	8812      	ldrh	r2, [r2, #0]
 8003b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3c:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	621a      	str	r2, [r3, #32]
 8003b50:	e00e      	b.n	8003b70 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]
 8003b5c:	e008      	b.n	8003b70 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	1c58      	adds	r0, r3, #1
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	6208      	str	r0, [r1, #32]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10f      	bne.n	8003ba4 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	68d2      	ldr	r2, [r2, #12]
 8003b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	68d2      	ldr	r2, [r2, #12]
 8003b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	68d2      	ldr	r2, [r2, #12]
 8003bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bce:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f002 ff3f 	bl	8006a5c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b22      	cmp	r3, #34	; 0x22
 8003bfa:	d169      	bne.n	8003cd0 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c04:	d123      	bne.n	8003c4e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10e      	bne.n	8003c32 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	1c9a      	adds	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c30:	e029      	b.n	8003c86 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c4c:	e01b      	b.n	8003c86 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	1c59      	adds	r1, r3, #1
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6291      	str	r1, [r2, #40]	; 0x28
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	6852      	ldr	r2, [r2, #4]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e00c      	b.n	8003c86 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	1c59      	adds	r1, r3, #1
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6291      	str	r1, [r2, #40]	; 0x28
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	6852      	ldr	r2, [r2, #4]
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4619      	mov	r1, r3
 8003c94:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d118      	bne.n	8003ccc <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	68d2      	ldr	r2, [r2, #12]
 8003ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ca8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	6952      	ldr	r2, [r2, #20]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f002 fea8 	bl	8006a18 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e002      	b.n	8003cd2 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop

08003cdc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d18:	f023 030c 	bic.w	r3, r3, #12
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d50:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6c:	f040 80e4 	bne.w	8003f38 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4aab      	ldr	r2, [pc, #684]	; (8004024 <UART_SetConfig+0x348>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <UART_SetConfig+0xa8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4aaa      	ldr	r2, [pc, #680]	; (8004028 <UART_SetConfig+0x34c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d16c      	bne.n	8003e5e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681c      	ldr	r4, [r3, #0]
 8003d88:	f7fe fe48 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009a      	lsls	r2, r3, #2
 8003d96:	441a      	add	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	4aa2      	ldr	r2, [pc, #648]	; (800402c <UART_SetConfig+0x350>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	011d      	lsls	r5, r3, #4
 8003dac:	f7fe fe36 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	009a      	lsls	r2, r3, #2
 8003dba:	441a      	add	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8003dc6:	f7fe fe29 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009a      	lsls	r2, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	4a92      	ldr	r2, [pc, #584]	; (800402c <UART_SetConfig+0x350>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2264      	movs	r2, #100	; 0x64
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	1af3      	subs	r3, r6, r3
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a8d      	ldr	r2, [pc, #564]	; (800402c <UART_SetConfig+0x350>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	441d      	add	r5, r3
 8003e04:	f7fe fe0a 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	009a      	lsls	r2, r3, #2
 8003e12:	441a      	add	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e1e:	f7fe fdfd 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003e22:	4602      	mov	r2, r0
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009a      	lsls	r2, r3, #2
 8003e2c:	441a      	add	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	4a7c      	ldr	r2, [pc, #496]	; (800402c <UART_SetConfig+0x350>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2264      	movs	r2, #100	; 0x64
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	1af3      	subs	r3, r6, r3
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	3332      	adds	r3, #50	; 0x32
 8003e4c:	4a77      	ldr	r2, [pc, #476]	; (800402c <UART_SetConfig+0x350>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	442b      	add	r3, r5
 8003e5a:	60a3      	str	r3, [r4, #8]
 8003e5c:	e154      	b.n	8004108 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681c      	ldr	r4, [r3, #0]
 8003e62:	f7fe fdb9 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003e66:	4602      	mov	r2, r0
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009a      	lsls	r2, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	4a6b      	ldr	r2, [pc, #428]	; (800402c <UART_SetConfig+0x350>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	011d      	lsls	r5, r3, #4
 8003e86:	f7fe fda7 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009a      	lsls	r2, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ea0:	f7fe fd9a 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009a      	lsls	r2, r3, #2
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	4a5c      	ldr	r2, [pc, #368]	; (800402c <UART_SetConfig+0x350>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2264      	movs	r2, #100	; 0x64
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	1af3      	subs	r3, r6, r3
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a57      	ldr	r2, [pc, #348]	; (800402c <UART_SetConfig+0x350>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	441d      	add	r5, r3
 8003ede:	f7fe fd7b 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009a      	lsls	r2, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ef8:	f7fe fd6e 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009a      	lsls	r2, r3, #2
 8003f06:	441a      	add	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	4a46      	ldr	r2, [pc, #280]	; (800402c <UART_SetConfig+0x350>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	2264      	movs	r2, #100	; 0x64
 8003f1c:	fb02 f303 	mul.w	r3, r2, r3
 8003f20:	1af3      	subs	r3, r6, r3
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	3332      	adds	r3, #50	; 0x32
 8003f26:	4a41      	ldr	r2, [pc, #260]	; (800402c <UART_SetConfig+0x350>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	442b      	add	r3, r5
 8003f34:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f36:	e0e7      	b.n	8004108 <UART_SetConfig+0x42c>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a39      	ldr	r2, [pc, #228]	; (8004024 <UART_SetConfig+0x348>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <UART_SetConfig+0x270>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a38      	ldr	r2, [pc, #224]	; (8004028 <UART_SetConfig+0x34c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d171      	bne.n	8004030 <UART_SetConfig+0x354>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681c      	ldr	r4, [r3, #0]
 8003f50:	f7fe fd64 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009a      	lsls	r2, r3, #2
 8003f5e:	441a      	add	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	4a30      	ldr	r2, [pc, #192]	; (800402c <UART_SetConfig+0x350>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	011d      	lsls	r5, r3, #4
 8003f74:	f7fe fd52 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009a      	lsls	r2, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f8e:	f7fe fd45 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003f92:	4602      	mov	r2, r0
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009a      	lsls	r2, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	4a20      	ldr	r2, [pc, #128]	; (800402c <UART_SetConfig+0x350>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2264      	movs	r2, #100	; 0x64
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	1af3      	subs	r3, r6, r3
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	3332      	adds	r3, #50	; 0x32
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <UART_SetConfig+0x350>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc8:	441d      	add	r5, r3
 8003fca:	f7fe fd27 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009a      	lsls	r2, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fe4:	f7fe fd1a 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009a      	lsls	r2, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	4a0b      	ldr	r2, [pc, #44]	; (800402c <UART_SetConfig+0x350>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	2264      	movs	r2, #100	; 0x64
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	1af3      	subs	r3, r6, r3
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	3332      	adds	r3, #50	; 0x32
 8004012:	4a06      	ldr	r2, [pc, #24]	; (800402c <UART_SetConfig+0x350>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	442b      	add	r3, r5
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	e071      	b.n	8004108 <UART_SetConfig+0x42c>
 8004024:	40011000 	.word	0x40011000
 8004028:	40011400 	.word	0x40011400
 800402c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681c      	ldr	r4, [r3, #0]
 8004034:	f7fe fcd0 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8004038:	4602      	mov	r2, r0
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009a      	lsls	r2, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	4a30      	ldr	r2, [pc, #192]	; (8004110 <UART_SetConfig+0x434>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	011d      	lsls	r5, r3, #4
 8004058:	f7fe fcbe 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800405c:	4602      	mov	r2, r0
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009a      	lsls	r2, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004072:	f7fe fcb1 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8004076:	4602      	mov	r2, r0
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009a      	lsls	r2, r3, #2
 8004080:	441a      	add	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <UART_SetConfig+0x434>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2264      	movs	r2, #100	; 0x64
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	1af3      	subs	r3, r6, r3
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	3332      	adds	r3, #50	; 0x32
 80040a0:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <UART_SetConfig+0x434>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ac:	441d      	add	r5, r3
 80040ae:	f7fe fc93 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009a      	lsls	r2, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80040c8:	f7fe fc86 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009a      	lsls	r2, r3, #2
 80040d6:	441a      	add	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <UART_SetConfig+0x434>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	2264      	movs	r2, #100	; 0x64
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	1af3      	subs	r3, r6, r3
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	3332      	adds	r3, #50	; 0x32
 80040f6:	4a06      	ldr	r2, [pc, #24]	; (8004110 <UART_SetConfig+0x434>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	442b      	add	r3, r5
 8004104:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8004106:	e7ff      	b.n	8004108 <UART_SetConfig+0x42c>
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004110:	51eb851f 	.word	0x51eb851f

08004114 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004114:	b084      	sub	sp, #16
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	f107 0014 	add.w	r0, r7, #20
 8004122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	2b01      	cmp	r3, #1
 800412a:	d120      	bne.n	800416e <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8004154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f001 f9ca 	bl	8005500 <USB_CoreReset>
 800416c:	e00c      	b.n	8004188 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f001 f9c0 	bl	8005500 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10b      	bne.n	80041a6 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f043 0206 	orr.w	r2, r3, #6
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041b2:	b004      	add	sp, #16
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop

080041b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f043 0201 	orr.w	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop

080041dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 0201 	bic.w	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop

08004200 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d106      	bne.n	800422c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]
 800422a:	e008      	b.n	800423e <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 800423e:	2032      	movs	r0, #50	; 0x32
 8004240:	f7fc f81a 	bl	8000278 <HAL_Delay>
  
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop

08004250 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004250:	b084      	sub	sp, #16
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	f107 001c 	add.w	r0, r7, #28
 800425e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8004266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
 8004278:	e005      	b.n	8004286 <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800428c:	461a      	mov	r2, r3
 800428e:	2300      	movs	r3, #0
 8004290:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	461a      	mov	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d10c      	bne.n	80042c4 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80042b0:	2100      	movs	r1, #0
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f940 	bl	8004538 <USB_SetDevSpeed>
 80042b8:	e008      	b.n	80042cc <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80042ba:	2101      	movs	r1, #1
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f93b 	bl	8004538 <USB_SetDevSpeed>
 80042c2:	e003      	b.n	80042cc <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80042c4:	2103      	movs	r1, #3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f936 	bl	8004538 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80042cc:	2110      	movs	r1, #16
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f8ea 	bl	80044a8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f90d 	bl	80044f4 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e0:	461a      	mov	r2, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ec:	461a      	mov	r2, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f8:	461a      	mov	r2, r3
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295
 80042fe:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	461a      	mov	r2, r3
 8004308:	2300      	movs	r3, #0
 800430a:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e031      	b.n	8004376 <USB_DevInit+0x126>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	da0a      	bge.n	800433a <USB_DevInit+0xea>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e008      	b.n	800434c <USB_DevInit+0xfc>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	461a      	mov	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	461a      	mov	r2, r3
 800436c:	23ff      	movs	r3, #255	; 0xff
 800436e:	6093      	str	r3, [r2, #8]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	429a      	cmp	r2, r3
 800437c:	d8c9      	bhi.n	8004312 <USB_DevInit+0xc2>
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e031      	b.n	80043e8 <USB_DevInit+0x198>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da0a      	bge.n	80043ac <USB_DevInit+0x15c>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a2:	461a      	mov	r2, r3
 80043a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e008      	b.n	80043be <USB_DevInit+0x16e>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	461a      	mov	r2, r3
 80043ba:	2300      	movs	r3, #0
 80043bc:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2300      	movs	r3, #0
 80043ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	23ff      	movs	r3, #255	; 0xff
 80043e0:	6093      	str	r3, [r2, #8]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d8c9      	bhi.n	8004384 <USB_DevInit+0x134>
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004404:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	2b01      	cmp	r3, #1
 800440a:	d117      	bne.n	800443c <USB_DevInit+0x1ec>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004412:	461a      	mov	r2, r3
 8004414:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <USB_DevInit+0x250>)
 8004416:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	f043 0303 	orr.w	r3, r3, #3
 8004430:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004448:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <USB_DevInit+0x20c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f043 0210 	orr.w	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <USB_DevInit+0x254>)
 8004462:	4313      	orrs	r3, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <USB_DevInit+0x22a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800447a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800449c:	b004      	add	sp, #16
 800449e:	4770      	bx	lr
 80044a0:	00800100 	.word	0x00800100
 80044a4:	803c3800 	.word	0x803c3800

080044a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	019b      	lsls	r3, r3, #6
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3301      	adds	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <USB_FlushTxFifo+0x48>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e006      	b.n	80044e2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	00030d40 	.word	0x00030d40

080044f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2210      	movs	r2, #16
 8004504:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a09      	ldr	r2, [pc, #36]	; (8004534 <USB_FlushRxFifo+0x40>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e006      	b.n	8004526 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	00030d40 	.word	0x00030d40

08004538 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	4619      	mov	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0306 	and.w	r3, r3, #6
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e01c      	b.n	80045c4 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0306 	and.w	r3, r3, #6
 8004596:	2b02      	cmp	r3, #2
 8004598:	d007      	beq.n	80045aa <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0306 	and.w	r3, r3, #6
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d102      	bne.n	80045b0 <USB_GetDevSpeed+0x48>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 80045aa:	2303      	movs	r3, #3
 80045ac:	73fb      	strb	r3, [r7, #15]
 80045ae:	e009      	b.n	80045c4 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0306 	and.w	r3, r3, #6
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d101      	bne.n	80045c4 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 80045c0:	2302      	movs	r3, #2
 80045c2:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d13e      	bne.n	8004664 <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	4619      	mov	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	2301      	movs	r3, #1
 80045fe:	4083      	lsls	r3, r0
 8004600:	b29b      	uxth	r3, r3
 8004602:	4313      	orrs	r3, r2
 8004604:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d15c      	bne.n	80046d8 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	4618      	mov	r0, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	78c9      	ldrb	r1, [r1, #3]
 800464a:	0489      	lsls	r1, r1, #18
 800464c:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	7809      	ldrb	r1, [r1, #0]
 8004652:	0589      	lsls	r1, r1, #22
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8004654:	430b      	orrs	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004660:	6003      	str	r3, [r0, #0]
 8004662:	e039      	b.n	80046d8 <USB_ActivateEndpoint+0x104>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	4619      	mov	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	2301      	movs	r3, #1
 800467c:	4083      	lsls	r3, r0
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	4313      	orrs	r3, r2
 8004682:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11d      	bne.n	80046d8 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	4618      	mov	r0, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046c4:	6839      	ldr	r1, [r7, #0]
 80046c6:	78c9      	ldrb	r1, [r1, #3]
 80046c8:	0489      	lsls	r1, r1, #18
 80046ca:	430b      	orrs	r3, r1
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop

080046e8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d153      	bne.n	80047a6 <USB_DeactivateEndpoint+0xbe>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470c:	4619      	mov	r1, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004722:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004732:	461a      	mov	r2, r3
 8004734:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004738:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	461a      	mov	r2, r3
 800474a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800474e:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a42      	ldr	r2, [pc, #264]	; (8004864 <USB_DeactivateEndpoint+0x17c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e07c      	b.n	800485c <USB_DeactivateEndpoint+0x174>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ea      	bne.n	8004750 <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 800477a:	2110      	movs	r1, #16
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fe93 	bl	80044a8 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004788:	4619      	mov	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	2301      	movs	r3, #1
 800479a:	4083      	lsls	r3, r0
 800479c:	b29b      	uxth	r3, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	4013      	ands	r3, r2
 80047a2:	61cb      	str	r3, [r1, #28]
 80047a4:	e059      	b.n	800485a <USB_DeactivateEndpoint+0x172>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	4619      	mov	r1, r3
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047ca:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	461a      	mov	r2, r3
 80047dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047e0:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	461a      	mov	r2, r3
 80047f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047f6:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a18      	ldr	r2, [pc, #96]	; (8004864 <USB_DeactivateEndpoint+0x17c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <USB_DeactivateEndpoint+0x122>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e028      	b.n	800485c <USB_DeactivateEndpoint+0x174>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ea      	bne.n	80047f8 <USB_DeactivateEndpoint+0x110>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	461a      	mov	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004836:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	4619      	mov	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	2301      	movs	r3, #1
 8004850:	4083      	lsls	r3, r0
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	43db      	mvns	r3, r3
 8004856:	4013      	ands	r3, r2
 8004858:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	00030d40 	.word	0x00030d40

08004868 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af02      	add	r7, sp, #8
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	2b01      	cmp	r3, #1
 8004880:	f040 8146 	bne.w	8004b10 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d13b      	bne.n	8004904 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	4619      	mov	r1, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	4619      	mov	r1, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048da:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	4619      	mov	r1, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	0cdb      	lsrs	r3, r3, #19
 80048fe:	04db      	lsls	r3, r3, #19
 8004900:	610b      	str	r3, [r1, #16]
 8004902:	e086      	b.n	8004a12 <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	4619      	mov	r1, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	0cdb      	lsrs	r3, r3, #19
 8004926:	04db      	lsls	r3, r3, #19
 8004928:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	4619      	mov	r1, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800494e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004952:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	4618      	mov	r0, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6959      	ldr	r1, [r3, #20]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	440b      	add	r3, r1
 800497e:	1e59      	subs	r1, r3, #1
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	fbb1 f3f3 	udiv	r3, r1, r3
 8004988:	04d9      	lsls	r1, r3, #19
 800498a:	4b8c      	ldr	r3, [pc, #560]	; (8004bbc <USB_EPStartXfer+0x354>)
 800498c:	400b      	ands	r3, r1
 800498e:	4313      	orrs	r3, r2
 8004990:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	4619      	mov	r1, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ba:	4313      	orrs	r3, r2
 80049bc:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d125      	bne.n	8004a12 <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	4619      	mov	r1, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049ea:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	4619      	mov	r1, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a10:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10b      	bne.n	8004a30 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	6153      	str	r3, [r2, #20]
 8004a2e:	e016      	b.n	8004a5e <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	78db      	ldrb	r3, [r3, #3]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d012      	beq.n	8004a5e <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00e      	beq.n	8004a5e <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	4619      	mov	r1, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	2301      	movs	r3, #1
 8004a58:	4083      	lsls	r3, r0
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	78db      	ldrb	r3, [r3, #3]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d12e      	bne.n	8004ac4 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d113      	bne.n	8004a9e <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	4619      	mov	r1, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a9a:	600b      	str	r3, [r1, #0]
 8004a9c:	e012      	b.n	8004ac4 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	4619      	mov	r1, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ae8:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	78db      	ldrb	r3, [r3, #3]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	f040 80f5 	bne.w	8004cde <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	68d9      	ldr	r1, [r3, #12]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	b298      	uxth	r0, r3
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4603      	mov	r3, r0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fa4f 	bl	8004fac <USB_WritePacket>
 8004b0e:	e0e6      	b.n	8004cde <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	0cdb      	lsrs	r3, r3, #19
 8004b32:	04db      	lsls	r3, r3, #19
 8004b34:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	4619      	mov	r1, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b5e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d12b      	bne.n	8004bc0 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	4619      	mov	r1, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b90:	4313      	orrs	r3, r2
 8004b92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb8:	610b      	str	r3, [r1, #16]
 8004bba:	e03c      	b.n	8004c36 <USB_EPStartXfer+0x3ce>
 8004bbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	695a      	ldr	r2, [r3, #20]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	1e5a      	subs	r2, r3, #1
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be4:	4619      	mov	r1, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	8afb      	ldrh	r3, [r7, #22]
 8004bf8:	04db      	lsls	r3, r3, #19
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <USB_EPStartXfer+0x480>)
 8004bfe:	4003      	ands	r3, r0
 8004c00:	4313      	orrs	r3, r2
 8004c02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	4618      	mov	r0, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	8af9      	ldrh	r1, [r7, #22]
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c32:	4313      	orrs	r3, r2
 8004c34:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d10a      	bne.n	8004c52 <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	78db      	ldrb	r3, [r3, #3]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d12e      	bne.n	8004cb8 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d113      	bne.n	8004c92 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c78:	4619      	mov	r1, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c8e:	600b      	str	r3, [r1, #0]
 8004c90:	e012      	b.n	8004cb8 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cdc:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	1ff80000 	.word	0x1ff80000

08004cec <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	f040 80d2 	bne.w	8004ea8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d13b      	bne.n	8004d84 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d34:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	4619      	mov	r1, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	0cdb      	lsrs	r3, r3, #19
 8004d7e:	04db      	lsls	r3, r3, #19
 8004d80:	610b      	str	r3, [r1, #16]
 8004d82:	e05a      	b.n	8004e3a <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	4619      	mov	r1, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	0cdb      	lsrs	r3, r3, #19
 8004da6:	04db      	lsls	r3, r3, #19
 8004da8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	4619      	mov	r1, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dd2:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d903      	bls.n	8004de8 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df6:	4619      	mov	r1, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e0c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e36:	4313      	orrs	r3, r2
 8004e38:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	4619      	mov	r1, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e5e:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10b      	bne.n	8004e7e <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	461a      	mov	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	6153      	str	r3, [r2, #20]
 8004e7c:	e08e      	b.n	8004f9c <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 808a 	beq.w	8004f9c <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4083      	lsls	r3, r0
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	634b      	str	r3, [r1, #52]	; 0x34
 8004ea6:	e079      	b.n	8004f9c <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	0cdb      	lsrs	r3, r3, #19
 8004eca:	04db      	lsls	r3, r3, #19
 8004ecc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	4619      	mov	r1, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ef2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ef6:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	4619      	mov	r1, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	4313      	orrs	r3, r2
 8004f58:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d10a      	bne.n	8004f76 <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	4619      	mov	r1, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f9a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop

08004fac <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	461a      	mov	r2, r3
 8004fba:	460b      	mov	r3, r1
 8004fbc:	71fb      	strb	r3, [r7, #7]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8004fca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d11a      	bne.n	8005008 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8004fd2:	88bb      	ldrh	r3, [r7, #4]
 8004fd4:	3303      	adds	r3, #3
 8004fd6:	089b      	lsrs	r3, r3, #2
 8004fd8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e00f      	b.n	8005000 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	031a      	lsls	r2, r3, #12
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fec:	461a      	mov	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6013      	str	r3, [r2, #0]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	429a      	cmp	r2, r3
 8005006:	d3eb      	bcc.n	8004fe0 <USB_WritePacket+0x34>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop

08005018 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	4613      	mov	r3, r2
 8005024:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	3303      	adds	r3, #3
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e00b      	b.n	8005050 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	601a      	str	r2, [r3, #0]
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3301      	adds	r3, #1
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	3304      	adds	r3, #4
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	429a      	cmp	r2, r3
 8005056:	d3ef      	bcc.n	8005038 <USB_ReadPacket+0x20>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
    
  }
  return ((void *)dest);
 8005058:	68bb      	ldr	r3, [r7, #8]
}
 800505a:	4618      	mov	r0, r3
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d130      	bne.n	80050dc <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	db12      	blt.n	80050b4 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	4619      	mov	r1, r3
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050b2:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	4619      	mov	r1, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050d8:	600b      	str	r3, [r1, #0]
 80050da:	e02f      	b.n	800513c <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	db12      	blt.n	8005116 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	4619      	mov	r1, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005114:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	4619      	mov	r1, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800513a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop

0800514c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d12e      	bne.n	80051bc <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516c:	4619      	mov	r1, r3
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005182:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	78db      	ldrb	r3, [r3, #3]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d003      	beq.n	8005194 <USB_EPClearStall+0x48>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	78db      	ldrb	r3, [r3, #3]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d141      	bne.n	8005218 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	4619      	mov	r1, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	600b      	str	r3, [r1, #0]
 80051ba:	e02d      	b.n	8005218 <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	4619      	mov	r1, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051e0:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	78db      	ldrb	r3, [r3, #3]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d003      	beq.n	80051f2 <USB_EPClearStall+0xa6>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	78db      	ldrb	r3, [r3, #3]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d112      	bne.n	8005218 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	4619      	mov	r1, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005216:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop

08005228 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	461a      	mov	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005248:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005250:	4619      	mov	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f023 0302 	bic.w	r3, r3, #2
 8005290:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005292:	2003      	movs	r0, #3
 8005294:	f7fa fff0 	bl	8000278 <HAL_Delay>
  
  return HAL_OK;  
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop

080052a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80052c2:	2003      	movs	r0, #3
 80052c4:	f7fa ffd8 	bl	8000278 <HAL_Delay>
  
  return HAL_OK;  
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop

080052d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4013      	ands	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  return v;  
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop

08005300 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	0c1b      	lsrs	r3, r3, #16
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	b29b      	uxth	r3, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4013      	ands	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  return v;
 800538a:	68fb      	ldr	r3, [r7, #12]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4013      	ands	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  return v;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0301 	and.w	r3, r3, #1
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005424:	f023 0307 	bic.w	r3, r3, #7
 8005428:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0306 	and.w	r3, r3, #6
 8005436:	2b04      	cmp	r3, #4
 8005438:	d10a      	bne.n	8005450 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	461a      	mov	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f043 0303 	orr.w	r3, r3, #3
 800544e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005456:	461a      	mov	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	460b      	mov	r3, r1
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	461a      	mov	r2, r3
 800548a:	2300      	movs	r3, #0
 800548c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	461a      	mov	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054a2:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	461a      	mov	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f043 0318 	orr.w	r3, r3, #24
 80054b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	461a      	mov	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054ce:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 80054d0:	7afb      	ldrb	r3, [r7, #11]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d10c      	bne.n	80054f0 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	461a      	mov	r2, r3
 80054ea:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80054ee:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a13      	ldr	r2, [pc, #76]	; (8005564 <USB_CoreReset+0x64>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e01b      	b.n	8005556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	daf2      	bge.n	800550c <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <USB_CoreReset+0x64>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e006      	b.n	8005556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	00030d40 	.word	0x00030d40

08005568 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7c1b      	ldrb	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10e      	bne.n	800559e <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005584:	2202      	movs	r2, #2
 8005586:	2181      	movs	r1, #129	; 0x81
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f002 f8ff 	bl	800778c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800558e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005592:	2202      	movs	r2, #2
 8005594:	2101      	movs	r1, #1
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f002 f8f8 	bl	800778c <USBD_LL_OpenEP>
 800559c:	e00b      	b.n	80055b6 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800559e:	2340      	movs	r3, #64	; 0x40
 80055a0:	2202      	movs	r2, #2
 80055a2:	2181      	movs	r1, #129	; 0x81
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f002 f8f1 	bl	800778c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80055aa:	2340      	movs	r3, #64	; 0x40
 80055ac:	2202      	movs	r2, #2
 80055ae:	2101      	movs	r1, #1
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 f8eb 	bl	800778c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80055b6:	2308      	movs	r3, #8
 80055b8:	2203      	movs	r2, #3
 80055ba:	2182      	movs	r1, #130	; 0x82
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f002 f8e5 	bl	800778c <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80055c2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80055c6:	f002 fbab 	bl	8007d20 <malloc>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
 80055e2:	e026      	b.n	8005632 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055ea:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2200      	movs	r2, #0
 8005602:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	7c1b      	ldrb	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005618:	2101      	movs	r1, #1
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f002 fa32 	bl	8007a84 <USBD_LL_PrepareReceive>
 8005620:	e007      	b.n	8005632 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005628:	2340      	movs	r3, #64	; 0x40
 800562a:	2101      	movs	r1, #1
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f002 fa29 	bl	8007a84 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800564c:	2181      	movs	r1, #129	; 0x81
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f002 f8da 	bl	8007808 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005654:	2101      	movs	r1, #1
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f002 f8d6 	bl	8007808 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800565c:	2182      	movs	r1, #130	; 0x82
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f002 f8d2 	bl	8007808 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800567e:	4618      	mov	r0, r3
 8005680:	f002 fb56 	bl	8007d30 <free>
    pdev->pClassData = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop

08005698 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056a8:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d03a      	beq.n	800572c <USBD_CDC_Setup+0x94>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d000      	beq.n	80056bc <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 80056ba:	e043      	b.n	8005744 <USBD_CDC_Setup+0xac>
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	88db      	ldrh	r3, [r3, #6]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d029      	beq.n	8005718 <USBD_CDC_Setup+0x80>
    {
      if (req->bmRequest & 0x80)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b25b      	sxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da11      	bge.n	80056f2 <USBD_CDC_Setup+0x5a>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80056da:	68f9      	ldr	r1, [r7, #12]
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	88d2      	ldrh	r2, [r2, #6]
 80056e0:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 80056e2:	68f9      	ldr	r1, [r7, #12]
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	88db      	ldrh	r3, [r3, #6]
 80056e8:	461a      	mov	r2, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f001 f83e 	bl	800676c <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80056f0:	e029      	b.n	8005746 <USBD_CDC_Setup+0xae>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	785a      	ldrb	r2, [r3, #1]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	88db      	ldrh	r3, [r3, #6]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hcdc->data,
 8005708:	68f9      	ldr	r1, [r7, #12]
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
        
        USBD_CtlPrepareRx (pdev, 
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	88db      	ldrh	r3, [r3, #6]
 800570e:	461a      	mov	r2, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 f859 	bl	80067c8 <USBD_CtlPrepareRx>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8005716:	e016      	b.n	8005746 <USBD_CDC_Setup+0xae>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	7850      	ldrb	r0, [r2, #1]
 8005724:	2200      	movs	r2, #0
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	4798      	blx	r3
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 800572a:	e00c      	b.n	8005746 <USBD_CDC_Setup+0xae>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b0a      	cmp	r3, #10
 8005732:	d001      	beq.n	8005738 <USBD_CDC_Setup+0xa0>
 8005734:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 8005736:	e005      	b.n	8005744 <USBD_CDC_Setup+0xac>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8005738:	2201      	movs	r2, #1
 800573a:	4905      	ldr	r1, [pc, #20]	; (8005750 <USBD_CDC_Setup+0xb8>)
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 f815 	bl	800676c <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 8005742:	bf00      	nop
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8005744:	bf00      	nop
  }
  return USBD_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	2000068c 	.word	0x2000068c

08005754 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005766:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800577e:	2302      	movs	r3, #2
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800579e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f002 f9a7 	bl	8007af8 <USBD_LL_GetRxDataSize>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80057d0:	4611      	mov	r1, r2
 80057d2:	4798      	blx	r3

    return USBD_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop

080057e4 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80057f2:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d015      	beq.n	800582a <USBD_CDC_EP0_RxReady+0x46>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005804:	2bff      	cmp	r3, #255	; 0xff
 8005806:	d010      	beq.n	800582a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005816:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800581e:	b292      	uxth	r2, r2
 8005820:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2243      	movs	r2, #67	; 0x43
 8005840:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005842:	4b03      	ldr	r3, [pc, #12]	; (8005850 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000088 	.word	0x20000088

08005854 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2243      	movs	r2, #67	; 0x43
 8005860:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005862:	4b03      	ldr	r3, [pc, #12]	; (8005870 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000044 	.word	0x20000044

08005874 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2243      	movs	r2, #67	; 0x43
 8005880:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005882:	4b03      	ldr	r3, [pc, #12]	; (8005890 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	200000cc 	.word	0x200000cc

08005894 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	220a      	movs	r2, #10
 80058a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80058a2:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000000 	.word	0x20000000

080058b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80058be:	2302      	movs	r3, #2
 80058c0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop

080058e4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058f8:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005928:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800594e:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005956:	2b00      	cmp	r3, #0
 8005958:	d017      	beq.n	800598a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7c1b      	ldrb	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596c:	2101      	movs	r1, #1
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f002 f888 	bl	8007a84 <USBD_LL_PrepareReceive>
 8005974:	e007      	b.n	8005986 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800597c:	2340      	movs	r3, #64	; 0x40
 800597e:	2101      	movs	r1, #1
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f002 f87f 	bl	8007a84 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e000      	b.n	800598c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800598a:	2302      	movs	r3, #2
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	4613      	mov	r3, r2
 80059a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80059a8:	2302      	movs	r3, #2
 80059aa:	e01a      	b.n	80059e2 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	79fa      	ldrb	r2, [r7, #7]
 80059d8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 fe54 	bl	8007688 <USBD_LL_Init>
  
  return USBD_OK; 
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop

080059ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d006      	beq.n	8005a0e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e001      	b.n	8005a12 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8005a0e:	2302      	movs	r3, #2
 8005a10:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 fe7d 	bl	8007728 <USBD_LL_Start>
  
  return USBD_OK;  
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop

08005a50 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	4611      	mov	r1, r2
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop

08005a90 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	4798      	blx	r3
  return USBD_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop

08005ab8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fda2 	bl	8006614 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d00b      	beq.n	8005b0c <USBD_LL_SetupStage+0x54>
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d011      	beq.n	8005b1c <USBD_LL_SetupStage+0x64>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d117      	bne.n	8005b2c <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f9cf 	bl	8005ea8 <USBD_StdDevReq>
    break;
 8005b0a:	e01a      	b.n	8005b42 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa17 	bl	8005f48 <USBD_StdItfReq>
    break;
 8005b1a:	e012      	b.n	8005b42 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fa43 	bl	8005fb0 <USBD_StdEPReq>
    break;
 8005b2a:	e00a      	b.n	8005b42 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005b32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 fe9a 	bl	8007874 <USBD_LL_StallEP>
    break;
 8005b40:	bf00      	nop
  }  
  return USBD_OK;  
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	460b      	mov	r3, r1
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d138      	bne.n	8005bd2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005b66:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d142      	bne.n	8005bf8 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d914      	bls.n	8005ba8 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	1ad2      	subs	r2, r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4293      	cmp	r3, r2
 8005b96:	bf28      	it	cs
 8005b98:	4613      	movcs	r3, r2
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fe2f 	bl	8006804 <USBD_CtlContinueRx>
 8005ba6:	e027      	b.n	8005bf8 <USBD_LL_DataOutStage+0xac>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d105      	bne.n	8005bca <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fe2c 	bl	8006828 <USBD_CtlSendStatus>
 8005bd0:	e012      	b.n	8005bf8 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d107      	bne.n	8005bf8 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	7afa      	ldrb	r2, [r7, #11]
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	4798      	blx	r3
  }  
  return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop

08005c04 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d16c      	bne.n	8005cf2 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d157      	bne.n	8005cd8 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d915      	bls.n	8005c60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	1ad2      	subs	r2, r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	689b      	ldr	r3, [r3, #8]
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
        
        USBD_CtlContinueSendData (pdev, 
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fda9 	bl	80067a4 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005c52:	2300      	movs	r3, #0
 8005c54:	2200      	movs	r2, #0
 8005c56:	2100      	movs	r1, #0
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f001 ff13 	bl	8007a84 <USBD_LL_PrepareReceive>
 8005c5e:	e03b      	b.n	8005cd8 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	68d2      	ldr	r2, [r2, #12]
 8005c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c6c:	fb02 f201 	mul.w	r2, r2, r1
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d11c      	bne.n	8005cb0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	68db      	ldr	r3, [r3, #12]
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d316      	bcc.n	8005cb0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d20f      	bcs.n	8005cb0 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005c90:	2200      	movs	r2, #0
 8005c92:	2100      	movs	r1, #0
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fd85 	bl	80067a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f001 feeb 	bl	8007a84 <USBD_LL_PrepareReceive>
 8005cae:	e013      	b.n	8005cd8 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d105      	bne.n	8005cd2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fdbc 	bl	8006850 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d11a      	bne.n	8005d18 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fea8 	bl	8005a38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005cf0:	e012      	b.n	8005d18 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00c      	beq.n	8005d18 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d107      	bne.n	8005d18 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	7afa      	ldrb	r2, [r7, #11]
 8005d12:	4611      	mov	r1, r2
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	4798      	blx	r3
  }  
  return USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop

08005d24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005d2c:	2340      	movs	r3, #64	; 0x40
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2100      	movs	r1, #0
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fd2a 	bl	800778c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2240      	movs	r2, #64	; 0x40
 8005d3c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005d40:	2340      	movs	r3, #64	; 0x40
 8005d42:	2200      	movs	r2, #0
 8005d44:	2180      	movs	r1, #128	; 0x80
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 fd20 	bl	800778c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2240      	movs	r2, #64	; 0x40
 8005d50:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6852      	ldr	r2, [r2, #4]
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	4611      	mov	r1, r2
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
 
  
  return USBD_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop

08005d84 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	78fa      	ldrb	r2, [r7, #3]
 8005d94:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop

08005df4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d10b      	bne.n	8005e1e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop

08005e44 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop

08005e60 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop

08005e78 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6852      	ldr	r2, [r2, #4]
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	4611      	mov	r1, r2
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4798      	blx	r3
   
  return USBD_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop

08005ea8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	2b09      	cmp	r3, #9
 8005ebc:	d839      	bhi.n	8005f32 <USBD_StdDevReq+0x8a>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <USBD_StdDevReq+0x1c>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08005f29 	.word	0x08005f29
 8005ecc:	08005f33 	.word	0x08005f33
 8005ed0:	08005f1f 	.word	0x08005f1f
 8005ed4:	08005f33 	.word	0x08005f33
 8005ed8:	08005ef7 	.word	0x08005ef7
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005f33 	.word	0x08005f33
 8005ee4:	08005f0b 	.word	0x08005f0b
 8005ee8:	08005f01 	.word	0x08005f01
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f936 	bl	8006160 <USBD_GetDescriptor>
    break;
 8005ef4:	e022      	b.n	8005f3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa25 	bl	8006348 <USBD_SetAddress>
    break;
 8005efe:	e01d      	b.n	8005f3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa5e 	bl	80063c4 <USBD_SetConfig>
    break;
 8005f08:	e018      	b.n	8005f3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fae1 	bl	80064d4 <USBD_GetConfig>
    break;
 8005f12:	e013      	b.n	8005f3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fb0e 	bl	8006538 <USBD_GetStatus>
    break;
 8005f1c:	e00e      	b.n	8005f3c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fb33 	bl	800658c <USBD_SetFeature>
    break;
 8005f26:	e009      	b.n	8005f3c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fb4a 	bl	80065c4 <USBD_ClrFeature>
    break;
 8005f30:	e004      	b.n	8005f3c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fbab 	bl	8006690 <USBD_CtlError>
    break;
 8005f3a:	bf00      	nop
  }
  
  return ret;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop

08005f48 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d11b      	bne.n	8005f98 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	889b      	ldrh	r3, [r3, #4]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d811      	bhi.n	8005f8e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	88db      	ldrh	r3, [r3, #6]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d110      	bne.n	8005fa2 <USBD_StdItfReq+0x5a>
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10d      	bne.n	8005fa2 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fc4e 	bl	8006828 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005f8c:	e009      	b.n	8005fa2 <USBD_StdItfReq+0x5a>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fb7d 	bl	8006690 <USBD_CtlError>
    }
    break;
 8005f96:	e004      	b.n	8005fa2 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fb78 	bl	8006690 <USBD_CtlError>
    break;
 8005fa0:	e000      	b.n	8005fa4 <USBD_StdItfReq+0x5c>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005fa2:	bf00      	nop
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop

08005fb0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	889b      	ldrh	r3, [r3, #4]
 8005fc2:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d108      	bne.n	8005fe2 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
    
    return USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e0ba      	b.n	8006158 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d039      	beq.n	800605e <USBD_StdEPReq+0xae>
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d002      	beq.n	8005ff4 <USBD_StdEPReq+0x44>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d06b      	beq.n	80060ca <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8005ff2:	e0b0      	b.n	8006156 <USBD_StdEPReq+0x1a6>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d002      	beq.n	8006004 <USBD_StdEPReq+0x54>
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d00c      	beq.n	800601c <USBD_StdEPReq+0x6c>
 8006002:	e025      	b.n	8006050 <USBD_StdEPReq+0xa0>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006004:	7bbb      	ldrb	r3, [r7, #14]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d027      	beq.n	800605a <USBD_StdEPReq+0xaa>
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	2b80      	cmp	r3, #128	; 0x80
 800600e:	d024      	beq.n	800605a <USBD_StdEPReq+0xaa>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fc2d 	bl	8007874 <USBD_LL_StallEP>
      }
      break;	
 800601a:	e01e      	b.n	800605a <USBD_StdEPReq+0xaa>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	885b      	ldrh	r3, [r3, #2]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <USBD_StdEPReq+0x8a>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <USBD_StdEPReq+0x8a>
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b80      	cmp	r3, #128	; 0x80
 800602e:	d004      	beq.n	800603a <USBD_StdEPReq+0x8a>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 fc1d 	bl	8007874 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fbed 	bl	8006828 <USBD_CtlSendStatus>
      
      break;
 800604e:	e005      	b.n	800605c <USBD_StdEPReq+0xac>
      
    default:                         
      USBD_CtlError(pdev , req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fb1c 	bl	8006690 <USBD_CtlError>
      break;    
 8006058:	e000      	b.n	800605c <USBD_StdEPReq+0xac>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 800605a:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 800605c:	e07b      	b.n	8006156 <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006064:	2b02      	cmp	r3, #2
 8006066:	d002      	beq.n	800606e <USBD_StdEPReq+0xbe>
 8006068:	2b03      	cmp	r3, #3
 800606a:	d00c      	beq.n	8006086 <USBD_StdEPReq+0xd6>
 800606c:	e024      	b.n	80060b8 <USBD_StdEPReq+0x108>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d026      	beq.n	80060c2 <USBD_StdEPReq+0x112>
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	2b80      	cmp	r3, #128	; 0x80
 8006078:	d023      	beq.n	80060c2 <USBD_StdEPReq+0x112>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 fbf8 	bl	8007874 <USBD_LL_StallEP>
      }
      break;	
 8006084:	e01d      	b.n	80060c2 <USBD_StdEPReq+0x112>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	885b      	ldrh	r3, [r3, #2]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d11b      	bne.n	80060c6 <USBD_StdEPReq+0x116>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 800608e:	7bbb      	ldrb	r3, [r7, #14]
 8006090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <USBD_StdEPReq+0x100>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fc1f 	bl	80078e0 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fbb9 	bl	8006828 <USBD_CtlSendStatus>
      }
      break;
 80060b6:	e006      	b.n	80060c6 <USBD_StdEPReq+0x116>
      
    default:                         
      USBD_CtlError(pdev , req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fae8 	bl	8006690 <USBD_CtlError>
      break;    
 80060c0:	e002      	b.n	80060c8 <USBD_StdEPReq+0x118>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 80060c2:	bf00      	nop
 80060c4:	e047      	b.n	8006156 <USBD_StdEPReq+0x1a6>
          USBD_LL_ClearStallEP(pdev , ep_addr);
          pdev->pClass->Setup (pdev, req);
        }
        USBD_CtlSendStatus(pdev);
      }
      break;
 80060c6:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 80060c8:	e045      	b.n	8006156 <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d002      	beq.n	80060da <USBD_StdEPReq+0x12a>
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d00b      	beq.n	80060f0 <USBD_StdEPReq+0x140>
 80060d8:	e036      	b.n	8006148 <USBD_StdEPReq+0x198>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d036      	beq.n	8006152 <USBD_StdEPReq+0x1a2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 fbc3 	bl	8007874 <USBD_LL_StallEP>
      }
      break;	
 80060ee:	e030      	b.n	8006152 <USBD_StdEPReq+0x1a2>
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80060f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da08      	bge.n	800610a <USBD_StdEPReq+0x15a>
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fe:	3301      	adds	r3, #1
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	3304      	adds	r3, #4
 8006108:	e007      	b.n	800611a <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800610a:	7bbb      	ldrb	r3, [r7, #14]
 800610c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006110:	3310      	adds	r3, #16
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	3304      	adds	r3, #4
 800611a:	60bb      	str	r3, [r7, #8]
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 fc13 	bl	800794c <USBD_LL_IsStallEP>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <USBD_StdEPReq+0x184>
      {
        pep->status = 0x0001;     
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e002      	b.n	800613a <USBD_StdEPReq+0x18a>
      }
      else
      {
        pep->status = 0x0000;  
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
      }
      
      USBD_CtlSendData (pdev,
                        (uint8_t *)&pep->status,
 800613a:	68bb      	ldr	r3, [r7, #8]
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
 800613c:	2202      	movs	r2, #2
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fb13 	bl	800676c <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8006146:	e005      	b.n	8006154 <USBD_StdEPReq+0x1a4>
      
    default:                         
      USBD_CtlError(pdev , req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 faa0 	bl	8006690 <USBD_CtlError>
      break;
 8006150:	e000      	b.n	8006154 <USBD_StdEPReq+0x1a4>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 8006152:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;
    }
    break;
 8006154:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	885b      	ldrh	r3, [r3, #2]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	2b06      	cmp	r3, #6
 8006176:	f200 80c9 	bhi.w	800630c <USBD_GetDescriptor+0x1ac>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <USBD_GetDescriptor+0x20>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	0800619d 	.word	0x0800619d
 8006184:	080061b5 	.word	0x080061b5
 8006188:	080061f5 	.word	0x080061f5
 800618c:	0800630d 	.word	0x0800630d
 8006190:	0800630d 	.word	0x0800630d
 8006194:	080062b9 	.word	0x080062b9
 8006198:	080062df 	.word	0x080062df
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	7c12      	ldrb	r2, [r2, #16]
 80061a8:	f107 010a 	add.w	r1, r7, #10
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
 80061b0:	60f8      	str	r0, [r7, #12]
    break;
 80061b2:	e0b0      	b.n	8006316 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7c1b      	ldrb	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10d      	bne.n	80061d8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	f107 020a 	add.w	r2, r7, #10
 80061c8:	4610      	mov	r0, r2
 80061ca:	4798      	blx	r3
 80061cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	2202      	movs	r2, #2
 80061d4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80061d6:	e09e      	b.n	8006316 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f107 020a 	add.w	r2, r7, #10
 80061e4:	4610      	mov	r0, r2
 80061e6:	4798      	blx	r3
 80061e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3301      	adds	r3, #1
 80061ee:	2202      	movs	r2, #2
 80061f0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80061f2:	e090      	b.n	8006316 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b05      	cmp	r3, #5
 80061fc:	d856      	bhi.n	80062ac <USBD_GetDescriptor+0x14c>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <USBD_GetDescriptor+0xa4>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	0800621d 	.word	0x0800621d
 8006208:	08006235 	.word	0x08006235
 800620c:	0800624d 	.word	0x0800624d
 8006210:	08006265 	.word	0x08006265
 8006214:	0800627d 	.word	0x0800627d
 8006218:	08006295 	.word	0x08006295
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	7c12      	ldrb	r2, [r2, #16]
 8006228:	f107 010a 	add.w	r1, r7, #10
 800622c:	4610      	mov	r0, r2
 800622e:	4798      	blx	r3
 8006230:	60f8      	str	r0, [r7, #12]
      break;
 8006232:	e040      	b.n	80062b6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c12      	ldrb	r2, [r2, #16]
 8006240:	f107 010a 	add.w	r1, r7, #10
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	60f8      	str	r0, [r7, #12]
      break;
 800624a:	e034      	b.n	80062b6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	7c12      	ldrb	r2, [r2, #16]
 8006258:	f107 010a 	add.w	r1, r7, #10
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
 8006260:	60f8      	str	r0, [r7, #12]
      break;
 8006262:	e028      	b.n	80062b6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	7c12      	ldrb	r2, [r2, #16]
 8006270:	f107 010a 	add.w	r1, r7, #10
 8006274:	4610      	mov	r0, r2
 8006276:	4798      	blx	r3
 8006278:	60f8      	str	r0, [r7, #12]
      break;
 800627a:	e01c      	b.n	80062b6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	7c12      	ldrb	r2, [r2, #16]
 8006288:	f107 010a 	add.w	r1, r7, #10
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	60f8      	str	r0, [r7, #12]
      break;
 8006292:	e010      	b.n	80062b6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	7c12      	ldrb	r2, [r2, #16]
 80062a0:	f107 010a 	add.w	r1, r7, #10
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
      break;
 80062aa:	e004      	b.n	80062b6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f9ee 	bl	8006690 <USBD_CtlError>
      return;
 80062b4:	e044      	b.n	8006340 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80062b6:	e02e      	b.n	8006316 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7c1b      	ldrb	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	f107 020a 	add.w	r2, r7, #10
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
 80062d0:	60f8      	str	r0, [r7, #12]
      break;
 80062d2:	e020      	b.n	8006316 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f9da 	bl	8006690 <USBD_CtlError>
      return;
 80062dc:	e030      	b.n	8006340 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	7c1b      	ldrb	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10d      	bne.n	8006302 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	f107 020a 	add.w	r2, r7, #10
 80062f2:	4610      	mov	r0, r2
 80062f4:	4798      	blx	r3
 80062f6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3301      	adds	r3, #1
 80062fc:	2207      	movs	r2, #7
 80062fe:	701a      	strb	r2, [r3, #0]
      break; 
 8006300:	e009      	b.n	8006316 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f9c3 	bl	8006690 <USBD_CtlError>
      return;
 800630a:	e019      	b.n	8006340 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f9be 	bl	8006690 <USBD_CtlError>
    return;
 8006314:	e014      	b.n	8006340 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8006316:	897b      	ldrh	r3, [r7, #10]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d011      	beq.n	8006340 <USBD_GetDescriptor+0x1e0>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	88db      	ldrh	r3, [r3, #6]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	88da      	ldrh	r2, [r3, #6]
 8006328:	897b      	ldrh	r3, [r7, #10]
 800632a:	4293      	cmp	r3, r2
 800632c:	bf28      	it	cs
 800632e:	4613      	movcs	r3, r2
 8006330:	b29b      	uxth	r3, r3
 8006332:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8006334:	897b      	ldrh	r3, [r7, #10]
 8006336:	461a      	mov	r2, r3
 8006338:	68f9      	ldr	r1, [r7, #12]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa16 	bl	800676c <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop

08006348 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	889b      	ldrh	r3, [r3, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d12c      	bne.n	80063b4 <USBD_SetAddress+0x6c>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	88db      	ldrh	r3, [r3, #6]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d128      	bne.n	80063b4 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	885b      	ldrh	r3, [r3, #2]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006374:	2b03      	cmp	r3, #3
 8006376:	d104      	bne.n	8006382 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f988 	bl	8006690 <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006380:	e01c      	b.n	80063bc <USBD_SetAddress+0x74>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7bfa      	ldrb	r2, [r7, #15]
 8006386:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 fb08 	bl	80079a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fa47 	bl	8006828 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d004      	beq.n	80063aa <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80063a8:	e008      	b.n	80063bc <USBD_SetAddress+0x74>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80063b2:	e003      	b.n	80063bc <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f96a 	bl	8006690 <USBD_CtlError>
  } 
}
 80063bc:	bf00      	nop
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	885b      	ldrh	r3, [r3, #2]
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <USBD_SetConfig+0x10c>)
 80063d6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80063d8:	4b3d      	ldr	r3, [pc, #244]	; (80064d0 <USBD_SetConfig+0x10c>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d904      	bls.n	80063ea <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f954 	bl	8006690 <USBD_CtlError>
 80063e8:	e06f      	b.n	80064ca <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d002      	beq.n	80063fa <USBD_SetConfig+0x36>
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d023      	beq.n	8006440 <USBD_SetConfig+0x7c>
 80063f8:	e062      	b.n	80064c0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80063fa:	4b35      	ldr	r3, [pc, #212]	; (80064d0 <USBD_SetConfig+0x10c>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01a      	beq.n	8006438 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8006402:	4b33      	ldr	r3, [pc, #204]	; (80064d0 <USBD_SetConfig+0x10c>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2203      	movs	r2, #3
 8006410:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006414:	4b2e      	ldr	r3, [pc, #184]	; (80064d0 <USBD_SetConfig+0x10c>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fb18 	bl	8005a50 <USBD_SetClassConfig>
 8006420:	4603      	mov	r3, r0
 8006422:	2b02      	cmp	r3, #2
 8006424:	d104      	bne.n	8006430 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f931 	bl	8006690 <USBD_CtlError>
          return;
 800642e:	e04c      	b.n	80064ca <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f9f9 	bl	8006828 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8006436:	e048      	b.n	80064ca <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f9f5 	bl	8006828 <USBD_CtlSendStatus>
      }
      break;
 800643e:	e044      	b.n	80064ca <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006440:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <USBD_SetConfig+0x10c>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d112      	bne.n	800646e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8006450:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <USBD_SetConfig+0x10c>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800645a:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <USBD_SetConfig+0x10c>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff fb15 	bl	8005a90 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f9de 	bl	8006828 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800646c:	e02d      	b.n	80064ca <USBD_SetConfig+0x106>
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 800646e:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <USBD_SetConfig+0x10c>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d01d      	beq.n	80064b8 <USBD_SetConfig+0xf4>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff fb03 	bl	8005a90 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 800648a:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <USBD_SetConfig+0x10c>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006494:	4b0e      	ldr	r3, [pc, #56]	; (80064d0 <USBD_SetConfig+0x10c>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fad8 	bl	8005a50 <USBD_SetClassConfig>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d104      	bne.n	80064b0 <USBD_SetConfig+0xec>
        {
          USBD_CtlError(pdev , req);  
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f8f1 	bl	8006690 <USBD_CtlError>
          return;
 80064ae:	e00c      	b.n	80064ca <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f9b9 	bl	8006828 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80064b6:	e008      	b.n	80064ca <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9b5 	bl	8006828 <USBD_CtlSendStatus>
      }
      break;
 80064be:	e004      	b.n	80064ca <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f8e4 	bl	8006690 <USBD_CtlError>
      break;
 80064c8:	bf00      	nop
    }
  }
}
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	2000068d 	.word	0x2000068d

080064d4 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	88db      	ldrh	r3, [r3, #6]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d004      	beq.n	80064f0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f8d1 	bl	8006690 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80064ee:	e01f      	b.n	8006530 <USBD_GetConfig+0x5c>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d002      	beq.n	8006500 <USBD_GetConfig+0x2c>
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d00b      	beq.n	8006516 <USBD_GetConfig+0x42>
 80064fe:	e012      	b.n	8006526 <USBD_GetConfig+0x52>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_default_config,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3308      	adds	r3, #8
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
      USBD_CtlSendData (pdev, 
 800650a:	2201      	movs	r2, #1
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f92c 	bl	800676c <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 8006514:	e00c      	b.n	8006530 <USBD_GetConfig+0x5c>
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_config,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3304      	adds	r3, #4
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 800651a:	2201      	movs	r2, #1
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f924 	bl	800676c <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 8006524:	e004      	b.n	8006530 <USBD_GetConfig+0x5c>
      
    default:
       USBD_CtlError(pdev , req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f8b1 	bl	8006690 <USBD_CtlError>
      break;
 800652e:	bf00      	nop
    }
  }
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006548:	3b02      	subs	r3, #2
 800654a:	2b01      	cmp	r3, #1
 800654c:	d815      	bhi.n	800657a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f043 0202 	orr.w	r2, r3, #2
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	330c      	adds	r3, #12
    if (pdev->dev_remote_wakeup) 
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
    }
    
    USBD_CtlSendData (pdev, 
 800656e:	2202      	movs	r2, #2
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f8fa 	bl	800676c <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 8006578:	e004      	b.n	8006584 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f887 	bl	8006690 <USBD_CtlError>
    break;
 8006582:	bf00      	nop
  }
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	885b      	ldrh	r3, [r3, #2]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d10d      	bne.n	80065ba <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f937 	bl	8006828 <USBD_CtlSendStatus>
  }

}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop

080065c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80065d4:	3b02      	subs	r3, #2
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d812      	bhi.n	8006600 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	885b      	ldrh	r3, [r3, #2]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d113      	bne.n	800660a <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f915 	bl	8006828 <USBD_CtlSendStatus>
    }
    break;
 80065fe:	e004      	b.n	800660a <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f844 	bl	8006690 <USBD_CtlError>
    break;
 8006608:	e000      	b.n	800660c <USBD_ClrFeature+0x48>
    {
      pdev->dev_remote_wakeup = 0; 
      pdev->pClass->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 800660a:	bf00      	nop
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781a      	ldrb	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	785a      	ldrb	r2, [r3, #1]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	3302      	adds	r3, #2
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	b29a      	uxth	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	3303      	adds	r3, #3
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	b29b      	uxth	r3, r3
 8006642:	4413      	add	r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	3304      	adds	r3, #4
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b29a      	uxth	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	3305      	adds	r3, #5
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	b29b      	uxth	r3, r3
 800665e:	4413      	add	r3, r2
 8006660:	b29a      	uxth	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	3306      	adds	r3, #6
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b29a      	uxth	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	3307      	adds	r3, #7
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	b29b      	uxth	r3, r3
 800667a:	4413      	add	r3, r2
 800667c:	b29a      	uxth	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	80da      	strh	r2, [r3, #6]

}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800669a:	2180      	movs	r1, #128	; 0x80
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f8e9 	bl	8007874 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f8e5 	bl	8007874 <USBD_LL_StallEP>
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop

080066b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80066c0:	2300      	movs	r3, #0
 80066c2:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d033      	beq.n	8006732 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f836 	bl	800673c <USBD_GetLen>
 80066d0:	4603      	mov	r3, r0
 80066d2:	3301      	adds	r3, #1
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	75fa      	strb	r2, [r7, #23]
 80066e4:	461a      	mov	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4413      	add	r3, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	8812      	ldrh	r2, [r2, #0]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	75fa      	strb	r2, [r7, #23]
 80066f8:	461a      	mov	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4413      	add	r3, r2
 80066fe:	2203      	movs	r2, #3
 8006700:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8006702:	e012      	b.n	800672a <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	75fa      	strb	r2, [r7, #23]
 800670a:	461a      	mov	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	60f9      	str	r1, [r7, #12]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	75fa      	strb	r2, [r7, #23]
 8006720:	461a      	mov	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4413      	add	r3, r2
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e8      	bne.n	8006704 <USBD_GetString+0x50>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8006732:	bf00      	nop
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop

0800673c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006748:	e005      	b.n	8006756 <USBD_GetLen+0x1a>
    {
        len++;
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	3301      	adds	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3301      	adds	r3, #1
 8006754:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f5      	bne.n	800674a <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2202      	movs	r2, #2
 800677e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	2100      	movs	r1, #0
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f001 f93b 	bl	8007a10 <USBD_LL_Transmit>
  
  return USBD_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	2100      	movs	r1, #0
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 f929 	bl	8007a10 <USBD_LL_Transmit>
  
  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2203      	movs	r2, #3
 80067da:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	2100      	movs	r1, #0
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f001 f945 	bl	8007a84 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	2100      	movs	r1, #0
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f001 f933 	bl	8007a84 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2204      	movs	r2, #4
 8006834:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006838:	2300      	movs	r3, #0
 800683a:	2200      	movs	r2, #0
 800683c:	2100      	movs	r1, #0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 f8e6 	bl	8007a10 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2205      	movs	r2, #5
 800685c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8006860:	2300      	movs	r3, #0
 8006862:	2200      	movs	r2, #0
 8006864:	2100      	movs	r1, #0
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 f90c 	bl	8007a84 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop

08006878 <HAL_GPIO_EXTI_Callback>:
 * Motion Interrupt enabled, other disabled
 */
uint8_t g_MPU6050_InterruptEnableSettings[1] = { 0b01000000 };

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Accelerometer_Interrupt_Pin)
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d109      	bne.n	800689c <HAL_GPIO_EXTI_Callback+0x24>
	{
		g_MotionFlag = !g_MotionFlag;
 8006888:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <HAL_GPIO_EXTI_Callback+0x30>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf0c      	ite	eq
 8006890:	2301      	moveq	r3, #1
 8006892:	2300      	movne	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	461a      	mov	r2, r3
 8006898:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <HAL_GPIO_EXTI_Callback+0x30>)
 800689a:	701a      	strb	r2, [r3, #0]
	}
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	200006d2 	.word	0x200006d2

080068ac <AccelerometerManagePower>:

HAL_StatusTypeDef AccelerometerManagePower()
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef TransmissionStatus;
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 80068b2:	2364      	movs	r3, #100	; 0x64
 80068b4:	9302      	str	r3, [sp, #8]
 80068b6:	2301      	movs	r3, #1
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <AccelerometerManagePower+0x54>)
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	2301      	movs	r3, #1
 80068c0:	226b      	movs	r2, #107	; 0x6b
 80068c2:	2168      	movs	r1, #104	; 0x68
 80068c4:	480f      	ldr	r0, [pc, #60]	; (8006904 <AccelerometerManagePower+0x58>)
 80068c6:	f7fa f8df 	bl	8000a88 <HAL_I2C_Mem_Write>
 80068ca:	4603      	mov	r3, r0
 80068cc:	71fb      	strb	r3, [r7, #7]
			MPU6050_PWR_MGMT1, 1, g_MPU6050_PowerManagement1Settings, 1, ACC_I2C_TIMEOUT);
	if (TransmissionStatus != HAL_OK)
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <AccelerometerManagePower+0x2c>
		return TransmissionStatus;
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	e00e      	b.n	80068f6 <AccelerometerManagePower+0x4a>
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 80068d8:	2364      	movs	r3, #100	; 0x64
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	2301      	movs	r3, #1
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <AccelerometerManagePower+0x5c>)
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2301      	movs	r3, #1
 80068e6:	226c      	movs	r2, #108	; 0x6c
 80068e8:	2168      	movs	r1, #104	; 0x68
 80068ea:	4806      	ldr	r0, [pc, #24]	; (8006904 <AccelerometerManagePower+0x58>)
 80068ec:	f7fa f8cc 	bl	8000a88 <HAL_I2C_Mem_Write>
 80068f0:	4603      	mov	r3, r0
 80068f2:	71fb      	strb	r3, [r7, #7]
			MPU6050_PWR_MGMT2, 1, g_MPU6050_PowerManagement2Settings, 1, ACC_I2C_TIMEOUT);
	return TransmissionStatus;
 80068f4:	79fb      	ldrb	r3, [r7, #7]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000110 	.word	0x20000110
 8006904:	2000071c 	.word	0x2000071c
 8006908:	20000114 	.word	0x20000114

0800690c <AccelerometerConfigure>:

HAL_StatusTypeDef AccelerometerConfigure()
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef TransmissionStatus;
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8006912:	2364      	movs	r3, #100	; 0x64
 8006914:	9302      	str	r3, [sp, #8]
 8006916:	2301      	movs	r3, #1
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <AccelerometerConfigure+0x2c>)
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	2301      	movs	r3, #1
 8006920:	221c      	movs	r2, #28
 8006922:	2168      	movs	r1, #104	; 0x68
 8006924:	4805      	ldr	r0, [pc, #20]	; (800693c <AccelerometerConfigure+0x30>)
 8006926:	f7fa f8af 	bl	8000a88 <HAL_I2C_Mem_Write>
 800692a:	4603      	mov	r3, r0
 800692c:	71fb      	strb	r3, [r7, #7]
			MPU6050_ACC_CONFIG, 1, g_MPU6050_AccelerometerSettings, 1, ACC_I2C_TIMEOUT);
	return TransmissionStatus;
 800692e:	79fb      	ldrb	r3, [r7, #7]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000118 	.word	0x20000118
 800693c:	2000071c 	.word	0x2000071c

08006940 <AccelerometerMotionIntConfigure>:

HAL_StatusTypeDef AccelerometerMotionIntConfigure()
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef TransmissionStatus;
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 8006946:	2364      	movs	r3, #100	; 0x64
 8006948:	9302      	str	r3, [sp, #8]
 800694a:	2301      	movs	r3, #1
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	4b11      	ldr	r3, [pc, #68]	; (8006994 <AccelerometerMotionIntConfigure+0x54>)
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2301      	movs	r3, #1
 8006954:	2237      	movs	r2, #55	; 0x37
 8006956:	2168      	movs	r1, #104	; 0x68
 8006958:	480f      	ldr	r0, [pc, #60]	; (8006998 <AccelerometerMotionIntConfigure+0x58>)
 800695a:	f7fa f895 	bl	8000a88 <HAL_I2C_Mem_Write>
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
			MPU6050_INT_PIN_CFG,1,g_MPU6050_InterruptSettings,1, ACC_I2C_TIMEOUT);
	if (TransmissionStatus != HAL_OK)
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <AccelerometerMotionIntConfigure+0x2c>
			return TransmissionStatus;
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	e00e      	b.n	800698a <AccelerometerMotionIntConfigure+0x4a>
	TransmissionStatus = HAL_I2C_Mem_Write(&ACC_I2C_HANDLE,	MPU6050_DEVICE_ADDRESS,
 800696c:	2364      	movs	r3, #100	; 0x64
 800696e:	9302      	str	r3, [sp, #8]
 8006970:	2301      	movs	r3, #1
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	4b09      	ldr	r3, [pc, #36]	; (800699c <AccelerometerMotionIntConfigure+0x5c>)
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	2301      	movs	r3, #1
 800697a:	2238      	movs	r2, #56	; 0x38
 800697c:	2168      	movs	r1, #104	; 0x68
 800697e:	4806      	ldr	r0, [pc, #24]	; (8006998 <AccelerometerMotionIntConfigure+0x58>)
 8006980:	f7fa f882 	bl	8000a88 <HAL_I2C_Mem_Write>
 8006984:	4603      	mov	r3, r0
 8006986:	71fb      	strb	r3, [r7, #7]
				MPU6050_INT_ENABLE,1,g_MPU6050_InterruptEnableSettings,1, ACC_I2C_TIMEOUT);
	return TransmissionStatus;
 8006988:	79fb      	ldrb	r3, [r7, #7]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	2000011c 	.word	0x2000011c
 8006998:	2000071c 	.word	0x2000071c
 800699c:	20000120 	.word	0x20000120

080069a0 <AccelerometerInit>:
		g_AxisMeasurements[2] = ((RawAccelerometerData[4] << 8) | RawAccelerometerData[5]);
		return TransmissionStatus;
}

HAL_StatusTypeDef AccelerometerInit()
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef InitStatus;
	g_MotionFlag=0;
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <AccelerometerInit+0x44>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]
	InitStatus=AccelerometerManagePower();
 80069ac:	f7ff ff7e 	bl	80068ac <AccelerometerManagePower>
 80069b0:	4603      	mov	r3, r0
 80069b2:	71fb      	strb	r3, [r7, #7]
	if(InitStatus!= HAL_OK)
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <AccelerometerInit+0x1e>
		return InitStatus;
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	e00d      	b.n	80069da <AccelerometerInit+0x3a>
	InitStatus=AccelerometerConfigure();
 80069be:	f7ff ffa5 	bl	800690c <AccelerometerConfigure>
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]
	if(InitStatus!= HAL_OK)
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <AccelerometerInit+0x30>
			return InitStatus;
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	e004      	b.n	80069da <AccelerometerInit+0x3a>
	InitStatus=AccelerometerMotionIntConfigure();
 80069d0:	f7ff ffb6 	bl	8006940 <AccelerometerMotionIntConfigure>
 80069d4:	4603      	mov	r3, r0
 80069d6:	71fb      	strb	r3, [r7, #7]
	return InitStatus;
 80069d8:	79fb      	ldrb	r3, [r7, #7]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	200006d2 	.word	0x200006d2

080069e8 <HAL_TIM_PeriodElapsedCallback>:
unsigned char g_GSM_ReceivedData[20];
volatile uint8_t g_GSM_ATReadyFlag=0;
volatile uint8_t g_GSM_BaudrateSetFlag=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a06      	ldr	r2, [pc, #24]	; (8006a0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
 80069f8:	2204      	movs	r2, #4
 80069fa:	4905      	ldr	r1, [pc, #20]	; (8006a10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80069fc:	4805      	ldr	r0, [pc, #20]	; (8006a14 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80069fe:	f7fc feb9 	bl	8003774 <HAL_UART_Transmit_IT>
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000790 	.word	0x20000790
 8006a10:	08008454 	.word	0x08008454
 8006a14:	200007cc 	.word	0x200007cc

08006a18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	if(huart==&GSM_huart)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a0b      	ldr	r2, [pc, #44]	; (8006a50 <HAL_UART_RxCpltCallback+0x38>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10e      	bne.n	8006a46 <HAL_UART_RxCpltCallback+0x2e>
	{
		if(!g_GSM_ATReadyFlag)
 8006a28:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <HAL_UART_RxCpltCallback+0x3c>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <HAL_UART_RxCpltCallback+0x20>
			GSM_VerifyATReady();
 8006a32:	f000 f82f 	bl	8006a94 <GSM_VerifyATReady>
		else if(!g_GSM_BaudrateSetFlag)
			GSM_VerifyAutoBaudrate();
	}
}
 8006a36:	e006      	b.n	8006a46 <HAL_UART_RxCpltCallback+0x2e>
{
	if(huart==&GSM_huart)
	{
		if(!g_GSM_ATReadyFlag)
			GSM_VerifyATReady();
		else if(!g_GSM_BaudrateSetFlag)
 8006a38:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <HAL_UART_RxCpltCallback+0x40>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_RxCpltCallback+0x2e>
			GSM_VerifyAutoBaudrate();
 8006a42:	f000 f841 	bl	8006ac8 <GSM_VerifyAutoBaudrate>
	}
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	200007cc 	.word	0x200007cc
 8006a54:	2000068e 	.word	0x2000068e
 8006a58:	2000068f 	.word	0x2000068f

08006a5c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	if(huart==&GSM_huart)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <HAL_UART_TxCpltCallback+0x2c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d109      	bne.n	8006a80 <HAL_UART_TxCpltCallback+0x24>
		if(!g_GSM_BaudrateSetFlag)
 8006a6c:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <HAL_UART_TxCpltCallback+0x30>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d104      	bne.n	8006a80 <HAL_UART_TxCpltCallback+0x24>
			HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_RETURN_MESSAGE_SIZE+5);
 8006a76:	2209      	movs	r2, #9
 8006a78:	4905      	ldr	r1, [pc, #20]	; (8006a90 <HAL_UART_TxCpltCallback+0x34>)
 8006a7a:	4803      	ldr	r0, [pc, #12]	; (8006a88 <HAL_UART_TxCpltCallback+0x2c>)
 8006a7c:	f7fc fec0 	bl	8003800 <HAL_UART_Receive_IT>
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	200007cc 	.word	0x200007cc
 8006a8c:	2000068f 	.word	0x2000068f
 8006a90:	200006d4 	.word	0x200006d4

08006a94 <GSM_VerifyATReady>:
{
	HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_ATREADY_MESSAGE_SIZE);
}

void GSM_VerifyATReady()
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
	if(strncmp(g_GSM_ReceivedData,GSM_ATREADY_MESSAGE,GSM_ATREADY_MESSAGE_SIZE-2)==0)
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <GSM_VerifyATReady+0x28>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d103      	bne.n	8006aa8 <GSM_VerifyATReady+0x14>
		g_GSM_ATReadyFlag=1;
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <GSM_VerifyATReady+0x2c>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	701a      	strb	r2, [r3, #0]
	else
	{
		g_GSM_ATReadyFlag=0;
		HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_ATREADY_MESSAGE_SIZE);
	}
}
 8006aa6:	e007      	b.n	8006ab8 <GSM_VerifyATReady+0x24>
{
	if(strncmp(g_GSM_ReceivedData,GSM_ATREADY_MESSAGE,GSM_ATREADY_MESSAGE_SIZE-2)==0)
		g_GSM_ATReadyFlag=1;
	else
	{
		g_GSM_ATReadyFlag=0;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <GSM_VerifyATReady+0x2c>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_ATREADY_MESSAGE_SIZE);
 8006aae:	2213      	movs	r2, #19
 8006ab0:	4902      	ldr	r1, [pc, #8]	; (8006abc <GSM_VerifyATReady+0x28>)
 8006ab2:	4804      	ldr	r0, [pc, #16]	; (8006ac4 <GSM_VerifyATReady+0x30>)
 8006ab4:	f7fc fea4 	bl	8003800 <HAL_UART_Receive_IT>
	}
}
 8006ab8:	bf00      	nop
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	200006d4 	.word	0x200006d4
 8006ac0:	2000068e 	.word	0x2000068e
 8006ac4:	200007cc 	.word	0x200007cc

08006ac8 <GSM_VerifyAutoBaudrate>:
			HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
		}
}

void GSM_VerifyAutoBaudrate()
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
	if(strncmp(g_GSM_ReceivedData,"OK\r\n",GSM_RETURN_MESSAGE_SIZE)==0)
 8006acc:	2204      	movs	r2, #4
 8006ace:	490c      	ldr	r1, [pc, #48]	; (8006b00 <GSM_VerifyAutoBaudrate+0x38>)
 8006ad0:	480c      	ldr	r0, [pc, #48]	; (8006b04 <GSM_VerifyAutoBaudrate+0x3c>)
 8006ad2:	f001 fb7c 	bl	80081ce <strncmp>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <GSM_VerifyAutoBaudrate+0x22>
	{
		g_GSM_BaudrateSetFlag=1;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <GSM_VerifyAutoBaudrate+0x40>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8006ae2:	480a      	ldr	r0, [pc, #40]	; (8006b0c <GSM_VerifyAutoBaudrate+0x44>)
 8006ae4:	f7fc fb98 	bl	8003218 <HAL_TIM_Base_Stop_IT>
	else
	{
		g_GSM_BaudrateSetFlag=0;
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
	}
}
 8006ae8:	e007      	b.n	8006afa <GSM_VerifyAutoBaudrate+0x32>
		g_GSM_BaudrateSetFlag=1;
		HAL_TIM_Base_Stop_IT(&htim6);
	}
	else
	{
		g_GSM_BaudrateSetFlag=0;
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <GSM_VerifyAutoBaudrate+0x40>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
 8006af0:	2204      	movs	r2, #4
 8006af2:	4907      	ldr	r1, [pc, #28]	; (8006b10 <GSM_VerifyAutoBaudrate+0x48>)
 8006af4:	4807      	ldr	r0, [pc, #28]	; (8006b14 <GSM_VerifyAutoBaudrate+0x4c>)
 8006af6:	f7fc fe3d 	bl	8003774 <HAL_UART_Transmit_IT>
	}
}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	0800845c 	.word	0x0800845c
 8006b04:	200006d4 	.word	0x200006d4
 8006b08:	2000068f 	.word	0x2000068f
 8006b0c:	20000790 	.word	0x20000790
 8006b10:	08008454 	.word	0x08008454
 8006b14:	200007cc 	.word	0x200007cc

08006b18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	4a2e      	ldr	r2, [pc, #184]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b24:	4b2d      	ldr	r3, [pc, #180]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b2e:	4b2b      	ldr	r3, [pc, #172]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	4a27      	ldr	r2, [pc, #156]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b40:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	f043 0310 	orr.w	r3, r3, #16
 8006b48:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4a:	4b24      	ldr	r3, [pc, #144]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	4a20      	ldr	r2, [pc, #128]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b5c:	4b1f      	ldr	r3, [pc, #124]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	f043 0304 	orr.w	r3, r3, #4
 8006b64:	6313      	str	r3, [r2, #48]	; 0x30
 8006b66:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	60bb      	str	r3, [r7, #8]
 8006b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
 8006b76:	4a19      	ldr	r2, [pc, #100]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b78:	4b18      	ldr	r3, [pc, #96]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	6313      	str	r3, [r2, #48]	; 0x30
 8006b82:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	4a12      	ldr	r2, [pc, #72]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b94:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	f043 0302 	orr.w	r3, r3, #2
 8006b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <MX_GPIO_Init+0xc4>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accelerometer_Interrupt_Pin;
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006bae:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <MX_GPIO_Init+0xc8>)
 8006bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Accelerometer_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8006bb6:	f107 0314 	add.w	r3, r7, #20
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4809      	ldr	r0, [pc, #36]	; (8006be4 <MX_GPIO_Init+0xcc>)
 8006bbe:	f7f9 fcd1 	bl	8000564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	2017      	movs	r0, #23
 8006bc8:	f7f9 fc4a 	bl	8000460 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006bcc:	2017      	movs	r0, #23
 8006bce:	f7f9 fc63 	bl	8000498 <HAL_NVIC_EnableIRQ>

}
 8006bd2:	bf00      	nop
 8006bd4:	3728      	adds	r7, #40	; 0x28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	10110000 	.word	0x10110000
 8006be4:	40021000 	.word	0x40021000

08006be8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006bec:	4b12      	ldr	r3, [pc, #72]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006bee:	4a13      	ldr	r2, [pc, #76]	; (8006c3c <MX_I2C1_Init+0x54>)
 8006bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006bf4:	4a12      	ldr	r2, [pc, #72]	; (8006c40 <MX_I2C1_Init+0x58>)
 8006bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c04:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c18:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006c24:	4804      	ldr	r0, [pc, #16]	; (8006c38 <MX_I2C1_Init+0x50>)
 8006c26:	f7f9 fe4f 	bl	80008c8 <HAL_I2C_Init>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006c30:	f000 f8d4 	bl	8006ddc <Error_Handler>
  }

}
 8006c34:	bf00      	nop
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	2000071c 	.word	0x2000071c
 8006c3c:	40005400 	.word	0x40005400
 8006c40:	00061a80 	.word	0x00061a80

08006c44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <HAL_I2C_MspInit+0x58>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d11d      	bne.n	8006c92 <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Accelerometer_SCL_Pin|Accelerometer_SDA_Pin;
 8006c56:	23c0      	movs	r3, #192	; 0xc0
 8006c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c5a:	2312      	movs	r3, #18
 8006c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c62:	2303      	movs	r3, #3
 8006c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c66:	2304      	movs	r3, #4
 8006c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c6a:	f107 030c 	add.w	r3, r7, #12
 8006c6e:	4619      	mov	r1, r3
 8006c70:	480b      	ldr	r0, [pc, #44]	; (8006ca0 <HAL_I2C_MspInit+0x5c>)
 8006c72:	f7f9 fc77 	bl	8000564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c76:	2300      	movs	r3, #0
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ca4 <HAL_I2C_MspInit+0x60>)
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <HAL_I2C_MspInit+0x60>)
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c84:	6413      	str	r3, [r2, #64]	; 0x40
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <HAL_I2C_MspInit+0x60>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c8e:	60bb      	str	r3, [r7, #8]
 8006c90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006c92:	bf00      	nop
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40005400 	.word	0x40005400
 8006ca0:	40020400 	.word	0x40020400
 8006ca4:	40023800 	.word	0x40023800

08006ca8 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006cac:	f7f9 fa8c 	bl	80001c8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8006cb0:	f000 f812 	bl	8006cd8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006cb4:	f7ff ff30 	bl	8006b18 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8006cb8:	f000 faee 	bl	8007298 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8006cbc:	f7ff ff94 	bl	8006be8 <MX_I2C1_Init>
  MX_UART4_Init();
 8006cc0:	f000 fa2e 	bl	8007120 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8006cc4:	f000 fa56 	bl	8007174 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8006cc8:	f000 f9d2 	bl	8007070 <MX_TIM6_Init>
  MX_RTC_Init();
 8006ccc:	f000 f88a 	bl	8006de4 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  AccelerometerInit();
 8006cd0:	f7ff fe66 	bl	80069a0 <AccelerometerInit>
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 8006cd4:	e7fe      	b.n	8006cd4 <main+0x2c>
 8006cd6:	bf00      	nop

08006cd8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b098      	sub	sp, #96	; 0x60
 8006cdc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	4a3b      	ldr	r2, [pc, #236]	; (8006dd0 <SystemClock_Config+0xf8>)
 8006ce4:	4b3a      	ldr	r3, [pc, #232]	; (8006dd0 <SystemClock_Config+0xf8>)
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cec:	6413      	str	r3, [r2, #64]	; 0x40
 8006cee:	4b38      	ldr	r3, [pc, #224]	; (8006dd0 <SystemClock_Config+0xf8>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	4a35      	ldr	r2, [pc, #212]	; (8006dd4 <SystemClock_Config+0xfc>)
 8006d00:	4b34      	ldr	r3, [pc, #208]	; (8006dd4 <SystemClock_Config+0xfc>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	4b32      	ldr	r3, [pc, #200]	; (8006dd4 <SystemClock_Config+0xfc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d12:	607b      	str	r3, [r7, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8006d16:	230b      	movs	r3, #11
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006d20:	2301      	movs	r3, #1
 8006d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d24:	2302      	movs	r3, #2
 8006d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006d2e:	2319      	movs	r3, #25
 8006d30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006d32:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006d36:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006d3c:	2307      	movs	r3, #7
 8006d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fb fa51 	bl	80021ec <HAL_RCC_OscConfig>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8006d50:	f000 f844 	bl	8006ddc <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d54:	230f      	movs	r3, #15
 8006d56:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006d6c:	f107 031c 	add.w	r3, r7, #28
 8006d70:	2105      	movs	r1, #5
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fb fc94 	bl	80026a0 <HAL_RCC_ClockConfig>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8006d7e:	f000 f82d 	bl	8006ddc <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006d82:	2302      	movs	r3, #2
 8006d84:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d8a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d8c:	f107 030c 	add.w	r3, r7, #12
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fb fe65 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8006d9c:	f000 f81e 	bl	8006ddc <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006da0:	f7fb fe0e 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8006da4:	4602      	mov	r2, r0
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <SystemClock_Config+0x100>)
 8006da8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dac:	099b      	lsrs	r3, r3, #6
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7f9 fb80 	bl	80004b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006db4:	2004      	movs	r0, #4
 8006db6:	f7f9 fb89 	bl	80004cc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc2:	f7f9 fb4d 	bl	8000460 <HAL_NVIC_SetPriority>
}
 8006dc6:	bf00      	nop
 8006dc8:	3760      	adds	r7, #96	; 0x60
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	40007000 	.word	0x40007000
 8006dd8:	10624dd3 	.word	0x10624dd3

08006ddc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 8006de0:	e7fe      	b.n	8006de0 <Error_Handler+0x4>
 8006de2:	bf00      	nop

08006de4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 8006dea:	4b2c      	ldr	r3, [pc, #176]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006dec:	4a2c      	ldr	r2, [pc, #176]	; (8006ea0 <MX_RTC_Init+0xbc>)
 8006dee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006df0:	4b2a      	ldr	r3, [pc, #168]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006df6:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006df8:	227f      	movs	r2, #127	; 0x7f
 8006dfa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006dfc:	4b27      	ldr	r3, [pc, #156]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006dfe:	22ff      	movs	r2, #255	; 0xff
 8006e00:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006e02:	4b26      	ldr	r3, [pc, #152]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006e08:	4b24      	ldr	r3, [pc, #144]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006e0e:	4b23      	ldr	r3, [pc, #140]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006e14:	4821      	ldr	r0, [pc, #132]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006e16:	f7fb ff19 	bl	8002c4c <HAL_RTC_Init>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8006e20:	f7ff ffdc 	bl	8006ddc <Error_Handler>
  }

    /**Initialize RTC and set the Time and Date 
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8006e24:	2100      	movs	r1, #0
 8006e26:	481d      	ldr	r0, [pc, #116]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006e28:	f7fc f9b2 	bl	8003190 <HAL_RTCEx_BKUPRead>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d02d      	beq.n	8006e92 <MX_RTC_Init+0xae>
  sTime.Hours = 0x0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006e4a:	1d3b      	adds	r3, r7, #4
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4812      	ldr	r0, [pc, #72]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006e52:	f7fb ff77 	bl	8002d44 <HAL_RTC_SetTime>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8006e5c:	f7ff ffbe 	bl	8006ddc <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006e60:	2301      	movs	r3, #1
 8006e62:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8006e64:	2301      	movs	r3, #1
 8006e66:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006e70:	463b      	mov	r3, r7
 8006e72:	2201      	movs	r2, #1
 8006e74:	4619      	mov	r1, r3
 8006e76:	4809      	ldr	r0, [pc, #36]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006e78:	f7fc f82a 	bl	8002ed0 <HAL_RTC_SetDate>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8006e82:	f7ff ffab 	bl	8006ddc <Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8006e86:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4803      	ldr	r0, [pc, #12]	; (8006e9c <MX_RTC_Init+0xb8>)
 8006e8e:	f7fc f965 	bl	800315c <HAL_RTCEx_BKUPWrite>
  }

}
 8006e92:	bf00      	nop
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000770 	.word	0x20000770
 8006ea0:	40002800 	.word	0x40002800

08006ea4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a05      	ldr	r2, [pc, #20]	; (8006ec8 <HAL_RTC_MspInit+0x24>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d102      	bne.n	8006ebc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <HAL_RTC_MspInit+0x28>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	40002800 	.word	0x40002800
 8006ecc:	42470e3c 	.word	0x42470e3c

08006ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ed4:	2003      	movs	r0, #3
 8006ed6:	f7f9 fab7 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006eda:	2200      	movs	r2, #0
 8006edc:	2100      	movs	r1, #0
 8006ede:	f06f 000b 	mvn.w	r0, #11
 8006ee2:	f7f9 fabd 	bl	8000460 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2100      	movs	r1, #0
 8006eea:	f06f 000a 	mvn.w	r0, #10
 8006eee:	f7f9 fab7 	bl	8000460 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	f06f 0009 	mvn.w	r0, #9
 8006efa:	f7f9 fab1 	bl	8000460 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006efe:	2200      	movs	r2, #0
 8006f00:	2100      	movs	r1, #0
 8006f02:	f06f 0004 	mvn.w	r0, #4
 8006f06:	f7f9 faab 	bl	8000460 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	f06f 0003 	mvn.w	r0, #3
 8006f12:	f7f9 faa5 	bl	8000460 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006f16:	2200      	movs	r2, #0
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f06f 0001 	mvn.w	r0, #1
 8006f1e:	f7f9 fa9f 	bl	8000460 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006f22:	2200      	movs	r2, #0
 8006f24:	2100      	movs	r1, #0
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	f7f9 fa99 	bl	8000460 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f2e:	bf00      	nop
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop

08006f34 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f38:	bf00      	nop
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop

08006f44 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8006f48:	e7fe      	b.n	8006f48 <HardFault_Handler+0x4>
 8006f4a:	bf00      	nop

08006f4c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8006f50:	e7fe      	b.n	8006f50 <MemManage_Handler+0x4>
 8006f52:	bf00      	nop

08006f54 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8006f58:	e7fe      	b.n	8006f58 <BusFault_Handler+0x4>
 8006f5a:	bf00      	nop

08006f5c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8006f60:	e7fe      	b.n	8006f60 <UsageFault_Handler+0x4>
 8006f62:	bf00      	nop

08006f64 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop

08006f74 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f78:	bf00      	nop
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop

08006f84 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f88:	bf00      	nop
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop

08006f94 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f98:	f7f9 f954 	bl	8000244 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006f9c:	f7f9 fab2 	bl	8000504 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fa0:	bf00      	nop
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8006fa8:	2080      	movs	r0, #128	; 0x80
 8006faa:	f7f9 fc75 	bl	8000898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006fae:	bf00      	nop
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop

08006fb4 <UART4_IRQHandler>:

/**
* @brief This function handles UART4 global interrupt.
*/
void UART4_IRQHandler(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006fb8:	4802      	ldr	r0, [pc, #8]	; (8006fc4 <UART4_IRQHandler+0x10>)
 8006fba:	f7fc fc6f 	bl	800389c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000080c 	.word	0x2000080c

08006fc8 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006fcc:	4802      	ldr	r0, [pc, #8]	; (8006fd8 <TIM6_DAC_IRQHandler+0x10>)
 8006fce:	f7fc f94f 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006fd2:	bf00      	nop
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000790 	.word	0x20000790

08006fdc <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006fe0:	4802      	ldr	r0, [pc, #8]	; (8006fec <OTG_FS_IRQHandler+0x10>)
 8006fe2:	f7fa f97b 	bl	80012dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006fe6:	bf00      	nop
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000ad8 	.word	0x20000ad8

08006ff0 <USART6_IRQHandler>:

/**
* @brief This function handles USART6 global interrupt.
*/
void USART6_IRQHandler(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006ff4:	4802      	ldr	r0, [pc, #8]	; (8007000 <USART6_IRQHandler+0x10>)
 8006ff6:	f7fc fc51 	bl	800389c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006ffa:	bf00      	nop
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200007cc 	.word	0x200007cc

08007004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007008:	4a16      	ldr	r2, [pc, #88]	; (8007064 <SystemInit+0x60>)
 800700a:	4b16      	ldr	r3, [pc, #88]	; (8007064 <SystemInit+0x60>)
 800700c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <SystemInit+0x64>)
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <SystemInit+0x64>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007024:	4b10      	ldr	r3, [pc, #64]	; (8007068 <SystemInit+0x64>)
 8007026:	2200      	movs	r2, #0
 8007028:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800702a:	4a0f      	ldr	r2, [pc, #60]	; (8007068 <SystemInit+0x64>)
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <SystemInit+0x64>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007038:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800703a:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <SystemInit+0x64>)
 800703c:	4a0b      	ldr	r2, [pc, #44]	; (800706c <SystemInit+0x68>)
 800703e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007040:	4a09      	ldr	r2, [pc, #36]	; (8007068 <SystemInit+0x64>)
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <SystemInit+0x64>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800704a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <SystemInit+0x64>)
 800704e:	2200      	movs	r2, #0
 8007050:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <SystemInit+0x60>)
 8007054:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007058:	609a      	str	r2, [r3, #8]
#endif
}
 800705a:	bf00      	nop
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	e000ed00 	.word	0xe000ed00
 8007068:	40023800 	.word	0x40023800
 800706c:	24003010 	.word	0x24003010

08007070 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8007076:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <MX_TIM6_Init+0x58>)
 8007078:	4a14      	ldr	r2, [pc, #80]	; (80070cc <MX_TIM6_Init+0x5c>)
 800707a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PRESCALER;
 800707c:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <MX_TIM6_Init+0x58>)
 800707e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8007082:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007084:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <MX_TIM6_Init+0x58>)
 8007086:	2200      	movs	r2, #0
 8007088:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_COUNTER;
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <MX_TIM6_Init+0x58>)
 800708c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007090:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007092:	480d      	ldr	r0, [pc, #52]	; (80070c8 <MX_TIM6_Init+0x58>)
 8007094:	f7fc f894 	bl	80031c0 <HAL_TIM_Base_Init>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800709e:	f7ff fe9d 	bl	8006ddc <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070a2:	2300      	movs	r3, #0
 80070a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80070aa:	463b      	mov	r3, r7
 80070ac:	4619      	mov	r1, r3
 80070ae:	4806      	ldr	r0, [pc, #24]	; (80070c8 <MX_TIM6_Init+0x58>)
 80070b0:	f7fc fab8 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 80070ba:	f7ff fe8f 	bl	8006ddc <Error_Handler>
  }

}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000790 	.word	0x20000790
 80070cc:	40001000 	.word	0x40001000

080070d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a0e      	ldr	r2, [pc, #56]	; (8007118 <HAL_TIM_Base_MspInit+0x48>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d115      	bne.n	800710e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	4a0d      	ldr	r2, [pc, #52]	; (800711c <HAL_TIM_Base_MspInit+0x4c>)
 80070e8:	4b0c      	ldr	r3, [pc, #48]	; (800711c <HAL_TIM_Base_MspInit+0x4c>)
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	f043 0310 	orr.w	r3, r3, #16
 80070f0:	6413      	str	r3, [r2, #64]	; 0x40
 80070f2:	4b0a      	ldr	r3, [pc, #40]	; (800711c <HAL_TIM_Base_MspInit+0x4c>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	2036      	movs	r0, #54	; 0x36
 8007104:	f7f9 f9ac 	bl	8000460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007108:	2036      	movs	r0, #54	; 0x36
 800710a:	f7f9 f9c5 	bl	8000498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800710e:	bf00      	nop
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40001000 	.word	0x40001000
 800711c:	40023800 	.word	0x40023800

08007120 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8007124:	4b11      	ldr	r3, [pc, #68]	; (800716c <MX_UART4_Init+0x4c>)
 8007126:	4a12      	ldr	r2, [pc, #72]	; (8007170 <MX_UART4_Init+0x50>)
 8007128:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800712a:	4b10      	ldr	r3, [pc, #64]	; (800716c <MX_UART4_Init+0x4c>)
 800712c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007130:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007132:	4b0e      	ldr	r3, [pc, #56]	; (800716c <MX_UART4_Init+0x4c>)
 8007134:	2200      	movs	r2, #0
 8007136:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <MX_UART4_Init+0x4c>)
 800713a:	2200      	movs	r2, #0
 800713c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800713e:	4b0b      	ldr	r3, [pc, #44]	; (800716c <MX_UART4_Init+0x4c>)
 8007140:	2200      	movs	r2, #0
 8007142:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007144:	4b09      	ldr	r3, [pc, #36]	; (800716c <MX_UART4_Init+0x4c>)
 8007146:	220c      	movs	r2, #12
 8007148:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <MX_UART4_Init+0x4c>)
 800714c:	2200      	movs	r2, #0
 800714e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <MX_UART4_Init+0x4c>)
 8007152:	2200      	movs	r2, #0
 8007154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007156:	4805      	ldr	r0, [pc, #20]	; (800716c <MX_UART4_Init+0x4c>)
 8007158:	f7fc fabe 	bl	80036d8 <HAL_UART_Init>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8007162:	f7ff fe3b 	bl	8006ddc <Error_Handler>
  }

}
 8007166:	bf00      	nop
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	2000080c 	.word	0x2000080c
 8007170:	40004c00 	.word	0x40004c00

08007174 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8007178:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 800717a:	4a12      	ldr	r2, [pc, #72]	; (80071c4 <MX_USART6_UART_Init+0x50>)
 800717c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 8007180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007184:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007186:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 8007188:	2200      	movs	r2, #0
 800718a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800718c:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 800718e:	2200      	movs	r2, #0
 8007190:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007192:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 8007194:	2200      	movs	r2, #0
 8007196:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007198:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 800719a:	220c      	movs	r2, #12
 800719c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800719e:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80071a4:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80071aa:	4805      	ldr	r0, [pc, #20]	; (80071c0 <MX_USART6_UART_Init+0x4c>)
 80071ac:	f7fc fa94 	bl	80036d8 <HAL_UART_Init>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80071b6:	f7ff fe11 	bl	8006ddc <Error_Handler>
  }

}
 80071ba:	bf00      	nop
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200007cc 	.word	0x200007cc
 80071c4:	40011400 	.word	0x40011400

080071c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2c      	ldr	r2, [pc, #176]	; (8007288 <HAL_UART_MspInit+0xc0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d127      	bne.n	800722a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80071da:	2300      	movs	r3, #0
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	4a2b      	ldr	r2, [pc, #172]	; (800728c <HAL_UART_MspInit+0xc4>)
 80071e0:	4b2a      	ldr	r3, [pc, #168]	; (800728c <HAL_UART_MspInit+0xc4>)
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ea:	4b28      	ldr	r3, [pc, #160]	; (800728c <HAL_UART_MspInit+0xc4>)
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = CommunicationUART_TX_Pin|CommunicationUART_RX_Pin;
 80071f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fc:	2302      	movs	r3, #2
 80071fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007200:	2301      	movs	r3, #1
 8007202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007204:	2303      	movs	r3, #3
 8007206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007208:	2308      	movs	r3, #8
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800720c:	f107 0314 	add.w	r3, r7, #20
 8007210:	4619      	mov	r1, r3
 8007212:	481f      	ldr	r0, [pc, #124]	; (8007290 <HAL_UART_MspInit+0xc8>)
 8007214:	f7f9 f9a6 	bl	8000564 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007218:	2200      	movs	r2, #0
 800721a:	2100      	movs	r1, #0
 800721c:	2034      	movs	r0, #52	; 0x34
 800721e:	f7f9 f91f 	bl	8000460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007222:	2034      	movs	r0, #52	; 0x34
 8007224:	f7f9 f938 	bl	8000498 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8007228:	e02a      	b.n	8007280 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a19      	ldr	r2, [pc, #100]	; (8007294 <HAL_UART_MspInit+0xcc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d125      	bne.n	8007280 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	4a14      	ldr	r2, [pc, #80]	; (800728c <HAL_UART_MspInit+0xc4>)
 800723a:	4b14      	ldr	r3, [pc, #80]	; (800728c <HAL_UART_MspInit+0xc4>)
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f043 0320 	orr.w	r3, r3, #32
 8007242:	6453      	str	r3, [r2, #68]	; 0x44
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <HAL_UART_MspInit+0xc4>)
 8007246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
  
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = SIM808_USART_TX_Pin|SIM808_USART_RX_Pin;
 8007250:	23c0      	movs	r3, #192	; 0xc0
 8007252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007254:	2302      	movs	r3, #2
 8007256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007258:	2301      	movs	r3, #1
 800725a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800725c:	2303      	movs	r3, #3
 800725e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007260:	2308      	movs	r3, #8
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	4619      	mov	r1, r3
 800726a:	4809      	ldr	r0, [pc, #36]	; (8007290 <HAL_UART_MspInit+0xc8>)
 800726c:	f7f9 f97a 	bl	8000564 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007270:	2200      	movs	r2, #0
 8007272:	2100      	movs	r1, #0
 8007274:	2047      	movs	r0, #71	; 0x47
 8007276:	f7f9 f8f3 	bl	8000460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800727a:	2047      	movs	r0, #71	; 0x47
 800727c:	f7f9 f90c 	bl	8000498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8007280:	bf00      	nop
 8007282:	3728      	adds	r7, #40	; 0x28
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40004c00 	.word	0x40004c00
 800728c:	40023800 	.word	0x40023800
 8007290:	40020800 	.word	0x40020800
 8007294:	40011400 	.word	0x40011400

08007298 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800729c:	2200      	movs	r2, #0
 800729e:	4908      	ldr	r1, [pc, #32]	; (80072c0 <MX_USB_DEVICE_Init+0x28>)
 80072a0:	4808      	ldr	r0, [pc, #32]	; (80072c4 <MX_USB_DEVICE_Init+0x2c>)
 80072a2:	f7fe fb77 	bl	8005994 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80072a6:	4908      	ldr	r1, [pc, #32]	; (80072c8 <MX_USB_DEVICE_Init+0x30>)
 80072a8:	4806      	ldr	r0, [pc, #24]	; (80072c4 <MX_USB_DEVICE_Init+0x2c>)
 80072aa:	f7fe fb9f 	bl	80059ec <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80072ae:	4907      	ldr	r1, [pc, #28]	; (80072cc <MX_USB_DEVICE_Init+0x34>)
 80072b0:	4804      	ldr	r0, [pc, #16]	; (80072c4 <MX_USB_DEVICE_Init+0x2c>)
 80072b2:	f7fe faff 	bl	80058b4 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80072b6:	4803      	ldr	r0, [pc, #12]	; (80072c4 <MX_USB_DEVICE_Init+0x2c>)
 80072b8:	f7fe fbb2 	bl	8005a20 <USBD_Start>

}
 80072bc:	bf00      	nop
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000138 	.word	0x20000138
 80072c4:	2000084c 	.word	0x2000084c
 80072c8:	2000000c 	.word	0x2000000c
 80072cc:	20000128 	.word	0x20000128

080072d0 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072d4:	2200      	movs	r2, #0
 80072d6:	4905      	ldr	r1, [pc, #20]	; (80072ec <CDC_Init_FS+0x1c>)
 80072d8:	4805      	ldr	r0, [pc, #20]	; (80072f0 <CDC_Init_FS+0x20>)
 80072da:	f7fe fb03 	bl	80058e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072de:	4905      	ldr	r1, [pc, #20]	; (80072f4 <CDC_Init_FS+0x24>)
 80072e0:	4803      	ldr	r0, [pc, #12]	; (80072f0 <CDC_Init_FS+0x20>)
 80072e2:	f7fe fb19 	bl	8005918 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80072e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000aa4 	.word	0x20000aa4
 80072f0:	2000084c 	.word	0x2000084c
 80072f4:	20000a70 	.word	0x20000a70

080072f8 <CDC_DeInit_FS>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 80072fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 80072fe:	4618      	mov	r0, r3
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	6039      	str	r1, [r7, #0]
 8007312:	71fb      	strb	r3, [r7, #7]
 8007314:	4613      	mov	r3, r2
 8007316:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	2b23      	cmp	r3, #35	; 0x23
 800731c:	d84a      	bhi.n	80073b4 <CDC_Control_FS+0xac>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <CDC_Control_FS+0x1c>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	080073b5 	.word	0x080073b5
 8007328:	080073b5 	.word	0x080073b5
 800732c:	080073b5 	.word	0x080073b5
 8007330:	080073b5 	.word	0x080073b5
 8007334:	080073b5 	.word	0x080073b5
 8007338:	080073b5 	.word	0x080073b5
 800733c:	080073b5 	.word	0x080073b5
 8007340:	080073b5 	.word	0x080073b5
 8007344:	080073b5 	.word	0x080073b5
 8007348:	080073b5 	.word	0x080073b5
 800734c:	080073b5 	.word	0x080073b5
 8007350:	080073b5 	.word	0x080073b5
 8007354:	080073b5 	.word	0x080073b5
 8007358:	080073b5 	.word	0x080073b5
 800735c:	080073b5 	.word	0x080073b5
 8007360:	080073b5 	.word	0x080073b5
 8007364:	080073b5 	.word	0x080073b5
 8007368:	080073b5 	.word	0x080073b5
 800736c:	080073b5 	.word	0x080073b5
 8007370:	080073b5 	.word	0x080073b5
 8007374:	080073b5 	.word	0x080073b5
 8007378:	080073b5 	.word	0x080073b5
 800737c:	080073b5 	.word	0x080073b5
 8007380:	080073b5 	.word	0x080073b5
 8007384:	080073b5 	.word	0x080073b5
 8007388:	080073b5 	.word	0x080073b5
 800738c:	080073b5 	.word	0x080073b5
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073b5 	.word	0x080073b5
 8007398:	080073b5 	.word	0x080073b5
 800739c:	080073b5 	.word	0x080073b5
 80073a0:	080073b5 	.word	0x080073b5
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073b5 	.word	0x080073b5
 80073ac:	080073b5 	.word	0x080073b5
 80073b0:	080073b5 	.word	0x080073b5
  case CDC_SEND_BREAK:
 
    break;    
    
  default:
    break;
 80073b4:	bf00      	nop
  }

  return (USBD_OK);
 80073b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4811      	ldr	r0, [pc, #68]	; (8007418 <CDC_Receive_FS+0x54>)
 80073d2:	f7fe faa1 	bl	8005918 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80073d6:	4810      	ldr	r0, [pc, #64]	; (8007418 <CDC_Receive_FS+0x54>)
 80073d8:	f7fe fab2 	bl	8005940 <USBD_CDC_ReceivePacket>

  extern uint8_t g_ReceivedDataBuffer[APP_RX_DATA_SIZE];
  extern uint8_t g_USBRcvCpltFlag;

  for(uint8_t i=0; i<APP_RX_DATA_SIZE;++i)
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
 80073e0:	e006      	b.n	80073f0 <CDC_Receive_FS+0x2c>
	  g_ReceivedDataBuffer[i]=0;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	4a0d      	ldr	r2, [pc, #52]	; (800741c <CDC_Receive_FS+0x58>)
 80073e6:	2100      	movs	r1, #0
 80073e8:	54d1      	strb	r1, [r2, r3]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);

  extern uint8_t g_ReceivedDataBuffer[APP_RX_DATA_SIZE];
  extern uint8_t g_USBRcvCpltFlag;

  for(uint8_t i=0; i<APP_RX_DATA_SIZE;++i)
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	3301      	adds	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	2b31      	cmp	r3, #49	; 0x31
 80073f4:	d9f5      	bls.n	80073e2 <CDC_Receive_FS+0x1e>
	  g_ReceivedDataBuffer[i]=0;

  strlcpy(g_ReceivedDataBuffer,Buf,(*Len)+1);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3301      	adds	r3, #1
 80073fc:	461a      	mov	r2, r3
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4806      	ldr	r0, [pc, #24]	; (800741c <CDC_Receive_FS+0x58>)
 8007402:	f000 fecf 	bl	80081a4 <strlcpy>
  g_USBRcvCpltFlag=1;
 8007406:	4b06      	ldr	r3, [pc, #24]	; (8007420 <CDC_Receive_FS+0x5c>)
 8007408:	2201      	movs	r2, #1
 800740a:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800740c:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	2000084c 	.word	0x2000084c
 800741c:	200006e8 	.word	0x200006e8
 8007420:	2000071a 	.word	0x2000071a

08007424 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007434:	d12c      	bne.n	8007490 <HAL_PCD_MspInit+0x6c>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007436:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800743a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800743c:	2302      	movs	r3, #2
 800743e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007444:	2303      	movs	r3, #3
 8007446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007448:	230a      	movs	r3, #10
 800744a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800744c:	f107 030c 	add.w	r3, r7, #12
 8007450:	4619      	mov	r1, r3
 8007452:	4811      	ldr	r0, [pc, #68]	; (8007498 <HAL_PCD_MspInit+0x74>)
 8007454:	f7f9 f886 	bl	8000564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007458:	4a10      	ldr	r2, [pc, #64]	; (800749c <HAL_PCD_MspInit+0x78>)
 800745a:	4b10      	ldr	r3, [pc, #64]	; (800749c <HAL_PCD_MspInit+0x78>)
 800745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007462:	6353      	str	r3, [r2, #52]	; 0x34
 8007464:	2300      	movs	r3, #0
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	4a0c      	ldr	r2, [pc, #48]	; (800749c <HAL_PCD_MspInit+0x78>)
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <HAL_PCD_MspInit+0x78>)
 800746c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007472:	6453      	str	r3, [r2, #68]	; 0x44
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <HAL_PCD_MspInit+0x78>)
 8007476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800747c:	60bb      	str	r3, [r7, #8]
 800747e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007480:	2200      	movs	r2, #0
 8007482:	2100      	movs	r1, #0
 8007484:	2043      	movs	r0, #67	; 0x43
 8007486:	f7f8 ffeb 	bl	8000460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800748a:	2043      	movs	r0, #67	; 0x43
 800748c:	f7f9 f804 	bl	8000498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007490:	bf00      	nop
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40020000 	.word	0x40020000
 800749c:	40023800 	.word	0x40023800

080074a0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f7fe fafe 	bl	8005ab8 <USBD_LL_SetupStage>
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80074d6:	78fa      	ldrb	r2, [r7, #3]
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	00db      	lsls	r3, r3, #3
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	4619      	mov	r1, r3
 80074ee:	f7fe fb2d 	bl	8005b4c <USBD_LL_DataOutStage>
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	3344      	adds	r3, #68	; 0x44
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	4619      	mov	r1, r3
 8007524:	f7fe fb6e 	bl	8005c04 <USBD_LL_DataInStage>
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe fc58 	bl	8005df4 <USBD_LL_SOF>
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_PCD_ResetCallback+0x1a>
 8007560:	2b02      	cmp	r3, #2
 8007562:	d003      	beq.n	800756c <HAL_PCD_ResetCallback+0x20>
 8007564:	e005      	b.n	8007572 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
    break;
 800756a:	e005      	b.n	8007578 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
    break;
 8007570:	e002      	b.n	8007578 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;    
 8007572:	2301      	movs	r3, #1
 8007574:	73fb      	strb	r3, [r7, #15]
    break;    
 8007576:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800757e:	7bfa      	ldrb	r2, [r7, #15]
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fbfe 	bl	8005d84 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fbc8 	bl	8005d24 <USBD_LL_Reset>
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fbfa 	bl	8005da4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f043 0301 	orr.w	r3, r3, #1
 80075c8:	6013      	str	r3, [r2, #0]
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075d2:	4a05      	ldr	r2, [pc, #20]	; (80075e8 <HAL_PCD_SuspendCallback+0x4c>)
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <HAL_PCD_SuspendCallback+0x4c>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f043 0306 	orr.w	r3, r3, #6
 80075dc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	e000ed00 	.word	0xe000ed00

080075ec <HAL_PCD_ResumeCallback>:
    When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fbe8 	bl	8005dd0 <USBD_LL_Resume>
  
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fc10 	bl	8005e44 <USBD_LL_IsoOUTIncomplete>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fbf0 	bl	8005e28 <USBD_LL_IsoINIncomplete>
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fbfe 	bl	8005e60 <USBD_LL_DevConnected>
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe fbfc 	bl	8005e78 <USBD_LL_DevDisconnected>
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d13f      	bne.n	8007718 <USBD_LL_Init+0x90>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8007698:	4a22      	ldr	r2, [pc, #136]	; (8007724 <USBD_LL_Init+0x9c>)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a20      	ldr	r2, [pc, #128]	; (8007724 <USBD_LL_Init+0x9c>)
 80076a4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076a8:	4b1e      	ldr	r3, [pc, #120]	; (8007724 <USBD_LL_Init+0x9c>)
 80076aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076b0:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <USBD_LL_Init+0x9c>)
 80076b2:	2204      	movs	r2, #4
 80076b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <USBD_LL_Init+0x9c>)
 80076b8:	2202      	movs	r2, #2
 80076ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076bc:	4b19      	ldr	r3, [pc, #100]	; (8007724 <USBD_LL_Init+0x9c>)
 80076be:	2200      	movs	r2, #0
 80076c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80076c2:	4b18      	ldr	r3, [pc, #96]	; (8007724 <USBD_LL_Init+0x9c>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076c8:	4b16      	ldr	r3, [pc, #88]	; (8007724 <USBD_LL_Init+0x9c>)
 80076ca:	2202      	movs	r2, #2
 80076cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076ce:	4b15      	ldr	r3, [pc, #84]	; (8007724 <USBD_LL_Init+0x9c>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076d4:	4b13      	ldr	r3, [pc, #76]	; (8007724 <USBD_LL_Init+0x9c>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076da:	4b12      	ldr	r3, [pc, #72]	; (8007724 <USBD_LL_Init+0x9c>)
 80076dc:	2200      	movs	r2, #0
 80076de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80076e0:	4b10      	ldr	r3, [pc, #64]	; (8007724 <USBD_LL_Init+0x9c>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <USBD_LL_Init+0x9c>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076ec:	480d      	ldr	r0, [pc, #52]	; (8007724 <USBD_LL_Init+0x9c>)
 80076ee:	f7f9 fccb 	bl	8001088 <HAL_PCD_Init>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <USBD_LL_Init+0x74>
  {
    Error_Handler();
 80076f8:	f7ff fb70 	bl	8006ddc <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076fc:	2180      	movs	r1, #128	; 0x80
 80076fe:	4809      	ldr	r0, [pc, #36]	; (8007724 <USBD_LL_Init+0x9c>)
 8007700:	f7fa fd62 	bl	80021c8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007704:	2240      	movs	r2, #64	; 0x40
 8007706:	2100      	movs	r1, #0
 8007708:	4806      	ldr	r0, [pc, #24]	; (8007724 <USBD_LL_Init+0x9c>)
 800770a:	f7fa fd11 	bl	8002130 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800770e:	2280      	movs	r2, #128	; 0x80
 8007710:	2101      	movs	r1, #1
 8007712:	4804      	ldr	r0, [pc, #16]	; (8007724 <USBD_LL_Init+0x9c>)
 8007714:	f7fa fd0c 	bl	8002130 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000ad8 	.word	0x20000ad8

08007728 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800773e:	4618      	mov	r0, r3
 8007740:	f7f9 fdaa 	bl	8001298 <HAL_PCD_Start>
 8007744:	4603      	mov	r3, r0
 8007746:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d816      	bhi.n	800777c <USBD_LL_Start+0x54>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <USBD_LL_Start+0x2c>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007765 	.word	0x08007765
 8007758:	0800776b 	.word	0x0800776b
 800775c:	08007771 	.word	0x08007771
 8007760:	08007777 	.word	0x08007777
    case HAL_OK :
      usb_status = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
    break;
 8007768:	e00b      	b.n	8007782 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800776a:	2302      	movs	r3, #2
 800776c:	73fb      	strb	r3, [r7, #15]
    break;
 800776e:	e008      	b.n	8007782 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
    break;
 8007774:	e005      	b.n	8007782 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007776:	2302      	movs	r3, #2
 8007778:	73fb      	strb	r3, [r7, #15]
    break;
 800777a:	e002      	b.n	8007782 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800777c:	2302      	movs	r3, #2
 800777e:	73fb      	strb	r3, [r7, #15]
    break;
 8007780:	bf00      	nop
  }
  return usb_status;  
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	4608      	mov	r0, r1
 8007796:	4611      	mov	r1, r2
 8007798:	461a      	mov	r2, r3
 800779a:	4603      	mov	r3, r0
 800779c:	70fb      	strb	r3, [r7, #3]
 800779e:	460b      	mov	r3, r1
 80077a0:	70bb      	strb	r3, [r7, #2]
 80077a2:	4613      	mov	r3, r2
 80077a4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80077b4:	78bb      	ldrb	r3, [r7, #2]
 80077b6:	883a      	ldrh	r2, [r7, #0]
 80077b8:	78f9      	ldrb	r1, [r7, #3]
 80077ba:	f7fa fa2f 	bl	8001c1c <HAL_PCD_EP_Open>
 80077be:	4603      	mov	r3, r0
 80077c0:	73bb      	strb	r3, [r7, #14]
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d817      	bhi.n	80077f8 <USBD_LL_OpenEP+0x6c>
 80077c8:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <USBD_LL_OpenEP+0x44>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	080077e7 	.word	0x080077e7
 80077d8:	080077ed 	.word	0x080077ed
 80077dc:	080077f3 	.word	0x080077f3
    case HAL_OK :
      usb_status = USBD_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
    break;
 80077e4:	e00b      	b.n	80077fe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077e6:	2302      	movs	r3, #2
 80077e8:	73fb      	strb	r3, [r7, #15]
    break;
 80077ea:	e008      	b.n	80077fe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
    break;
 80077f0:	e005      	b.n	80077fe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077f2:	2302      	movs	r3, #2
 80077f4:	73fb      	strb	r3, [r7, #15]
    break;
 80077f6:	e002      	b.n	80077fe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80077f8:	2302      	movs	r3, #2
 80077fa:	73fb      	strb	r3, [r7, #15]
    break;
 80077fc:	bf00      	nop
  }
  return usb_status; 
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa fa60 	bl	8001cec <HAL_PCD_EP_Close>
 800782c:	4603      	mov	r3, r0
 800782e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d816      	bhi.n	8007864 <USBD_LL_CloseEP+0x5c>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <USBD_LL_CloseEP+0x34>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	0800784d 	.word	0x0800784d
 8007840:	08007853 	.word	0x08007853
 8007844:	08007859 	.word	0x08007859
 8007848:	0800785f 	.word	0x0800785f
    case HAL_OK :
      usb_status = USBD_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
    break;
 8007850:	e00b      	b.n	800786a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007852:	2302      	movs	r3, #2
 8007854:	73fb      	strb	r3, [r7, #15]
    break;
 8007856:	e008      	b.n	800786a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
    break;
 800785c:	e005      	b.n	800786a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800785e:	2302      	movs	r3, #2
 8007860:	73fb      	strb	r3, [r7, #15]
    break;
 8007862:	e002      	b.n	800786a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007864:	2302      	movs	r3, #2
 8007866:	73fb      	strb	r3, [r7, #15]
    break;
 8007868:	bf00      	nop
  }
  return usb_status;  
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	4611      	mov	r1, r2
 8007892:	4618      	mov	r0, r3
 8007894:	f7fa fb22 	bl	8001edc <HAL_PCD_EP_SetStall>
 8007898:	4603      	mov	r3, r0
 800789a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d816      	bhi.n	80078d0 <USBD_LL_StallEP+0x5c>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <USBD_LL_StallEP+0x34>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078b9 	.word	0x080078b9
 80078ac:	080078bf 	.word	0x080078bf
 80078b0:	080078c5 	.word	0x080078c5
 80078b4:	080078cb 	.word	0x080078cb
    case HAL_OK :
      usb_status = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
    break;
 80078bc:	e00b      	b.n	80078d6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078be:	2302      	movs	r3, #2
 80078c0:	73fb      	strb	r3, [r7, #15]
    break;
 80078c2:	e008      	b.n	80078d6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
    break;
 80078c8:	e005      	b.n	80078d6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078ca:	2302      	movs	r3, #2
 80078cc:	73fb      	strb	r3, [r7, #15]
    break;
 80078ce:	e002      	b.n	80078d6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80078d0:	2302      	movs	r3, #2
 80078d2:	73fb      	strb	r3, [r7, #15]
    break;
 80078d4:	bf00      	nop
  }
  return usb_status;  
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fa fb48 	bl	8001f94 <HAL_PCD_EP_ClrStall>
 8007904:	4603      	mov	r3, r0
 8007906:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b03      	cmp	r3, #3
 800790c:	d816      	bhi.n	800793c <USBD_LL_ClearStallEP+0x5c>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <USBD_LL_ClearStallEP+0x34>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	08007925 	.word	0x08007925
 8007918:	0800792b 	.word	0x0800792b
 800791c:	08007931 	.word	0x08007931
 8007920:	08007937 	.word	0x08007937
    case HAL_OK :
      usb_status = USBD_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
    break;
 8007928:	e00b      	b.n	8007942 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800792a:	2302      	movs	r3, #2
 800792c:	73fb      	strb	r3, [r7, #15]
    break;
 800792e:	e008      	b.n	8007942 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007930:	2301      	movs	r3, #1
 8007932:	73fb      	strb	r3, [r7, #15]
    break;
 8007934:	e005      	b.n	8007942 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007936:	2302      	movs	r3, #2
 8007938:	73fb      	strb	r3, [r7, #15]
    break;
 800793a:	e002      	b.n	8007942 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800793c:	2302      	movs	r3, #2
 800793e:	73fb      	strb	r3, [r7, #15]
    break;
 8007940:	bf00      	nop
  }
  return usb_status; 
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800795e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da0b      	bge.n	8007980 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	4613      	mov	r3, r2
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	333a      	adds	r3, #58	; 0x3a
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	e00b      	b.n	8007998 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	4613      	mov	r3, r2
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8007996:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fa f908 	bl	8001bd8 <HAL_PCD_SetAddress>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d816      	bhi.n	8007a00 <USBD_LL_SetUSBAddress+0x5c>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <USBD_LL_SetUSBAddress+0x34>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079e9 	.word	0x080079e9
 80079dc:	080079ef 	.word	0x080079ef
 80079e0:	080079f5 	.word	0x080079f5
 80079e4:	080079fb 	.word	0x080079fb
    case HAL_OK :
      usb_status = USBD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	e00b      	b.n	8007a06 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079ee:	2302      	movs	r3, #2
 80079f0:	73fb      	strb	r3, [r7, #15]
    break;
 80079f2:	e008      	b.n	8007a06 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
    break;
 80079f8:	e005      	b.n	8007a06 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079fa:	2302      	movs	r3, #2
 80079fc:	73fb      	strb	r3, [r7, #15]
    break;
 80079fe:	e002      	b.n	8007a06 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007a00:	2302      	movs	r3, #2
 8007a02:	73fb      	strb	r3, [r7, #15]
    break;
 8007a04:	bf00      	nop
  }
  return usb_status;  
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	72fb      	strb	r3, [r7, #11]
 8007a20:	4613      	mov	r3, r2
 8007a22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007a32:	893b      	ldrh	r3, [r7, #8]
 8007a34:	7af9      	ldrb	r1, [r7, #11]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	f7fa fa06 	bl	8001e48 <HAL_PCD_EP_Transmit>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007a40:	7dbb      	ldrb	r3, [r7, #22]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d816      	bhi.n	8007a74 <USBD_LL_Transmit+0x64>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <USBD_LL_Transmit+0x3c>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a63 	.word	0x08007a63
 8007a54:	08007a69 	.word	0x08007a69
 8007a58:	08007a6f 	.word	0x08007a6f
    case HAL_OK :
      usb_status = USBD_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	75fb      	strb	r3, [r7, #23]
    break;
 8007a60:	e00b      	b.n	8007a7a <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a62:	2302      	movs	r3, #2
 8007a64:	75fb      	strb	r3, [r7, #23]
    break;
 8007a66:	e008      	b.n	8007a7a <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
    break;
 8007a6c:	e005      	b.n	8007a7a <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	75fb      	strb	r3, [r7, #23]
    break;
 8007a72:	e002      	b.n	8007a7a <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	75fb      	strb	r3, [r7, #23]
    break;
 8007a78:	bf00      	nop
  }
  return usb_status;    
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	460b      	mov	r3, r1
 8007a92:	72fb      	strb	r3, [r7, #11]
 8007a94:	4613      	mov	r3, r2
 8007a96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	7af9      	ldrb	r1, [r7, #11]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	f7fa f968 	bl	8001d80 <HAL_PCD_EP_Receive>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007ab4:	7dbb      	ldrb	r3, [r7, #22]
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d816      	bhi.n	8007ae8 <USBD_LL_PrepareReceive+0x64>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBD_LL_PrepareReceive+0x3c>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad1 	.word	0x08007ad1
 8007ac4:	08007ad7 	.word	0x08007ad7
 8007ac8:	08007add 	.word	0x08007add
 8007acc:	08007ae3 	.word	0x08007ae3
    case HAL_OK :
      usb_status = USBD_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]
    break;
 8007ad4:	e00b      	b.n	8007aee <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	75fb      	strb	r3, [r7, #23]
    break;
 8007ada:	e008      	b.n	8007aee <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007adc:	2301      	movs	r3, #1
 8007ade:	75fb      	strb	r3, [r7, #23]
    break;
 8007ae0:	e005      	b.n	8007aee <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ae6:	e002      	b.n	8007aee <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	75fb      	strb	r3, [r7, #23]
    break;
 8007aec:	bf00      	nop
  }
  return usb_status; 
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa f980 	bl	8001e14 <HAL_PCD_EP_GetRxCount>
 8007b14:	4603      	mov	r3, r0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop

08007b20 <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	6039      	str	r1, [r7, #0]
 8007b2a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2212      	movs	r2, #18
 8007b30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b32:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	20000154 	.word	0x20000154

08007b44 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2204      	movs	r2, #4
 8007b54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b56:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	20000168 	.word	0x20000168

08007b68 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d105      	bne.n	8007b86 <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	4907      	ldr	r1, [pc, #28]	; (8007b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b7e:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b80:	f7fe fd98 	bl	80066b4 <USBD_GetString>
 8007b84:	e004      	b.n	8007b90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4904      	ldr	r1, [pc, #16]	; (8007b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b8a:	4805      	ldr	r0, [pc, #20]	; (8007ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b8c:	f7fe fd92 	bl	80066b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b90:	4b02      	ldr	r3, [pc, #8]	; (8007b9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000ec8 	.word	0x20000ec8
 8007ba0:	08008464 	.word	0x08008464

08007ba4 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	4904      	ldr	r1, [pc, #16]	; (8007bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bb4:	4804      	ldr	r0, [pc, #16]	; (8007bc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bb6:	f7fe fd7d 	bl	80066b4 <USBD_GetString>
  return USBD_StrDesc;
 8007bba:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000ec8 	.word	0x20000ec8
 8007bc8:	0800847c 	.word	0x0800847c

08007bcc <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d105      	bne.n	8007bea <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	4907      	ldr	r1, [pc, #28]	; (8007c00 <USBD_FS_SerialStrDescriptor+0x34>)
 8007be2:	4808      	ldr	r0, [pc, #32]	; (8007c04 <USBD_FS_SerialStrDescriptor+0x38>)
 8007be4:	f7fe fd66 	bl	80066b4 <USBD_GetString>
 8007be8:	e004      	b.n	8007bf4 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4904      	ldr	r1, [pc, #16]	; (8007c00 <USBD_FS_SerialStrDescriptor+0x34>)
 8007bee:	4805      	ldr	r0, [pc, #20]	; (8007c04 <USBD_FS_SerialStrDescriptor+0x38>)
 8007bf0:	f7fe fd60 	bl	80066b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bf4:	4b02      	ldr	r3, [pc, #8]	; (8007c00 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000ec8 	.word	0x20000ec8
 8007c04:	08008490 	.word	0x08008490

08007c08 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	6039      	str	r1, [r7, #0]
 8007c12:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d105      	bne.n	8007c26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	4907      	ldr	r1, [pc, #28]	; (8007c3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c1e:	4808      	ldr	r0, [pc, #32]	; (8007c40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c20:	f7fe fd48 	bl	80066b4 <USBD_GetString>
 8007c24:	e004      	b.n	8007c30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4904      	ldr	r1, [pc, #16]	; (8007c3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c2a:	4805      	ldr	r0, [pc, #20]	; (8007c40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c2c:	f7fe fd42 	bl	80066b4 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000ec8 	.word	0x20000ec8
 8007c40:	080084a0 	.word	0x080084a0

08007c44 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4907      	ldr	r1, [pc, #28]	; (8007c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c5a:	4808      	ldr	r0, [pc, #32]	; (8007c7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c5c:	f7fe fd2a 	bl	80066b4 <USBD_GetString>
 8007c60:	e004      	b.n	8007c6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4904      	ldr	r1, [pc, #16]	; (8007c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c66:	4805      	ldr	r0, [pc, #20]	; (8007c7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c68:	f7fe fd24 	bl	80066b4 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8007c6c:	4b02      	ldr	r3, [pc, #8]	; (8007c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000ec8 	.word	0x20000ec8
 8007c7c:	080084ac 	.word	0x080084ac

08007c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007cb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007c86:	e003      	b.n	8007c90 <LoopCopyDataInit>

08007c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007c88:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007c8e:	3104      	adds	r1, #4

08007c90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007c90:	480b      	ldr	r0, [pc, #44]	; (8007cc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007c92:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007c98:	d3f6      	bcc.n	8007c88 <CopyDataInit>
  ldr  r2, =_sbss
 8007c9a:	4a0b      	ldr	r2, [pc, #44]	; (8007cc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007c9c:	e002      	b.n	8007ca4 <LoopFillZerobss>

08007c9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007c9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007ca0:	f842 3b04 	str.w	r3, [r2], #4

08007ca4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007ca4:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ca8:	d3f9      	bcc.n	8007c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007caa:	f7ff f9ab 	bl	8007004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007cae:	f000 f811 	bl	8007cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007cb2:	f7fe fff9 	bl	8006ca8 <main>
  bx  lr    
 8007cb6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007cb8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8007cbc:	080084e0 	.word	0x080084e0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007cc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007cc4:	20000670 	.word	0x20000670
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8007cc8:	20000670 	.word	0x20000670
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007ccc:	200010cc 	.word	0x200010cc

08007cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007cd0:	e7fe      	b.n	8007cd0 <ADC_IRQHandler>
	...

08007cd4 <__libc_init_array>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	4b0e      	ldr	r3, [pc, #56]	; (8007d10 <__libc_init_array+0x3c>)
 8007cd8:	4c0e      	ldr	r4, [pc, #56]	; (8007d14 <__libc_init_array+0x40>)
 8007cda:	1ae4      	subs	r4, r4, r3
 8007cdc:	10a4      	asrs	r4, r4, #2
 8007cde:	2500      	movs	r5, #0
 8007ce0:	461e      	mov	r6, r3
 8007ce2:	42a5      	cmp	r5, r4
 8007ce4:	d004      	beq.n	8007cf0 <__libc_init_array+0x1c>
 8007ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cea:	4798      	blx	r3
 8007cec:	3501      	adds	r5, #1
 8007cee:	e7f8      	b.n	8007ce2 <__libc_init_array+0xe>
 8007cf0:	f000 fba4 	bl	800843c <_init>
 8007cf4:	4c08      	ldr	r4, [pc, #32]	; (8007d18 <__libc_init_array+0x44>)
 8007cf6:	4b09      	ldr	r3, [pc, #36]	; (8007d1c <__libc_init_array+0x48>)
 8007cf8:	1ae4      	subs	r4, r4, r3
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	461e      	mov	r6, r3
 8007d00:	42a5      	cmp	r5, r4
 8007d02:	d004      	beq.n	8007d0e <__libc_init_array+0x3a>
 8007d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d08:	4798      	blx	r3
 8007d0a:	3501      	adds	r5, #1
 8007d0c:	e7f8      	b.n	8007d00 <__libc_init_array+0x2c>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	080084d8 	.word	0x080084d8
 8007d14:	080084d8 	.word	0x080084d8
 8007d18:	080084dc 	.word	0x080084dc
 8007d1c:	080084d8 	.word	0x080084d8

08007d20 <malloc>:
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <malloc+0xc>)
 8007d22:	4601      	mov	r1, r0
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	f000 b80b 	b.w	8007d40 <_malloc_r>
 8007d2a:	bf00      	nop
 8007d2c:	2000066c 	.word	0x2000066c

08007d30 <free>:
 8007d30:	4b02      	ldr	r3, [pc, #8]	; (8007d3c <free+0xc>)
 8007d32:	4601      	mov	r1, r0
 8007d34:	6818      	ldr	r0, [r3, #0]
 8007d36:	f000 bab5 	b.w	80082a4 <_free_r>
 8007d3a:	bf00      	nop
 8007d3c:	2000066c 	.word	0x2000066c

08007d40 <_malloc_r>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	f101 040b 	add.w	r4, r1, #11
 8007d48:	2c16      	cmp	r4, #22
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	4681      	mov	r9, r0
 8007d4e:	d903      	bls.n	8007d58 <_malloc_r+0x18>
 8007d50:	f034 0407 	bics.w	r4, r4, #7
 8007d54:	d501      	bpl.n	8007d5a <_malloc_r+0x1a>
 8007d56:	e002      	b.n	8007d5e <_malloc_r+0x1e>
 8007d58:	2410      	movs	r4, #16
 8007d5a:	428c      	cmp	r4, r1
 8007d5c:	d203      	bcs.n	8007d66 <_malloc_r+0x26>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	f8c9 3000 	str.w	r3, [r9]
 8007d64:	e1ea      	b.n	800813c <_malloc_r+0x3fc>
 8007d66:	4648      	mov	r0, r9
 8007d68:	f000 fa0a 	bl	8008180 <__malloc_lock>
 8007d6c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007d70:	4d9e      	ldr	r5, [pc, #632]	; (8007fec <_malloc_r+0x2ac>)
 8007d72:	d217      	bcs.n	8007da4 <_malloc_r+0x64>
 8007d74:	f104 0208 	add.w	r2, r4, #8
 8007d78:	442a      	add	r2, r5
 8007d7a:	f1a2 0108 	sub.w	r1, r2, #8
 8007d7e:	6856      	ldr	r6, [r2, #4]
 8007d80:	428e      	cmp	r6, r1
 8007d82:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007d86:	d102      	bne.n	8007d8e <_malloc_r+0x4e>
 8007d88:	68d6      	ldr	r6, [r2, #12]
 8007d8a:	42b2      	cmp	r2, r6
 8007d8c:	d008      	beq.n	8007da0 <_malloc_r+0x60>
 8007d8e:	6873      	ldr	r3, [r6, #4]
 8007d90:	68f2      	ldr	r2, [r6, #12]
 8007d92:	68b1      	ldr	r1, [r6, #8]
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	60ca      	str	r2, [r1, #12]
 8007d9a:	4433      	add	r3, r6
 8007d9c:	6091      	str	r1, [r2, #8]
 8007d9e:	e02f      	b.n	8007e00 <_malloc_r+0xc0>
 8007da0:	3302      	adds	r3, #2
 8007da2:	e03d      	b.n	8007e20 <_malloc_r+0xe0>
 8007da4:	0a63      	lsrs	r3, r4, #9
 8007da6:	d01a      	beq.n	8007dde <_malloc_r+0x9e>
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d802      	bhi.n	8007db2 <_malloc_r+0x72>
 8007dac:	09a3      	lsrs	r3, r4, #6
 8007dae:	3338      	adds	r3, #56	; 0x38
 8007db0:	e018      	b.n	8007de4 <_malloc_r+0xa4>
 8007db2:	2b14      	cmp	r3, #20
 8007db4:	d801      	bhi.n	8007dba <_malloc_r+0x7a>
 8007db6:	335b      	adds	r3, #91	; 0x5b
 8007db8:	e014      	b.n	8007de4 <_malloc_r+0xa4>
 8007dba:	2b54      	cmp	r3, #84	; 0x54
 8007dbc:	d802      	bhi.n	8007dc4 <_malloc_r+0x84>
 8007dbe:	0b23      	lsrs	r3, r4, #12
 8007dc0:	336e      	adds	r3, #110	; 0x6e
 8007dc2:	e00f      	b.n	8007de4 <_malloc_r+0xa4>
 8007dc4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007dc8:	d802      	bhi.n	8007dd0 <_malloc_r+0x90>
 8007dca:	0be3      	lsrs	r3, r4, #15
 8007dcc:	3377      	adds	r3, #119	; 0x77
 8007dce:	e009      	b.n	8007de4 <_malloc_r+0xa4>
 8007dd0:	f240 5254 	movw	r2, #1364	; 0x554
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d804      	bhi.n	8007de2 <_malloc_r+0xa2>
 8007dd8:	0ca3      	lsrs	r3, r4, #18
 8007dda:	337c      	adds	r3, #124	; 0x7c
 8007ddc:	e002      	b.n	8007de4 <_malloc_r+0xa4>
 8007dde:	233f      	movs	r3, #63	; 0x3f
 8007de0:	e000      	b.n	8007de4 <_malloc_r+0xa4>
 8007de2:	237e      	movs	r3, #126	; 0x7e
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007dea:	f1a2 0008 	sub.w	r0, r2, #8
 8007dee:	6856      	ldr	r6, [r2, #4]
 8007df0:	e00c      	b.n	8007e0c <_malloc_r+0xcc>
 8007df2:	2900      	cmp	r1, #0
 8007df4:	68f1      	ldr	r1, [r6, #12]
 8007df6:	db08      	blt.n	8007e0a <_malloc_r+0xca>
 8007df8:	68b3      	ldr	r3, [r6, #8]
 8007dfa:	60d9      	str	r1, [r3, #12]
 8007dfc:	608b      	str	r3, [r1, #8]
 8007dfe:	18b3      	adds	r3, r6, r2
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	605a      	str	r2, [r3, #4]
 8007e08:	e1a3      	b.n	8008152 <_malloc_r+0x412>
 8007e0a:	460e      	mov	r6, r1
 8007e0c:	4286      	cmp	r6, r0
 8007e0e:	d006      	beq.n	8007e1e <_malloc_r+0xde>
 8007e10:	6872      	ldr	r2, [r6, #4]
 8007e12:	f022 0203 	bic.w	r2, r2, #3
 8007e16:	1b11      	subs	r1, r2, r4
 8007e18:	290f      	cmp	r1, #15
 8007e1a:	ddea      	ble.n	8007df2 <_malloc_r+0xb2>
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	3301      	adds	r3, #1
 8007e20:	4a72      	ldr	r2, [pc, #456]	; (8007fec <_malloc_r+0x2ac>)
 8007e22:	692e      	ldr	r6, [r5, #16]
 8007e24:	f102 0708 	add.w	r7, r2, #8
 8007e28:	42be      	cmp	r6, r7
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	d079      	beq.n	8007f22 <_malloc_r+0x1e2>
 8007e2e:	6870      	ldr	r0, [r6, #4]
 8007e30:	f020 0003 	bic.w	r0, r0, #3
 8007e34:	ebc4 0e00 	rsb	lr, r4, r0
 8007e38:	f1be 0f0f 	cmp.w	lr, #15
 8007e3c:	dd0d      	ble.n	8007e5a <_malloc_r+0x11a>
 8007e3e:	1933      	adds	r3, r6, r4
 8007e40:	f044 0401 	orr.w	r4, r4, #1
 8007e44:	6074      	str	r4, [r6, #4]
 8007e46:	6153      	str	r3, [r2, #20]
 8007e48:	6113      	str	r3, [r2, #16]
 8007e4a:	f04e 0201 	orr.w	r2, lr, #1
 8007e4e:	60df      	str	r7, [r3, #12]
 8007e50:	609f      	str	r7, [r3, #8]
 8007e52:	605a      	str	r2, [r3, #4]
 8007e54:	f843 e00e 	str.w	lr, [r3, lr]
 8007e58:	e17b      	b.n	8008152 <_malloc_r+0x412>
 8007e5a:	f1be 0f00 	cmp.w	lr, #0
 8007e5e:	6157      	str	r7, [r2, #20]
 8007e60:	6117      	str	r7, [r2, #16]
 8007e62:	db05      	blt.n	8007e70 <_malloc_r+0x130>
 8007e64:	4430      	add	r0, r6
 8007e66:	6843      	ldr	r3, [r0, #4]
 8007e68:	f043 0301 	orr.w	r3, r3, #1
 8007e6c:	6043      	str	r3, [r0, #4]
 8007e6e:	e170      	b.n	8008152 <_malloc_r+0x412>
 8007e70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007e74:	d215      	bcs.n	8007ea2 <_malloc_r+0x162>
 8007e76:	08c0      	lsrs	r0, r0, #3
 8007e78:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8007e7c:	2701      	movs	r7, #1
 8007e7e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8007e82:	6857      	ldr	r7, [r2, #4]
 8007e84:	3001      	adds	r0, #1
 8007e86:	ea4e 0707 	orr.w	r7, lr, r7
 8007e8a:	6057      	str	r7, [r2, #4]
 8007e8c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8007e90:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8007e94:	f8c6 e008 	str.w	lr, [r6, #8]
 8007e98:	3f08      	subs	r7, #8
 8007e9a:	60f7      	str	r7, [r6, #12]
 8007e9c:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8007ea0:	e03d      	b.n	8007f1e <_malloc_r+0x1de>
 8007ea2:	0a42      	lsrs	r2, r0, #9
 8007ea4:	2a04      	cmp	r2, #4
 8007ea6:	d802      	bhi.n	8007eae <_malloc_r+0x16e>
 8007ea8:	0982      	lsrs	r2, r0, #6
 8007eaa:	3238      	adds	r2, #56	; 0x38
 8007eac:	e015      	b.n	8007eda <_malloc_r+0x19a>
 8007eae:	2a14      	cmp	r2, #20
 8007eb0:	d801      	bhi.n	8007eb6 <_malloc_r+0x176>
 8007eb2:	325b      	adds	r2, #91	; 0x5b
 8007eb4:	e011      	b.n	8007eda <_malloc_r+0x19a>
 8007eb6:	2a54      	cmp	r2, #84	; 0x54
 8007eb8:	d802      	bhi.n	8007ec0 <_malloc_r+0x180>
 8007eba:	0b02      	lsrs	r2, r0, #12
 8007ebc:	326e      	adds	r2, #110	; 0x6e
 8007ebe:	e00c      	b.n	8007eda <_malloc_r+0x19a>
 8007ec0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007ec4:	d802      	bhi.n	8007ecc <_malloc_r+0x18c>
 8007ec6:	0bc2      	lsrs	r2, r0, #15
 8007ec8:	3277      	adds	r2, #119	; 0x77
 8007eca:	e006      	b.n	8007eda <_malloc_r+0x19a>
 8007ecc:	f240 5754 	movw	r7, #1364	; 0x554
 8007ed0:	42ba      	cmp	r2, r7
 8007ed2:	bf9a      	itte	ls
 8007ed4:	0c82      	lsrls	r2, r0, #18
 8007ed6:	327c      	addls	r2, #124	; 0x7c
 8007ed8:	227e      	movhi	r2, #126	; 0x7e
 8007eda:	1c57      	adds	r7, r2, #1
 8007edc:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007ee0:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007ee4:	f8df c104 	ldr.w	ip, [pc, #260]	; 8007fec <_malloc_r+0x2ac>
 8007ee8:	45be      	cmp	lr, r7
 8007eea:	d10d      	bne.n	8007f08 <_malloc_r+0x1c8>
 8007eec:	2001      	movs	r0, #1
 8007eee:	1092      	asrs	r2, r2, #2
 8007ef0:	fa00 f202 	lsl.w	r2, r0, r2
 8007ef4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8007ef8:	4310      	orrs	r0, r2
 8007efa:	f8cc 0004 	str.w	r0, [ip, #4]
 8007efe:	4672      	mov	r2, lr
 8007f00:	e009      	b.n	8007f16 <_malloc_r+0x1d6>
 8007f02:	68bf      	ldr	r7, [r7, #8]
 8007f04:	45be      	cmp	lr, r7
 8007f06:	d004      	beq.n	8007f12 <_malloc_r+0x1d2>
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	f022 0203 	bic.w	r2, r2, #3
 8007f0e:	4290      	cmp	r0, r2
 8007f10:	d3f7      	bcc.n	8007f02 <_malloc_r+0x1c2>
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	46be      	mov	lr, r7
 8007f16:	60f2      	str	r2, [r6, #12]
 8007f18:	f8c6 e008 	str.w	lr, [r6, #8]
 8007f1c:	6096      	str	r6, [r2, #8]
 8007f1e:	f8ce 600c 	str.w	r6, [lr, #12]
 8007f22:	2001      	movs	r0, #1
 8007f24:	109a      	asrs	r2, r3, #2
 8007f26:	fa00 f202 	lsl.w	r2, r0, r2
 8007f2a:	6868      	ldr	r0, [r5, #4]
 8007f2c:	4282      	cmp	r2, r0
 8007f2e:	d85f      	bhi.n	8007ff0 <_malloc_r+0x2b0>
 8007f30:	4202      	tst	r2, r0
 8007f32:	d106      	bne.n	8007f42 <_malloc_r+0x202>
 8007f34:	f023 0303 	bic.w	r3, r3, #3
 8007f38:	0052      	lsls	r2, r2, #1
 8007f3a:	4202      	tst	r2, r0
 8007f3c:	f103 0304 	add.w	r3, r3, #4
 8007f40:	d0fa      	beq.n	8007f38 <_malloc_r+0x1f8>
 8007f42:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8007f46:	46c2      	mov	sl, r8
 8007f48:	469c      	mov	ip, r3
 8007f4a:	f8da 600c 	ldr.w	r6, [sl, #12]
 8007f4e:	4556      	cmp	r6, sl
 8007f50:	d02c      	beq.n	8007fac <_malloc_r+0x26c>
 8007f52:	6870      	ldr	r0, [r6, #4]
 8007f54:	68f7      	ldr	r7, [r6, #12]
 8007f56:	f020 0003 	bic.w	r0, r0, #3
 8007f5a:	ebc4 0e00 	rsb	lr, r4, r0
 8007f5e:	f1be 0f0f 	cmp.w	lr, #15
 8007f62:	dd11      	ble.n	8007f88 <_malloc_r+0x248>
 8007f64:	1933      	adds	r3, r6, r4
 8007f66:	f044 0401 	orr.w	r4, r4, #1
 8007f6a:	6074      	str	r4, [r6, #4]
 8007f6c:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8007f70:	60d7      	str	r7, [r2, #12]
 8007f72:	60ba      	str	r2, [r7, #8]
 8007f74:	f04e 0201 	orr.w	r2, lr, #1
 8007f78:	616b      	str	r3, [r5, #20]
 8007f7a:	612b      	str	r3, [r5, #16]
 8007f7c:	60d9      	str	r1, [r3, #12]
 8007f7e:	6099      	str	r1, [r3, #8]
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	f843 e00e 	str.w	lr, [r3, lr]
 8007f86:	e00b      	b.n	8007fa0 <_malloc_r+0x260>
 8007f88:	f1be 0f00 	cmp.w	lr, #0
 8007f8c:	db0c      	blt.n	8007fa8 <_malloc_r+0x268>
 8007f8e:	1833      	adds	r3, r6, r0
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	605a      	str	r2, [r3, #4]
 8007f98:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007f9c:	60df      	str	r7, [r3, #12]
 8007f9e:	60bb      	str	r3, [r7, #8]
 8007fa0:	4648      	mov	r0, r9
 8007fa2:	f000 f8ee 	bl	8008182 <__malloc_unlock>
 8007fa6:	e0d8      	b.n	800815a <_malloc_r+0x41a>
 8007fa8:	463e      	mov	r6, r7
 8007faa:	e7d0      	b.n	8007f4e <_malloc_r+0x20e>
 8007fac:	f10c 0c01 	add.w	ip, ip, #1
 8007fb0:	f01c 0f03 	tst.w	ip, #3
 8007fb4:	f10a 0a08 	add.w	sl, sl, #8
 8007fb8:	d1c7      	bne.n	8007f4a <_malloc_r+0x20a>
 8007fba:	0798      	lsls	r0, r3, #30
 8007fbc:	d104      	bne.n	8007fc8 <_malloc_r+0x288>
 8007fbe:	686b      	ldr	r3, [r5, #4]
 8007fc0:	ea23 0302 	bic.w	r3, r3, r2
 8007fc4:	606b      	str	r3, [r5, #4]
 8007fc6:	e005      	b.n	8007fd4 <_malloc_r+0x294>
 8007fc8:	f858 0908 	ldr.w	r0, [r8], #-8
 8007fcc:	4580      	cmp	r8, r0
 8007fce:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fd2:	d0f2      	beq.n	8007fba <_malloc_r+0x27a>
 8007fd4:	6868      	ldr	r0, [r5, #4]
 8007fd6:	0052      	lsls	r2, r2, #1
 8007fd8:	4282      	cmp	r2, r0
 8007fda:	d809      	bhi.n	8007ff0 <_malloc_r+0x2b0>
 8007fdc:	b142      	cbz	r2, 8007ff0 <_malloc_r+0x2b0>
 8007fde:	4663      	mov	r3, ip
 8007fe0:	4202      	tst	r2, r0
 8007fe2:	d1ae      	bne.n	8007f42 <_malloc_r+0x202>
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	0052      	lsls	r2, r2, #1
 8007fe8:	e7fa      	b.n	8007fe0 <_malloc_r+0x2a0>
 8007fea:	bf00      	nop
 8007fec:	2000016c 	.word	0x2000016c
 8007ff0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007ff4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007ff8:	f026 0603 	bic.w	r6, r6, #3
 8007ffc:	42b4      	cmp	r4, r6
 8007ffe:	d803      	bhi.n	8008008 <_malloc_r+0x2c8>
 8008000:	1b33      	subs	r3, r6, r4
 8008002:	2b0f      	cmp	r3, #15
 8008004:	f300 809c 	bgt.w	8008140 <_malloc_r+0x400>
 8008008:	4a56      	ldr	r2, [pc, #344]	; (8008164 <_malloc_r+0x424>)
 800800a:	4957      	ldr	r1, [pc, #348]	; (8008168 <_malloc_r+0x428>)
 800800c:	6812      	ldr	r2, [r2, #0]
 800800e:	6808      	ldr	r0, [r1, #0]
 8008010:	9101      	str	r1, [sp, #4]
 8008012:	f102 0810 	add.w	r8, r2, #16
 8008016:	4a55      	ldr	r2, [pc, #340]	; (800816c <_malloc_r+0x42c>)
 8008018:	9203      	str	r2, [sp, #12]
 800801a:	3001      	adds	r0, #1
 800801c:	bf18      	it	ne
 800801e:	f102 31ff 	addne.w	r1, r2, #4294967295
 8008022:	44a0      	add	r8, r4
 8008024:	bf1e      	ittt	ne
 8008026:	4488      	addne	r8, r1
 8008028:	4251      	negne	r1, r2
 800802a:	ea01 0808 	andne.w	r8, r1, r8
 800802e:	eb0b 0306 	add.w	r3, fp, r6
 8008032:	4641      	mov	r1, r8
 8008034:	4648      	mov	r0, r9
 8008036:	9302      	str	r3, [sp, #8]
 8008038:	f000 f8a4 	bl	8008184 <_sbrk_r>
 800803c:	1c42      	adds	r2, r0, #1
 800803e:	4607      	mov	r7, r0
 8008040:	d06f      	beq.n	8008122 <_malloc_r+0x3e2>
 8008042:	9b02      	ldr	r3, [sp, #8]
 8008044:	9a03      	ldr	r2, [sp, #12]
 8008046:	4283      	cmp	r3, r0
 8008048:	d901      	bls.n	800804e <_malloc_r+0x30e>
 800804a:	45ab      	cmp	fp, r5
 800804c:	d169      	bne.n	8008122 <_malloc_r+0x3e2>
 800804e:	f8df a128 	ldr.w	sl, [pc, #296]	; 8008178 <_malloc_r+0x438>
 8008052:	f8df c128 	ldr.w	ip, [pc, #296]	; 800817c <_malloc_r+0x43c>
 8008056:	f8da 0000 	ldr.w	r0, [sl]
 800805a:	42bb      	cmp	r3, r7
 800805c:	4440      	add	r0, r8
 800805e:	f8ca 0000 	str.w	r0, [sl]
 8008062:	d108      	bne.n	8008076 <_malloc_r+0x336>
 8008064:	ea13 0f0c 	tst.w	r3, ip
 8008068:	d105      	bne.n	8008076 <_malloc_r+0x336>
 800806a:	68ab      	ldr	r3, [r5, #8]
 800806c:	4446      	add	r6, r8
 800806e:	f046 0601 	orr.w	r6, r6, #1
 8008072:	605e      	str	r6, [r3, #4]
 8008074:	e049      	b.n	800810a <_malloc_r+0x3ca>
 8008076:	9901      	ldr	r1, [sp, #4]
 8008078:	f8d1 e000 	ldr.w	lr, [r1]
 800807c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008080:	bf15      	itete	ne
 8008082:	1afb      	subne	r3, r7, r3
 8008084:	4b38      	ldreq	r3, [pc, #224]	; (8008168 <_malloc_r+0x428>)
 8008086:	181b      	addne	r3, r3, r0
 8008088:	601f      	streq	r7, [r3, #0]
 800808a:	bf18      	it	ne
 800808c:	f8ca 3000 	strne.w	r3, [sl]
 8008090:	f017 0307 	ands.w	r3, r7, #7
 8008094:	bf1c      	itt	ne
 8008096:	f1c3 0308 	rsbne	r3, r3, #8
 800809a:	18ff      	addne	r7, r7, r3
 800809c:	44b8      	add	r8, r7
 800809e:	441a      	add	r2, r3
 80080a0:	ea08 080c 	and.w	r8, r8, ip
 80080a4:	ebc8 0802 	rsb	r8, r8, r2
 80080a8:	4641      	mov	r1, r8
 80080aa:	4648      	mov	r0, r9
 80080ac:	f000 f86a 	bl	8008184 <_sbrk_r>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	bf04      	itt	eq
 80080b4:	4638      	moveq	r0, r7
 80080b6:	f04f 0800 	moveq.w	r8, #0
 80080ba:	f8da 3000 	ldr.w	r3, [sl]
 80080be:	60af      	str	r7, [r5, #8]
 80080c0:	1bc2      	subs	r2, r0, r7
 80080c2:	4442      	add	r2, r8
 80080c4:	4443      	add	r3, r8
 80080c6:	f042 0201 	orr.w	r2, r2, #1
 80080ca:	45ab      	cmp	fp, r5
 80080cc:	f8ca 3000 	str.w	r3, [sl]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	d01a      	beq.n	800810a <_malloc_r+0x3ca>
 80080d4:	2e0f      	cmp	r6, #15
 80080d6:	d802      	bhi.n	80080de <_malloc_r+0x39e>
 80080d8:	2301      	movs	r3, #1
 80080da:	607b      	str	r3, [r7, #4]
 80080dc:	e021      	b.n	8008122 <_malloc_r+0x3e2>
 80080de:	f8db 3004 	ldr.w	r3, [fp, #4]
 80080e2:	3e0c      	subs	r6, #12
 80080e4:	f026 0607 	bic.w	r6, r6, #7
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	4333      	orrs	r3, r6
 80080ee:	f8cb 3004 	str.w	r3, [fp, #4]
 80080f2:	eb0b 0306 	add.w	r3, fp, r6
 80080f6:	2205      	movs	r2, #5
 80080f8:	2e0f      	cmp	r6, #15
 80080fa:	605a      	str	r2, [r3, #4]
 80080fc:	609a      	str	r2, [r3, #8]
 80080fe:	d904      	bls.n	800810a <_malloc_r+0x3ca>
 8008100:	f10b 0108 	add.w	r1, fp, #8
 8008104:	4648      	mov	r0, r9
 8008106:	f000 f8cd 	bl	80082a4 <_free_r>
 800810a:	4a19      	ldr	r2, [pc, #100]	; (8008170 <_malloc_r+0x430>)
 800810c:	f8da 3000 	ldr.w	r3, [sl]
 8008110:	6811      	ldr	r1, [r2, #0]
 8008112:	428b      	cmp	r3, r1
 8008114:	bf88      	it	hi
 8008116:	6013      	strhi	r3, [r2, #0]
 8008118:	4a16      	ldr	r2, [pc, #88]	; (8008174 <_malloc_r+0x434>)
 800811a:	6811      	ldr	r1, [r2, #0]
 800811c:	428b      	cmp	r3, r1
 800811e:	bf88      	it	hi
 8008120:	6013      	strhi	r3, [r2, #0]
 8008122:	68ab      	ldr	r3, [r5, #8]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	f022 0203 	bic.w	r2, r2, #3
 800812a:	4294      	cmp	r4, r2
 800812c:	eba2 0304 	sub.w	r3, r2, r4
 8008130:	d801      	bhi.n	8008136 <_malloc_r+0x3f6>
 8008132:	2b0f      	cmp	r3, #15
 8008134:	dc04      	bgt.n	8008140 <_malloc_r+0x400>
 8008136:	4648      	mov	r0, r9
 8008138:	f000 f823 	bl	8008182 <__malloc_unlock>
 800813c:	2600      	movs	r6, #0
 800813e:	e00c      	b.n	800815a <_malloc_r+0x41a>
 8008140:	68ae      	ldr	r6, [r5, #8]
 8008142:	f044 0201 	orr.w	r2, r4, #1
 8008146:	4434      	add	r4, r6
 8008148:	f043 0301 	orr.w	r3, r3, #1
 800814c:	6072      	str	r2, [r6, #4]
 800814e:	60ac      	str	r4, [r5, #8]
 8008150:	6063      	str	r3, [r4, #4]
 8008152:	4648      	mov	r0, r9
 8008154:	f000 f815 	bl	8008182 <__malloc_unlock>
 8008158:	3608      	adds	r6, #8
 800815a:	4630      	mov	r0, r6
 800815c:	b005      	add	sp, #20
 800815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008162:	bf00      	nop
 8008164:	20000698 	.word	0x20000698
 8008168:	20000578 	.word	0x20000578
 800816c:	00000080 	.word	0x00000080
 8008170:	20000694 	.word	0x20000694
 8008174:	20000690 	.word	0x20000690
 8008178:	2000069c 	.word	0x2000069c
 800817c:	0000007f 	.word	0x0000007f

08008180 <__malloc_lock>:
 8008180:	4770      	bx	lr

08008182 <__malloc_unlock>:
 8008182:	4770      	bx	lr

08008184 <_sbrk_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4c06      	ldr	r4, [pc, #24]	; (80081a0 <_sbrk_r+0x1c>)
 8008188:	2300      	movs	r3, #0
 800818a:	4605      	mov	r5, r0
 800818c:	4608      	mov	r0, r1
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	f000 f946 	bl	8008420 <_sbrk>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_sbrk_r+0x1a>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	b103      	cbz	r3, 800819e <_sbrk_r+0x1a>
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	200010c8 	.word	0x200010c8

080081a4 <strlcpy>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	460b      	mov	r3, r1
 80081a8:	b152      	cbz	r2, 80081c0 <strlcpy+0x1c>
 80081aa:	3a01      	subs	r2, #1
 80081ac:	d006      	beq.n	80081bc <strlcpy+0x18>
 80081ae:	f813 4b01 	ldrb.w	r4, [r3], #1
 80081b2:	f800 4b01 	strb.w	r4, [r0], #1
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d1f7      	bne.n	80081aa <strlcpy+0x6>
 80081ba:	e005      	b.n	80081c8 <strlcpy+0x24>
 80081bc:	2200      	movs	r2, #0
 80081be:	7002      	strb	r2, [r0, #0]
 80081c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	d1fb      	bne.n	80081c0 <strlcpy+0x1c>
 80081c8:	1a58      	subs	r0, r3, r1
 80081ca:	3801      	subs	r0, #1
 80081cc:	bd10      	pop	{r4, pc}

080081ce <strncmp>:
 80081ce:	b530      	push	{r4, r5, lr}
 80081d0:	b182      	cbz	r2, 80081f4 <strncmp+0x26>
 80081d2:	1e45      	subs	r5, r0, #1
 80081d4:	3901      	subs	r1, #1
 80081d6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80081da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081de:	42a3      	cmp	r3, r4
 80081e0:	d106      	bne.n	80081f0 <strncmp+0x22>
 80081e2:	43ec      	mvns	r4, r5
 80081e4:	4414      	add	r4, r2
 80081e6:	42e0      	cmn	r0, r4
 80081e8:	d001      	beq.n	80081ee <strncmp+0x20>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f3      	bne.n	80081d6 <strncmp+0x8>
 80081ee:	461c      	mov	r4, r3
 80081f0:	1b18      	subs	r0, r3, r4
 80081f2:	bd30      	pop	{r4, r5, pc}
 80081f4:	4610      	mov	r0, r2
 80081f6:	bd30      	pop	{r4, r5, pc}

080081f8 <_malloc_trim_r>:
 80081f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081fc:	4f25      	ldr	r7, [pc, #148]	; (8008294 <_malloc_trim_r+0x9c>)
 80081fe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80082a0 <_malloc_trim_r+0xa8>
 8008202:	4689      	mov	r9, r1
 8008204:	4606      	mov	r6, r0
 8008206:	f7ff ffbb 	bl	8008180 <__malloc_lock>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	685d      	ldr	r5, [r3, #4]
 800820e:	f1a8 0411 	sub.w	r4, r8, #17
 8008212:	f025 0503 	bic.w	r5, r5, #3
 8008216:	442c      	add	r4, r5
 8008218:	ebc9 0404 	rsb	r4, r9, r4
 800821c:	fbb4 f4f8 	udiv	r4, r4, r8
 8008220:	3c01      	subs	r4, #1
 8008222:	fb08 f404 	mul.w	r4, r8, r4
 8008226:	4544      	cmp	r4, r8
 8008228:	da05      	bge.n	8008236 <_malloc_trim_r+0x3e>
 800822a:	4630      	mov	r0, r6
 800822c:	f7ff ffa9 	bl	8008182 <__malloc_unlock>
 8008230:	2000      	movs	r0, #0
 8008232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008236:	2100      	movs	r1, #0
 8008238:	4630      	mov	r0, r6
 800823a:	f7ff ffa3 	bl	8008184 <_sbrk_r>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	442b      	add	r3, r5
 8008242:	4298      	cmp	r0, r3
 8008244:	d1f1      	bne.n	800822a <_malloc_trim_r+0x32>
 8008246:	4261      	negs	r1, r4
 8008248:	4630      	mov	r0, r6
 800824a:	f7ff ff9b 	bl	8008184 <_sbrk_r>
 800824e:	3001      	adds	r0, #1
 8008250:	d110      	bne.n	8008274 <_malloc_trim_r+0x7c>
 8008252:	2100      	movs	r1, #0
 8008254:	4630      	mov	r0, r6
 8008256:	f7ff ff95 	bl	8008184 <_sbrk_r>
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	1a83      	subs	r3, r0, r2
 800825e:	2b0f      	cmp	r3, #15
 8008260:	dde3      	ble.n	800822a <_malloc_trim_r+0x32>
 8008262:	490d      	ldr	r1, [pc, #52]	; (8008298 <_malloc_trim_r+0xa0>)
 8008264:	6809      	ldr	r1, [r1, #0]
 8008266:	1a40      	subs	r0, r0, r1
 8008268:	490c      	ldr	r1, [pc, #48]	; (800829c <_malloc_trim_r+0xa4>)
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	6008      	str	r0, [r1, #0]
 8008270:	6053      	str	r3, [r2, #4]
 8008272:	e7da      	b.n	800822a <_malloc_trim_r+0x32>
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4a09      	ldr	r2, [pc, #36]	; (800829c <_malloc_trim_r+0xa4>)
 8008278:	1b2d      	subs	r5, r5, r4
 800827a:	f045 0501 	orr.w	r5, r5, #1
 800827e:	605d      	str	r5, [r3, #4]
 8008280:	6813      	ldr	r3, [r2, #0]
 8008282:	4630      	mov	r0, r6
 8008284:	1b1c      	subs	r4, r3, r4
 8008286:	6014      	str	r4, [r2, #0]
 8008288:	f7ff ff7b 	bl	8008182 <__malloc_unlock>
 800828c:	2001      	movs	r0, #1
 800828e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008292:	bf00      	nop
 8008294:	2000016c 	.word	0x2000016c
 8008298:	20000578 	.word	0x20000578
 800829c:	2000069c 	.word	0x2000069c
 80082a0:	00000080 	.word	0x00000080

080082a4 <_free_r>:
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	4604      	mov	r4, r0
 80082aa:	4688      	mov	r8, r1
 80082ac:	2900      	cmp	r1, #0
 80082ae:	f000 80ad 	beq.w	800840c <_free_r+0x168>
 80082b2:	f7ff ff65 	bl	8008180 <__malloc_lock>
 80082b6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80082ba:	4d55      	ldr	r5, [pc, #340]	; (8008410 <_free_r+0x16c>)
 80082bc:	f022 0001 	bic.w	r0, r2, #1
 80082c0:	f1a8 0308 	sub.w	r3, r8, #8
 80082c4:	181f      	adds	r7, r3, r0
 80082c6:	68a9      	ldr	r1, [r5, #8]
 80082c8:	687e      	ldr	r6, [r7, #4]
 80082ca:	428f      	cmp	r7, r1
 80082cc:	f026 0603 	bic.w	r6, r6, #3
 80082d0:	f002 0201 	and.w	r2, r2, #1
 80082d4:	d11b      	bne.n	800830e <_free_r+0x6a>
 80082d6:	4430      	add	r0, r6
 80082d8:	b93a      	cbnz	r2, 80082ea <_free_r+0x46>
 80082da:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	4410      	add	r0, r2
 80082e2:	6899      	ldr	r1, [r3, #8]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	60ca      	str	r2, [r1, #12]
 80082e8:	6091      	str	r1, [r2, #8]
 80082ea:	f040 0201 	orr.w	r2, r0, #1
 80082ee:	605a      	str	r2, [r3, #4]
 80082f0:	60ab      	str	r3, [r5, #8]
 80082f2:	4b48      	ldr	r3, [pc, #288]	; (8008414 <_free_r+0x170>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4298      	cmp	r0, r3
 80082f8:	d304      	bcc.n	8008304 <_free_r+0x60>
 80082fa:	4b47      	ldr	r3, [pc, #284]	; (8008418 <_free_r+0x174>)
 80082fc:	4620      	mov	r0, r4
 80082fe:	6819      	ldr	r1, [r3, #0]
 8008300:	f7ff ff7a 	bl	80081f8 <_malloc_trim_r>
 8008304:	4620      	mov	r0, r4
 8008306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830a:	f7ff bf3a 	b.w	8008182 <__malloc_unlock>
 800830e:	607e      	str	r6, [r7, #4]
 8008310:	b97a      	cbnz	r2, 8008332 <_free_r+0x8e>
 8008312:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008316:	1a5b      	subs	r3, r3, r1
 8008318:	4408      	add	r0, r1
 800831a:	6899      	ldr	r1, [r3, #8]
 800831c:	f105 0e08 	add.w	lr, r5, #8
 8008320:	4571      	cmp	r1, lr
 8008322:	d008      	beq.n	8008336 <_free_r+0x92>
 8008324:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008328:	f8c1 e00c 	str.w	lr, [r1, #12]
 800832c:	f8ce 1008 	str.w	r1, [lr, #8]
 8008330:	e002      	b.n	8008338 <_free_r+0x94>
 8008332:	2200      	movs	r2, #0
 8008334:	e000      	b.n	8008338 <_free_r+0x94>
 8008336:	2201      	movs	r2, #1
 8008338:	19b9      	adds	r1, r7, r6
 800833a:	6849      	ldr	r1, [r1, #4]
 800833c:	07c9      	lsls	r1, r1, #31
 800833e:	d40e      	bmi.n	800835e <_free_r+0xba>
 8008340:	4430      	add	r0, r6
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	b942      	cbnz	r2, 8008358 <_free_r+0xb4>
 8008346:	4e35      	ldr	r6, [pc, #212]	; (800841c <_free_r+0x178>)
 8008348:	42b1      	cmp	r1, r6
 800834a:	d105      	bne.n	8008358 <_free_r+0xb4>
 800834c:	616b      	str	r3, [r5, #20]
 800834e:	612b      	str	r3, [r5, #16]
 8008350:	2201      	movs	r2, #1
 8008352:	60d9      	str	r1, [r3, #12]
 8008354:	6099      	str	r1, [r3, #8]
 8008356:	e002      	b.n	800835e <_free_r+0xba>
 8008358:	68fe      	ldr	r6, [r7, #12]
 800835a:	60ce      	str	r6, [r1, #12]
 800835c:	60b1      	str	r1, [r6, #8]
 800835e:	f040 0101 	orr.w	r1, r0, #1
 8008362:	6059      	str	r1, [r3, #4]
 8008364:	5018      	str	r0, [r3, r0]
 8008366:	2a00      	cmp	r2, #0
 8008368:	d1cc      	bne.n	8008304 <_free_r+0x60>
 800836a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800836e:	d212      	bcs.n	8008396 <_free_r+0xf2>
 8008370:	08c0      	lsrs	r0, r0, #3
 8008372:	1081      	asrs	r1, r0, #2
 8008374:	2201      	movs	r2, #1
 8008376:	fa02 f101 	lsl.w	r1, r2, r1
 800837a:	686a      	ldr	r2, [r5, #4]
 800837c:	3001      	adds	r0, #1
 800837e:	430a      	orrs	r2, r1
 8008380:	606a      	str	r2, [r5, #4]
 8008382:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008386:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800838a:	6099      	str	r1, [r3, #8]
 800838c:	3a08      	subs	r2, #8
 800838e:	60da      	str	r2, [r3, #12]
 8008390:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008394:	e038      	b.n	8008408 <_free_r+0x164>
 8008396:	0a42      	lsrs	r2, r0, #9
 8008398:	2a04      	cmp	r2, #4
 800839a:	d802      	bhi.n	80083a2 <_free_r+0xfe>
 800839c:	0982      	lsrs	r2, r0, #6
 800839e:	3238      	adds	r2, #56	; 0x38
 80083a0:	e015      	b.n	80083ce <_free_r+0x12a>
 80083a2:	2a14      	cmp	r2, #20
 80083a4:	d801      	bhi.n	80083aa <_free_r+0x106>
 80083a6:	325b      	adds	r2, #91	; 0x5b
 80083a8:	e011      	b.n	80083ce <_free_r+0x12a>
 80083aa:	2a54      	cmp	r2, #84	; 0x54
 80083ac:	d802      	bhi.n	80083b4 <_free_r+0x110>
 80083ae:	0b02      	lsrs	r2, r0, #12
 80083b0:	326e      	adds	r2, #110	; 0x6e
 80083b2:	e00c      	b.n	80083ce <_free_r+0x12a>
 80083b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80083b8:	d802      	bhi.n	80083c0 <_free_r+0x11c>
 80083ba:	0bc2      	lsrs	r2, r0, #15
 80083bc:	3277      	adds	r2, #119	; 0x77
 80083be:	e006      	b.n	80083ce <_free_r+0x12a>
 80083c0:	f240 5154 	movw	r1, #1364	; 0x554
 80083c4:	428a      	cmp	r2, r1
 80083c6:	bf9a      	itte	ls
 80083c8:	0c82      	lsrls	r2, r0, #18
 80083ca:	327c      	addls	r2, #124	; 0x7c
 80083cc:	227e      	movhi	r2, #126	; 0x7e
 80083ce:	1c51      	adds	r1, r2, #1
 80083d0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80083d4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80083d8:	4f0d      	ldr	r7, [pc, #52]	; (8008410 <_free_r+0x16c>)
 80083da:	428e      	cmp	r6, r1
 80083dc:	d10b      	bne.n	80083f6 <_free_r+0x152>
 80083de:	2101      	movs	r1, #1
 80083e0:	1092      	asrs	r2, r2, #2
 80083e2:	fa01 f202 	lsl.w	r2, r1, r2
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	4311      	orrs	r1, r2
 80083ea:	6079      	str	r1, [r7, #4]
 80083ec:	4631      	mov	r1, r6
 80083ee:	e008      	b.n	8008402 <_free_r+0x15e>
 80083f0:	6889      	ldr	r1, [r1, #8]
 80083f2:	428e      	cmp	r6, r1
 80083f4:	d004      	beq.n	8008400 <_free_r+0x15c>
 80083f6:	684a      	ldr	r2, [r1, #4]
 80083f8:	f022 0203 	bic.w	r2, r2, #3
 80083fc:	4290      	cmp	r0, r2
 80083fe:	d3f7      	bcc.n	80083f0 <_free_r+0x14c>
 8008400:	68ce      	ldr	r6, [r1, #12]
 8008402:	60de      	str	r6, [r3, #12]
 8008404:	6099      	str	r1, [r3, #8]
 8008406:	60b3      	str	r3, [r6, #8]
 8008408:	60cb      	str	r3, [r1, #12]
 800840a:	e77b      	b.n	8008304 <_free_r+0x60>
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	2000016c 	.word	0x2000016c
 8008414:	20000574 	.word	0x20000574
 8008418:	20000698 	.word	0x20000698
 800841c:	20000174 	.word	0x20000174

08008420 <_sbrk>:
 8008420:	4b04      	ldr	r3, [pc, #16]	; (8008434 <_sbrk+0x14>)
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	4602      	mov	r2, r0
 8008426:	b909      	cbnz	r1, 800842c <_sbrk+0xc>
 8008428:	4903      	ldr	r1, [pc, #12]	; (8008438 <_sbrk+0x18>)
 800842a:	6019      	str	r1, [r3, #0]
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	4402      	add	r2, r0
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	4770      	bx	lr
 8008434:	200006c4 	.word	0x200006c4
 8008438:	200010cc 	.word	0x200010cc

0800843c <_init>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	bf00      	nop
 8008440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008442:	bc08      	pop	{r3}
 8008444:	469e      	mov	lr, r3
 8008446:	4770      	bx	lr

08008448 <_fini>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	bf00      	nop
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr
