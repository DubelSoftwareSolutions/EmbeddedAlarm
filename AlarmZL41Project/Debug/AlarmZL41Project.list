
C:\Users\Krzysztof\Documents\Studia\Semestr 6\Sterowniki Robotów\sterop\AlarmZL41Project\Debug\AlarmZL41Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004290  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004418  08004418  00014418  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000065c  20000000  08004498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002065c  2**0
                  CONTENTS
  7 .bss          00000a50  2000065c  2000065c  0002065c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200010ac  200010ac  0002065c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002065c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c1ea  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004906  00000000  00000000  0003c876  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e5a5  00000000  00000000  0004117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001348  00000000  00000000  0004f728  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001578  00000000  00000000  00050a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a5d1  00000000  00000000  00051fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006169  00000000  00000000  0005c5b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00062722  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000389c  00000000  00000000  000627a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000065c 	.word	0x2000065c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004400 	.word	0x08004400

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000660 	.word	0x20000660
 80001c4:	08004400 	.word	0x08004400

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001cc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f894 	bl	8000304 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f84e 	bl	8000284 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000110 	.word	0x20000110

080001f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001f0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f827 	bl	8000260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000218:	f003 f9d8 	bl	80035cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	200006b4 	.word	0x200006b4

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200006b4 	.word	0x200006b4

08000240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000242:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000244:	f7ff fff6 	bl	8000234 <HAL_GetTick>
  uint32_t wait = Delay;
 8000248:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800024a:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 800024c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800024e:	bf18      	it	ne
 8000250:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000252:	f7ff ffef 	bl	8000234 <HAL_GetTick>
 8000256:	1b40      	subs	r0, r0, r5
 8000258:	42a0      	cmp	r0, r4
 800025a:	d3fa      	bcc.n	8000252 <HAL_Delay+0x12>
  {
  }
}
 800025c:	b003      	add	sp, #12
 800025e:	bd30      	pop	{r4, r5, pc}

08000260 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000260:	4a07      	ldr	r2, [pc, #28]	; (8000280 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000262:	68d3      	ldr	r3, [r2, #12]
 8000264:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000268:	041b      	lsls	r3, r3, #16
 800026a:	0c1b      	lsrs	r3, r3, #16
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000270:	0200      	lsls	r0, r0, #8
 8000272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000276:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800027a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800027c:	60d3      	str	r3, [r2, #12]
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <HAL_NVIC_SetPriority+0x60>)
 8000286:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000288:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800028c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	2c04      	cmp	r4, #4
 8000296:	bf28      	it	cs
 8000298:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029a:	2d06      	cmp	r5, #6

  return (
 800029c:	f04f 0501 	mov.w	r5, #1
 80002a0:	fa05 f404 	lsl.w	r4, r5, r4
 80002a4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a8:	bf8c      	ite	hi
 80002aa:	3b03      	subhi	r3, #3
 80002ac:	2300      	movls	r3, #0

  return (
 80002ae:	400c      	ands	r4, r1
 80002b0:	409c      	lsls	r4, r3
 80002b2:	fa05 f303 	lsl.w	r3, r5, r3
 80002b6:	3b01      	subs	r3, #1
 80002b8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002ba:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002bc:	ea42 0204 	orr.w	r2, r2, r4
 80002c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	bfaf      	iteee	ge
 80002c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	f000 000f 	andlt.w	r0, r0, #15
 80002ce:	4b06      	ldrlt	r3, [pc, #24]	; (80002e8 <HAL_NVIC_SetPriority+0x64>)
 80002d0:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	bfa5      	ittet	ge
 80002d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d8:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e0:	bd30      	pop	{r4, r5, pc}
 80002e2:	bf00      	nop
 80002e4:	e000ed00 	.word	0xe000ed00
 80002e8:	e000ed14 	.word	0xe000ed14

080002ec <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002ec:	0942      	lsrs	r2, r0, #5
 80002ee:	2301      	movs	r3, #1
 80002f0:	f000 001f 	and.w	r0, r0, #31
 80002f4:	fa03 f000 	lsl.w	r0, r3, r0
 80002f8:	4b01      	ldr	r3, [pc, #4]	; (8000300 <HAL_NVIC_EnableIRQ+0x14>)
 80002fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100

08000304 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000304:	3801      	subs	r0, #1
 8000306:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030a:	d20a      	bcs.n	8000322 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030e:	4a07      	ldr	r2, [pc, #28]	; (800032c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000310:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	21f0      	movs	r1, #240	; 0xf0
 8000314:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000318:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800031c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000322:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000e010 	.word	0xe000e010
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000332:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000334:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000336:	bf0c      	ite	eq
 8000338:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800033c:	f022 0204 	bicne.w	r2, r2, #4
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	4770      	bx	lr
 8000344:	e000e010 	.word	0xe000e010

08000348 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000348:	4770      	bx	lr

0800034a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800034a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800034c:	f7ff fffc 	bl	8000348 <HAL_SYSTICK_Callback>
 8000350:	bd08      	pop	{r3, pc}

08000352 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000352:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000356:	2b02      	cmp	r3, #2
 8000358:	d003      	beq.n	8000362 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800035e:	2001      	movs	r0, #1
 8000360:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000362:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000364:	2305      	movs	r3, #5
 8000366:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800036a:	6813      	ldr	r3, [r2, #0]
 800036c:	f023 0301 	bic.w	r3, r3, #1
 8000370:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000372:	2000      	movs	r0, #0
}
 8000374:	4770      	bx	lr
	...

08000378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800037c:	4f6a      	ldr	r7, [pc, #424]	; (8000528 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800037e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000380:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000530 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000384:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000534 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000388:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800038a:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000390:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000392:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000394:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000396:	ea34 0303 	bics.w	r3, r4, r3
 800039a:	f040 80bd 	bne.w	8000518 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800039e:	684d      	ldr	r5, [r1, #4]
 80003a0:	f025 0a10 	bic.w	sl, r5, #16
 80003a4:	f1ba 0f02 	cmp.w	sl, #2
 80003a8:	d114      	bne.n	80003d4 <HAL_GPIO_Init+0x5c>
 80003aa:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80003ae:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003b2:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003b6:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003ba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003be:	230f      	movs	r3, #15
 80003c0:	fa03 f30b 	lsl.w	r3, r3, fp
 80003c4:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003c8:	690b      	ldr	r3, [r1, #16]
 80003ca:	fa03 f30b 	lsl.w	r3, r3, fp
 80003ce:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80003d0:	f8c9 3020 	str.w	r3, [r9, #32]
 80003d4:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d8:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80003dc:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003de:	fa09 f90b 	lsl.w	r9, r9, fp
 80003e2:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e6:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ea:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ee:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f2:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f6:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f8:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80003fc:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003fe:	d80f      	bhi.n	8000420 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000400:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000402:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000404:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000408:	fa06 f60b 	lsl.w	r6, r6, fp
 800040c:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800040e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000410:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000412:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000416:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800041a:	4096      	lsls	r6, r2
 800041c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800041e:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000420:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000422:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000426:	688b      	ldr	r3, [r1, #8]
 8000428:	fa03 f30b 	lsl.w	r3, r3, fp
 800042c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000430:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000432:	00eb      	lsls	r3, r5, #3
 8000434:	d570      	bpl.n	8000518 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	2300      	movs	r3, #0
 8000438:	9303      	str	r3, [sp, #12]
 800043a:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000440:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000444:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000448:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800044c:	f022 0903 	bic.w	r9, r2, #3
 8000450:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000454:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000458:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 800045c:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800045e:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000464:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000468:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800046c:	260f      	movs	r6, #15
 800046e:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000472:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000474:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x13c>
 800047a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800047e:	4298      	cmp	r0, r3
 8000480:	d01a      	beq.n	80004b8 <HAL_GPIO_Init+0x140>
 8000482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000486:	4298      	cmp	r0, r3
 8000488:	d018      	beq.n	80004bc <HAL_GPIO_Init+0x144>
 800048a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800048e:	4298      	cmp	r0, r3
 8000490:	d016      	beq.n	80004c0 <HAL_GPIO_Init+0x148>
 8000492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000496:	4298      	cmp	r0, r3
 8000498:	d014      	beq.n	80004c4 <HAL_GPIO_Init+0x14c>
 800049a:	4540      	cmp	r0, r8
 800049c:	d014      	beq.n	80004c8 <HAL_GPIO_Init+0x150>
 800049e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80004a2:	4298      	cmp	r0, r3
 80004a4:	d012      	beq.n	80004cc <HAL_GPIO_Init+0x154>
 80004a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004aa:	4298      	cmp	r0, r3
 80004ac:	bf14      	ite	ne
 80004ae:	2308      	movne	r3, #8
 80004b0:	2307      	moveq	r3, #7
 80004b2:	e00c      	b.n	80004ce <HAL_GPIO_Init+0x156>
 80004b4:	2300      	movs	r3, #0
 80004b6:	e00a      	b.n	80004ce <HAL_GPIO_Init+0x156>
 80004b8:	2301      	movs	r3, #1
 80004ba:	e008      	b.n	80004ce <HAL_GPIO_Init+0x156>
 80004bc:	2302      	movs	r3, #2
 80004be:	e006      	b.n	80004ce <HAL_GPIO_Init+0x156>
 80004c0:	2303      	movs	r3, #3
 80004c2:	e004      	b.n	80004ce <HAL_GPIO_Init+0x156>
 80004c4:	2304      	movs	r3, #4
 80004c6:	e002      	b.n	80004ce <HAL_GPIO_Init+0x156>
 80004c8:	2305      	movs	r3, #5
 80004ca:	e000      	b.n	80004ce <HAL_GPIO_Init+0x156>
 80004cc:	2306      	movs	r3, #6
 80004ce:	fa03 f30a 	lsl.w	r3, r3, sl
 80004d2:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80004d4:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004d8:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80004da:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004dc:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80004e0:	bf0c      	ite	eq
 80004e2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80004e4:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80004e6:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80004ea:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ee:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004f2:	bf0c      	ite	eq
 80004f4:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80004f6:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80004f8:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004fa:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004fc:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000500:	bf0c      	ite	eq
 8000502:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000504:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000506:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800050a:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800050e:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000510:	bf54      	ite	pl
 8000512:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000514:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000516:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000518:	3201      	adds	r2, #1
 800051a:	2a10      	cmp	r2, #16
 800051c:	f47f af38 	bne.w	8000390 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000520:	b005      	add	sp, #20
 8000522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000526:	bf00      	nop
 8000528:	40013c00 	.word	0x40013c00
 800052c:	40020000 	.word	0x40020000
 8000530:	40023800 	.word	0x40023800
 8000534:	40021400 	.word	0x40021400

08000538 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000538:	4770      	bx	lr
	...

0800053c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800053c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000540:	6959      	ldr	r1, [r3, #20]
 8000542:	4201      	tst	r1, r0
 8000544:	d002      	beq.n	800054c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000546:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000548:	f7ff fff6 	bl	8000538 <HAL_GPIO_EXTI_Callback>
 800054c:	bd08      	pop	{r3, pc}
 800054e:	bf00      	nop
 8000550:	40013c00 	.word	0x40013c00

08000554 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000554:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000556:	4604      	mov	r4, r0
 8000558:	2800      	cmp	r0, #0
 800055a:	d063      	beq.n	8000624 <HAL_I2C_Init+0xd0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800055c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000560:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000564:	b91b      	cbnz	r3, 800056e <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000566:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800056a:	f002 ff35 	bl	80033d8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800056e:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000570:	4d2d      	ldr	r5, [pc, #180]	; (8000628 <HAL_I2C_Init+0xd4>)
    hi2c->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000572:	2324      	movs	r3, #36	; 0x24
 8000574:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000578:	6813      	ldr	r3, [r2, #0]
 800057a:	f023 0301 	bic.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000580:	f000 ff26 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000584:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000586:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000588:	4928      	ldr	r1, [pc, #160]	; (800062c <HAL_I2C_Init+0xd8>)
 800058a:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800058e:	42ab      	cmp	r3, r5
 8000590:	462e      	mov	r6, r5
 8000592:	bf88      	it	hi
 8000594:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000598:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800059a:	bf82      	ittt	hi
 800059c:	4369      	mulhi	r1, r5
 800059e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80005a2:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80005a6:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80005a8:	f101 0101 	add.w	r1, r1, #1
 80005ac:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80005ae:	d808      	bhi.n	80005c2 <HAL_I2C_Init+0x6e>
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	bf98      	it	ls
 80005be:	2004      	movls	r0, #4
 80005c0:	e016      	b.n	80005f0 <HAL_I2C_Init+0x9c>
 80005c2:	68a1      	ldr	r1, [r4, #8]
 80005c4:	b949      	cbnz	r1, 80005da <HAL_I2C_Init+0x86>
 80005c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80005ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80005ce:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80005d2:	b163      	cbz	r3, 80005ee <HAL_I2C_Init+0x9a>
 80005d4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80005d8:	e00a      	b.n	80005f0 <HAL_I2C_Init+0x9c>
 80005da:	2119      	movs	r1, #25
 80005dc:	434b      	muls	r3, r1
 80005de:	fbb0 f0f3 	udiv	r0, r0, r3
 80005e2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80005e6:	b113      	cbz	r3, 80005ee <HAL_I2C_Init+0x9a>
 80005e8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80005ec:	e000      	b.n	80005f0 <HAL_I2C_Init+0x9c>
 80005ee:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80005f0:	69e1      	ldr	r1, [r4, #28]
 80005f2:	6a23      	ldr	r3, [r4, #32]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80005f4:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80005f6:	430b      	orrs	r3, r1
 80005f8:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80005fa:	6921      	ldr	r1, [r4, #16]
 80005fc:	68e3      	ldr	r3, [r4, #12]
 80005fe:	430b      	orrs	r3, r1
 8000600:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000602:	6961      	ldr	r1, [r4, #20]
 8000604:	69a3      	ldr	r3, [r4, #24]
 8000606:	430b      	orrs	r3, r1
 8000608:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800060a:	6813      	ldr	r3, [r2, #0]
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000612:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000614:	2320      	movs	r3, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000616:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000618:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800061c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800061e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000622:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8000624:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	000186a0 	.word	0x000186a0
 800062c:	000f4240 	.word	0x000f4240

08000630 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000632:	4606      	mov	r6, r0
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000634:	b08b      	sub	sp, #44	; 0x2c
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000636:	2800      	cmp	r0, #0
 8000638:	d063      	beq.n	8000702 <HAL_PCD_Init+0xd2>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800063a:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800063c:	4634      	mov	r4, r6
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800063e:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000642:	f003 f967 	bl	8003914 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000646:	f854 0b10 	ldr.w	r0, [r4], #16
 800064a:	f001 fd13 	bl	8002074 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800064e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000650:	466d      	mov	r5, sp
 8000652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000658:	e894 0003 	ldmia.w	r4, {r0, r1}
 800065c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000660:	1d37      	adds	r7, r6, #4
 8000662:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000666:	6830      	ldr	r0, [r6, #0]
 8000668:	f001 fcc4 	bl	8001ff4 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800066c:	2100      	movs	r1, #0
 800066e:	6830      	ldr	r0, [r6, #0]
 8000670:	f001 fd06 	bl	8002080 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000674:	2100      	movs	r1, #0
 8000676:	4633      	mov	r3, r6
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000678:	4632      	mov	r2, r6
 800067a:	f106 0410 	add.w	r4, r6, #16
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800067e:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000680:	4608      	mov	r0, r1
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
   hpcd->IN_ep[i].num = i;
 8000682:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000686:	87d1      	strh	r1, [r2, #62]	; 0x3e
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000688:	3101      	adds	r1, #1
 800068a:	290f      	cmp	r1, #15
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800068c:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000690:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8000694:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000696:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8000698:	64d0      	str	r0, [r2, #76]	; 0x4c
 800069a:	f102 021c 	add.w	r2, r2, #28
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800069e:	d1f0      	bne.n	8000682 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80006a0:	2200      	movs	r2, #0
 80006a2:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80006a6:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80006a8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
   hpcd->OUT_ep[i].num = i;
 80006ac:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80006b0:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80006b2:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 80006b6:	3201      	adds	r2, #1
 80006b8:	2a0f      	cmp	r2, #15
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80006ba:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80006be:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80006c2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80006c6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80006ca:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80006ce:	6041      	str	r1, [r0, #4]
 80006d0:	f103 031c 	add.w	r3, r3, #28
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 80006d4:	d1e8      	bne.n	80006a8 <HAL_PCD_Init+0x78>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80006d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d8:	466d      	mov	r5, sp
 80006da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80006e8:	4670      	mov	r0, lr
 80006ea:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80006ee:	f001 fcdd 	bl	80020ac <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80006f8:	6830      	ldr	r0, [r6, #0]
 80006fa:	f002 f8ba 	bl	8002872 <USB_DevDisconnect>
 return HAL_OK;
 80006fe:	2000      	movs	r0, #0
 8000700:	e000      	b.n	8000704 <HAL_PCD_Init+0xd4>
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8000702:	2001      	movs	r0, #1
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 return HAL_OK;
}
 8000704:	b00b      	add	sp, #44	; 0x2c
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000708 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000708:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800070c:	2b01      	cmp	r3, #1
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800070e:	b510      	push	{r4, lr}
 8000710:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000712:	d00c      	beq.n	800072e <HAL_PCD_Start+0x26>
 8000714:	2301      	movs	r3, #1
 8000716:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 800071a:	6800      	ldr	r0, [r0, #0]
 800071c:	f002 f89d 	bl	800285a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000720:	6820      	ldr	r0, [r4, #0]
 8000722:	f001 fca1 	bl	8002068 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000726:	2000      	movs	r0, #0
 8000728:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800072c:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 800072e:	2002      	movs	r0, #2
  USB_DevConnect (hpcd->Instance);  
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd); 
  return HAL_OK;
}
 8000730:	bd10      	pop	{r4, pc}
	...

08000734 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000738:	f8d0 a000 	ldr.w	sl, [r0]
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800073c:	b087      	sub	sp, #28
 800073e:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000740:	4650      	mov	r0, sl
 8000742:	f002 f8d0 	bl	80028e6 <USB_GetMode>
 8000746:	2800      	cmp	r0, #0
 8000748:	f040 8277 	bne.w	8000c3a <HAL_PCD_IRQHandler+0x506>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 800074c:	6820      	ldr	r0, [r4, #0]
 800074e:	f002 f89c 	bl	800288a <USB_ReadInterrupts>
 8000752:	2800      	cmp	r0, #0
 8000754:	f000 8271 	beq.w	8000c3a <HAL_PCD_IRQHandler+0x506>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000758:	6820      	ldr	r0, [r4, #0]
 800075a:	f002 f896 	bl	800288a <USB_ReadInterrupts>
 800075e:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000760:	bf48      	it	mi
 8000762:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000764:	6820      	ldr	r0, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000766:	bf42      	ittt	mi
 8000768:	6953      	ldrmi	r3, [r2, #20]
 800076a:	f003 0302 	andmi.w	r3, r3, #2
 800076e:	6153      	strmi	r3, [r2, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000770:	f002 f88b 	bl	800288a <USB_ReadInterrupts>
 8000774:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 8000778:	d04a      	beq.n	8000810 <HAL_PCD_IRQHandler+0xdc>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800077a:	6820      	ldr	r0, [r4, #0]
 800077c:	f002 f889 	bl	8002892 <USB_ReadDevAllOutEpInterrupt>
 8000780:	f50a 6630 	add.w	r6, sl, #2816	; 0xb00
 8000784:	4607      	mov	r7, r0
 8000786:	46a1      	mov	r9, r4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 8000788:	2500      	movs	r5, #0
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 800078a:	2f00      	cmp	r7, #0
 800078c:	d041      	beq.n	8000812 <HAL_PCD_IRQHandler+0xde>
      {
        if (ep_intr & 0x1U)
 800078e:	07f8      	lsls	r0, r7, #31
 8000790:	d538      	bpl.n	8000804 <HAL_PCD_IRQHandler+0xd0>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000792:	fa5f fb85 	uxtb.w	fp, r5
 8000796:	4659      	mov	r1, fp
 8000798:	6820      	ldr	r0, [r4, #0]
 800079a:	f002 f88a 	bl	80028b2 <USB_ReadDevOutEPInterrupt>
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800079e:	f010 0f01 	tst.w	r0, #1
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U)
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80007a2:	4680      	mov	r8, r0
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80007a4:	d021      	beq.n	80007ea <HAL_PCD_IRQHandler+0xb6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            
            if(hpcd->Init.dma_enable == 1U)
 80007a6:	6921      	ldr	r1, [r4, #16]
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80007a8:	2301      	movs	r3, #1
            
            if(hpcd->Init.dma_enable == 1U)
 80007aa:	4299      	cmp	r1, r3
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80007ac:	60b3      	str	r3, [r6, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 80007ae:	d10c      	bne.n	80007ca <HAL_PCD_IRQHandler+0x96>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 80007b0:	6931      	ldr	r1, [r6, #16]
 80007b2:	f8d9 0200 	ldr.w	r0, [r9, #512]	; 0x200
 80007b6:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80007ba:	1a41      	subs	r1, r0, r1
 80007bc:	f8c9 1210 	str.w	r1, [r9, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80007c0:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
 80007c4:	4408      	add	r0, r1
 80007c6:	f8c9 0204 	str.w	r0, [r9, #516]	; 0x204
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80007ca:	4659      	mov	r1, fp
 80007cc:	4620      	mov	r0, r4
 80007ce:	f003 f8d9 	bl	8003984 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 80007d2:	6921      	ldr	r1, [r4, #16]
 80007d4:	2901      	cmp	r1, #1
 80007d6:	d108      	bne.n	80007ea <HAL_PCD_IRQHandler+0xb6>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80007d8:	b93d      	cbnz	r5, 80007ea <HAL_PCD_IRQHandler+0xb6>
 80007da:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80007de:	b922      	cbnz	r2, 80007ea <HAL_PCD_IRQHandler+0xb6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80007e0:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80007e4:	6820      	ldr	r0, [r4, #0]
 80007e6:	f002 f89d 	bl	8002924 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80007ea:	f018 0f08 	tst.w	r8, #8
 80007ee:	d004      	beq.n	80007fa <HAL_PCD_IRQHandler+0xc6>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 80007f0:	4620      	mov	r0, r4
 80007f2:	f003 f8c1 	bl	8003978 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80007f6:	2308      	movs	r3, #8
 80007f8:	60b3      	str	r3, [r6, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80007fa:	f018 0f10 	tst.w	r8, #16
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80007fe:	bf1c      	itt	ne
 8000800:	2310      	movne	r3, #16
 8000802:	60b3      	strne	r3, [r6, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000804:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000806:	087f      	lsrs	r7, r7, #1
 8000808:	3620      	adds	r6, #32
 800080a:	f109 091c 	add.w	r9, r9, #28
 800080e:	e7bc      	b.n	800078a <HAL_PCD_IRQHandler+0x56>
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000810:	4605      	mov	r5, r0
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000812:	6820      	ldr	r0, [r4, #0]
 8000814:	f002 f839 	bl	800288a <USB_ReadInterrupts>
 8000818:	0341      	lsls	r1, r0, #13
 800081a:	f140 809b 	bpl.w	8000954 <HAL_PCD_IRQHandler+0x220>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800081e:	6820      	ldr	r0, [r4, #0]
 8000820:	f002 f83f 	bl	80028a2 <USB_ReadDevAllInEpInterrupt>
 8000824:	4626      	mov	r6, r4
 8000826:	9003      	str	r0, [sp, #12]
 8000828:	f50a 6810 	add.w	r8, sl, #2304	; 0x900
      
      epnum = 0U;
 800082c:	2500      	movs	r5, #0
      
      while ( ep_intr )
 800082e:	9b03      	ldr	r3, [sp, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	f000 808f 	beq.w	8000954 <HAL_PCD_IRQHandler+0x220>
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000836:	9b03      	ldr	r3, [sp, #12]
 8000838:	07da      	lsls	r2, r3, #31
 800083a:	f140 8083 	bpl.w	8000944 <HAL_PCD_IRQHandler+0x210>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 800083e:	fa5f f985 	uxtb.w	r9, r5
 8000842:	4649      	mov	r1, r9
 8000844:	6820      	ldr	r0, [r4, #0]
 8000846:	f002 f83e 	bl	80028c6 <USB_ReadDevInEPInterrupt>

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800084a:	07c3      	lsls	r3, r0, #31
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 800084c:	4607      	mov	r7, r0

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800084e:	d520      	bpl.n	8000892 <HAL_PCD_IRQHandler+0x15e>
          {
            fifoemptymsk = 0x1U << epnum;
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000850:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8000854:	2101      	movs	r1, #1
 8000856:	40a9      	lsls	r1, r5
 8000858:	ea23 0301 	bic.w	r3, r3, r1
 800085c:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000860:	2301      	movs	r3, #1
 8000862:	f8c8 3008 	str.w	r3, [r8, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8000866:	6923      	ldr	r3, [r4, #16]
 8000868:	2b01      	cmp	r3, #1
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 800086a:	bf01      	itttt	eq
 800086c:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 800086e:	6c33      	ldreq	r3, [r6, #64]	; 0x40
 8000870:	189b      	addeq	r3, r3, r2
 8000872:	6473      	streq	r3, [r6, #68]	; 0x44
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000874:	4649      	mov	r1, r9
 8000876:	4620      	mov	r0, r4
 8000878:	f003 f88d 	bl	8003996 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 800087c:	6921      	ldr	r1, [r4, #16]
 800087e:	2901      	cmp	r1, #1
 8000880:	d107      	bne.n	8000892 <HAL_PCD_IRQHandler+0x15e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000882:	b935      	cbnz	r5, 8000892 <HAL_PCD_IRQHandler+0x15e>
 8000884:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000886:	b923      	cbnz	r3, 8000892 <HAL_PCD_IRQHandler+0x15e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000888:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800088c:	6820      	ldr	r0, [r4, #0]
 800088e:	f002 f849 	bl	8002924 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000892:	0738      	lsls	r0, r7, #28
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000894:	bf44      	itt	mi
 8000896:	2308      	movmi	r3, #8
 8000898:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800089c:	06f9      	lsls	r1, r7, #27
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800089e:	bf44      	itt	mi
 80008a0:	2310      	movmi	r3, #16
 80008a2:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80008a6:	067a      	lsls	r2, r7, #25
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80008a8:	bf44      	itt	mi
 80008aa:	2340      	movmi	r3, #64	; 0x40
 80008ac:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80008b0:	07bb      	lsls	r3, r7, #30
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80008b2:	bf44      	itt	mi
 80008b4:	2302      	movmi	r3, #2
 80008b6:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80008ba:	063f      	lsls	r7, r7, #24
 80008bc:	d542      	bpl.n	8000944 <HAL_PCD_IRQHandler+0x210>
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80008c2:	6d37      	ldr	r7, [r6, #80]	; 0x50
 80008c4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80008c6:	1bdb      	subs	r3, r3, r7
  
  if (len > ep->maxpacket)
 80008c8:	6c37      	ldr	r7, [r6, #64]	; 0x40
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80008ca:	429f      	cmp	r7, r3
 80008cc:	bf28      	it	cs
 80008ce:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80008d0:	9b04      	ldr	r3, [sp, #16]
 80008d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 80008d6:	f107 0b03 	add.w	fp, r7, #3
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80008da:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 80008de:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80008e2:	9305      	str	r3, [sp, #20]
 80008e4:	9b05      	ldr	r3, [sp, #20]
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	455b      	cmp	r3, fp
 80008ec:	d80c      	bhi.n	8000908 <HAL_PCD_IRQHandler+0x1d4>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 80008ee:	bb4f      	cbnz	r7, 8000944 <HAL_PCD_IRQHandler+0x210>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80008f0:	9b04      	ldr	r3, [sp, #16]
 80008f2:	2201      	movs	r2, #1
 80008f4:	f503 6900 	add.w	r9, r3, #2048	; 0x800
 80008f8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 80008fc:	40aa      	lsls	r2, r5
 80008fe:	ea23 0302 	bic.w	r3, r3, r2
 8000902:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 8000906:	e01d      	b.n	8000944 <HAL_PCD_IRQHandler+0x210>
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
          (ep->xfer_count < ep->xfer_len) &&
 8000908:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800090a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800090c:	4293      	cmp	r3, r2
 800090e:	d9ee      	bls.n	80008ee <HAL_PCD_IRQHandler+0x1ba>
          (ep->xfer_count < ep->xfer_len) &&
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0ec      	beq.n	80008ee <HAL_PCD_IRQHandler+0x1ba>
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 8000914:	6c37      	ldr	r7, [r6, #64]	; 0x40
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000916:	9804      	ldr	r0, [sp, #16]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8000918:	1a9b      	subs	r3, r3, r2
 800091a:	429f      	cmp	r7, r3
 800091c:	bf28      	it	cs
 800091e:	461f      	movcs	r7, r3
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000920:	7c23      	ldrb	r3, [r4, #16]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	464a      	mov	r2, r9
 8000926:	b2bb      	uxth	r3, r7
 8000928:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800092a:	f001 ff14 	bl	8002756 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 800092e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000930:	443b      	add	r3, r7
 8000932:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000934:	6d33      	ldr	r3, [r6, #80]	; 0x50
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000936:	f107 0b03 	add.w	fp, r7, #3
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 800093a:	443b      	add	r3, r7
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800093c:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 8000940:	6533      	str	r3, [r6, #80]	; 0x50
 8000942:	e7cf      	b.n	80008e4 <HAL_PCD_IRQHandler+0x1b0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
        ep_intr >>= 1U;
 8000944:	9b03      	ldr	r3, [sp, #12]
 8000946:	085b      	lsrs	r3, r3, #1
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
 8000948:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 800094a:	9303      	str	r3, [sp, #12]
 800094c:	361c      	adds	r6, #28
 800094e:	f108 0820 	add.w	r8, r8, #32
 8000952:	e76c      	b.n	800082e <HAL_PCD_IRQHandler+0xfa>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000954:	6820      	ldr	r0, [r4, #0]
 8000956:	f001 ff98 	bl	800288a <USB_ReadInterrupts>
 800095a:	2800      	cmp	r0, #0
 800095c:	da0d      	bge.n	800097a <HAL_PCD_IRQHandler+0x246>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800095e:	f8da 3804 	ldr.w	r3, [sl, #2052]	; 0x804
 8000962:	f023 0301 	bic.w	r3, r3, #1
 8000966:	f8ca 3804 	str.w	r3, [sl, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 800096a:	4620      	mov	r0, r4
 800096c:	f003 f848 	bl	8003a00 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000970:	6822      	ldr	r2, [r4, #0]
 8000972:	6953      	ldr	r3, [r2, #20]
 8000974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000978:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800097a:	6820      	ldr	r0, [r4, #0]
 800097c:	f001 ff85 	bl	800288a <USB_ReadInterrupts>
 8000980:	0506      	lsls	r6, r0, #20
 8000982:	d50b      	bpl.n	800099c <HAL_PCD_IRQHandler+0x268>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000984:	f8da 3808 	ldr.w	r3, [sl, #2056]	; 0x808
 8000988:	07d8      	lsls	r0, r3, #31
 800098a:	d502      	bpl.n	8000992 <HAL_PCD_IRQHandler+0x25e>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 800098c:	4620      	mov	r0, r4
 800098e:	f003 f81f 	bl	80039d0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000992:	6822      	ldr	r2, [r4, #0]
 8000994:	6953      	ldr	r3, [r2, #20]
 8000996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099a:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800099c:	6820      	ldr	r0, [r4, #0]
 800099e:	f001 ff74 	bl	800288a <USB_ReadInterrupts>
 80009a2:	04c1      	lsls	r1, r0, #19
 80009a4:	d543      	bpl.n	8000a2e <HAL_PCD_IRQHandler+0x2fa>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80009a6:	f50a 6600 	add.w	r6, sl, #2048	; 0x800
 80009aa:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80009ac:	6820      	ldr	r0, [r4, #0]
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80009ae:	f023 0301 	bic.w	r3, r3, #1
 80009b2:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80009b4:	2110      	movs	r1, #16
 80009b6:	f001 fc13 	bl	80021e0 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009ba:	6860      	ldr	r0, [r4, #4]
 80009bc:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
 80009c0:	2200      	movs	r2, #0
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80009c2:	21ff      	movs	r1, #255	; 0xff
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009c4:	4282      	cmp	r2, r0
 80009c6:	d005      	beq.n	80009d4 <HAL_PCD_IRQHandler+0x2a0>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80009c8:	6099      	str	r1, [r3, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009ca:	3201      	adds	r2, #1
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80009cc:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 80009d0:	3320      	adds	r3, #32
 80009d2:	e7f7      	b.n	80009c4 <HAL_PCD_IRQHandler+0x290>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80009da:	69f3      	ldr	r3, [r6, #28]
 80009dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80009e0:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 80009e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009e4:	b153      	cbz	r3, 80009fc <HAL_PCD_IRQHandler+0x2c8>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 80009e6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80009ea:	f043 030b 	orr.w	r3, r3, #11
 80009ee:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80009f2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80009f4:	f043 030b 	orr.w	r3, r3, #11
 80009f8:	6473      	str	r3, [r6, #68]	; 0x44
 80009fa:	e007      	b.n	8000a0c <HAL_PCD_IRQHandler+0x2d8>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80009fc:	6973      	ldr	r3, [r6, #20]
 80009fe:	f043 030b 	orr.w	r3, r3, #11
 8000a02:	6173      	str	r3, [r6, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000a04:	6933      	ldr	r3, [r6, #16]
 8000a06:	f043 030b 	orr.w	r3, r3, #11
 8000a0a:	6133      	str	r3, [r6, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a0c:	f8da 3800 	ldr.w	r3, [sl, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000a10:	7c21      	ldrb	r1, [r4, #16]
 8000a12:	6820      	ldr	r0, [r4, #0]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000a18:	f8ca 3800 	str.w	r3, [sl, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000a1c:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000a20:	f001 ff80 	bl	8002924 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000a24:	6822      	ldr	r2, [r4, #0]
 8000a26:	6953      	ldr	r3, [r2, #20]
 8000a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a2c:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000a2e:	6820      	ldr	r0, [r4, #0]
 8000a30:	f001 ff2b 	bl	800288a <USB_ReadInterrupts>
 8000a34:	0482      	lsls	r2, r0, #18
 8000a36:	d57c      	bpl.n	8000b32 <HAL_PCD_IRQHandler+0x3fe>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	f001 ff58 	bl	80028ee <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000a3e:	6820      	ldr	r0, [r4, #0]
 8000a40:	68c3      	ldr	r3, [r0, #12]
 8000a42:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000a46:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000a48:	f001 fbf3 	bl	8002232 <USB_GetDevSpeed>
 8000a4c:	b948      	cbnz	r0, 8000a62 <HAL_PCD_IRQHandler+0x32e>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a4e:	6822      	ldr	r2, [r4, #0]
      USB_ActivateSetup(hpcd->Instance);
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000a50:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a56:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a58:	68d3      	ldr	r3, [r2, #12]
 8000a5a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000a5e:	60d3      	str	r3, [r2, #12]
 8000a60:	e05f      	b.n	8000b22 <HAL_PCD_IRQHandler+0x3ee>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000a62:	2303      	movs	r3, #3
 8000a64:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8000a6a:	f000 fcab 	bl	80013c4 <HAL_RCC_GetHCLKFreq>
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000a6e:	4b74      	ldr	r3, [pc, #464]	; (8000c40 <HAL_PCD_IRQHandler+0x50c>)
 8000a70:	4a74      	ldr	r2, [pc, #464]	; (8000c44 <HAL_PCD_IRQHandler+0x510>)
 8000a72:	4403      	add	r3, r0
 8000a74:	4293      	cmp	r3, r2
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	d803      	bhi.n	8000a82 <HAL_PCD_IRQHandler+0x34e>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 8000a80:	e04e      	b.n	8000b20 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000a82:	4a71      	ldr	r2, [pc, #452]	; (8000c48 <HAL_PCD_IRQHandler+0x514>)
 8000a84:	4971      	ldr	r1, [pc, #452]	; (8000c4c <HAL_PCD_IRQHandler+0x518>)
 8000a86:	4402      	add	r2, r0
 8000a88:	428a      	cmp	r2, r1
 8000a8a:	d803      	bhi.n	8000a94 <HAL_PCD_IRQHandler+0x360>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000a92:	e045      	b.n	8000b20 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000a94:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000a98:	496d      	ldr	r1, [pc, #436]	; (8000c50 <HAL_PCD_IRQHandler+0x51c>)
 8000a9a:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000a9e:	428a      	cmp	r2, r1
 8000aa0:	d803      	bhi.n	8000aaa <HAL_PCD_IRQHandler+0x376>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000aa8:	e03a      	b.n	8000b20 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000aaa:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000aae:	4969      	ldr	r1, [pc, #420]	; (8000c54 <HAL_PCD_IRQHandler+0x520>)
 8000ab0:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000ab4:	428a      	cmp	r2, r1
 8000ab6:	d803      	bhi.n	8000ac0 <HAL_PCD_IRQHandler+0x38c>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000abe:	e02f      	b.n	8000b20 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000ac0:	4a65      	ldr	r2, [pc, #404]	; (8000c58 <HAL_PCD_IRQHandler+0x524>)
 8000ac2:	4966      	ldr	r1, [pc, #408]	; (8000c5c <HAL_PCD_IRQHandler+0x528>)
 8000ac4:	4402      	add	r2, r0
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	d803      	bhi.n	8000ad2 <HAL_PCD_IRQHandler+0x39e>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000ad0:	e026      	b.n	8000b20 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000ad2:	4a63      	ldr	r2, [pc, #396]	; (8000c60 <HAL_PCD_IRQHandler+0x52c>)
 8000ad4:	4963      	ldr	r1, [pc, #396]	; (8000c64 <HAL_PCD_IRQHandler+0x530>)
 8000ad6:	4402      	add	r2, r0
 8000ad8:	428a      	cmp	r2, r1
 8000ada:	d803      	bhi.n	8000ae4 <HAL_PCD_IRQHandler+0x3b0>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000adc:	68da      	ldr	r2, [r3, #12]
 8000ade:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000ae2:	e01d      	b.n	8000b20 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000ae4:	4a60      	ldr	r2, [pc, #384]	; (8000c68 <HAL_PCD_IRQHandler+0x534>)
 8000ae6:	4961      	ldr	r1, [pc, #388]	; (8000c6c <HAL_PCD_IRQHandler+0x538>)
 8000ae8:	4402      	add	r2, r0
 8000aea:	428a      	cmp	r2, r1
 8000aec:	d803      	bhi.n	8000af6 <HAL_PCD_IRQHandler+0x3c2>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000af4:	e014      	b.n	8000b20 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000af6:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000afa:	495d      	ldr	r1, [pc, #372]	; (8000c70 <HAL_PCD_IRQHandler+0x53c>)
 8000afc:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000b00:	428a      	cmp	r2, r1
 8000b02:	d803      	bhi.n	8000b0c <HAL_PCD_IRQHandler+0x3d8>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b0a:	e009      	b.n	8000b20 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000b0c:	4a59      	ldr	r2, [pc, #356]	; (8000c74 <HAL_PCD_IRQHandler+0x540>)
 8000b0e:	495a      	ldr	r1, [pc, #360]	; (8000c78 <HAL_PCD_IRQHandler+0x544>)
 8000b10:	4402      	add	r2, r0
 8000b12:	428a      	cmp	r2, r1
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	bf94      	ite	ls
 8000b18:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b1c:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000b20:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000b22:	4620      	mov	r0, r4
 8000b24:	f002 ff43 	bl	80039ae <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000b28:	6822      	ldr	r2, [r4, #0]
 8000b2a:	6953      	ldr	r3, [r2, #20]
 8000b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b30:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000b32:	6820      	ldr	r0, [r4, #0]
 8000b34:	f001 fea9 	bl	800288a <USB_ReadInterrupts>
 8000b38:	06c3      	lsls	r3, r0, #27
 8000b3a:	d538      	bpl.n	8000bae <HAL_PCD_IRQHandler+0x47a>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b3c:	6822      	ldr	r2, [r4, #0]
 8000b3e:	6993      	ldr	r3, [r2, #24]
 8000b40:	f023 0310 	bic.w	r3, r3, #16
 8000b44:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000b46:	f8da 6020 	ldr.w	r6, [sl, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b4a:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000b4e:	2b02      	cmp	r3, #2
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
      
      temp = USBx->GRXSTSP;
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000b50:	f006 070f 	and.w	r7, r6, #15
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b54:	d114      	bne.n	8000b80 <HAL_PCD_IRQHandler+0x44c>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000b56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000b5a:	4033      	ands	r3, r6
 8000b5c:	b313      	cbz	r3, 8000ba4 <HAL_PCD_IRQHandler+0x470>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000b5e:	231c      	movs	r3, #28
 8000b60:	fb03 4707 	mla	r7, r3, r7, r4
 8000b64:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000b68:	4632      	mov	r2, r6
 8000b6a:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000b6e:	4650      	mov	r0, sl
 8000b70:	f001 fe05 	bl	800277e <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b74:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000b78:	4433      	add	r3, r6
 8000b7a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000b7e:	e00c      	b.n	8000b9a <HAL_PCD_IRQHandler+0x466>
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000b80:	2b06      	cmp	r3, #6
 8000b82:	d10f      	bne.n	8000ba4 <HAL_PCD_IRQHandler+0x470>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000b84:	2208      	movs	r2, #8
 8000b86:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	f001 fdf7 	bl	800277e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b90:	231c      	movs	r3, #28
 8000b92:	fb03 4707 	mla	r7, r3, r7, r4
 8000b96:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000b9a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b9e:	441e      	add	r6, r3
 8000ba0:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ba4:	6822      	ldr	r2, [r4, #0]
 8000ba6:	6993      	ldr	r3, [r2, #24]
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000bae:	6820      	ldr	r0, [r4, #0]
 8000bb0:	f001 fe6b 	bl	800288a <USB_ReadInterrupts>
 8000bb4:	0707      	lsls	r7, r0, #28
 8000bb6:	d507      	bpl.n	8000bc8 <HAL_PCD_IRQHandler+0x494>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f002 fef4 	bl	80039a6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000bbe:	6822      	ldr	r2, [r4, #0]
 8000bc0:	6953      	ldr	r3, [r2, #20]
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	f001 fe5e 	bl	800288a <USB_ReadInterrupts>
 8000bce:	02c6      	lsls	r6, r0, #11
 8000bd0:	d508      	bpl.n	8000be4 <HAL_PCD_IRQHandler+0x4b0>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000bd2:	b2e9      	uxtb	r1, r5
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f002 ff1b 	bl	8003a10 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000bda:	6822      	ldr	r2, [r4, #0]
 8000bdc:	6953      	ldr	r3, [r2, #20]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000be4:	6820      	ldr	r0, [r4, #0]
 8000be6:	f001 fe50 	bl	800288a <USB_ReadInterrupts>
 8000bea:	0280      	lsls	r0, r0, #10
 8000bec:	d508      	bpl.n	8000c00 <HAL_PCD_IRQHandler+0x4cc>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000bee:	b2e9      	uxtb	r1, r5
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f002 ff09 	bl	8003a08 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000bf6:	6822      	ldr	r2, [r4, #0]
 8000bf8:	6953      	ldr	r3, [r2, #20]
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	f001 fe42 	bl	800288a <USB_ReadInterrupts>
 8000c06:	0041      	lsls	r1, r0, #1
 8000c08:	d507      	bpl.n	8000c1a <HAL_PCD_IRQHandler+0x4e6>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f002 ff04 	bl	8003a18 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000c10:	6822      	ldr	r2, [r4, #0]
 8000c12:	6953      	ldr	r3, [r2, #20]
 8000c14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c18:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000c1a:	6820      	ldr	r0, [r4, #0]
 8000c1c:	f001 fe35 	bl	800288a <USB_ReadInterrupts>
 8000c20:	0742      	lsls	r2, r0, #29
 8000c22:	d50a      	bpl.n	8000c3a <HAL_PCD_IRQHandler+0x506>
    {
      temp = hpcd->Instance->GOTGINT;
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000c28:	076b      	lsls	r3, r5, #29
 8000c2a:	d502      	bpl.n	8000c32 <HAL_PCD_IRQHandler+0x4fe>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f002 fef7 	bl	8003a20 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000c32:	6822      	ldr	r2, [r4, #0]
 8000c34:	6853      	ldr	r3, [r2, #4]
 8000c36:	432b      	orrs	r3, r5
 8000c38:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000c3a:	b007      	add	sp, #28
 8000c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c40:	ff275340 	.word	0xff275340
 8000c44:	000c34ff 	.word	0x000c34ff
 8000c48:	ff1b1e40 	.word	0xff1b1e40
 8000c4c:	000f423f 	.word	0x000f423f
 8000c50:	00124f7f 	.word	0x00124f7f
 8000c54:	0013d61f 	.word	0x0013d61f
 8000c58:	fee5b660 	.word	0xfee5b660
 8000c5c:	0016e35f 	.word	0x0016e35f
 8000c60:	feced300 	.word	0xfeced300
 8000c64:	001b773f 	.word	0x001b773f
 8000c68:	feb35bc0 	.word	0xfeb35bc0
 8000c6c:	002191bf 	.word	0x002191bf
 8000c70:	0038751f 	.word	0x0038751f
 8000c74:	fe5954e0 	.word	0xfe5954e0
 8000c78:	00419cdf 	.word	0x00419cdf

08000c7c <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8000c7c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000c80:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c82:	b510      	push	{r4, lr}
 8000c84:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000c86:	d009      	beq.n	8000c9c <HAL_PCD_SetAddress+0x20>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000c8e:	6800      	ldr	r0, [r0, #0]
 8000c90:	f001 fdd3 	bl	800283a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000c94:	2000      	movs	r0, #0
 8000c96:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000c9a:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8000c9c:	2002      	movs	r0, #2
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8000c9e:	bd10      	pop	{r4, pc}

08000ca0 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000ca0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8000ca2:	b24e      	sxtb	r6, r1
 8000ca4:	2e00      	cmp	r6, #0
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	f04f 051c 	mov.w	r5, #28
 8000cac:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000cb0:	bfb5      	itete	lt
 8000cb2:	fb05 4100 	mlalt	r1, r5, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000cb6:	fb05 4101 	mlage	r1, r5, r1, r4
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000cba:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000cbc:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  ep->num   = ep_addr & 0x7F;
 8000cc0:	b2c0      	uxtb	r0, r0
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  if (ep->is_in)
 8000cc2:	2e00      	cmp	r6, #0
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000cc4:	bfb8      	it	lt
 8000cc6:	80c8      	strhlt	r0, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8000cc8:	2b02      	cmp	r3, #2
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000cca:	70cb      	strb	r3, [r1, #3]
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000ccc:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->tx_fifo_num = ep->num;
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
 8000cd0:	bf04      	itt	eq
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	710b      	strbeq	r3, [r1, #4]
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8000cd6:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000cd8:	704d      	strb	r5, [r1, #1]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8000cda:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8000cde:	608a      	str	r2, [r1, #8]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d009      	beq.n	8000cf8 <HAL_PCD_EP_Open+0x58>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000cea:	6820      	ldr	r0, [r4, #0]
 8000cec:	f001 fabc 	bl	8002268 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8000cf8:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}

08000cfc <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8000cfc:	b24b      	sxtb	r3, r1
 8000cfe:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000d00:	b510      	push	{r4, lr}
 8000d02:	f04f 021c 	mov.w	r2, #28
 8000d06:	4604      	mov	r4, r0
 8000d08:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000d0c:	bfb5      	itete	lt
 8000d0e:	fb02 4100 	mlalt	r1, r2, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000d12:	fb02 4101 	mlage	r1, r2, r1, r4
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000d16:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000d18:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000d1c:	0fdb      	lsrs	r3, r3, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8000d1e:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000d20:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000d22:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d009      	beq.n	8000d3e <HAL_PCD_EP_Close+0x42>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000d30:	6820      	ldr	r0, [r4, #0]
 8000d32:	f001 fada 	bl	80022ea <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000d36:	2000      	movs	r0, #0
 8000d38:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000d3c:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8000d3e:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8000d40:	bd10      	pop	{r4, pc}

08000d42 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d42:	b538      	push	{r3, r4, r5, lr}
 8000d44:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000d48:	241c      	movs	r4, #28
 8000d4a:	436c      	muls	r4, r5
 8000d4c:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000d50:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000d52:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8000d54:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8000d58:	2300      	movs	r3, #0
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000d5a:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000d5e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8000d62:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8000d66:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  
  if (hpcd->Init.dma_enable == 1U)
 8000d6a:	6903      	ldr	r3, [r0, #16]
 8000d6c:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8000d6e:	bf08      	it	eq
 8000d70:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
  }
  
  if ((ep_addr & 0x7F) == 0)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000d74:	6800      	ldr	r0, [r0, #0]
 8000d76:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  if ((ep_addr & 0x7F) == 0)
 8000d78:	b915      	cbnz	r5, 8000d80 <HAL_PCD_EP_Receive+0x3e>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000d7a:	f001 fc43 	bl	8002604 <USB_EP0StartXfer>
 8000d7e:	e001      	b.n	8000d84 <HAL_PCD_EP_Receive+0x42>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000d80:	f001 fb24 	bl	80023cc <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 8000d84:	2000      	movs	r0, #0
 8000d86:	bd38      	pop	{r3, r4, r5, pc}

08000d88 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000d88:	f001 010f 	and.w	r1, r1, #15
 8000d8c:	231c      	movs	r3, #28
 8000d8e:	fb03 0001 	mla	r0, r3, r1, r0
}
 8000d92:	f8b0 0210 	ldrh.w	r0, [r0, #528]	; 0x210
 8000d96:	4770      	bx	lr

08000d98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000d9e:	241c      	movs	r4, #28
 8000da0:	436c      	muls	r4, r5
 8000da2:	f104 0138 	add.w	r1, r4, #56	; 0x38
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000da6:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000da8:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8000daa:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8000db0:	2301      	movs	r3, #1
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000db2:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 8000db4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8000db8:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  
  if (hpcd->Init.dma_enable == 1U)
 8000dbc:	6903      	ldr	r3, [r0, #16]
 8000dbe:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8000dc0:	bf08      	it	eq
 8000dc2:	64a2      	streq	r2, [r4, #72]	; 0x48
  }
  
  if ((ep_addr & 0x7F) == 0)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000dc4:	6800      	ldr	r0, [r0, #0]
 8000dc6:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  if ((ep_addr & 0x7F) == 0)
 8000dc8:	b915      	cbnz	r5, 8000dd0 <HAL_PCD_EP_Transmit+0x38>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000dca:	f001 fc1b 	bl	8002604 <USB_EP0StartXfer>
 8000dce:	e001      	b.n	8000dd4 <HAL_PCD_EP_Transmit+0x3c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000dd0:	f001 fafc 	bl	80023cc <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	bd38      	pop	{r3, r4, r5, pc}

08000dd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000dd8:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8000dda:	b24b      	sxtb	r3, r1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000de2:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000de6:	bfb5      	itete	lt
 8000de8:	fb02 0105 	mlalt	r1, r2, r5, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000dec:	fb02 0101 	mlage	r1, r2, r1, r0
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000df0:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000df2:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  
  ep->is_stall = 1U;
 8000df6:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000df8:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
 8000dfa:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
 8000dfc:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000dfe:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000e00:	704b      	strb	r3, [r1, #1]
  
  
  __HAL_LOCK(hpcd); 
 8000e02:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000e06:	4293      	cmp	r3, r2
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e08:	4604      	mov	r4, r0
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  
  __HAL_LOCK(hpcd); 
 8000e0a:	d00f      	beq.n	8000e2c <HAL_PCD_EP_SetStall+0x54>
 8000e0c:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8000e10:	6800      	ldr	r0, [r0, #0]
 8000e12:	f001 fcc2 	bl	800279a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8000e16:	b92d      	cbnz	r5, 8000e24 <HAL_PCD_EP_SetStall+0x4c>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000e18:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000e1c:	7c21      	ldrb	r1, [r4, #16]
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	f001 fd80 	bl	8002924 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8000e24:	2000      	movs	r0, #0
 8000e26:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  
  return HAL_OK;
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  
  __HAL_LOCK(hpcd); 
 8000e2c:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8000e2e:	bd38      	pop	{r3, r4, r5, pc}

08000e30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e30:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8000e32:	b24b      	sxtb	r3, r1
 8000e34:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e36:	4605      	mov	r5, r0
 8000e38:	f04f 021c 	mov.w	r2, #28
 8000e3c:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000e40:	bfb5      	itete	lt
 8000e42:	fb02 5100 	mlalt	r1, r2, r0, r5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e46:	fb02 5101 	mlage	r1, r2, r1, r5
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000e4a:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e4c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000e50:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0U;
 8000e52:	2400      	movs	r4, #0
 8000e54:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000e56:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000e58:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000e5a:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d009      	beq.n	8000e76 <HAL_PCD_EP_ClrStall+0x46>
 8000e62:	2301      	movs	r3, #1
 8000e64:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8000e68:	6828      	ldr	r0, [r5, #0]
 8000e6a:	f001 fcc8 	bl	80027fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000e6e:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
    
  return HAL_OK;
 8000e72:	4620      	mov	r0, r4
 8000e74:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8000e76:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8000e78:	bd38      	pop	{r3, r4, r5, pc}

08000e7a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8000e7a:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8000e7c:	6804      	ldr	r4, [r0, #0]
 8000e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  
  if(fifo == 0)
 8000e80:	b919      	cbnz	r1, 8000e8a <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8000e82:	ea40 4302 	orr.w	r3, r0, r2, lsl #16
 8000e86:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e88:	e016      	b.n	8000eb8 <HAL_PCDEx_SetTxFiFo+0x3e>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8000e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8000e8c:	2500      	movs	r5, #0
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8000e8e:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8000e92:	1e4e      	subs	r6, r1, #1
 8000e94:	b2e8      	uxtb	r0, r5
 8000e96:	42b0      	cmp	r0, r6
 8000e98:	f105 0501 	add.w	r5, r5, #1
 8000e9c:	da06      	bge.n	8000eac <HAL_PCDEx_SetTxFiFo+0x32>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8000e9e:	3040      	adds	r0, #64	; 0x40
 8000ea0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000ea4:	6840      	ldr	r0, [r0, #4]
 8000ea6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8000eaa:	e7f3      	b.n	8000e94 <HAL_PCDEx_SetTxFiFo+0x1a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8000eac:	313f      	adds	r1, #63	; 0x3f
 8000eae:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8000eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eb6:	6063      	str	r3, [r4, #4]
  }
  
  return HAL_OK;
}
 8000eb8:	2000      	movs	r0, #0
 8000eba:	bd70      	pop	{r4, r5, r6, pc}

08000ebc <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8000ebc:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8000ebe:	2000      	movs	r0, #0
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8000ec0:	6259      	str	r1, [r3, #36]	; 0x24
  
  return HAL_OK;
}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec4:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000eca:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ecc:	07d8      	lsls	r0, r3, #31
 8000ece:	d403      	bmi.n	8000ed8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	0799      	lsls	r1, r3, #30
 8000ed4:	d44b      	bmi.n	8000f6e <HAL_RCC_OscConfig+0xaa>
 8000ed6:	e09b      	b.n	8001010 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ed8:	4b8c      	ldr	r3, [pc, #560]	; (800110c <HAL_RCC_OscConfig+0x248>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	f002 020c 	and.w	r2, r2, #12
 8000ee0:	2a04      	cmp	r2, #4
 8000ee2:	d007      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ee4:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee6:	f002 020c 	and.w	r2, r2, #12
 8000eea:	2a08      	cmp	r2, #8
 8000eec:	d10b      	bne.n	8000f06 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	025a      	lsls	r2, r3, #9
 8000ef2:	d508      	bpl.n	8000f06 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef4:	4b85      	ldr	r3, [pc, #532]	; (800110c <HAL_RCC_OscConfig+0x248>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	039b      	lsls	r3, r3, #14
 8000efa:	d5e9      	bpl.n	8000ed0 <HAL_RCC_OscConfig+0xc>
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1e6      	bne.n	8000ed0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
 8000f04:	e164      	b.n	80011d0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f06:	6863      	ldr	r3, [r4, #4]
 8000f08:	4d80      	ldr	r5, [pc, #512]	; (800110c <HAL_RCC_OscConfig+0x248>)
 8000f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0e:	d006      	beq.n	8000f1e <HAL_RCC_OscConfig+0x5a>
 8000f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f14:	d108      	bne.n	8000f28 <HAL_RCC_OscConfig+0x64>
 8000f16:	682b      	ldr	r3, [r5, #0]
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	602b      	str	r3, [r5, #0]
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f24:	602b      	str	r3, [r5, #0]
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x76>
 8000f28:	682a      	ldr	r2, [r5, #0]
 8000f2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f2e:	602a      	str	r2, [r5, #0]
 8000f30:	682a      	ldr	r2, [r5, #0]
 8000f32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f36:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f38:	b16b      	cbz	r3, 8000f56 <HAL_RCC_OscConfig+0x92>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3a:	f7ff f97b 	bl	8000234 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	4d73      	ldr	r5, [pc, #460]	; (800110c <HAL_RCC_OscConfig+0x248>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f40:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	682b      	ldr	r3, [r5, #0]
 8000f44:	039f      	lsls	r7, r3, #14
 8000f46:	d4c3      	bmi.n	8000ed0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff f974 	bl	8000234 <HAL_GetTick>
 8000f4c:	1b80      	subs	r0, r0, r6
 8000f4e:	2864      	cmp	r0, #100	; 0x64
 8000f50:	d9f7      	bls.n	8000f42 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 8000f52:	2003      	movs	r0, #3
 8000f54:	e13c      	b.n	80011d0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f56:	f7ff f96d 	bl	8000234 <HAL_GetTick>
 8000f5a:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	0398      	lsls	r0, r3, #14
 8000f60:	d5b6      	bpl.n	8000ed0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f62:	f7ff f967 	bl	8000234 <HAL_GetTick>
 8000f66:	1b80      	subs	r0, r0, r6
 8000f68:	2864      	cmp	r0, #100	; 0x64
 8000f6a:	d9f7      	bls.n	8000f5c <HAL_RCC_OscConfig+0x98>
 8000f6c:	e7f1      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f6e:	4b67      	ldr	r3, [pc, #412]	; (800110c <HAL_RCC_OscConfig+0x248>)
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	f012 0f0c 	tst.w	r2, #12
 8000f76:	d007      	beq.n	8000f88 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f78:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f7a:	f002 020c 	and.w	r2, r2, #12
 8000f7e:	2a08      	cmp	r2, #8
 8000f80:	d117      	bne.n	8000fb2 <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	0259      	lsls	r1, r3, #9
 8000f86:	d414      	bmi.n	8000fb2 <HAL_RCC_OscConfig+0xee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f88:	4b60      	ldr	r3, [pc, #384]	; (800110c <HAL_RCC_OscConfig+0x248>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	0792      	lsls	r2, r2, #30
 8000f8e:	d502      	bpl.n	8000f96 <HAL_RCC_OscConfig+0xd2>
 8000f90:	68e2      	ldr	r2, [r4, #12]
 8000f92:	2a01      	cmp	r2, #1
 8000f94:	d1b5      	bne.n	8000f02 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f98:	21f8      	movs	r1, #248	; 0xf8
 8000f9a:	fa91 f1a1 	rbit	r1, r1
 8000f9e:	6920      	ldr	r0, [r4, #16]
 8000fa0:	fab1 f181 	clz	r1, r1
 8000fa4:	fa00 f101 	lsl.w	r1, r0, r1
 8000fa8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb0:	e02e      	b.n	8001010 <HAL_RCC_OscConfig+0x14c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fb2:	68e2      	ldr	r2, [r4, #12]
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <HAL_RCC_OscConfig+0x24c>)
 8000fb6:	b1ea      	cbz	r2, 8000ff4 <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	f7ff f93a 	bl	8000234 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4d52      	ldr	r5, [pc, #328]	; (800110c <HAL_RCC_OscConfig+0x248>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc2:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	4851      	ldr	r0, [pc, #324]	; (800110c <HAL_RCC_OscConfig+0x248>)
 8000fc8:	079b      	lsls	r3, r3, #30
 8000fca:	d405      	bmi.n	8000fd8 <HAL_RCC_OscConfig+0x114>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff f932 	bl	8000234 <HAL_GetTick>
 8000fd0:	1b80      	subs	r0, r0, r6
 8000fd2:	2802      	cmp	r0, #2
 8000fd4:	d9f6      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x100>
 8000fd6:	e7bc      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd8:	6803      	ldr	r3, [r0, #0]
 8000fda:	22f8      	movs	r2, #248	; 0xf8
 8000fdc:	fa92 f2a2 	rbit	r2, r2
 8000fe0:	6921      	ldr	r1, [r4, #16]
 8000fe2:	fab2 f282 	clz	r2, r2
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	6003      	str	r3, [r0, #0]
 8000ff2:	e00d      	b.n	8001010 <HAL_RCC_OscConfig+0x14c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff6:	f7ff f91d 	bl	8000234 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffa:	4d44      	ldr	r5, [pc, #272]	; (800110c <HAL_RCC_OscConfig+0x248>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	682b      	ldr	r3, [r5, #0]
 8001000:	079f      	lsls	r7, r3, #30
 8001002:	d505      	bpl.n	8001010 <HAL_RCC_OscConfig+0x14c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001004:	f7ff f916 	bl	8000234 <HAL_GetTick>
 8001008:	1b80      	subs	r0, r0, r6
 800100a:	2802      	cmp	r0, #2
 800100c:	d9f7      	bls.n	8000ffe <HAL_RCC_OscConfig+0x13a>
 800100e:	e7a0      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	071e      	lsls	r6, r3, #28
 8001014:	d403      	bmi.n	800101e <HAL_RCC_OscConfig+0x15a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	075d      	lsls	r5, r3, #29
 800101a:	d548      	bpl.n	80010ae <HAL_RCC_OscConfig+0x1ea>
 800101c:	e01f      	b.n	800105e <HAL_RCC_OscConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800101e:	6962      	ldr	r2, [r4, #20]
 8001020:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <HAL_RCC_OscConfig+0x250>)
 8001022:	b172      	cbz	r2, 8001042 <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001028:	f7ff f904 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102c:	4d37      	ldr	r5, [pc, #220]	; (800110c <HAL_RCC_OscConfig+0x248>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800102e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001030:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001032:	0798      	lsls	r0, r3, #30
 8001034:	d4ef      	bmi.n	8001016 <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001036:	f7ff f8fd 	bl	8000234 <HAL_GetTick>
 800103a:	1b80      	subs	r0, r0, r6
 800103c:	2802      	cmp	r0, #2
 800103e:	d9f7      	bls.n	8001030 <HAL_RCC_OscConfig+0x16c>
 8001040:	e787      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001042:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001044:	f7ff f8f6 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001048:	4d30      	ldr	r5, [pc, #192]	; (800110c <HAL_RCC_OscConfig+0x248>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800104c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800104e:	0799      	lsls	r1, r3, #30
 8001050:	d5e1      	bpl.n	8001016 <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001052:	f7ff f8ef 	bl	8000234 <HAL_GetTick>
 8001056:	1b80      	subs	r0, r0, r6
 8001058:	2802      	cmp	r0, #2
 800105a:	d9f7      	bls.n	800104c <HAL_RCC_OscConfig+0x188>
 800105c:	e779      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_RCC_OscConfig+0x248>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001064:	4d2c      	ldr	r5, [pc, #176]	; (8001118 <HAL_RCC_OscConfig+0x254>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001068:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001080:	f7ff f8d8 	bl	8000234 <HAL_GetTick>
 8001084:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001086:	682b      	ldr	r3, [r5, #0]
 8001088:	05da      	lsls	r2, r3, #23
 800108a:	d513      	bpl.n	80010b4 <HAL_RCC_OscConfig+0x1f0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108c:	68a3      	ldr	r3, [r4, #8]
 800108e:	4d1f      	ldr	r5, [pc, #124]	; (800110c <HAL_RCC_OscConfig+0x248>)
 8001090:	2b01      	cmp	r3, #1
 8001092:	d115      	bne.n	80010c0 <HAL_RCC_OscConfig+0x1fc>
 8001094:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109c:	f7ff f8ca 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a0:	4d1a      	ldr	r5, [pc, #104]	; (800110c <HAL_RCC_OscConfig+0x248>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a4:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010aa:	079b      	lsls	r3, r3, #30
 80010ac:	d519      	bpl.n	80010e2 <HAL_RCC_OscConfig+0x21e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ae:	69a2      	ldr	r2, [r4, #24]
 80010b0:	bba2      	cbnz	r2, 800111c <HAL_RCC_OscConfig+0x258>
 80010b2:	e072      	b.n	800119a <HAL_RCC_OscConfig+0x2d6>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80010b4:	f7ff f8be 	bl	8000234 <HAL_GetTick>
 80010b8:	1b80      	subs	r0, r0, r6
 80010ba:	2802      	cmp	r0, #2
 80010bc:	d9e3      	bls.n	8001086 <HAL_RCC_OscConfig+0x1c2>
 80010be:	e748      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d104      	bne.n	80010ce <HAL_RCC_OscConfig+0x20a>
 80010c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	672b      	str	r3, [r5, #112]	; 0x70
 80010cc:	e7e2      	b.n	8001094 <HAL_RCC_OscConfig+0x1d0>
 80010ce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	672a      	str	r2, [r5, #112]	; 0x70
 80010d6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80010d8:	f022 0204 	bic.w	r2, r2, #4
 80010dc:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010de:	b133      	cbz	r3, 80010ee <HAL_RCC_OscConfig+0x22a>
 80010e0:	e7dc      	b.n	800109c <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e2:	f7ff f8a7 	bl	8000234 <HAL_GetTick>
 80010e6:	1b80      	subs	r0, r0, r6
 80010e8:	42b8      	cmp	r0, r7
 80010ea:	d9dd      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1e4>
 80010ec:	e731      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ee:	f7ff f8a1 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f6:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010fa:	0798      	lsls	r0, r3, #30
 80010fc:	d5d7      	bpl.n	80010ae <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f7ff f899 	bl	8000234 <HAL_GetTick>
 8001102:	1b80      	subs	r0, r0, r6
 8001104:	42b8      	cmp	r0, r7
 8001106:	d9f7      	bls.n	80010f8 <HAL_RCC_OscConfig+0x234>
 8001108:	e723      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	42470000 	.word	0x42470000
 8001114:	42470e80 	.word	0x42470e80
 8001118:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800111c:	4d2e      	ldr	r5, [pc, #184]	; (80011d8 <HAL_RCC_OscConfig+0x314>)
 800111e:	68ab      	ldr	r3, [r5, #8]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	f43f aeec 	beq.w	8000f02 <HAL_RCC_OscConfig+0x3e>
 800112a:	4e2c      	ldr	r6, [pc, #176]	; (80011dc <HAL_RCC_OscConfig+0x318>)
 800112c:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800112e:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001130:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001132:	d141      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2f4>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff f87e 	bl	8000234 <HAL_GetTick>
 8001138:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800113a:	682b      	ldr	r3, [r5, #0]
 800113c:	4f26      	ldr	r7, [pc, #152]	; (80011d8 <HAL_RCC_OscConfig+0x314>)
 800113e:	0199      	lsls	r1, r3, #6
 8001140:	d42d      	bmi.n	800119e <HAL_RCC_OscConfig+0x2da>
 8001142:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001146:	fa92 f2a2 	rbit	r2, r2
 800114a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800114e:	fab2 fe82 	clz	lr, r2
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800115a:	fab3 f583 	clz	r5, r3
 800115e:	fa92 f2a2 	rbit	r2, r2
 8001162:	69e0      	ldr	r0, [r4, #28]
 8001164:	6a23      	ldr	r3, [r4, #32]
 8001166:	fab2 f182 	clz	r1, r2
 800116a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800116c:	4303      	orrs	r3, r0
 800116e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001172:	ea43 0002 	orr.w	r0, r3, r2
 8001176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001178:	085a      	lsrs	r2, r3, #1
 800117a:	3a01      	subs	r2, #1
 800117c:	fa02 f305 	lsl.w	r3, r2, r5
 8001180:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001182:	4303      	orrs	r3, r0
 8001184:	408a      	lsls	r2, r1
 8001186:	4313      	orrs	r3, r2
 8001188:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800118a:	2301      	movs	r3, #1
 800118c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff f851 	bl	8000234 <HAL_GetTick>
 8001192:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	019a      	lsls	r2, r3, #6
 8001198:	d508      	bpl.n	80011ac <HAL_RCC_OscConfig+0x2e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800119a:	2000      	movs	r0, #0
 800119c:	e018      	b.n	80011d0 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff f849 	bl	8000234 <HAL_GetTick>
 80011a2:	ebc8 0000 	rsb	r0, r8, r0
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d9c7      	bls.n	800113a <HAL_RCC_OscConfig+0x276>
 80011aa:	e6d2      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ac:	f7ff f842 	bl	8000234 <HAL_GetTick>
 80011b0:	1b00      	subs	r0, r0, r4
 80011b2:	2802      	cmp	r0, #2
 80011b4:	d9ee      	bls.n	8001194 <HAL_RCC_OscConfig+0x2d0>
 80011b6:	e6cc      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b8:	f7ff f83c 	bl	8000234 <HAL_GetTick>
 80011bc:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	019b      	lsls	r3, r3, #6
 80011c2:	d5ea      	bpl.n	800119a <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c4:	f7ff f836 	bl	8000234 <HAL_GetTick>
 80011c8:	1b00      	subs	r0, r0, r4
 80011ca:	2802      	cmp	r0, #2
 80011cc:	d9f7      	bls.n	80011be <HAL_RCC_OscConfig+0x2fa>
 80011ce:	e6c0      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80011d0:	b002      	add	sp, #8
 80011d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	42470060 	.word	0x42470060

080011e0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e0:	491b      	ldr	r1, [pc, #108]	; (8001250 <HAL_RCC_GetSysClockFreq+0x70>)
 80011e2:	688b      	ldr	r3, [r1, #8]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d02c      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x66>
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d12c      	bne.n	800124a <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f0:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011f2:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011fc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001200:	684b      	ldr	r3, [r1, #4]
 8001202:	fa92 f2a2 	rbit	r2, r2
 8001206:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800120a:	fab2 f282 	clz	r2, r2
 800120e:	ea01 0103 	and.w	r1, r1, r3
 8001212:	fa21 f102 	lsr.w	r1, r1, r2
 8001216:	bf14      	ite	ne
 8001218:	4a0e      	ldrne	r2, [pc, #56]	; (8001254 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800121a:	4a0f      	ldreq	r2, [pc, #60]	; (8001258 <HAL_RCC_GetSysClockFreq+0x78>)
 800121c:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001222:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001226:	6852      	ldr	r2, [r2, #4]
 8001228:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800122c:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001230:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001234:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001238:	fa22 f000 	lsr.w	r0, r2, r0
 800123c:	3001      	adds	r0, #1
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	fbb3 f0f0 	udiv	r0, r3, r0
 8001244:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <HAL_RCC_GetSysClockFreq+0x74>)
 8001248:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	017d7840 	.word	0x017d7840
 8001258:	00f42400 	.word	0x00f42400

0800125c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800125c:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	f002 020f 	and.w	r2, r2, #15
 8001264:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126a:	4605      	mov	r5, r0
 800126c:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800126e:	d30a      	bcc.n	8001286 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001270:	6829      	ldr	r1, [r5, #0]
 8001272:	0788      	lsls	r0, r1, #30
 8001274:	d511      	bpl.n	800129a <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001276:	4850      	ldr	r0, [pc, #320]	; (80013b8 <HAL_RCC_ClockConfig+0x15c>)
 8001278:	6883      	ldr	r3, [r0, #8]
 800127a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127e:	68ab      	ldr	r3, [r5, #8]
 8001280:	4313      	orrs	r3, r2
 8001282:	6083      	str	r3, [r0, #8]
 8001284:	e009      	b.n	800129a <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	b2ca      	uxtb	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	4299      	cmp	r1, r3
 8001292:	d0ed      	beq.n	8001270 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001294:	2001      	movs	r0, #1
 8001296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129a:	07c9      	lsls	r1, r1, #31
 800129c:	d406      	bmi.n	80012ac <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800129e:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f002 020f 	and.w	r2, r2, #15
 80012a6:	4296      	cmp	r6, r2
 80012a8:	d351      	bcc.n	800134e <HAL_RCC_ClockConfig+0xf2>
 80012aa:	e057      	b.n	800135c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ac:	686b      	ldr	r3, [r5, #4]
 80012ae:	4a42      	ldr	r2, [pc, #264]	; (80013b8 <HAL_RCC_ClockConfig+0x15c>)
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d103      	bne.n	80012bc <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80012ba:	e008      	b.n	80012ce <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80012bc:	1e99      	subs	r1, r3, #2
 80012be:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c0:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80012c2:	d802      	bhi.n	80012ca <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012c8:	e001      	b.n	80012ce <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	f012 0f02 	tst.w	r2, #2
 80012ce:	d0e1      	beq.n	8001294 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d0:	4c39      	ldr	r4, [pc, #228]	; (80013b8 <HAL_RCC_ClockConfig+0x15c>)
 80012d2:	68a2      	ldr	r2, [r4, #8]
 80012d4:	f022 0203 	bic.w	r2, r2, #3
 80012d8:	4313      	orrs	r3, r2
 80012da:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012dc:	f7fe ffaa 	bl	8000234 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e0:	686b      	ldr	r3, [r5, #4]
 80012e2:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012e4:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e6:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	d10c      	bne.n	8001306 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ec:	68a3      	ldr	r3, [r4, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d0d3      	beq.n	800129e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f6:	f7fe ff9d 	bl	8000234 <HAL_GetTick>
 80012fa:	1bc0      	subs	r0, r0, r7
 80012fc:	4540      	cmp	r0, r8
 80012fe:	d9f5      	bls.n	80012ec <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8001300:	2003      	movs	r0, #3
 8001302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001306:	2b02      	cmp	r3, #2
 8001308:	d10a      	bne.n	8001320 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800130a:	68a3      	ldr	r3, [r4, #8]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b08      	cmp	r3, #8
 8001312:	d0c4      	beq.n	800129e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	f7fe ff8e 	bl	8000234 <HAL_GetTick>
 8001318:	1bc0      	subs	r0, r0, r7
 800131a:	4540      	cmp	r0, r8
 800131c:	d9f5      	bls.n	800130a <HAL_RCC_ClockConfig+0xae>
 800131e:	e7ef      	b.n	8001300 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001320:	2b03      	cmp	r3, #3
 8001322:	d10f      	bne.n	8001344 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001324:	68a3      	ldr	r3, [r4, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d0b7      	beq.n	800129e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132e:	f7fe ff81 	bl	8000234 <HAL_GetTick>
 8001332:	1bc0      	subs	r0, r0, r7
 8001334:	4540      	cmp	r0, r8
 8001336:	d9f5      	bls.n	8001324 <HAL_RCC_ClockConfig+0xc8>
 8001338:	e7e2      	b.n	8001300 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133a:	f7fe ff7b 	bl	8000234 <HAL_GetTick>
 800133e:	1bc0      	subs	r0, r0, r7
 8001340:	4540      	cmp	r0, r8
 8001342:	d8dd      	bhi.n	8001300 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001344:	68a3      	ldr	r3, [r4, #8]
 8001346:	f013 0f0c 	tst.w	r3, #12
 800134a:	d1f6      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
 800134c:	e7a7      	b.n	800129e <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	b2f2      	uxtb	r2, r6
 8001350:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	429e      	cmp	r6, r3
 800135a:	d19b      	bne.n	8001294 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	6829      	ldr	r1, [r5, #0]
 800135e:	074a      	lsls	r2, r1, #29
 8001360:	d506      	bpl.n	8001370 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001362:	4815      	ldr	r0, [pc, #84]	; (80013b8 <HAL_RCC_ClockConfig+0x15c>)
 8001364:	6883      	ldr	r3, [r0, #8]
 8001366:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800136a:	68eb      	ldr	r3, [r5, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001370:	070b      	lsls	r3, r1, #28
 8001372:	d507      	bpl.n	8001384 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_RCC_ClockConfig+0x15c>)
 8001376:	6929      	ldr	r1, [r5, #16]
 8001378:	6893      	ldr	r3, [r2, #8]
 800137a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800137e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001382:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001384:	f7ff ff2c 	bl	80011e0 <HAL_RCC_GetSysClockFreq>
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_RCC_ClockConfig+0x15c>)
 800138a:	22f0      	movs	r2, #240	; 0xf0
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	fa92 f2a2 	rbit	r2, r2
 8001392:	fab2 f282 	clz	r2, r2
 8001396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800139a:	40d3      	lsrs	r3, r2
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_RCC_ClockConfig+0x160>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	40d8      	lsrs	r0, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_RCC_ClockConfig+0x164>)
 80013a4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7fe ff0e 	bl	80001c8 <HAL_InitTick>
  
  return HAL_OK;
 80013ac:	2000      	movs	r0, #0
}
 80013ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	08004422 	.word	0x08004422
 80013c0:	20000110 	.word	0x20000110

080013c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <HAL_RCC_GetHCLKFreq+0x8>)
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000110 	.word	0x20000110

080013d0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	fa92 f2a2 	rbit	r2, r2
 80013dc:	fab2 f282 	clz	r2, r2
 80013e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80013e4:	40d3      	lsrs	r3, r2
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80013ec:	6810      	ldr	r0, [r2, #0]
}
 80013ee:	40d8      	lsrs	r0, r3
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	08004432 	.word	0x08004432
 80013fc:	20000110 	.word	0x20000110

08001400 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001402:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	fa92 f2a2 	rbit	r2, r2
 800140c:	fab2 f282 	clz	r2, r2
 8001410:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001414:	40d3      	lsrs	r3, r2
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800141c:	6810      	ldr	r0, [r2, #0]
} 
 800141e:	40d8      	lsrs	r0, r3
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	08004432 	.word	0x08004432
 800142c:	20000110 	.word	0x20000110

08001430 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001430:	6803      	ldr	r3, [r0, #0]
 8001432:	f013 0f05 	tst.w	r3, #5
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001436:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800143a:	4605      	mov	r5, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800143c:	d119      	bne.n	8001472 <HAL_RCCEx_PeriphCLKConfig+0x42>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800143e:	6828      	ldr	r0, [r5, #0]
 8001440:	f010 0002 	ands.w	r0, r0, #2
 8001444:	f000 8090 	beq.w	8001568 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x140>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800144e:	4c49      	ldr	r4, [pc, #292]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x144>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6023      	str	r3, [r4, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800146a:	f7fe fee3 	bl	8000234 <HAL_GetTick>
 800146e:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001470:	e039      	b.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001472:	4e41      	ldr	r6, [pc, #260]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001474:	4f3e      	ldr	r7, [pc, #248]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x140>)
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800147a:	f7fe fedb 	bl	8000234 <HAL_GetTick>
 800147e:	4680      	mov	r8, r0
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4c3b      	ldr	r4, [pc, #236]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	d507      	bpl.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001488:	f7fe fed4 	bl	8000234 <HAL_GetTick>
 800148c:	ebc8 0000 	rsb	r0, r8, r0
 8001490:	2802      	cmp	r0, #2
 8001492:	d9f5      	bls.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x50>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001494:	2003      	movs	r0, #3
 8001496:	e067      	b.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8001498:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800149c:	fa91 f1a1 	rbit	r1, r1
 80014a0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80014a4:	fab1 f181 	clz	r1, r1
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	fab3 f283 	clz	r2, r3
 80014b0:	686b      	ldr	r3, [r5, #4]
 80014b2:	fa03 f101 	lsl.w	r1, r3, r1
 80014b6:	68ab      	ldr	r3, [r5, #8]
 80014b8:	4093      	lsls	r3, r2
 80014ba:	430b      	orrs	r3, r1
 80014bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
#endif /* STM32F411xE */
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80014c0:	2301      	movs	r3, #1
 80014c2:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014c4:	f7fe feb6 	bl	8000234 <HAL_GetTick>
 80014c8:	4606      	mov	r6, r0
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	0118      	lsls	r0, r3, #4
 80014ce:	d4b6      	bmi.n	800143e <HAL_RCCEx_PeriphCLKConfig+0xe>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014d0:	f7fe feb0 	bl	8000234 <HAL_GetTick>
 80014d4:	1b80      	subs	r0, r0, r6
 80014d6:	2802      	cmp	r0, #2
 80014d8:	d9f7      	bls.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80014da:	e7db      	b.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x64>
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014dc:	f7fe feaa 	bl	8000234 <HAL_GetTick>
 80014e0:	1b80      	subs	r0, r0, r6
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d8d6      	bhi.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x64>
    PWR->CR |= PWR_CR_DBP;
    
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	05d9      	lsls	r1, r3, #23
 80014ea:	d5f7      	bpl.n	80014dc <HAL_RCCEx_PeriphCLKConfig+0xac>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014ec:	4c20      	ldr	r4, [pc, #128]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80014ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014f4:	d10f      	bne.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014f6:	68ea      	ldr	r2, [r5, #12]
 80014f8:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80014fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001502:	d127      	bne.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8001504:	6899      	ldr	r1, [r3, #8]
 8001506:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 800150a:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 800150e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001512:	4301      	orrs	r1, r0
 8001514:	e021      	b.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001516:	68ea      	ldr	r2, [r5, #12]
 8001518:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800151c:	4293      	cmp	r3, r2
 800151e:	d0ea      	beq.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001520:	6f23      	ldr	r3, [r4, #112]	; 0x70
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001524:	2101      	movs	r1, #1
 8001526:	6011      	str	r1, [r2, #0]
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 800152c:	2100      	movs	r1, #0
 800152e:	6011      	str	r1, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001530:	6723      	str	r3, [r4, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001532:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001534:	07da      	lsls	r2, r3, #31
 8001536:	d5de      	bpl.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001538:	f7fe fe7c 	bl	8000234 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f241 3788 	movw	r7, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001540:	4606      	mov	r6, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001542:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001544:	079b      	lsls	r3, r3, #30
 8001546:	d4d6      	bmi.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7fe fe74 	bl	8000234 <HAL_GetTick>
 800154c:	1b80      	subs	r0, r0, r6
 800154e:	42b8      	cmp	r0, r7
 8001550:	d9f7      	bls.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001552:	e79f      	b.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x64>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800155a:	6099      	str	r1, [r3, #8]
 800155c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800155e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001562:	430a      	orrs	r2, r1
 8001564:	671a      	str	r2, [r3, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001566:	2000      	movs	r0, #0
}
 8001568:	b002      	add	sp, #8
 800156a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000
 8001578:	42470068 	.word	0x42470068
 800157c:	42470e40 	.word	0x42470e40

08001580 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001580:	6802      	ldr	r2, [r0, #0]
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001582:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001584:	68d3      	ldr	r3, [r2, #12]
 8001586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800158a:	60d3      	str	r3, [r2, #12]
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800158c:	4604      	mov	r4, r0

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;

    /* Get tick */
    tickstart = HAL_GetTick();
 800158e:	f7fe fe51 	bl	8000234 <HAL_GetTick>
 8001592:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	069b      	lsls	r3, r3, #26
 800159a:	d407      	bmi.n	80015ac <HAL_RTC_WaitForSynchro+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800159c:	f7fe fe4a 	bl	8000234 <HAL_GetTick>
 80015a0:	1b40      	subs	r0, r0, r5
 80015a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015a6:	d9f5      	bls.n	8001594 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 80015a8:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 80015ac:	2000      	movs	r0, #0
 80015ae:	bd38      	pop	{r3, r4, r5, pc}

080015b0 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80015b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80015b2:	6803      	ldr	r3, [r0, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	0652      	lsls	r2, r2, #25
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80015b8:	4604      	mov	r4, r0
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80015ba:	d501      	bpl.n	80015c0 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80015bc:	2000      	movs	r0, #0
 80015be:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015c6:	f7fe fe35 	bl	8000234 <HAL_GetTick>
 80015ca:	4605      	mov	r5, r0

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	065b      	lsls	r3, r3, #25
 80015d2:	d4f3      	bmi.n	80015bc <RTC_EnterInitMode+0xc>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80015d4:	f7fe fe2e 	bl	8000234 <HAL_GetTick>
 80015d8:	1b40      	subs	r0, r0, r5
 80015da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015de:	d9f5      	bls.n	80015cc <RTC_EnterInitMode+0x1c>
      {       
        return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
      } 
    }
  }
  
  return HAL_OK;  
}
 80015e2:	bd38      	pop	{r3, r4, r5, pc}

080015e4 <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80015e4:	b510      	push	{r4, lr}
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80015e6:	4604      	mov	r4, r0
 80015e8:	2800      	cmp	r0, #0
 80015ea:	d03d      	beq.n	8001668 <HAL_RTC_Init+0x84>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80015ec:	7f43      	ldrb	r3, [r0, #29]
 80015ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015f2:	b913      	cbnz	r3, 80015fa <HAL_RTC_Init+0x16>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80015f4:	7702      	strb	r2, [r0, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80015f6:	f001 ffdd 	bl	80035b4 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80015fa:	2302      	movs	r3, #2
 80015fc:	7763      	strb	r3, [r4, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	22ca      	movs	r2, #202	; 0xca
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
 8001604:	2253      	movs	r2, #83	; 0x53
 8001606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff ffd1 	bl	80015b0 <RTC_EnterInitMode>
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	b120      	cbz	r0, 800161c <HAL_RTC_Init+0x38>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001616:	2304      	movs	r3, #4
 8001618:	7763      	strb	r3, [r4, #29]
 800161a:	e025      	b.n	8001668 <HAL_RTC_Init+0x84>
    return HAL_ERROR;
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001626:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	6862      	ldr	r2, [r4, #4]
 800162c:	4311      	orrs	r1, r2
 800162e:	6922      	ldr	r2, [r4, #16]
 8001630:	4311      	orrs	r1, r2
 8001632:	6962      	ldr	r2, [r4, #20]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001638:	68e2      	ldr	r2, [r4, #12]
 800163a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	68a1      	ldr	r1, [r4, #8]
 8001640:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001644:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800164c:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800164e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001656:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001658:	69a2      	ldr	r2, [r4, #24]
 800165a:	430a      	orrs	r2, r1
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001662:	2301      	movs	r3, #1
 8001664:	7763      	strb	r3, [r4, #29]
    
    return HAL_OK;
 8001666:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
  {
     return HAL_ERROR;
 8001668:	2001      	movs	r0, #1
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
    
    return HAL_OK;
  }
}
 800166a:	bd10      	pop	{r4, pc}

0800166c <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800166c:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 800166e:	2809      	cmp	r0, #9
 8001670:	d903      	bls.n	800167a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
 8001672:	380a      	subs	r0, #10
{
  uint32_t bcdhigh = 0U;
  
  while(Value >= 10U)
  {
    bcdhigh++;
 8001674:	3301      	adds	r3, #1
    Value -= 10U;
 8001676:	b2c0      	uxtb	r0, r0
 8001678:	e7f9      	b.n	800166e <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800167a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800167e:	b2c0      	uxtb	r0, r0
 8001680:	4770      	bx	lr

08001682 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001684:	7f03      	ldrb	r3, [r0, #28]
 8001686:	2b01      	cmp	r3, #1
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001688:	4606      	mov	r6, r0
 800168a:	460f      	mov	r7, r1
 800168c:	f04f 0502 	mov.w	r5, #2
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001690:	d064      	beq.n	800175c <HAL_RTC_SetTime+0xda>
 8001692:	2301      	movs	r3, #1
 8001694:	7703      	strb	r3, [r0, #28]
 8001696:	6803      	ldr	r3, [r0, #0]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001698:	7745      	strb	r5, [r0, #29]
 800169a:	7808      	ldrb	r0, [r1, #0]
 800169c:	78bd      	ldrb	r5, [r7, #2]
 800169e:	7849      	ldrb	r1, [r1, #1]
  
  if(Format == RTC_FORMAT_BIN)
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80016a0:	689b      	ldr	r3, [r3, #8]
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
  
  hrtc->State = HAL_RTC_STATE_BUSY;
  
  if(Format == RTC_FORMAT_BIN)
 80016a2:	b9aa      	cbnz	r2, 80016d0 <HAL_RTC_SetTime+0x4e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80016a4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 80016a8:	bf08      	it	eq
 80016aa:	70fb      	strbeq	r3, [r7, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80016ac:	f7ff ffde 	bl	800166c <RTC_ByteToBcd2>
 80016b0:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80016b2:	4608      	mov	r0, r1
 80016b4:	f7ff ffda 	bl	800166c <RTC_ByteToBcd2>
 80016b8:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80016ba:	4628      	mov	r0, r5
 80016bc:	f7ff ffd6 	bl	800166c <RTC_ByteToBcd2>
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80016c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80016ca:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
 80016ce:	e00a      	b.n	80016e6 <HAL_RTC_SetTime+0x64>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
                        (((uint32_t)sTime->TimeFormat) << 16U));  
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80016d0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 80016d4:	bf08      	it	eq
 80016d6:	70fb      	strbeq	r3, [r7, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80016d8:	0209      	lsls	r1, r1, #8
 80016da:	ea41 4400 	orr.w	r4, r1, r0, lsl #16
 80016de:	78f8      	ldrb	r0, [r7, #3]
 80016e0:	4325      	orrs	r5, r4
 80016e2:	ea45 4400 	orr.w	r4, r5, r0, lsl #16
              ((uint32_t)sTime->Seconds) | \
              ((uint32_t)(sTime->TimeFormat) << 16U));   
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016e6:	6833      	ldr	r3, [r6, #0]
 80016e8:	22ca      	movs	r2, #202	; 0xca
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
 80016ec:	2253      	movs	r2, #83	; 0x53
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80016f0:	4630      	mov	r0, r6
 80016f2:	f7ff ff5d 	bl	80015b0 <RTC_EnterInitMode>
 80016f6:	6833      	ldr	r3, [r6, #0]
 80016f8:	4605      	mov	r5, r0
 80016fa:	b130      	cbz	r0, 800170a <HAL_RTC_SetTime+0x88>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80016fc:	22ff      	movs	r2, #255	; 0xff
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001700:	2304      	movs	r3, #4
 8001702:	7773      	strb	r3, [r6, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8001704:	2300      	movs	r3, #0
 8001706:	7733      	strb	r3, [r6, #28]
 8001708:	e01f      	b.n	800174a <HAL_RTC_SetTime+0xc8>
    return HAL_ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800170a:	f004 307f 	and.w	r0, r4, #2139062143	; 0x7f7f7f7f
 800170e:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8001712:	6018      	str	r0, [r3, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800171a:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800171c:	6899      	ldr	r1, [r3, #8]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4311      	orrs	r1, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	430a      	orrs	r2, r1
 8001726:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800172e:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	069b      	lsls	r3, r3, #26
 8001734:	d40b      	bmi.n	800174e <HAL_RTC_SetTime+0xcc>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001736:	4630      	mov	r0, r6
 8001738:	f7ff ff22 	bl	8001580 <HAL_RTC_WaitForSynchro>
 800173c:	b138      	cbz	r0, 800174e <HAL_RTC_SetTime+0xcc>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800173e:	6833      	ldr	r3, [r6, #0]
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001744:	2304      	movs	r3, #4
 8001746:	7773      	strb	r3, [r6, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8001748:	7735      	strb	r5, [r6, #28]
        
        return HAL_ERROR;
 800174a:	2501      	movs	r5, #1
 800174c:	e006      	b.n	800175c <HAL_RTC_SetTime+0xda>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800174e:	6833      	ldr	r3, [r6, #0]
 8001750:	22ff      	movs	r2, #255	; 0xff
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8001754:	2301      	movs	r3, #1
 8001756:	7773      	strb	r3, [r6, #29]
  
   __HAL_UNLOCK(hrtc); 
 8001758:	2300      	movs	r3, #0
 800175a:	7733      	strb	r3, [r6, #28]
     
   return HAL_OK;
  }
}
 800175c:	4628      	mov	r0, r5
 800175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001760 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8001762:	7f03      	ldrb	r3, [r0, #28]
 8001764:	2b01      	cmp	r3, #1
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001766:	4606      	mov	r6, r0
 8001768:	f04f 0502 	mov.w	r5, #2
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 800176c:	d057      	beq.n	800181e <HAL_RTC_SetDate+0xbe>
 800176e:	2301      	movs	r3, #1
 8001770:	7703      	strb	r3, [r0, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001772:	7745      	strb	r5, [r0, #29]
 8001774:	784b      	ldrb	r3, [r1, #1]
 8001776:	78c8      	ldrb	r0, [r1, #3]
 8001778:	788d      	ldrb	r5, [r1, #2]
 800177a:	780f      	ldrb	r7, [r1, #0]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800177c:	2a00      	cmp	r2, #0
 800177e:	d147      	bne.n	8001810 <HAL_RTC_SetDate+0xb0>
 8001780:	06da      	lsls	r2, r3, #27
 8001782:	d503      	bpl.n	800178c <HAL_RTC_SetDate+0x2c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001784:	f023 0210 	bic.w	r2, r3, #16
 8001788:	320a      	adds	r2, #10
 800178a:	704a      	strb	r2, [r1, #1]
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800178c:	f7ff ff6e 	bl	800166c <RTC_ByteToBcd2>
 8001790:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001792:	7848      	ldrb	r0, [r1, #1]
 8001794:	f7ff ff6a 	bl	800166c <RTC_ByteToBcd2>
 8001798:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800179a:	4628      	mov	r0, r5
 800179c:	f7ff ff66 	bl	800166c <RTC_ByteToBcd2>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80017a0:	ea40 3047 	orr.w	r0, r0, r7, lsl #13
 80017a4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80017a8:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
                  ((uint32_t)sDate->Date) | \
                  (((uint32_t)sDate->WeekDay) << 13U));  
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017ac:	6833      	ldr	r3, [r6, #0]
 80017ae:	22ca      	movs	r2, #202	; 0xca
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
 80017b2:	2253      	movs	r2, #83	; 0x53
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80017b6:	4630      	mov	r0, r6
 80017b8:	f7ff fefa 	bl	80015b0 <RTC_EnterInitMode>
 80017bc:	6833      	ldr	r3, [r6, #0]
 80017be:	4605      	mov	r5, r0
 80017c0:	b130      	cbz	r0, 80017d0 <HAL_RTC_SetDate+0x70>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80017c2:	22ff      	movs	r2, #255	; 0xff
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017c6:	2304      	movs	r3, #4
 80017c8:	7773      	strb	r3, [r6, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80017ca:	2300      	movs	r3, #0
 80017cc:	7733      	strb	r3, [r6, #28]
 80017ce:	e015      	b.n	80017fc <HAL_RTC_SetDate+0x9c>
    return HAL_ERROR;
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80017d0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 80017d4:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80017d8:	6058      	str	r0, [r3, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e0:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	069b      	lsls	r3, r3, #26
 80017e6:	d40b      	bmi.n	8001800 <HAL_RTC_SetDate+0xa0>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80017e8:	4630      	mov	r0, r6
 80017ea:	f7ff fec9 	bl	8001580 <HAL_RTC_WaitForSynchro>
 80017ee:	b138      	cbz	r0, 8001800 <HAL_RTC_SetDate+0xa0>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80017f0:	6833      	ldr	r3, [r6, #0]
 80017f2:	22ff      	movs	r2, #255	; 0xff
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017f6:	2304      	movs	r3, #4
 80017f8:	7773      	strb	r3, [r6, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80017fa:	7735      	strb	r5, [r6, #28]
        
        return HAL_ERROR;
 80017fc:	2501      	movs	r5, #1
 80017fe:	e00e      	b.n	800181e <HAL_RTC_SetDate+0xbe>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001800:	6833      	ldr	r3, [r6, #0]
 8001802:	22ff      	movs	r2, #255	; 0xff
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 8001806:	2301      	movs	r3, #1
 8001808:	7773      	strb	r3, [r6, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800180a:	2300      	movs	r3, #0
 800180c:	7733      	strb	r3, [r6, #28]
    
    return HAL_OK;    
 800180e:	e006      	b.n	800181e <HAL_RTC_SetDate+0xbe>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001816:	4328      	orrs	r0, r5
 8001818:	ea40 3447 	orr.w	r4, r0, r7, lsl #13
 800181c:	e7c6      	b.n	80017ac <HAL_RTC_SetDate+0x4c>
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
    
    return HAL_OK;    
  }
}
 800181e:	4628      	mov	r0, r5
 8001820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001822 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001822:	6803      	ldr	r3, [r0, #0]
 8001824:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
  
  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001826:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800182a:	4770      	bx	lr

0800182c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800182c:	6803      	ldr	r3, [r0, #0]
 800182e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8001830:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8001834:	4770      	bx	lr

08001836 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001836:	6803      	ldr	r3, [r0, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001840:	6a19      	ldr	r1, [r3, #32]
 8001842:	f241 1211 	movw	r2, #4369	; 0x1111
 8001846:	400a      	ands	r2, r1
 8001848:	b942      	cbnz	r2, 800185c <HAL_TIM_Base_Stop_IT+0x26>
 800184a:	6a19      	ldr	r1, [r3, #32]
 800184c:	f240 4244 	movw	r2, #1092	; 0x444
 8001850:	400a      	ands	r2, r1
 8001852:	b91a      	cbnz	r2, 800185c <HAL_TIM_Base_Stop_IT+0x26>
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 800185c:	2000      	movs	r0, #0
 800185e:	4770      	bx	lr

08001860 <HAL_TIM_OC_DelayElapsedCallback>:
 8001860:	4770      	bx	lr

08001862 <HAL_TIM_IC_CaptureCallback>:
 8001862:	4770      	bx	lr

08001864 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001864:	4770      	bx	lr

08001866 <HAL_TIM_TriggerCallback>:
 8001866:	4770      	bx	lr

08001868 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001868:	6803      	ldr	r3, [r0, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800186e:	b510      	push	{r4, lr}
 8001870:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001872:	d514      	bpl.n	800189e <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	0792      	lsls	r2, r2, #30
 8001878:	d511      	bpl.n	800189e <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800187a:	f06f 0202 	mvn.w	r2, #2
 800187e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001880:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001882:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001884:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001886:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001888:	d002      	beq.n	8001890 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800188a:	f7ff ffea 	bl	8001862 <HAL_TIM_IC_CaptureCallback>
 800188e:	e004      	b.n	800189a <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001890:	f7ff ffe6 	bl	8001860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff ffe5 	bl	8001864 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	2300      	movs	r3, #0
 800189c:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	0750      	lsls	r0, r2, #29
 80018a4:	d516      	bpl.n	80018d4 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	0751      	lsls	r1, r2, #29
 80018aa:	d513      	bpl.n	80018d4 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018ac:	f06f 0204 	mvn.w	r2, #4
 80018b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018b2:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018b4:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018b6:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018ba:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80018bc:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018be:	d002      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80018c0:	f7ff ffcf 	bl	8001862 <HAL_TIM_IC_CaptureCallback>
 80018c4:	e004      	b.n	80018d0 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c6:	f7ff ffcb 	bl	8001860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff ffca 	bl	8001864 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d0:	2300      	movs	r3, #0
 80018d2:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	0712      	lsls	r2, r2, #28
 80018da:	d515      	bpl.n	8001908 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	0710      	lsls	r0, r2, #28
 80018e0:	d512      	bpl.n	8001908 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018e2:	f06f 0208 	mvn.w	r2, #8
 80018e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018e8:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ea:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ec:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ee:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80018f0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018f2:	d002      	beq.n	80018fa <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80018f4:	f7ff ffb5 	bl	8001862 <HAL_TIM_IC_CaptureCallback>
 80018f8:	e004      	b.n	8001904 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018fa:	f7ff ffb1 	bl	8001860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff ffb0 	bl	8001864 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001904:	2300      	movs	r3, #0
 8001906:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	06d2      	lsls	r2, r2, #27
 800190e:	d516      	bpl.n	800193e <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	06d0      	lsls	r0, r2, #27
 8001914:	d513      	bpl.n	800193e <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001916:	f06f 0210 	mvn.w	r2, #16
 800191a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800191c:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800191e:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001920:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001924:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001926:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001928:	d002      	beq.n	8001930 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800192a:	f7ff ff9a 	bl	8001862 <HAL_TIM_IC_CaptureCallback>
 800192e:	e004      	b.n	800193a <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001930:	f7ff ff96 	bl	8001860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001934:	4620      	mov	r0, r4
 8001936:	f7ff ff95 	bl	8001864 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193a:	2300      	movs	r3, #0
 800193c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	691a      	ldr	r2, [r3, #16]
 8001942:	07d1      	lsls	r1, r2, #31
 8001944:	d508      	bpl.n	8001958 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	07d2      	lsls	r2, r2, #31
 800194a:	d505      	bpl.n	8001958 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800194c:	f06f 0201 	mvn.w	r2, #1
 8001950:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001952:	4620      	mov	r0, r4
 8001954:	f001 fc62 	bl	800321c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	0610      	lsls	r0, r2, #24
 800195e:	d508      	bpl.n	8001972 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	0611      	lsls	r1, r2, #24
 8001964:	d505      	bpl.n	8001972 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001966:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800196a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800196c:	4620      	mov	r0, r4
 800196e:	f000 f8be 	bl	8001aee <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	0652      	lsls	r2, r2, #25
 8001978:	d508      	bpl.n	800198c <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	0650      	lsls	r0, r2, #25
 800197e:	d505      	bpl.n	800198c <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001984:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff ff6d 	bl	8001866 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	0691      	lsls	r1, r2, #26
 8001992:	d50a      	bpl.n	80019aa <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	0692      	lsls	r2, r2, #26
 8001998:	d507      	bpl.n	80019aa <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800199a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800199e:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 80019a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 80019a6:	f000 b8a1 	b.w	8001aec <HAL_TIMEx_CommutationCallback>
 80019aa:	bd10      	pop	{r4, pc}

080019ac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80019ac:	4a2e      	ldr	r2, [pc, #184]	; (8001a68 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80019ae:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80019b0:	4290      	cmp	r0, r2
 80019b2:	d012      	beq.n	80019da <TIM_Base_SetConfig+0x2e>
 80019b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019b8:	d00f      	beq.n	80019da <TIM_Base_SetConfig+0x2e>
 80019ba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80019be:	4290      	cmp	r0, r2
 80019c0:	d00b      	beq.n	80019da <TIM_Base_SetConfig+0x2e>
 80019c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019c6:	4290      	cmp	r0, r2
 80019c8:	d007      	beq.n	80019da <TIM_Base_SetConfig+0x2e>
 80019ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ce:	4290      	cmp	r0, r2
 80019d0:	d003      	beq.n	80019da <TIM_Base_SetConfig+0x2e>
 80019d2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80019d6:	4290      	cmp	r0, r2
 80019d8:	d118      	bne.n	8001a0c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80019da:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019e0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <TIM_Base_SetConfig+0xbc>)
 80019e4:	4290      	cmp	r0, r2
 80019e6:	d037      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 80019e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019ec:	d034      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 80019ee:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <TIM_Base_SetConfig+0xc0>)
 80019f0:	4290      	cmp	r0, r2
 80019f2:	d031      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 80019f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f8:	4290      	cmp	r0, r2
 80019fa:	d02d      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 80019fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a00:	4290      	cmp	r0, r2
 8001a02:	d029      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 8001a04:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a08:	4290      	cmp	r0, r2
 8001a0a:	d025      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 8001a0c:	4a18      	ldr	r2, [pc, #96]	; (8001a70 <TIM_Base_SetConfig+0xc4>)
 8001a0e:	4290      	cmp	r0, r2
 8001a10:	d022      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 8001a12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a16:	4290      	cmp	r0, r2
 8001a18:	d01e      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 8001a1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a1e:	4290      	cmp	r0, r2
 8001a20:	d01a      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 8001a22:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a26:	4290      	cmp	r0, r2
 8001a28:	d016      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 8001a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2e:	4290      	cmp	r0, r2
 8001a30:	d012      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
 8001a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a36:	4290      	cmp	r0, r2
 8001a38:	d00e      	beq.n	8001a58 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001a3a:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a3c:	688b      	ldr	r3, [r1, #8]
 8001a3e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a40:	680b      	ldr	r3, [r1, #0]
 8001a42:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <TIM_Base_SetConfig+0xbc>)
 8001a46:	4298      	cmp	r0, r3
 8001a48:	d00b      	beq.n	8001a62 <TIM_Base_SetConfig+0xb6>
 8001a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a4e:	4298      	cmp	r0, r3
 8001a50:	d007      	beq.n	8001a62 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a52:	2301      	movs	r3, #1
 8001a54:	6143      	str	r3, [r0, #20]
}
 8001a56:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a58:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	e7eb      	b.n	8001a3a <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a62:	690b      	ldr	r3, [r1, #16]
 8001a64:	6303      	str	r3, [r0, #48]	; 0x30
 8001a66:	e7f4      	b.n	8001a52 <TIM_Base_SetConfig+0xa6>
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40014000 	.word	0x40014000

08001a74 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001a74:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a76:	4604      	mov	r4, r0
 8001a78:	b1a0      	cbz	r0, 8001aa4 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a82:	b91b      	cbnz	r3, 8001a8c <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a88:	f001 fe40 	bl	800370c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a92:	6820      	ldr	r0, [r4, #0]
 8001a94:	1d21      	adds	r1, r4, #4
 8001a96:	f7ff ff89 	bl	80019ac <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001aa6:	bd10      	pop	{r4, pc}

08001aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001aa8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001aac:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001aae:	b510      	push	{r4, lr}
 8001ab0:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001ab4:	d018      	beq.n	8001ae8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001aba:	6803      	ldr	r3, [r0, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ac2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001ac4:	685c      	ldr	r4, [r3, #4]
 8001ac6:	680a      	ldr	r2, [r1, #0]
 8001ac8:	4322      	orrs	r2, r4
 8001aca:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001ad4:	689c      	ldr	r4, [r3, #8]
 8001ad6:	684a      	ldr	r2, [r1, #4]
 8001ad8:	4322      	orrs	r2, r4
 8001ada:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001ae8:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8001aea:	bd10      	pop	{r4, pc}

08001aec <HAL_TIMEx_CommutationCallback>:
 8001aec:	4770      	bx	lr

08001aee <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aee:	4770      	bx	lr

08001af0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001af0:	6803      	ldr	r3, [r0, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001af8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b02:	2320      	movs	r3, #32
 8001b04:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001b08:	4770      	bx	lr
	...

08001b0c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001b10:	6807      	ldr	r7, [r0, #0]
 8001b12:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b14:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001b16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001b1a:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b1c:	68a1      	ldr	r1, [r4, #8]
 8001b1e:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001b20:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b22:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001b24:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001b26:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001b2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b30:	430a      	orrs	r2, r1
 8001b32:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001b34:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b38:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001b3a:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001b3c:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001b3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001b42:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001b48:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	4b7c      	ldr	r3, [pc, #496]	; (8001d40 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b50:	d17c      	bne.n	8001c4c <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b52:	429f      	cmp	r7, r3
 8001b54:	d003      	beq.n	8001b5e <UART_SetConfig+0x52>
 8001b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b5a:	429f      	cmp	r7, r3
 8001b5c:	d131      	bne.n	8001bc2 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b5e:	f7ff fc4f 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001b62:	6863      	ldr	r3, [r4, #4]
 8001b64:	2519      	movs	r5, #25
 8001b66:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001b6a:	4368      	muls	r0, r5
 8001b6c:	fbb0 f8f8 	udiv	r8, r0, r8
 8001b70:	f7ff fc46 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001b74:	6866      	ldr	r6, [r4, #4]
 8001b76:	4368      	muls	r0, r5
 8001b78:	0076      	lsls	r6, r6, #1
 8001b7a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b7e:	f7ff fc3f 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001b82:	6863      	ldr	r3, [r4, #4]
 8001b84:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4368      	muls	r0, r5
 8001b8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b90:	fbb0 f0f9 	udiv	r0, r0, r9
 8001b94:	fb09 6610 	mls	r6, r9, r0, r6
 8001b98:	f7ff fc32 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001b9c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001ba0:	6861      	ldr	r1, [r4, #4]
 8001ba2:	00f6      	lsls	r6, r6, #3
 8001ba4:	3632      	adds	r6, #50	; 0x32
 8001ba6:	fbb6 f6f9 	udiv	r6, r6, r9
 8001baa:	0076      	lsls	r6, r6, #1
 8001bac:	4368      	muls	r0, r5
 8001bae:	0049      	lsls	r1, r1, #1
 8001bb0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001bb4:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001bb8:	fbb0 faf1 	udiv	sl, r0, r1
 8001bbc:	f7ff fc20 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001bc0:	e030      	b.n	8001c24 <UART_SetConfig+0x118>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bc2:	f7ff fc05 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	2519      	movs	r5, #25
 8001bca:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001bce:	4368      	muls	r0, r5
 8001bd0:	fbb0 f8f8 	udiv	r8, r0, r8
 8001bd4:	f7ff fbfc 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001bd8:	6866      	ldr	r6, [r4, #4]
 8001bda:	4368      	muls	r0, r5
 8001bdc:	0076      	lsls	r6, r6, #1
 8001bde:	fbb0 f6f6 	udiv	r6, r0, r6
 8001be2:	f7ff fbf5 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001be6:	6863      	ldr	r3, [r4, #4]
 8001be8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4368      	muls	r0, r5
 8001bf0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bf4:	fbb0 f0f9 	udiv	r0, r0, r9
 8001bf8:	fb09 6610 	mls	r6, r9, r0, r6
 8001bfc:	f7ff fbe8 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001c00:	fbb8 f8f9 	udiv	r8, r8, r9
 8001c04:	00f6      	lsls	r6, r6, #3
 8001c06:	6861      	ldr	r1, [r4, #4]
 8001c08:	3632      	adds	r6, #50	; 0x32
 8001c0a:	fbb6 f6f9 	udiv	r6, r6, r9
 8001c0e:	0076      	lsls	r6, r6, #1
 8001c10:	4368      	muls	r0, r5
 8001c12:	0049      	lsls	r1, r1, #1
 8001c14:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001c18:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001c1c:	fbb0 faf1 	udiv	sl, r0, r1
 8001c20:	f7ff fbd6 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001c24:	4345      	muls	r5, r0
 8001c26:	6860      	ldr	r0, [r4, #4]
 8001c28:	0040      	lsls	r0, r0, #1
 8001c2a:	fbb5 f0f0 	udiv	r0, r5, r0
 8001c2e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001c32:	fb09 a210 	mls	r2, r9, r0, sl
 8001c36:	00d2      	lsls	r2, r2, #3
 8001c38:	3232      	adds	r2, #50	; 0x32
 8001c3a:	fbb2 f3f9 	udiv	r3, r2, r9
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	4443      	add	r3, r8
 8001c44:	441e      	add	r6, r3
 8001c46:	60be      	str	r6, [r7, #8]
 8001c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c4c:	429f      	cmp	r7, r3
 8001c4e:	d002      	beq.n	8001c56 <UART_SetConfig+0x14a>
 8001c50:	4b3c      	ldr	r3, [pc, #240]	; (8001d44 <UART_SetConfig+0x238>)
 8001c52:	429f      	cmp	r7, r3
 8001c54:	d130      	bne.n	8001cb8 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c56:	f7ff fbd3 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	2519      	movs	r5, #25
 8001c5e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001c62:	4368      	muls	r0, r5
 8001c64:	fbb0 f8f8 	udiv	r8, r0, r8
 8001c68:	f7ff fbca 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001c6c:	6866      	ldr	r6, [r4, #4]
 8001c6e:	4368      	muls	r0, r5
 8001c70:	00b6      	lsls	r6, r6, #2
 8001c72:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c76:	f7ff fbc3 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001c7a:	6863      	ldr	r3, [r4, #4]
 8001c7c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4368      	muls	r0, r5
 8001c84:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c88:	fbb0 f0f9 	udiv	r0, r0, r9
 8001c8c:	fb09 6610 	mls	r6, r9, r0, r6
 8001c90:	f7ff fbb6 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001c94:	fbb8 f8f9 	udiv	r8, r8, r9
 8001c98:	6861      	ldr	r1, [r4, #4]
 8001c9a:	0136      	lsls	r6, r6, #4
 8001c9c:	4368      	muls	r0, r5
 8001c9e:	0089      	lsls	r1, r1, #2
 8001ca0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001ca4:	3632      	adds	r6, #50	; 0x32
 8001ca6:	fbb0 faf1 	udiv	sl, r0, r1
 8001caa:	fbb6 f6f9 	udiv	r6, r6, r9
 8001cae:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001cb2:	f7ff fba5 	bl	8001400 <HAL_RCC_GetPCLK2Freq>
 8001cb6:	e02f      	b.n	8001d18 <UART_SetConfig+0x20c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001cb8:	f7ff fb8a 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	2519      	movs	r5, #25
 8001cc0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001cc4:	4368      	muls	r0, r5
 8001cc6:	fbb0 f8f8 	udiv	r8, r0, r8
 8001cca:	f7ff fb81 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001cce:	6866      	ldr	r6, [r4, #4]
 8001cd0:	4368      	muls	r0, r5
 8001cd2:	00b6      	lsls	r6, r6, #2
 8001cd4:	fbb0 f6f6 	udiv	r6, r0, r6
 8001cd8:	f7ff fb7a 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001cdc:	6863      	ldr	r3, [r4, #4]
 8001cde:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4368      	muls	r0, r5
 8001ce6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cea:	fbb0 f0f9 	udiv	r0, r0, r9
 8001cee:	fb09 6610 	mls	r6, r9, r0, r6
 8001cf2:	f7ff fb6d 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001cf6:	fbb8 f8f9 	udiv	r8, r8, r9
 8001cfa:	6861      	ldr	r1, [r4, #4]
 8001cfc:	0136      	lsls	r6, r6, #4
 8001cfe:	3632      	adds	r6, #50	; 0x32
 8001d00:	4368      	muls	r0, r5
 8001d02:	fbb6 f6f9 	udiv	r6, r6, r9
 8001d06:	0089      	lsls	r1, r1, #2
 8001d08:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001d0c:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001d10:	fbb0 faf1 	udiv	sl, r0, r1
 8001d14:	f7ff fb5c 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 8001d18:	4345      	muls	r5, r0
 8001d1a:	6860      	ldr	r0, [r4, #4]
 8001d1c:	0080      	lsls	r0, r0, #2
 8001d1e:	fbb5 f0f0 	udiv	r0, r5, r0
 8001d22:	fbb0 f0f9 	udiv	r0, r0, r9
 8001d26:	fb09 a210 	mls	r2, r9, r0, sl
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	3232      	adds	r2, #50	; 0x32
 8001d2e:	fbb2 f3f9 	udiv	r3, r2, r9
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4433      	add	r3, r6
 8001d38:	4443      	add	r3, r8
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d40:	40011000 	.word	0x40011000
 8001d44:	40011400 	.word	0x40011400

08001d48 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d48:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	b340      	cbz	r0, 8001da0 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001d4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d56:	b91b      	cbnz	r3, 8001d60 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001d5c:	f001 fd2c 	bl	80037b8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d60:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d62:	2324      	movs	r3, #36	; 0x24
 8001d64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d68:	68d3      	ldr	r3, [r2, #12]
 8001d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d6e:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d70:	4620      	mov	r0, r4
 8001d72:	f7ff fecb 	bl	8001b0c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d86:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d8e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d90:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001d92:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d94:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001d9e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001da2:	bd10      	pop	{r4, pc}

08001da4 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001da4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d118      	bne.n	8001dde <HAL_UART_Transmit_IT+0x3a>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001dac:	b1a9      	cbz	r1, 8001dda <HAL_UART_Transmit_IT+0x36>
 8001dae:	b1a2      	cbz	r2, 8001dda <HAL_UART_Transmit_IT+0x36>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001db0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d012      	beq.n	8001dde <HAL_UART_Transmit_IT+0x3a>
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8001db8:	84c2      	strh	r2, [r0, #38]	; 0x26
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr = pData;
 8001dba:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001dbc:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbe:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001dc0:	6801      	ldr	r1, [r0, #0]
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dc4:	2221      	movs	r2, #33	; 0x21
 8001dc6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001dca:	68ca      	ldr	r2, [r1, #12]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dcc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001dd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd4:	60ca      	str	r2, [r1, #12]
    
    return HAL_OK;
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4770      	bx	lr
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 8001dda:	2001      	movs	r0, #1
 8001ddc:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;   
 8001dde:	2002      	movs	r0, #2
  }
}
 8001de0:	4770      	bx	lr

08001de2 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8001de2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d11c      	bne.n	8001e24 <HAL_UART_Receive_IT+0x42>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001dea:	b1c9      	cbz	r1, 8001e20 <HAL_UART_Receive_IT+0x3e>
 8001dec:	b1c2      	cbz	r2, 8001e20 <HAL_UART_Receive_IT+0x3e>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001dee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d016      	beq.n	8001e24 <HAL_UART_Receive_IT+0x42>
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 8001df6:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8001df8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfa:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dfc:	2222      	movs	r2, #34	; 0x22
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfe:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e00:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e04:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8001e06:	6281      	str	r1, [r0, #40]	; 0x28
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e08:	6951      	ldr	r1, [r2, #20]
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e0a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0e:	f041 0101 	orr.w	r1, r1, #1
 8001e12:	6151      	str	r1, [r2, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001e14:	68d1      	ldr	r1, [r2, #12]
 8001e16:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001e1a:	60d1      	str	r1, [r2, #12]
    
    return HAL_OK;
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
 8001e22:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8001e24:	2002      	movs	r0, #2
  }
}
 8001e26:	4770      	bx	lr

08001e28 <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001e28:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001e2c:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e2e:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001e30:	d132      	bne.n	8001e98 <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e32:	6883      	ldr	r3, [r0, #8]
 8001e34:	6901      	ldr	r1, [r0, #16]
 8001e36:	6802      	ldr	r2, [r0, #0]
 8001e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e3e:	d10b      	bne.n	8001e58 <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e40:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e42:	b921      	cbnz	r1, 8001e4e <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e48:	f823 2b02 	strh.w	r2, [r3], #2
 8001e4c:	e002      	b.n	8001e54 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001e54:	6283      	str	r3, [r0, #40]	; 0x28
 8001e56:	e00a      	b.n	8001e6e <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e58:	b919      	cbnz	r1, 8001e62 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	6281      	str	r1, [r0, #40]	; 0x28
 8001e5e:	6852      	ldr	r2, [r2, #4]
 8001e60:	e004      	b.n	8001e6c <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e62:	6852      	ldr	r2, [r2, #4]
 8001e64:	1c59      	adds	r1, r3, #1
 8001e66:	6281      	str	r1, [r0, #40]	; 0x28
 8001e68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e6c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001e6e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001e70:	3c01      	subs	r4, #1
 8001e72:	b2a4      	uxth	r4, r4
 8001e74:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001e76:	b98c      	cbnz	r4, 8001e9c <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8001e90:	f001 fa1e 	bl	80032d0 <HAL_UART_RxCpltCallback>
 8001e94:	4620      	mov	r0, r4
 8001e96:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e98:	2002      	movs	r0, #2
 8001e9a:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
    }

    if(--huart->RxXferCount == 0U)
 8001e9c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001e9e:	bd10      	pop	{r4, pc}

08001ea0 <HAL_UART_ErrorCallback>:
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ea4:	6803      	ldr	r3, [r0, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ea8:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eaa:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001eac:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eae:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001eb0:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001eb2:	d107      	bne.n	8001ec4 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eb4:	0696      	lsls	r6, r2, #26
 8001eb6:	d55a      	bpl.n	8001f6e <HAL_UART_IRQHandler+0xca>
 8001eb8:	068d      	lsls	r5, r1, #26
 8001eba:	d558      	bpl.n	8001f6e <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 8001ec0:	f7ff bfb2 	b.w	8001e28 <UART_Receive_IT>
      return;
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ec4:	f015 0001 	ands.w	r0, r5, #1
 8001ec8:	d102      	bne.n	8001ed0 <HAL_UART_IRQHandler+0x2c>
 8001eca:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001ece:	d04e      	beq.n	8001f6e <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ed0:	07d3      	lsls	r3, r2, #31
 8001ed2:	d505      	bpl.n	8001ee0 <HAL_UART_IRQHandler+0x3c>
 8001ed4:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ed6:	bf42      	ittt	mi
 8001ed8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001eda:	f043 0301 	orrmi.w	r3, r3, #1
 8001ede:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ee0:	0755      	lsls	r5, r2, #29
 8001ee2:	d504      	bpl.n	8001eee <HAL_UART_IRQHandler+0x4a>
 8001ee4:	b118      	cbz	r0, 8001eee <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ee6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eee:	0793      	lsls	r3, r2, #30
 8001ef0:	d504      	bpl.n	8001efc <HAL_UART_IRQHandler+0x58>
 8001ef2:	b118      	cbz	r0, 8001efc <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001efc:	0716      	lsls	r6, r2, #28
 8001efe:	d504      	bpl.n	8001f0a <HAL_UART_IRQHandler+0x66>
 8001f00:	b118      	cbz	r0, 8001f0a <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d066      	beq.n	8001fde <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f10:	0695      	lsls	r5, r2, #26
 8001f12:	d504      	bpl.n	8001f1e <HAL_UART_IRQHandler+0x7a>
 8001f14:	0688      	lsls	r0, r1, #26
 8001f16:	d502      	bpl.n	8001f1e <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff ff85 	bl	8001e28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f24:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f26:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f28:	d402      	bmi.n	8001f30 <HAL_UART_IRQHandler+0x8c>
 8001f2a:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 8001f2e:	d01a      	beq.n	8001f66 <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f30:	f7ff fdde 	bl	8001af0 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	0652      	lsls	r2, r2, #25
 8001f3a:	d510      	bpl.n	8001f5e <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f3c:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001f3e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f44:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001f46:	b150      	cbz	r0, 8001f5e <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_UART_IRQHandler+0x13c>)
 8001f4a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f4c:	f7fe fa01 	bl	8000352 <HAL_DMA_Abort_IT>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d044      	beq.n	8001fde <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f54:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f5a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f5c:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff ff9e 	bl	8001ea0 <HAL_UART_ErrorCallback>
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001f66:	f7ff ff9b 	bl	8001ea0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f6e:	0616      	lsls	r6, r2, #24
 8001f70:	d527      	bpl.n	8001fc2 <HAL_UART_IRQHandler+0x11e>
 8001f72:	060d      	lsls	r5, r1, #24
 8001f74:	d525      	bpl.n	8001fc2 <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f76:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f7a:	2a21      	cmp	r2, #33	; 0x21
 8001f7c:	d12f      	bne.n	8001fde <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f7e:	68a2      	ldr	r2, [r4, #8]
 8001f80:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f84:	6a22      	ldr	r2, [r4, #32]
 8001f86:	d10a      	bne.n	8001f9e <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f88:	8811      	ldrh	r1, [r2, #0]
 8001f8a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f8e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f90:	6921      	ldr	r1, [r4, #16]
 8001f92:	b909      	cbnz	r1, 8001f98 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8001f94:	3202      	adds	r2, #2
 8001f96:	e000      	b.n	8001f9a <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001f98:	3201      	adds	r2, #1
 8001f9a:	6222      	str	r2, [r4, #32]
 8001f9c:	e003      	b.n	8001fa6 <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f9e:	1c51      	adds	r1, r2, #1
 8001fa0:	6221      	str	r1, [r4, #32]
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001fa6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001fa8:	3a01      	subs	r2, #1
 8001faa:	b292      	uxth	r2, r2
 8001fac:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001fae:	b9b2      	cbnz	r2, 8001fde <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fc2:	0650      	lsls	r0, r2, #25
 8001fc4:	d50b      	bpl.n	8001fde <HAL_UART_IRQHandler+0x13a>
 8001fc6:	064a      	lsls	r2, r1, #25
 8001fc8:	d509      	bpl.n	8001fde <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f001 f92f 	bl	800323c <HAL_UART_TxCpltCallback>
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
 8001fe0:	08001fe5 	.word	0x08001fe5

08001fe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001fec:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001fee:	f7ff ff57 	bl	8001ea0 <HAL_UART_ErrorCallback>
 8001ff2:	bd08      	pop	{r3, pc}

08001ff4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	b538      	push	{r3, r4, r5, lr}
 8001ff8:	ad05      	add	r5, sp, #20
 8001ffa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002000:	2b01      	cmp	r3, #1
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002002:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002004:	d117      	bne.n	8002036 <USB_CoreInit+0x42>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002006:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800200e:	68c3      	ldr	r3, [r0, #12]
 8002010:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002018:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800201a:	68c3      	ldr	r3, [r0, #12]
 800201c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002020:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002024:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002026:	bf02      	ittt	eq
 8002028:	68c3      	ldreq	r3, [r0, #12]
 800202a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800202e:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002030:	f000 fc9c 	bl	800296c <USB_CoreReset>
 8002034:	e008      	b.n	8002048 <USB_CoreInit+0x54>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002036:	68c3      	ldr	r3, [r0, #12]
 8002038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800203c:	60c3      	str	r3, [r0, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800203e:	f000 fc95 	bl	800296c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002046:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8002048:	9b08      	ldr	r3, [sp, #32]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <USB_CoreInit+0x6a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800204e:	68a3      	ldr	r3, [r4, #8]
 8002050:	f043 0306 	orr.w	r3, r3, #6
 8002054:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002056:	68a3      	ldr	r3, [r4, #8]
 8002058:	f043 0320 	orr.w	r3, r3, #32
 800205c:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 800205e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002062:	2000      	movs	r0, #0
 8002064:	b004      	add	sp, #16
 8002066:	4770      	bx	lr

08002068 <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002068:	6883      	ldr	r3, [r0, #8]
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002070:	2000      	movs	r0, #0
 8002072:	4770      	bx	lr

08002074 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002074:	6883      	ldr	r3, [r0, #8]
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800207c:	2000      	movs	r0, #0
 800207e:	4770      	bx	lr

08002080 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002080:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002082:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002084:	2901      	cmp	r1, #1
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002086:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800208a:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800208c:	d104      	bne.n	8002098 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800208e:	68c3      	ldr	r3, [r0, #12]
 8002090:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002094:	60c3      	str	r3, [r0, #12]
 8002096:	e004      	b.n	80020a2 <USB_SetCurrentMode+0x22>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002098:	b919      	cbnz	r1, 80020a2 <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800209a:	68c3      	ldr	r3, [r0, #12]
 800209c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020a0:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 80020a2:	2032      	movs	r0, #50	; 0x32
 80020a4:	f7fe f8cc 	bl	8000240 <HAL_Delay>
  
  return HAL_OK;
}
 80020a8:	2000      	movs	r0, #0
 80020aa:	bd08      	pop	{r3, pc}

080020ac <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80020ac:	b084      	sub	sp, #16
 80020ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b2:	4604      	mov	r4, r0
 80020b4:	a807      	add	r0, sp, #28
 80020b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80020ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80020bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80020be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020c0:	4688      	mov	r8, r1
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 80020c2:	b91e      	cbnz	r6, 80020cc <USB_DevInit+0x20>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80020c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80020ca:	e002      	b.n	80020d2 <USB_DevInit+0x26>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80020cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020d0:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80020d8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80020dc:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80020e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020e2:	2b01      	cmp	r3, #1
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80020e4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80020e8:	d106      	bne.n	80020f8 <USB_DevInit+0x4c>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80020ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80020ec:	b129      	cbz	r1, 80020fa <USB_DevInit+0x4e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80020ee:	4619      	mov	r1, r3
 80020f0:	4620      	mov	r0, r4
 80020f2:	f000 f897 	bl	8002224 <USB_SetDevSpeed>
 80020f6:	e003      	b.n	8002100 <USB_DevInit+0x54>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80020f8:	2103      	movs	r1, #3
 80020fa:	4620      	mov	r0, r4
 80020fc:	f000 f892 	bl	8002224 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002100:	2110      	movs	r1, #16
 8002102:	4620      	mov	r0, r4
 8002104:	f000 f86c 	bl	80021e0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002108:	4620      	mov	r0, r4
 800210a:	f000 f87b 	bl	8002204 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800210e:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002114:	612b      	str	r3, [r5, #16]
 8002116:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8002118:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800211a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800211e:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002120:	f04f 0eff 	mov.w	lr, #255	; 0xff
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
 8002124:	61eb      	str	r3, [r5, #28]
 8002126:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800212a:	4543      	cmp	r3, r8
 800212c:	d00c      	beq.n	8002148 <USB_DevInit+0x9c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800212e:	f8d2 c000 	ldr.w	ip, [r2]
 8002132:	f1bc 0f00 	cmp.w	ip, #0
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002136:	bfb4      	ite	lt
 8002138:	6010      	strlt	r0, [r2, #0]
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800213a:	6011      	strge	r1, [r2, #0]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800213c:	3301      	adds	r3, #1
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800213e:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002140:	f8c2 e008 	str.w	lr, [r2, #8]
 8002144:	3220      	adds	r2, #32
 8002146:	e7f0      	b.n	800212a <USB_DevInit+0x7e>
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002148:	2200      	movs	r2, #0
 800214a:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800214e:	4611      	mov	r1, r2
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002154:	f04f 0eff 	mov.w	lr, #255	; 0xff
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002158:	4542      	cmp	r2, r8
 800215a:	d00c      	beq.n	8002176 <USB_DevInit+0xca>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800215c:	f8d3 c000 	ldr.w	ip, [r3]
 8002160:	f1bc 0f00 	cmp.w	ip, #0
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002164:	bfb4      	ite	lt
 8002166:	6018      	strlt	r0, [r3, #0]
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002168:	6019      	strge	r1, [r3, #0]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800216a:	3201      	adds	r2, #1
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800216c:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 800216e:	f8c3 e008 	str.w	lr, [r3, #8]
 8002172:	3320      	adds	r3, #32
 8002174:	e7f0      	b.n	8002158 <USB_DevInit+0xac>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002176:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8002178:	2f01      	cmp	r7, #1
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800217a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800217e:	612b      	str	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8002180:	d108      	bne.n	8002194 <USB_DevInit+0xe8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <USB_DevInit+0x12c>)
 8002184:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002186:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	f043 0303 	orr.w	r3, r3, #3
 8002190:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002192:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002198:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800219c:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800219e:	b91f      	cbnz	r7, 80021a8 <USB_DevInit+0xfc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80021a0:	69a3      	ldr	r3, [r4, #24]
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80021a8:	69a2      	ldr	r2, [r4, #24]
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <USB_DevInit+0x130>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 80021b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80021b2:	b11b      	cbz	r3, 80021bc <USB_DevInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80021b4:	69a3      	ldr	r3, [r4, #24]
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80021bc:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80021be:	bf01      	itttt	eq
 80021c0:	69a3      	ldreq	r3, [r4, #24]
 80021c2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80021c6:	f043 0304 	orreq.w	r3, r3, #4
 80021ca:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80021cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021d0:	2000      	movs	r0, #0
 80021d2:	b004      	add	sp, #16
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	00800100 	.word	0x00800100
 80021dc:	803c3800 	.word	0x803c3800

080021e0 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80021e0:	0189      	lsls	r1, r1, #6
 80021e2:	f041 0120 	orr.w	r1, r1, #32
 80021e6:	4a06      	ldr	r2, [pc, #24]	; (8002200 <USB_FlushTxFifo+0x20>)
 80021e8:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80021ea:	3a01      	subs	r2, #1
 80021ec:	d005      	beq.n	80021fa <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80021ee:	6903      	ldr	r3, [r0, #16]
 80021f0:	f013 0320 	ands.w	r3, r3, #32
 80021f4:	d1f9      	bne.n	80021ea <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80021f6:	4618      	mov	r0, r3
 80021f8:	4770      	bx	lr
  
  do
  {
    if (++count > 200000)
    {
      return HAL_TIMEOUT;
 80021fa:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
  
  return HAL_OK;
}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	00030d41 	.word	0x00030d41

08002204 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002204:	2310      	movs	r3, #16
 8002206:	4a06      	ldr	r2, [pc, #24]	; (8002220 <USB_FlushRxFifo+0x1c>)
 8002208:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800220a:	3a01      	subs	r2, #1
 800220c:	d005      	beq.n	800221a <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800220e:	6903      	ldr	r3, [r0, #16]
 8002210:	f013 0310 	ands.w	r3, r3, #16
 8002214:	d1f9      	bne.n	800220a <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002216:	4618      	mov	r0, r3
 8002218:	4770      	bx	lr
  
  do
  {
    if (++count > 200000)
    {
      return HAL_TIMEOUT;
 800221a:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
  
  return HAL_OK;
}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	00030d41 	.word	0x00030d41

08002224 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002224:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002228:	4319      	orrs	r1, r3
 800222a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800222e:	2000      	movs	r0, #0
 8002230:	4770      	bx	lr

08002232 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002232:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002236:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800223a:	f013 0006 	ands.w	r0, r3, #6
 800223e:	d012      	beq.n	8002266 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002240:	6893      	ldr	r3, [r2, #8]
 8002242:	f003 0306 	and.w	r3, r3, #6
 8002246:	2b02      	cmp	r3, #2
 8002248:	d00c      	beq.n	8002264 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800224a:	6893      	ldr	r3, [r2, #8]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800224c:	f003 0306 	and.w	r3, r3, #6
 8002250:	2b06      	cmp	r3, #6
 8002252:	d007      	beq.n	8002264 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002254:	6893      	ldr	r3, [r2, #8]
 8002256:	f003 0306 	and.w	r3, r3, #6
 800225a:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 800225c:	bf14      	ite	ne
 800225e:	2000      	movne	r0, #0
 8002260:	2002      	moveq	r0, #2
 8002262:	4770      	bx	lr
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8002264:	2003      	movs	r0, #3
  {
    speed = USB_OTG_SPEED_LOW;
  }
  
  return speed;
}
 8002266:	4770      	bx	lr

08002268 <USB_ActivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8002268:	784b      	ldrb	r3, [r1, #1]
 800226a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800226e:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002274:	69d4      	ldr	r4, [r2, #28]
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8002276:	d11b      	bne.n	80022b0 <USB_ActivateEndpoint+0x48>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002278:	40b3      	lsls	r3, r6
 800227a:	b29b      	uxth	r3, r3
 800227c:	4323      	orrs	r3, r4
 800227e:	61d3      	str	r3, [r2, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002280:	780e      	ldrb	r6, [r1, #0]
 8002282:	f44f 6510 	mov.w	r5, #2304	; 0x900
 8002286:	eb05 1546 	add.w	r5, r5, r6, lsl #5
 800228a:	582b      	ldr	r3, [r5, r0]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	d42a      	bmi.n	80022e6 <USB_ActivateEndpoint+0x7e>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002290:	582c      	ldr	r4, [r5, r0]
 8002292:	688a      	ldr	r2, [r1, #8]
 8002294:	f044 5380 	orr.w	r3, r4, #268435456	; 0x10000000
 8002298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80022a0:	431a      	orrs	r2, r3
 80022a2:	78cb      	ldrb	r3, [r1, #3]
 80022a4:	ea42 4383 	orr.w	r3, r2, r3, lsl #18
 80022a8:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 80022ac:	502b      	str	r3, [r5, r0]
 80022ae:	e01a      	b.n	80022e6 <USB_ActivateEndpoint+0x7e>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80022b0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80022b4:	fa05 f306 	lsl.w	r3, r5, r6
 80022b8:	4323      	orrs	r3, r4
 80022ba:	61d3      	str	r3, [r2, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80022bc:	780c      	ldrb	r4, [r1, #0]
 80022be:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80022c2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80022c6:	5823      	ldr	r3, [r4, r0]
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	d40c      	bmi.n	80022e6 <USB_ActivateEndpoint+0x7e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80022cc:	5822      	ldr	r2, [r4, r0]
 80022ce:	688b      	ldr	r3, [r1, #8]
 80022d0:	f3c3 050a 	ubfx	r5, r3, #0, #11
 80022d4:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 80022d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022dc:	78ca      	ldrb	r2, [r1, #3]
 80022de:	432b      	orrs	r3, r5
 80022e0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80022e4:	5023      	str	r3, [r4, r0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80022e6:	2000      	movs	r0, #0
 80022e8:	bd70      	pop	{r4, r5, r6, pc}

080022ea <USB_DeactivateEndpoint>:
 80022ea:	f000 b801 	b.w	80022f0 <USB_DeactivateDedicatedEndpoint>
	...

080022f0 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80022f2:	784b      	ldrb	r3, [r1, #1]
 80022f4:	780a      	ldrb	r2, [r1, #0]
 80022f6:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80022f8:	4604      	mov	r4, r0
 80022fa:	460e      	mov	r6, r1
 80022fc:	f04f 0320 	mov.w	r3, #32
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002300:	d131      	bne.n	8002366 <USB_DeactivateDedicatedEndpoint+0x76>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002302:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002306:	fb13 1202 	smlabb	r2, r3, r2, r1
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 800230a:	4f2f      	ldr	r7, [pc, #188]	; (80023c8 <USB_DeactivateDedicatedEndpoint+0xd8>)
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 800230c:	5810      	ldr	r0, [r2, r0]
 800230e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8002312:	5110      	str	r0, [r2, r4]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002314:	7832      	ldrb	r2, [r6, #0]
 8002316:	fb13 1202 	smlabb	r2, r3, r2, r1
 800231a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800231e:	5110      	str	r0, [r2, r4]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002320:	7832      	ldrb	r2, [r6, #0]
 8002322:	fb13 1202 	smlabb	r2, r3, r2, r1
 8002326:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800232a:	5110      	str	r0, [r2, r4]
    
    do
    {
      if (++count > 200000U)
 800232c:	3f01      	subs	r7, #1
 800232e:	d101      	bne.n	8002334 <USB_DeactivateDedicatedEndpoint+0x44>
      {
        return HAL_TIMEOUT;
 8002330:	2003      	movs	r0, #3
 8002332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002334:	7832      	ldrb	r2, [r6, #0]
 8002336:	fb13 1202 	smlabb	r2, r3, r2, r1
 800233a:	4422      	add	r2, r4
 800233c:	6890      	ldr	r0, [r2, #8]
 800233e:	f010 4580 	ands.w	r5, r0, #1073741824	; 0x40000000
 8002342:	d1f3      	bne.n	800232c <USB_DeactivateDedicatedEndpoint+0x3c>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8002344:	2110      	movs	r1, #16
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff ff4a 	bl	80021e0 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 800234c:	7833      	ldrb	r3, [r6, #0]
 800234e:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8002352:	2201      	movs	r2, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	b29b      	uxth	r3, r3
 800235a:	ea21 0303 	bic.w	r3, r1, r3
 800235e:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8002362:	4628      	mov	r0, r5
 8002364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002366:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 800236a:	fb13 1202 	smlabb	r2, r3, r2, r1
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800236e:	4d16      	ldr	r5, [pc, #88]	; (80023c8 <USB_DeactivateDedicatedEndpoint+0xd8>)
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002370:	5880      	ldr	r0, [r0, r2]
 8002372:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8002376:	50a0      	str	r0, [r4, r2]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002378:	7832      	ldrb	r2, [r6, #0]
 800237a:	fb13 1202 	smlabb	r2, r3, r2, r1
 800237e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002382:	50a0      	str	r0, [r4, r2]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8002384:	7832      	ldrb	r2, [r6, #0]
 8002386:	fb13 1202 	smlabb	r2, r3, r2, r1
 800238a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800238e:	50a0      	str	r0, [r4, r2]
    
    do
    {
      if (++count > 200000U)
 8002390:	3d01      	subs	r5, #1
 8002392:	d0cd      	beq.n	8002330 <USB_DeactivateDedicatedEndpoint+0x40>
        return HAL_TIMEOUT;
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8002394:	7832      	ldrb	r2, [r6, #0]
 8002396:	fb13 1202 	smlabb	r2, r3, r2, r1
 800239a:	4422      	add	r2, r4
 800239c:	6890      	ldr	r0, [r2, #8]
 800239e:	f010 0010 	ands.w	r0, r0, #16
 80023a2:	d1f5      	bne.n	8002390 <USB_DeactivateDedicatedEndpoint+0xa0>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023a4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80023a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ac:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80023b0:	7831      	ldrb	r1, [r6, #0]
 80023b2:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 80023b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ba:	408b      	lsls	r3, r1
 80023bc:	ea22 0303 	bic.w	r3, r2, r3
 80023c0:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
  }
  return HAL_OK;

}
 80023c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	00030d41 	.word	0x00030d41

080023cc <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80023cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80023d0:	784b      	ldrb	r3, [r1, #1]
 80023d2:	780c      	ldrb	r4, [r1, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f04f 0520 	mov.w	r5, #32
 80023da:	694b      	ldr	r3, [r1, #20]
 80023dc:	f040 809b 	bne.w	8002516 <USB_EPStartXfer+0x14a>
 80023e0:	f44f 6610 	mov.w	r6, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80023e4:	fb15 6404 	smlabb	r4, r5, r4, r6
 80023e8:	4404      	add	r4, r0
 80023ea:	6927      	ldr	r7, [r4, #16]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80023ec:	b9ab      	cbnz	r3, 800241a <USB_EPStartXfer+0x4e>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80023ee:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 80023f2:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 80023f6:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80023f8:	780c      	ldrb	r4, [r1, #0]
 80023fa:	fb15 6404 	smlabb	r4, r5, r4, r6
 80023fe:	4404      	add	r4, r0
 8002400:	6927      	ldr	r7, [r4, #16]
 8002402:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8002406:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002408:	780c      	ldrb	r4, [r1, #0]
 800240a:	fb15 6504 	smlabb	r5, r5, r4, r6
 800240e:	4405      	add	r5, r0
 8002410:	692c      	ldr	r4, [r5, #16]
 8002412:	0ce4      	lsrs	r4, r4, #19
 8002414:	04e4      	lsls	r4, r4, #19
 8002416:	612c      	str	r4, [r5, #16]
 8002418:	e03f      	b.n	800249a <USB_EPStartXfer+0xce>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800241a:	0cff      	lsrs	r7, r7, #19
 800241c:	04ff      	lsls	r7, r7, #19
 800241e:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002420:	780c      	ldrb	r4, [r1, #0]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8002422:	f8d1 c008 	ldr.w	ip, [r1, #8]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002426:	fb15 6404 	smlabb	r4, r5, r4, r6
 800242a:	4404      	add	r4, r0
 800242c:	6927      	ldr	r7, [r4, #16]
 800242e:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8002432:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 8002436:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8002438:	780f      	ldrb	r7, [r1, #0]
 800243a:	fb15 6707 	smlabb	r7, r5, r7, r6
 800243e:	4407      	add	r7, r0
 8002440:	eb03 040c 	add.w	r4, r3, ip
 8002444:	3c01      	subs	r4, #1
 8002446:	fbb4 f4fc 	udiv	r4, r4, ip
 800244a:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8002600 <USB_EPStartXfer+0x234>
 800244e:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8002452:	04e4      	lsls	r4, r4, #19
 8002454:	ea04 0c0c 	and.w	ip, r4, ip
 8002458:	ea4c 040e 	orr.w	r4, ip, lr
 800245c:	613c      	str	r4, [r7, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800245e:	780c      	ldrb	r4, [r1, #0]
 8002460:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002464:	4404      	add	r4, r0
 8002466:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 800246a:	6927      	ldr	r7, [r4, #16]
 800246c:	ea4e 0707 	orr.w	r7, lr, r7
 8002470:	6127      	str	r7, [r4, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8002472:	78cc      	ldrb	r4, [r1, #3]
 8002474:	2c01      	cmp	r4, #1
 8002476:	f040 80ba 	bne.w	80025ee <USB_EPStartXfer+0x222>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800247a:	780c      	ldrb	r4, [r1, #0]
 800247c:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002480:	4404      	add	r4, r0
 8002482:	6927      	ldr	r7, [r4, #16]
 8002484:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 8002488:	6127      	str	r7, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800248a:	780c      	ldrb	r4, [r1, #0]
 800248c:	fb15 6504 	smlabb	r5, r5, r4, r6
 8002490:	4405      	add	r5, r0
 8002492:	692c      	ldr	r4, [r5, #16]
 8002494:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002498:	612c      	str	r4, [r5, #16]
      }       
    }

    if (dma == 1U)
 800249a:	2a01      	cmp	r2, #1
 800249c:	d106      	bne.n	80024ac <USB_EPStartXfer+0xe0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800249e:	780c      	ldrb	r4, [r1, #0]
 80024a0:	690d      	ldr	r5, [r1, #16]
 80024a2:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80024a6:	f8c4 5914 	str.w	r5, [r4, #2324]	; 0x914
 80024aa:	e00b      	b.n	80024c4 <USB_EPStartXfer+0xf8>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80024ac:	78cc      	ldrb	r4, [r1, #3]
 80024ae:	2c01      	cmp	r4, #1
 80024b0:	d00b      	beq.n	80024ca <USB_EPStartXfer+0xfe>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80024b2:	b13b      	cbz	r3, 80024c4 <USB_EPStartXfer+0xf8>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80024b4:	780f      	ldrb	r7, [r1, #0]
 80024b6:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 80024ba:	2401      	movs	r4, #1
 80024bc:	40bc      	lsls	r4, r7
 80024be:	432c      	orrs	r4, r5
 80024c0:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80024c4:	78cc      	ldrb	r4, [r1, #3]
 80024c6:	2c01      	cmp	r4, #1
 80024c8:	d111      	bne.n	80024ee <USB_EPStartXfer+0x122>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80024ca:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80024ce:	f414 7f80 	tst.w	r4, #256	; 0x100
 80024d2:	780c      	ldrb	r4, [r1, #0]
 80024d4:	f04f 0520 	mov.w	r5, #32
 80024d8:	f44f 6610 	mov.w	r6, #2304	; 0x900
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80024dc:	fb15 6404 	smlabb	r4, r5, r4, r6
 80024e0:	5825      	ldr	r5, [r4, r0]
 80024e2:	bf0c      	ite	eq
 80024e4:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80024e8:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80024ec:	5025      	str	r5, [r4, r0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80024ee:	780d      	ldrb	r5, [r1, #0]
 80024f0:	f44f 6410 	mov.w	r4, #2304	; 0x900
 80024f4:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 80024f8:	5905      	ldr	r5, [r0, r4]
 80024fa:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80024fe:	5105      	str	r5, [r0, r4]
    
    if (ep->type == EP_TYPE_ISOC)
 8002500:	78cc      	ldrb	r4, [r1, #3]
 8002502:	2c01      	cmp	r4, #1
 8002504:	d177      	bne.n	80025f6 <USB_EPStartXfer+0x22a>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8002506:	780c      	ldrb	r4, [r1, #0]
 8002508:	9200      	str	r2, [sp, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	4622      	mov	r2, r4
 800250e:	68c9      	ldr	r1, [r1, #12]
 8002510:	f000 f921 	bl	8002756 <USB_WritePacket>
 8002514:	e06f      	b.n	80025f6 <USB_EPStartXfer+0x22a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002516:	f44f 6630 	mov.w	r6, #2816	; 0xb00
 800251a:	fb15 6404 	smlabb	r4, r5, r4, r6
 800251e:	4404      	add	r4, r0
 8002520:	6927      	ldr	r7, [r4, #16]
 8002522:	0cff      	lsrs	r7, r7, #19
 8002524:	04ff      	lsls	r7, r7, #19
 8002526:	6127      	str	r7, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8002528:	780c      	ldrb	r4, [r1, #0]
 800252a:	fb15 6404 	smlabb	r4, r5, r4, r6
 800252e:	4404      	add	r4, r0
 8002530:	6927      	ldr	r7, [r4, #16]
 8002532:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8002536:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 800253a:	6127      	str	r7, [r4, #16]
 800253c:	780c      	ldrb	r4, [r1, #0]
 800253e:	688f      	ldr	r7, [r1, #8]

    if (ep->xfer_len == 0U)
 8002540:	b983      	cbnz	r3, 8002564 <USB_EPStartXfer+0x198>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002542:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002546:	4404      	add	r4, r0
 8002548:	f3c7 0712 	ubfx	r7, r7, #0, #19
 800254c:	6923      	ldr	r3, [r4, #16]
 800254e:	431f      	orrs	r7, r3
 8002550:	6127      	str	r7, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002552:	780b      	ldrb	r3, [r1, #0]
 8002554:	fb15 6503 	smlabb	r5, r5, r3, r6
 8002558:	4405      	add	r5, r0
 800255a:	692b      	ldr	r3, [r5, #16]
 800255c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002560:	612b      	str	r3, [r5, #16]
 8002562:	e01d      	b.n	80025a0 <USB_EPStartXfer+0x1d4>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002564:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002568:	4404      	add	r4, r0
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 800256a:	443b      	add	r3, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800256c:	f8df c090 	ldr.w	ip, [pc, #144]	; 8002600 <USB_EPStartXfer+0x234>
 8002570:	f8d4 e010 	ldr.w	lr, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8002574:	3b01      	subs	r3, #1
 8002576:	fbb3 f3f7 	udiv	r3, r3, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800257a:	ea4f 48c3 	mov.w	r8, r3, lsl #19
 800257e:	ea08 0c0c 	and.w	ip, r8, ip
 8002582:	ea4c 0e0e 	orr.w	lr, ip, lr
 8002586:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800258a:	780c      	ldrb	r4, [r1, #0]
 800258c:	fb15 6504 	smlabb	r5, r5, r4, r6
 8002590:	4405      	add	r5, r0
 8002592:	b29b      	uxth	r3, r3
 8002594:	692c      	ldr	r4, [r5, #16]
 8002596:	435f      	muls	r7, r3
 8002598:	f3c7 0712 	ubfx	r7, r7, #0, #19
 800259c:	4327      	orrs	r7, r4
 800259e:	612f      	str	r7, [r5, #16]
    }

    if (dma == 1U)
 80025a0:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80025a2:	bf01      	itttt	eq
 80025a4:	780b      	ldrbeq	r3, [r1, #0]
 80025a6:	68ca      	ldreq	r2, [r1, #12]
 80025a8:	eb00 1343 	addeq.w	r3, r0, r3, lsl #5
 80025ac:	f8c3 2b14 	streq.w	r2, [r3, #2836]	; 0xb14
    }
    
    if (ep->type == EP_TYPE_ISOC)
 80025b0:	78cb      	ldrb	r3, [r1, #3]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d111      	bne.n	80025da <USB_EPStartXfer+0x20e>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80025b6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80025ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025be:	780b      	ldrb	r3, [r1, #0]
 80025c0:	f04f 0220 	mov.w	r2, #32
 80025c4:	f44f 6430 	mov.w	r4, #2816	; 0xb00
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80025c8:	fb12 4303 	smlabb	r3, r2, r3, r4
 80025cc:	58c2      	ldr	r2, [r0, r3]
 80025ce:	bf0c      	ite	eq
 80025d0:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80025d4:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80025d8:	50c2      	str	r2, [r0, r3]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80025da:	780a      	ldrb	r2, [r1, #0]
 80025dc:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80025e0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80025e4:	58c2      	ldr	r2, [r0, r3]
 80025e6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80025ea:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
 80025ec:	e003      	b.n	80025f6 <USB_EPStartXfer+0x22a>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80025ee:	2a01      	cmp	r2, #1
 80025f0:	f47f af5f 	bne.w	80024b2 <USB_EPStartXfer+0xe6>
 80025f4:	e753      	b.n	800249e <USB_EPStartXfer+0xd2>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80025f6:	2000      	movs	r0, #0
 80025f8:	b002      	add	sp, #8
 80025fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025fe:	bf00      	nop
 8002600:	1ff80000 	.word	0x1ff80000

08002604 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IN endpoint */
  if (ep->is_in == 1U)
 8002606:	784b      	ldrb	r3, [r1, #1]
 8002608:	694d      	ldr	r5, [r1, #20]
 800260a:	2b01      	cmp	r3, #1
 800260c:	f04f 0420 	mov.w	r4, #32
 8002610:	780b      	ldrb	r3, [r1, #0]
 8002612:	d162      	bne.n	80026da <USB_EP0StartXfer+0xd6>
 8002614:	f44f 6610 	mov.w	r6, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002618:	fb14 6303 	smlabb	r3, r4, r3, r6
 800261c:	4403      	add	r3, r0
{
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800261e:	b9b5      	cbnz	r5, 800264e <USB_EP0StartXfer+0x4a>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002620:	691d      	ldr	r5, [r3, #16]
 8002622:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002626:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800262a:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800262c:	780b      	ldrb	r3, [r1, #0]
 800262e:	fb14 6303 	smlabb	r3, r4, r3, r6
 8002632:	4403      	add	r3, r0
 8002634:	691d      	ldr	r5, [r3, #16]
 8002636:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800263a:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800263c:	780b      	ldrb	r3, [r1, #0]
 800263e:	fb14 6403 	smlabb	r4, r4, r3, r6
 8002642:	4404      	add	r4, r0
 8002644:	6923      	ldr	r3, [r4, #16]
 8002646:	0cdb      	lsrs	r3, r3, #19
 8002648:	04db      	lsls	r3, r3, #19
 800264a:	6123      	str	r3, [r4, #16]
 800264c:	e026      	b.n	800269c <USB_EP0StartXfer+0x98>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800264e:	691f      	ldr	r7, [r3, #16]
 8002650:	0cff      	lsrs	r7, r7, #19
 8002652:	04ff      	lsls	r7, r7, #19
 8002654:	611f      	str	r7, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002656:	780b      	ldrb	r3, [r1, #0]
 8002658:	fb14 6403 	smlabb	r4, r4, r3, r6
 800265c:	4404      	add	r4, r0
 800265e:	6923      	ldr	r3, [r4, #16]
 8002660:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002664:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002668:	6123      	str	r3, [r4, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 800266a:	688b      	ldr	r3, [r1, #8]
 800266c:	429d      	cmp	r5, r3
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800266e:	780d      	ldrb	r5, [r1, #0]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      
      if(ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
 8002670:	bf88      	it	hi
 8002672:	614b      	strhi	r3, [r1, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002674:	2420      	movs	r4, #32
 8002676:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800267a:	fb14 3505 	smlabb	r5, r4, r5, r3
 800267e:	4405      	add	r5, r0
 8002680:	692e      	ldr	r6, [r5, #16]
 8002682:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8002686:	612e      	str	r6, [r5, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002688:	780d      	ldrb	r5, [r1, #0]
 800268a:	fb14 3305 	smlabb	r3, r4, r5, r3
 800268e:	4403      	add	r3, r0
 8002690:	694c      	ldr	r4, [r1, #20]
 8002692:	691d      	ldr	r5, [r3, #16]
 8002694:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002698:	432c      	orrs	r4, r5
 800269a:	611c      	str	r4, [r3, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 800269c:	780c      	ldrb	r4, [r1, #0]
 800269e:	2320      	movs	r3, #32
 80026a0:	f44f 6610 	mov.w	r6, #2304	; 0x900
 80026a4:	fb13 6404 	smlabb	r4, r3, r4, r6
    
    if (dma == 1)
 80026a8:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 80026aa:	5825      	ldr	r5, [r4, r0]
 80026ac:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80026b0:	5025      	str	r5, [r4, r0]
    
    if (dma == 1)
 80026b2:	d106      	bne.n	80026c2 <USB_EP0StartXfer+0xbe>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80026b4:	780a      	ldrb	r2, [r1, #0]
 80026b6:	fb13 6302 	smlabb	r3, r3, r2, r6
 80026ba:	4418      	add	r0, r3
 80026bc:	690b      	ldr	r3, [r1, #16]
 80026be:	6143      	str	r3, [r0, #20]
 80026c0:	e047      	b.n	8002752 <USB_EP0StartXfer+0x14e>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80026c2:	694b      	ldr	r3, [r1, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d044      	beq.n	8002752 <USB_EP0StartXfer+0x14e>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80026c8:	7809      	ldrb	r1, [r1, #0]
 80026ca:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80026ce:	2301      	movs	r3, #1
 80026d0:	408b      	lsls	r3, r1
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80026d8:	e03b      	b.n	8002752 <USB_EP0StartXfer+0x14e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80026da:	f44f 6730 	mov.w	r7, #2816	; 0xb00
 80026de:	fb14 7303 	smlabb	r3, r4, r3, r7
 80026e2:	4403      	add	r3, r0
 80026e4:	691e      	ldr	r6, [r3, #16]
 80026e6:	0cf6      	lsrs	r6, r6, #19
 80026e8:	04f6      	lsls	r6, r6, #19
 80026ea:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80026ec:	780b      	ldrb	r3, [r1, #0]
 80026ee:	fb14 7303 	smlabb	r3, r4, r3, r7
 80026f2:	4403      	add	r3, r0
 80026f4:	691e      	ldr	r6, [r3, #16]
 80026f6:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80026fa:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80026fe:	611e      	str	r6, [r3, #16]
 8002700:	688e      	ldr	r6, [r1, #8]
      
    if (ep->xfer_len > 0U)
 8002702:	b105      	cbz	r5, 8002706 <USB_EP0StartXfer+0x102>
    {
      ep->xfer_len = ep->maxpacket;
 8002704:	614e      	str	r6, [r1, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002706:	780b      	ldrb	r3, [r1, #0]
 8002708:	f44f 6530 	mov.w	r5, #2816	; 0xb00
 800270c:	fb14 5303 	smlabb	r3, r4, r3, r5
 8002710:	4403      	add	r3, r0
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002712:	f3c6 0612 	ubfx	r6, r6, #0, #19
    if (ep->xfer_len > 0U)
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002716:	691f      	ldr	r7, [r3, #16]
 8002718:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800271c:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 800271e:	780b      	ldrb	r3, [r1, #0]
 8002720:	fb14 5403 	smlabb	r4, r4, r3, r5
 8002724:	4404      	add	r4, r0
    

    if (dma == 1U)
 8002726:	2a01      	cmp	r2, #1
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002728:	6923      	ldr	r3, [r4, #16]
 800272a:	ea46 0603 	orr.w	r6, r6, r3
 800272e:	6126      	str	r6, [r4, #16]
    

    if (dma == 1U)
 8002730:	d106      	bne.n	8002740 <USB_EP0StartXfer+0x13c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002732:	780b      	ldrb	r3, [r1, #0]
 8002734:	2220      	movs	r2, #32
 8002736:	fb12 5303 	smlabb	r3, r2, r3, r5
 800273a:	4403      	add	r3, r0
 800273c:	68ca      	ldr	r2, [r1, #12]
 800273e:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8002740:	780a      	ldrb	r2, [r1, #0]
 8002742:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8002746:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800274a:	58c2      	ldr	r2, [r0, r3]
 800274c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002750:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
}
 8002752:	2000      	movs	r0, #0
 8002754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002756 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002756:	b510      	push	{r4, lr}
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8002758:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800275c:	b96c      	cbnz	r4, 800277a <USB_WritePacket+0x24>
 800275e:	3303      	adds	r3, #3
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002760:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002764:	f023 0303 	bic.w	r3, r3, #3
 8002768:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 800276c:	440b      	add	r3, r1
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 800276e:	4299      	cmp	r1, r3
 8002770:	d003      	beq.n	800277a <USB_WritePacket+0x24>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002772:	f851 0b04 	ldr.w	r0, [r1], #4
 8002776:	6010      	str	r0, [r2, #0]
 8002778:	e7f9      	b.n	800276e <USB_WritePacket+0x18>
    }
  }
  return HAL_OK;
}
 800277a:	2000      	movs	r0, #0
 800277c:	bd10      	pop	{r4, pc}

0800277e <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800277e:	3203      	adds	r2, #3
 8002780:	f022 0203 	bic.w	r2, r2, #3
 8002784:	440a      	add	r2, r1
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002786:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800278a:	4291      	cmp	r1, r2
 800278c:	d003      	beq.n	8002796 <USB_ReadPacket+0x18>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800278e:	6803      	ldr	r3, [r0, #0]
 8002790:	f841 3b04 	str.w	r3, [r1], #4
 8002794:	e7f9      	b.n	800278a <USB_ReadPacket+0xc>
    
  }
  return ((void *)dest);
}
 8002796:	4608      	mov	r0, r1
 8002798:	4770      	bx	lr

0800279a <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800279a:	784b      	ldrb	r3, [r1, #1]
 800279c:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800279e:	b510      	push	{r4, lr}
 80027a0:	f04f 0220 	mov.w	r2, #32
 80027a4:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80027a6:	d114      	bne.n	80027d2 <USB_EPSetStall+0x38>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 80027a8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80027ac:	fb12 3304 	smlabb	r3, r2, r4, r3
 80027b0:	58c2      	ldr	r2, [r0, r3]
 80027b2:	2a00      	cmp	r2, #0
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 80027b4:	bfa2      	ittt	ge
 80027b6:	58c2      	ldrge	r2, [r0, r3]
 80027b8:	f022 4280 	bicge.w	r2, r2, #1073741824	; 0x40000000
 80027bc:	50c2      	strge	r2, [r0, r3]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80027be:	780a      	ldrb	r2, [r1, #0]
 80027c0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80027c4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80027c8:	58c2      	ldr	r2, [r0, r3]
 80027ca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80027ce:	50c2      	str	r2, [r0, r3]
 80027d0:	e013      	b.n	80027fa <USB_EPSetStall+0x60>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 80027d2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80027d6:	fb12 3304 	smlabb	r3, r2, r4, r3
 80027da:	58c2      	ldr	r2, [r0, r3]
 80027dc:	2a00      	cmp	r2, #0
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80027de:	bfa2      	ittt	ge
 80027e0:	58c2      	ldrge	r2, [r0, r3]
 80027e2:	f022 4280 	bicge.w	r2, r2, #1073741824	; 0x40000000
 80027e6:	50c2      	strge	r2, [r0, r3]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80027e8:	780a      	ldrb	r2, [r1, #0]
 80027ea:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80027ee:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80027f2:	58c2      	ldr	r2, [r0, r3]
 80027f4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80027f8:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
}
 80027fa:	2000      	movs	r0, #0
 80027fc:	bd10      	pop	{r4, pc}

080027fe <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 80027fe:	784b      	ldrb	r3, [r1, #1]
 8002800:	2b01      	cmp	r3, #1
 8002802:	780b      	ldrb	r3, [r1, #0]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002804:	b530      	push	{r4, r5, lr}
 8002806:	f04f 0220 	mov.w	r2, #32
  if (ep->is_in == 1U)
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800280a:	bf0c      	ite	eq
 800280c:	f44f 6510 	moveq.w	r5, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002810:	f44f 6530 	movne.w	r5, #2816	; 0xb00
 8002814:	fb12 5303 	smlabb	r3, r2, r3, r5
 8002818:	581c      	ldr	r4, [r3, r0]
 800281a:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 800281e:	501c      	str	r4, [r3, r0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8002820:	78cb      	ldrb	r3, [r1, #3]
 8002822:	3b02      	subs	r3, #2
 8002824:	2b01      	cmp	r3, #1
 8002826:	d806      	bhi.n	8002836 <USB_EPClearStall+0x38>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002828:	780b      	ldrb	r3, [r1, #0]
 800282a:	fb12 5203 	smlabb	r2, r2, r3, r5
 800282e:	5813      	ldr	r3, [r2, r0]
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002834:	5013      	str	r3, [r2, r0]
    }    
  }
  return HAL_OK;
}
 8002836:	2000      	movs	r0, #0
 8002838:	bd30      	pop	{r4, r5, pc}

0800283a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800283a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800283e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002842:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8002846:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800284a:	0109      	lsls	r1, r1, #4
 800284c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002850:	430b      	orrs	r3, r1
 8002852:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8002856:	2000      	movs	r0, #0
 8002858:	4770      	bx	lr

0800285a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 800285a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 800285c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002860:	f023 0302 	bic.w	r3, r3, #2
 8002864:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002868:	2003      	movs	r0, #3
 800286a:	f7fd fce9 	bl	8000240 <HAL_Delay>
  
  return HAL_OK;  
}
 800286e:	2000      	movs	r0, #0
 8002870:	bd08      	pop	{r3, pc}

08002872 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002872:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8002874:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002880:	2003      	movs	r0, #3
 8002882:	f7fd fcdd 	bl	8000240 <HAL_Delay>
  
  return HAL_OK;  
}
 8002886:	2000      	movs	r0, #0
 8002888:	bd08      	pop	{r3, pc}

0800288a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 800288a:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 800288c:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 800288e:	4010      	ands	r0, r2
 8002890:	4770      	bx	lr

08002892 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8002892:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002896:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 800289a:	69db      	ldr	r3, [r3, #28]
  return ((v & 0xffff0000U) >> 16U);
 800289c:	4018      	ands	r0, r3
}
 800289e:	0c00      	lsrs	r0, r0, #16
 80028a0:	4770      	bx	lr

080028a2 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80028a2:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80028a6:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 80028aa:	69db      	ldr	r3, [r3, #28]
  return ((v & 0xFFFFU));
 80028ac:	4018      	ands	r0, r3
}
 80028ae:	b280      	uxth	r0, r0
 80028b0:	4770      	bx	lr

080028b2 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80028b2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80028b6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 80028ba:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80028be:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 80028c0:	6940      	ldr	r0, [r0, #20]
  return v;
}
 80028c2:	4010      	ands	r0, r2
 80028c4:	4770      	bx	lr

080028c6 <USB_ReadDevInEPInterrupt>:
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 80028c6:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80028ca:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80028ce:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80028d2:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  return v;
 80028d6:	fa23 f101 	lsr.w	r1, r3, r1
 80028da:	01c9      	lsls	r1, r1, #7
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80028dc:	6880      	ldr	r0, [r0, #8]
  return v;
 80028de:	b2c9      	uxtb	r1, r1
 80028e0:	4311      	orrs	r1, r2
}
 80028e2:	4008      	ands	r0, r1
 80028e4:	4770      	bx	lr

080028e6 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 80028e6:	6940      	ldr	r0, [r0, #20]
}
 80028e8:	f000 0001 	and.w	r0, r0, #1
 80028ec:	4770      	bx	lr

080028ee <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80028ee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80028f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028f6:	f023 0307 	bic.w	r3, r3, #7
 80028fa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80028fe:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	f002 0206 	and.w	r2, r2, #6
 8002908:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800290a:	bf02      	ittt	eq
 800290c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002910:	f042 0203 	orreq.w	r2, r2, #3
 8002914:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8002920:	2000      	movs	r0, #0
 8002922:	4770      	bx	lr

08002924 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002924:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002926:	2400      	movs	r4, #0
 8002928:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 800292c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002930:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002934:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002938:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800293c:	f044 0418 	orr.w	r4, r4, #24
 8002940:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002944:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8002948:	2901      	cmp	r1, #1
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800294a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 800294e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002952:	bf08      	it	eq
 8002954:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002958:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800295c:	bf04      	itt	eq
 800295e:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002962:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8002966:	2000      	movs	r0, #0
 8002968:	bd10      	pop	{r4, pc}
	...

0800296c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800296e:	3b01      	subs	r3, #1
 8002970:	d101      	bne.n	8002976 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002972:	2003      	movs	r0, #3
 8002974:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002976:	6902      	ldr	r2, [r0, #16]
 8002978:	2a00      	cmp	r2, #0
 800297a:	daf8      	bge.n	800296e <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800297c:	6903      	ldr	r3, [r0, #16]
 800297e:	4a06      	ldr	r2, [pc, #24]	; (8002998 <USB_CoreReset+0x2c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002986:	3a01      	subs	r2, #1
 8002988:	d0f3      	beq.n	8002972 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800298a:	6903      	ldr	r3, [r0, #16]
 800298c:	f013 0301 	ands.w	r3, r3, #1
 8002990:	d1f9      	bne.n	8002986 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8002992:	4618      	mov	r0, r3
}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	00030d41 	.word	0x00030d41

0800299c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800299c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80029a0:	b11b      	cbz	r3, 80029aa <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80029a2:	2000      	movs	r0, #0
 80029a4:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80029a8:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80029aa:	2002      	movs	r0, #2
  }
}
 80029ac:	4770      	bx	lr

080029ae <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80029ae:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80029b2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80029b4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80029b8:	b15b      	cbz	r3, 80029d2 <USBD_CDC_EP0_RxReady+0x24>
 80029ba:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80029be:	28ff      	cmp	r0, #255	; 0xff
 80029c0:	d007      	beq.n	80029d2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80029c8:	4621      	mov	r1, r4
 80029ca:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80029cc:	23ff      	movs	r3, #255	; 0xff
 80029ce:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 80029d2:	2000      	movs	r0, #0
 80029d4:	bd10      	pop	{r4, pc}
	...

080029d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80029d8:	2343      	movs	r3, #67	; 0x43
 80029da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80029dc:	4800      	ldr	r0, [pc, #0]	; (80029e0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80029de:	4770      	bx	lr
 80029e0:	20000000 	.word	0x20000000

080029e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80029e4:	2343      	movs	r3, #67	; 0x43
 80029e6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80029e8:	4800      	ldr	r0, [pc, #0]	; (80029ec <USBD_CDC_GetHSCfgDesc+0x8>)
 80029ea:	4770      	bx	lr
 80029ec:	200000cc 	.word	0x200000cc

080029f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80029f0:	2343      	movs	r3, #67	; 0x43
 80029f2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80029f4:	4800      	ldr	r0, [pc, #0]	; (80029f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80029f6:	4770      	bx	lr
 80029f8:	20000088 	.word	0x20000088

080029fc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80029fc:	230a      	movs	r3, #10
 80029fe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002a00:	4800      	ldr	r0, [pc, #0]	; (8002a04 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002a02:	4770      	bx	lr
 8002a04:	2000007c 	.word	0x2000007c

08002a08 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a0c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002a10:	f001 f8c0 	bl	8003b94 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8002a14:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002a18:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8002a1c:	b14b      	cbz	r3, 8002a32 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002a1e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002a22:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002a2c:	4798      	blx	r3

    return USBD_OK;
 8002a2e:	2000      	movs	r0, #0
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8002a32:	2002      	movs	r0, #2
  }
}
 8002a34:	bd38      	pop	{r3, r4, r5, pc}
	...

08002a38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a3a:	780f      	ldrb	r7, [r1, #0]
 8002a3c:	f017 0360 	ands.w	r3, r7, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8002a40:	4606      	mov	r6, r0
 8002a42:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a44:	d022      	beq.n	8002a8c <USBD_CDC_Setup+0x54>
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d127      	bne.n	8002a9a <USBD_CDC_Setup+0x62>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8002a4a:	88ca      	ldrh	r2, [r1, #6]
 8002a4c:	784b      	ldrb	r3, [r1, #1]
 8002a4e:	b1ba      	cbz	r2, 8002a80 <USBD_CDC_Setup+0x48>
    {
      if (req->bmRequest & 0x80)
 8002a50:	0639      	lsls	r1, r7, #24
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a52:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
 8002a56:	d509      	bpl.n	8002a6c <USBD_CDC_Setup+0x34>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002a58:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	688f      	ldr	r7, [r1, #8]
 8002a60:	4629      	mov	r1, r5
 8002a62:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8002a64:	88e2      	ldrh	r2, [r4, #6]
 8002a66:	4629      	mov	r1, r5
 8002a68:	4630      	mov	r0, r6
 8002a6a:	e014      	b.n	8002a96 <USBD_CDC_Setup+0x5e>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8002a6c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002a70:	88e3      	ldrh	r3, [r4, #6]
 8002a72:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8002a76:	88e2      	ldrh	r2, [r4, #6]
 8002a78:	4629      	mov	r1, r5
 8002a7a:	f000 fba1 	bl	80031c0 <USBD_CtlPrepareRx>
 8002a7e:	e00c      	b.n	8002a9a <USBD_CDC_Setup+0x62>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002a80:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002a84:	6884      	ldr	r4, [r0, #8]
 8002a86:	4618      	mov	r0, r3
 8002a88:	47a0      	blx	r4
 8002a8a:	e006      	b.n	8002a9a <USBD_CDC_Setup+0x62>
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8002a8c:	784b      	ldrb	r3, [r1, #1]
 8002a8e:	2b0a      	cmp	r3, #10
 8002a90:	d103      	bne.n	8002a9a <USBD_CDC_Setup+0x62>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8002a92:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <USBD_CDC_Setup+0x68>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	f000 fb7e 	bl	8003196 <USBD_CtlSendData>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000678 	.word	0x20000678

08002aa4 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8002aa4:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8002aa6:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8002aa8:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8002aaa:	f001 f80b 	bl	8003ac4 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f001 f807 	bl	8003ac4 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8002ab6:	2182      	movs	r1, #130	; 0x82
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f001 f803 	bl	8003ac4 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8002abe:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002ac2:	b153      	cbz	r3, 8002ada <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002ac4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002acc:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002ad0:	f001 f910 	bl	8003cf4 <free>
    pdev->pClassData = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8002ada:	2000      	movs	r0, #0
 8002adc:	bd10      	pop	{r4, pc}

08002ade <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8002ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002ae0:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8002ae2:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002ae4:	b943      	cbnz	r3, 8002af8 <USBD_CDC_Init+0x1a>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aea:	2202      	movs	r2, #2
 8002aec:	2181      	movs	r1, #129	; 0x81
 8002aee:	f000 ffd9 	bl	8003aa4 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af6:	e005      	b.n	8002b04 <USBD_CDC_Init+0x26>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002af8:	2340      	movs	r3, #64	; 0x40
 8002afa:	2202      	movs	r2, #2
 8002afc:	2181      	movs	r1, #129	; 0x81
 8002afe:	f000 ffd1 	bl	8003aa4 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002b02:	2340      	movs	r3, #64	; 0x40
 8002b04:	2202      	movs	r2, #2
 8002b06:	2101      	movs	r1, #1
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f000 ffcb 	bl	8003aa4 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8002b0e:	2308      	movs	r3, #8
 8002b10:	2203      	movs	r2, #3
 8002b12:	2182      	movs	r1, #130	; 0x82
 8002b14:	4620      	mov	r0, r4
 8002b16:	f000 ffc5 	bl	8003aa4 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002b1a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002b1e:	f001 f8e1 	bl	8003ce4 <malloc>
 8002b22:	4606      	mov	r6, r0
 8002b24:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8002b28:	b1e8      	cbz	r0, 8002b66 <USBD_CDC_Init+0x88>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002b2a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b32:	7c27      	ldrb	r7, [r4, #16]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8002b34:	2500      	movs	r5, #0
 8002b36:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002b3a:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b3e:	b94f      	cbnz	r7, 8002b54 <USBD_CDC_Init+0x76>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b44:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f001 f814 	bl	8003b78 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8002b50:	4638      	mov	r0, r7
 8002b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002b54:	2340      	movs	r3, #64	; 0x40
 8002b56:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f001 f80b 	bl	8003b78 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8002b62:	4628      	mov	r0, r5
 8002b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8002b66:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8002b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b6a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002b6a:	b119      	cbz	r1, 8002b74 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002b6c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002b70:	2000      	movs	r0, #0
 8002b72:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8002b74:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 8002b76:	4770      	bx	lr

08002b78 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b78:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002b7c:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8002b7e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002b82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8002b86:	4770      	bx	lr

08002b88 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002b88:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002b8c:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002b8e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8002b92:	4770      	bx	lr

08002b94 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b94:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8002b98:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002b9a:	b162      	cbz	r2, 8002bb6 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b9c:	7c04      	ldrb	r4, [r0, #16]
 8002b9e:	b914      	cbnz	r4, 8002ba6 <USBD_CDC_ReceivePacket+0x12>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba4:	e000      	b.n	8002ba8 <USBD_CDC_ReceivePacket+0x14>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002bac:	2101      	movs	r1, #1
 8002bae:	f000 ffe3 	bl	8003b78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8002bb6:	2002      	movs	r0, #2
  }
}
 8002bb8:	bd10      	pop	{r4, pc}

08002bba <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002bba:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002bbc:	b180      	cbz	r0, 8002be0 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002bbe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bc2:	b113      	cbz	r3, 8002bca <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002bca:	b109      	cbz	r1, 8002bd0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002bcc:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8002bd6:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002bd8:	f000 ff26 	bl	8003a28 <USBD_LL_Init>
  
  return USBD_OK; 
 8002bdc:	2000      	movs	r0, #0
 8002bde:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8002be0:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 8002be2:	bd08      	pop	{r3, pc}

08002be4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002be4:	b119      	cbz	r1, 8002bee <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002be6:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002bea:	2000      	movs	r0, #0
 8002bec:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002bee:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002bf0:	4770      	bx	lr

08002bf2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002bf2:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002bf4:	f000 ff48 	bl	8003a88 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	bd08      	pop	{r3, pc}

08002bfc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002bfc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002bfe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c02:	b90b      	cbnz	r3, 8002c08 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002c04:	2002      	movs	r0, #2
 8002c06:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4798      	blx	r3
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d1f9      	bne.n	8002c04 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002c10:	bd08      	pop	{r3, pc}

08002c12 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002c12:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002c14:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4798      	blx	r3
  return USBD_OK;
}
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	bd08      	pop	{r3, pc}

08002c20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c24:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f000 f8f3 	bl	8002e14 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002c2e:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002c30:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002c34:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002c38:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002c3c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002c40:	f001 031f 	and.w	r3, r1, #31
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d00c      	beq.n	8002c62 <USBD_LL_SetupStage+0x42>
 8002c48:	d306      	bcc.n	8002c58 <USBD_LL_SetupStage+0x38>
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d10e      	bne.n	8002c6c <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8002c4e:	4629      	mov	r1, r5
 8002c50:	4620      	mov	r0, r4
 8002c52:	f000 fa21 	bl	8003098 <USBD_StdEPReq>
    break;
 8002c56:	e00e      	b.n	8002c76 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8002c58:	4629      	mov	r1, r5
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f000 f8fa 	bl	8002e54 <USBD_StdDevReq>
    break;
 8002c60:	e009      	b.n	8002c76 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8002c62:	4629      	mov	r1, r5
 8002c64:	4620      	mov	r0, r4
 8002c66:	f000 f9ff 	bl	8003068 <USBD_StdItfReq>
    break;
 8002c6a:	e004      	b.n	8002c76 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002c6c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002c70:	4620      	mov	r0, r4
 8002c72:	f000 ff35 	bl	8003ae0 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8002c76:	2000      	movs	r0, #0
 8002c78:	bd38      	pop	{r3, r4, r5, pc}

08002c7a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002c7a:	b538      	push	{r3, r4, r5, lr}
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002c80:	bb09      	cbnz	r1, 8002cc6 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002c82:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d126      	bne.n	8002cd8 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002c8a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8002c8e:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002c92:	4291      	cmp	r1, r2
 8002c94:	d90a      	bls.n	8002cac <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8002c96:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	bf28      	it	cs
 8002c9c:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8002c9e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	f000 fa9a 	bl	80031de <USBD_CtlContinueRx>
 8002caa:	e015      	b.n	8002cd8 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002cac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	b123      	cbz	r3, 8002cbe <USBD_LL_DataOutStage+0x44>
 8002cb4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002cb8:	2a03      	cmp	r2, #3
 8002cba:	d100      	bne.n	8002cbe <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8002cbc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f000 fa95 	bl	80031ee <USBD_CtlSendStatus>
 8002cc4:	e008      	b.n	8002cd8 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8002cc6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	b123      	cbz	r3, 8002cd8 <USBD_LL_DataOutStage+0x5e>
 8002cce:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002cd2:	2a03      	cmp	r2, #3
 8002cd4:	d100      	bne.n	8002cd8 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8002cd6:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8002cd8:	2000      	movs	r0, #0
 8002cda:	bd38      	pop	{r3, r4, r5, pc}

08002cdc <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	4613      	mov	r3, r2
 8002ce0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002ce2:	460e      	mov	r6, r1
 8002ce4:	2900      	cmp	r1, #0
 8002ce6:	d13c      	bne.n	8002d62 <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002ce8:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002cec:	2a02      	cmp	r2, #2
 8002cee:	d130      	bne.n	8002d52 <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 8002cf0:	69c5      	ldr	r5, [r0, #28]
 8002cf2:	6a02      	ldr	r2, [r0, #32]
 8002cf4:	4295      	cmp	r5, r2
 8002cf6:	d907      	bls.n	8002d08 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 8002cf8:	1aaa      	subs	r2, r5, r2
 8002cfa:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	f000 fa56 	bl	80031b0 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002d04:	4633      	mov	r3, r6
 8002d06:	e011      	b.n	8002d2c <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8002d08:	6983      	ldr	r3, [r0, #24]
 8002d0a:	fbb3 f5f2 	udiv	r5, r3, r2
 8002d0e:	fb02 3515 	mls	r5, r2, r5, r3
 8002d12:	b98d      	cbnz	r5, 8002d38 <USBD_LL_DataInStage+0x5c>
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d80f      	bhi.n	8002d38 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 8002d18:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d20b      	bcs.n	8002d38 <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002d20:	462a      	mov	r2, r5
 8002d22:	f000 fa45 	bl	80031b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002d26:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4620      	mov	r0, r4
 8002d32:	f000 ff21 	bl	8003b78 <USBD_LL_PrepareReceive>
 8002d36:	e00c      	b.n	8002d52 <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002d38:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	b12b      	cbz	r3, 8002d4c <USBD_LL_DataInStage+0x70>
 8002d40:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002d44:	2a03      	cmp	r2, #3
 8002d46:	d101      	bne.n	8002d4c <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f000 fa59 	bl	8003204 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002d52:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10c      	bne.n	8002d74 <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8002d60:	e008      	b.n	8002d74 <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8002d62:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	b123      	cbz	r3, 8002d74 <USBD_LL_DataInStage+0x98>
 8002d6a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d6e:	2a03      	cmp	r2, #3
 8002d70:	d100      	bne.n	8002d74 <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8002d72:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8002d74:	2000      	movs	r0, #0
 8002d76:	bd70      	pop	{r4, r5, r6, pc}

08002d78 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002d78:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002d7a:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002d7c:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002d7e:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d80:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002d82:	2340      	movs	r3, #64	; 0x40
 8002d84:	f000 fe8e 	bl	8003aa4 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002d88:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d8a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	4620      	mov	r0, r4
 8002d94:	f000 fe86 	bl	8003aa4 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002d9e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002da2:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8002da4:	b12b      	cbz	r3, 8002db2 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002da6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002daa:	7921      	ldrb	r1, [r4, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4620      	mov	r0, r4
 8002db0:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002db2:	2000      	movs	r0, #0
 8002db4:	bd38      	pop	{r3, r4, r5, pc}

08002db6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002db6:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002db8:	2000      	movs	r0, #0
 8002dba:	4770      	bx	lr

08002dbc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002dbc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002dc0:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002dca:	2000      	movs	r0, #0
 8002dcc:	4770      	bx	lr

08002dce <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002dce:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002dd2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	4770      	bx	lr

08002dda <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002dda:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ddc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002de0:	2a03      	cmp	r2, #3
 8002de2:	d104      	bne.n	8002dee <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002de4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	b103      	cbz	r3, 8002dee <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002dec:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002dee:	2000      	movs	r0, #0
 8002df0:	bd08      	pop	{r3, pc}

08002df2 <USBD_LL_IsoINIncomplete>:
 8002df2:	2000      	movs	r0, #0
 8002df4:	4770      	bx	lr

08002df6 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8002df6:	2000      	movs	r0, #0
 8002df8:	4770      	bx	lr

08002dfa <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	4770      	bx	lr

08002dfe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8002dfe:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e00:	2201      	movs	r2, #1
 8002e02:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002e06:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8002e0a:	7901      	ldrb	r1, [r0, #4]
 8002e0c:	6852      	ldr	r2, [r2, #4]
 8002e0e:	4790      	blx	r2
   
  return USBD_OK;
}
 8002e10:	2000      	movs	r0, #0
 8002e12:	bd08      	pop	{r3, pc}

08002e14 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002e14:	780b      	ldrb	r3, [r1, #0]
 8002e16:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002e18:	784b      	ldrb	r3, [r1, #1]
 8002e1a:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002e1c:	78ca      	ldrb	r2, [r1, #3]
 8002e1e:	788b      	ldrb	r3, [r1, #2]
 8002e20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e24:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002e26:	794a      	ldrb	r2, [r1, #5]
 8002e28:	790b      	ldrb	r3, [r1, #4]
 8002e2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e2e:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002e30:	79ca      	ldrb	r2, [r1, #7]
 8002e32:	798b      	ldrb	r3, [r1, #6]
 8002e34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e38:	80c3      	strh	r3, [r0, #6]
 8002e3a:	4770      	bx	lr

08002e3c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8002e3c:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8002e3e:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8002e40:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002e42:	f000 fe4d 	bl	8003ae0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002e46:	4620      	mov	r0, r4
 8002e48:	2100      	movs	r1, #0
}
 8002e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8002e4e:	f000 be47 	b.w	8003ae0 <USBD_LL_StallEP>
	...

08002e54 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8002e56:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002e58:	4604      	mov	r4, r0
 8002e5a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	f200 80f9 	bhi.w	8003054 <USBD_StdDevReq+0x200>
 8002e62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e66:	00cb      	.short	0x00cb
 8002e68:	00f700e2 	.word	0x00f700e2
 8002e6c:	00f700de 	.word	0x00f700de
 8002e70:	000a0075 	.word	0x000a0075
 8002e74:	00bb00f7 	.word	0x00bb00f7
 8002e78:	0091      	.short	0x0091
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8002e7a:	884b      	ldrh	r3, [r1, #2]
 8002e7c:	0a1a      	lsrs	r2, r3, #8
 8002e7e:	3a01      	subs	r2, #1
 8002e80:	2a06      	cmp	r2, #6
 8002e82:	f200 80e7 	bhi.w	8003054 <USBD_StdDevReq+0x200>
 8002e86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002e8a:	0007      	.short	0x0007
 8002e8c:	0017000b 	.word	0x0017000b
 8002e90:	00e500e5 	.word	0x00e500e5
 8002e94:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002e98:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	e017      	b.n	8002ed0 <USBD_StdDevReq+0x7c>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002ea0:	7c02      	ldrb	r2, [r0, #16]
 8002ea2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ea6:	b90a      	cbnz	r2, 8002eac <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	e000      	b.n	8002eae <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f10d 0006 	add.w	r0, sp, #6
 8002eb2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e03a      	b.n	8002f2e <USBD_StdDevReq+0xda>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	f200 80ca 	bhi.w	8003054 <USBD_StdDevReq+0x200>
 8002ec0:	e8df f003 	tbb	[pc, r3]
 8002ec4:	130f0b03 	.word	0x130f0b03
 8002ec8:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002eca:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	7c20      	ldrb	r0, [r4, #16]
 8002ed2:	f10d 0106 	add.w	r1, sp, #6
 8002ed6:	4798      	blx	r3
 8002ed8:	e02a      	b.n	8002f30 <USBD_StdDevReq+0xdc>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002eda:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	e7f6      	b.n	8002ed0 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002ee2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	e7f2      	b.n	8002ed0 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002eea:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	e7ee      	b.n	8002ed0 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002ef2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	e7ea      	b.n	8002ed0 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002efa:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	e7e6      	b.n	8002ed0 <USBD_StdDevReq+0x7c>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002f02:	7c03      	ldrb	r3, [r0, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 80a5 	bne.w	8003054 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002f0a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f0e:	f10d 0006 	add.w	r0, sp, #6
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	4798      	blx	r3
 8002f16:	e00b      	b.n	8002f30 <USBD_StdDevReq+0xdc>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002f18:	7c03      	ldrb	r3, [r0, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 809a 	bne.w	8003054 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002f20:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f24:	f10d 0006 	add.w	r0, sp, #6
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f2c:	2307      	movs	r3, #7
 8002f2e:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8002f30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	f000 8091 	beq.w	800305c <USBD_StdDevReq+0x208>
 8002f3a:	88eb      	ldrh	r3, [r5, #6]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 808d 	beq.w	800305c <USBD_StdDevReq+0x208>
  {
    
    len = MIN(len , req->wLength);
 8002f42:	429a      	cmp	r2, r3
 8002f44:	bf28      	it	cs
 8002f46:	461a      	movcs	r2, r3
 8002f48:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 8002f4c:	4601      	mov	r1, r0
 8002f4e:	e064      	b.n	800301a <USBD_StdDevReq+0x1c6>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002f50:	888b      	ldrh	r3, [r1, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d17e      	bne.n	8003054 <USBD_StdDevReq+0x200>
 8002f56:	88cb      	ldrh	r3, [r1, #6]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d17b      	bne.n	8003054 <USBD_StdDevReq+0x200>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002f5c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002f60:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002f62:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002f64:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002f68:	d074      	beq.n	8003054 <USBD_StdDevReq+0x200>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8002f6a:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002f6e:	4631      	mov	r1, r6
 8002f70:	f000 fde6 	bl	8003b40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002f74:	4620      	mov	r0, r4
 8002f76:	f000 f93a 	bl	80031ee <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8002f7a:	b10e      	cbz	r6, 8002f80 <USBD_StdDevReq+0x12c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e000      	b.n	8002f82 <USBD_StdDevReq+0x12e>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002f80:	2301      	movs	r3, #1
 8002f82:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8002f86:	e069      	b.n	800305c <USBD_StdDevReq+0x208>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002f88:	7889      	ldrb	r1, [r1, #2]
 8002f8a:	4e36      	ldr	r6, [pc, #216]	; (8003064 <USBD_StdDevReq+0x210>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002f8c:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002f8e:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002f90:	d860      	bhi.n	8003054 <USBD_StdDevReq+0x200>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8002f92:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d002      	beq.n	8002fa0 <USBD_StdDevReq+0x14c>
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d008      	beq.n	8002fb0 <USBD_StdDevReq+0x15c>
 8002f9e:	e059      	b.n	8003054 <USBD_StdDevReq+0x200>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	d053      	beq.n	800304c <USBD_StdDevReq+0x1f8>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002fa4:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002fa6:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002fa8:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002faa:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8002fae:	e00f      	b.n	8002fd0 <USBD_StdDevReq+0x17c>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8002fb0:	b931      	cbnz	r1, 8002fc0 <USBD_StdDevReq+0x16c>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002fb8:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8002fba:	f7ff fe2a 	bl	8002c12 <USBD_ClrClassConfig>
 8002fbe:	e045      	b.n	800304c <USBD_StdDevReq+0x1f8>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8002fc0:	6841      	ldr	r1, [r0, #4]
 8002fc2:	2901      	cmp	r1, #1
 8002fc4:	d042      	beq.n	800304c <USBD_StdDevReq+0x1f8>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002fc6:	b2c9      	uxtb	r1, r1
 8002fc8:	f7ff fe23 	bl	8002c12 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8002fcc:	7831      	ldrb	r1, [r6, #0]
 8002fce:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7ff fe13 	bl	8002bfc <USBD_SetClassConfig>
 8002fd6:	2802      	cmp	r0, #2
 8002fd8:	d138      	bne.n	800304c <USBD_StdDevReq+0x1f8>
 8002fda:	e03b      	b.n	8003054 <USBD_StdDevReq+0x200>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8002fdc:	88ca      	ldrh	r2, [r1, #6]
 8002fde:	2a01      	cmp	r2, #1
 8002fe0:	d138      	bne.n	8003054 <USBD_StdDevReq+0x200>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8002fe2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d003      	beq.n	8002ff2 <USBD_StdDevReq+0x19e>
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d132      	bne.n	8003054 <USBD_StdDevReq+0x200>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8002fee:	1d01      	adds	r1, r0, #4
 8002ff0:	e013      	b.n	800301a <USBD_StdDevReq+0x1c6>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f841 3f08 	str.w	r3, [r1, #8]!
 8002ffa:	e00e      	b.n	800301a <USBD_StdDevReq+0x1c6>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8002ffc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003000:	3b02      	subs	r3, #2
 8003002:	2b01      	cmp	r3, #1
 8003004:	d826      	bhi.n	8003054 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003006:	2301      	movs	r3, #1
 8003008:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800300a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800300e:	b10b      	cbz	r3, 8003014 <USBD_StdDevReq+0x1c0>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003010:	2303      	movs	r3, #3
 8003012:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8003014:	2202      	movs	r2, #2
 8003016:	f104 010c 	add.w	r1, r4, #12
 800301a:	4620      	mov	r0, r4
 800301c:	f000 f8bb 	bl	8003196 <USBD_CtlSendData>
 8003020:	e01c      	b.n	800305c <USBD_StdDevReq+0x208>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003022:	884b      	ldrh	r3, [r1, #2]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d119      	bne.n	800305c <USBD_StdDevReq+0x208>
 8003028:	e008      	b.n	800303c <USBD_StdDevReq+0x1e8>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 800302a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800302e:	3b02      	subs	r3, #2
 8003030:	2b01      	cmp	r3, #1
 8003032:	d80f      	bhi.n	8003054 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003034:	884b      	ldrh	r3, [r1, #2]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d110      	bne.n	800305c <USBD_StdDevReq+0x208>
    {
      pdev->dev_remote_wakeup = 0; 
 800303a:	2300      	movs	r3, #0
 800303c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003040:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003044:	4629      	mov	r1, r5
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4620      	mov	r0, r4
 800304a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800304c:	4620      	mov	r0, r4
 800304e:	f000 f8ce 	bl	80031ee <USBD_CtlSendStatus>
 8003052:	e003      	b.n	800305c <USBD_StdDevReq+0x208>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8003054:	4629      	mov	r1, r5
 8003056:	4620      	mov	r0, r4
 8003058:	f7ff fef0 	bl	8002e3c <USBD_CtlError>
    break;
  }
  
  return ret;
}
 800305c:	2000      	movs	r0, #0
 800305e:	b002      	add	sp, #8
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	bf00      	nop
 8003064:	20000679 	.word	0x20000679

08003068 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003068:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 800306a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800306e:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003070:	4604      	mov	r4, r0
 8003072:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8003074:	d10c      	bne.n	8003090 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003076:	790b      	ldrb	r3, [r1, #4]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d809      	bhi.n	8003090 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 800307c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003084:	88eb      	ldrh	r3, [r5, #6]
 8003086:	b92b      	cbnz	r3, 8003094 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8003088:	4620      	mov	r0, r4
 800308a:	f000 f8b0 	bl	80031ee <USBD_CtlSendStatus>
 800308e:	e001      	b.n	8003094 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8003090:	f7ff fed4 	bl	8002e3c <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8003094:	2000      	movs	r0, #0
 8003096:	bd38      	pop	{r3, r4, r5, pc}

08003098 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003098:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800309a:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800309c:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800309e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80030a2:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80030a4:	4604      	mov	r4, r0
 80030a6:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80030a8:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80030aa:	d104      	bne.n	80030b6 <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 80030ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	4798      	blx	r3
    
    return USBD_OK;
 80030b4:	e051      	b.n	800315a <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 80030b6:	784a      	ldrb	r2, [r1, #1]
 80030b8:	2a01      	cmp	r2, #1
 80030ba:	d010      	beq.n	80030de <USBD_StdEPReq+0x46>
 80030bc:	d326      	bcc.n	800310c <USBD_StdEPReq+0x74>
 80030be:	2a03      	cmp	r2, #3
 80030c0:	d14b      	bne.n	800315a <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 80030c2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80030c6:	2a02      	cmp	r2, #2
 80030c8:	d027      	beq.n	800311a <USBD_StdEPReq+0x82>
 80030ca:	2a03      	cmp	r2, #3
 80030cc:	d143      	bne.n	8003156 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80030ce:	884a      	ldrh	r2, [r1, #2]
 80030d0:	b992      	cbnz	r2, 80030f8 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80030d2:	065e      	lsls	r6, r3, #25
 80030d4:	d010      	beq.n	80030f8 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 80030d6:	4619      	mov	r1, r3
 80030d8:	f000 fd02 	bl	8003ae0 <USBD_LL_StallEP>
 80030dc:	e00c      	b.n	80030f8 <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80030de:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80030e2:	2a02      	cmp	r2, #2
 80030e4:	d019      	beq.n	800311a <USBD_StdEPReq+0x82>
 80030e6:	2a03      	cmp	r2, #3
 80030e8:	d135      	bne.n	8003156 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80030ea:	884a      	ldrh	r2, [r1, #2]
 80030ec:	bbaa      	cbnz	r2, 800315a <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 80030ee:	0659      	lsls	r1, r3, #25
 80030f0:	d008      	beq.n	8003104 <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80030f2:	4619      	mov	r1, r3
 80030f4:	f000 fd02 	bl	8003afc <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80030f8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80030fc:	4629      	mov	r1, r5
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4620      	mov	r0, r4
 8003102:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003104:	4620      	mov	r0, r4
 8003106:	f000 f872 	bl	80031ee <USBD_CtlSendStatus>
 800310a:	e026      	b.n	800315a <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 800310c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003110:	2a02      	cmp	r2, #2
 8003112:	d002      	beq.n	800311a <USBD_StdEPReq+0x82>
 8003114:	2a03      	cmp	r2, #3
 8003116:	d006      	beq.n	8003126 <USBD_StdEPReq+0x8e>
 8003118:	e01d      	b.n	8003156 <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 800311a:	065a      	lsls	r2, r3, #25
 800311c:	d01d      	beq.n	800315a <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 800311e:	4619      	mov	r1, r3
 8003120:	f000 fcde 	bl	8003ae0 <USBD_LL_StallEP>
 8003124:	e019      	b.n	800315a <USBD_StdEPReq+0xc2>
 8003126:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800312a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800312e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003132:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003134:	bf14      	ite	ne
 8003136:	3514      	addne	r5, #20
 8003138:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800313c:	f000 fcec 	bl	8003b18 <USBD_LL_IsStallEP>
 8003140:	b110      	cbz	r0, 8003148 <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 8003142:	2301      	movs	r3, #1
 8003144:	602b      	str	r3, [r5, #0]
 8003146:	e000      	b.n	800314a <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 8003148:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 800314a:	2202      	movs	r2, #2
 800314c:	4629      	mov	r1, r5
 800314e:	4620      	mov	r0, r4
 8003150:	f000 f821 	bl	8003196 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8003154:	e001      	b.n	800315a <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 8003156:	f7ff fe71 	bl	8002e3c <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 800315a:	2000      	movs	r0, #0
 800315c:	bd70      	pop	{r4, r5, r6, pc}

0800315e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800315e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003160:	b1c0      	cbz	r0, 8003194 <USBD_GetString+0x36>
 8003162:	4605      	mov	r5, r0
 8003164:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2c00      	cmp	r4, #0
 800316e:	d1f9      	bne.n	8003164 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	3302      	adds	r3, #2
 8003174:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003176:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003178:	2303      	movs	r3, #3
 800317a:	704b      	strb	r3, [r1, #1]
 800317c:	3801      	subs	r0, #1
 800317e:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8003180:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003184:	b135      	cbz	r5, 8003194 <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800318c:	3302      	adds	r3, #2
 800318e:	b2db      	uxtb	r3, r3
 8003190:	548c      	strb	r4, [r1, r2]
 8003192:	e7f5      	b.n	8003180 <USBD_GetString+0x22>
 8003194:	bd30      	pop	{r4, r5, pc}

08003196 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003196:	b510      	push	{r4, lr}
 8003198:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800319a:	2202      	movs	r2, #2
 800319c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80031a0:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80031a2:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80031a4:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80031a6:	2100      	movs	r1, #0
 80031a8:	f000 fcd8 	bl	8003b5c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80031ac:	2000      	movs	r0, #0
 80031ae:	bd10      	pop	{r4, pc}

080031b0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80031b0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80031b2:	4613      	mov	r3, r2
 80031b4:	460a      	mov	r2, r1
 80031b6:	2100      	movs	r1, #0
 80031b8:	f000 fcd0 	bl	8003b5c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80031bc:	2000      	movs	r0, #0
 80031be:	bd08      	pop	{r3, pc}

080031c0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80031c0:	b510      	push	{r4, lr}
 80031c2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80031c4:	2203      	movs	r2, #3
 80031c6:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80031ca:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80031ce:	460a      	mov	r2, r1
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80031d0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80031d4:	2100      	movs	r1, #0
 80031d6:	f000 fccf 	bl	8003b78 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80031da:	2000      	movs	r0, #0
 80031dc:	bd10      	pop	{r4, pc}

080031de <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80031de:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80031e0:	4613      	mov	r3, r2
 80031e2:	460a      	mov	r2, r1
 80031e4:	2100      	movs	r1, #0
 80031e6:	f000 fcc7 	bl	8003b78 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80031ea:	2000      	movs	r0, #0
 80031ec:	bd08      	pop	{r3, pc}

080031ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80031ee:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80031f0:	2304      	movs	r3, #4
 80031f2:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80031f6:	2300      	movs	r3, #0
 80031f8:	461a      	mov	r2, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	f000 fcae 	bl	8003b5c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003200:	2000      	movs	r0, #0
 8003202:	bd08      	pop	{r3, pc}

08003204 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003204:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003206:	2305      	movs	r3, #5
 8003208:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800320c:	2300      	movs	r3, #0
 800320e:	461a      	mov	r2, r3
 8003210:	4619      	mov	r1, r3
 8003212:	f000 fcb1 	bl	8003b78 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003216:	2000      	movs	r0, #0
 8003218:	bd08      	pop	{r3, pc}
	...

0800321c <HAL_TIM_PeriodElapsedCallback>:
volatile uint8_t g_GSM_ATReadyFlag=0;
volatile uint8_t g_GSM_BaudrateSetFlag=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
	if(htim==&htim6)
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800321e:	4283      	cmp	r3, r0
 8003220:	d104      	bne.n	800322c <HAL_TIM_PeriodElapsedCallback+0x10>
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
 8003222:	2204      	movs	r2, #4
 8003224:	4903      	ldr	r1, [pc, #12]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8003226:	4804      	ldr	r0, [pc, #16]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003228:	f7fe bdbc 	b.w	8001da4 <HAL_UART_Transmit_IT>
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000774 	.word	0x20000774
 8003234:	08004418 	.word	0x08004418
 8003238:	200007b0 	.word	0x200007b0

0800323c <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
	if(huart==&GSM_huart)
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_UART_TxCpltCallback+0x18>)
 800323e:	4283      	cmp	r3, r0
 8003240:	d106      	bne.n	8003250 <HAL_UART_TxCpltCallback+0x14>
		if(!g_GSM_BaudrateSetFlag)
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_UART_TxCpltCallback+0x1c>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b91b      	cbnz	r3, 8003250 <HAL_UART_TxCpltCallback+0x14>
			HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_RETURN_MESSAGE_SIZE+5);
 8003248:	2209      	movs	r2, #9
 800324a:	4904      	ldr	r1, [pc, #16]	; (800325c <HAL_UART_TxCpltCallback+0x20>)
 800324c:	f7fe bdc9 	b.w	8001de2 <HAL_UART_Receive_IT>
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	200007b0 	.word	0x200007b0
 8003258:	2000067b 	.word	0x2000067b
 800325c:	200006b8 	.word	0x200006b8

08003260 <GSM_VerifyATReady>:
	HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_ATREADY_MESSAGE_SIZE);
}

void GSM_VerifyATReady()
{
	if(strncmp(g_GSM_ReceivedData,GSM_ATREADY_MESSAGE,GSM_ATREADY_MESSAGE_SIZE-2)==0)
 8003260:	4906      	ldr	r1, [pc, #24]	; (800327c <GSM_VerifyATReady+0x1c>)
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <GSM_VerifyATReady+0x20>)
 8003264:	780a      	ldrb	r2, [r1, #0]
 8003266:	b912      	cbnz	r2, 800326e <GSM_VerifyATReady+0xe>
		g_GSM_ATReadyFlag=1;
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	4770      	bx	lr
	else
	{
		g_GSM_ATReadyFlag=0;
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&GSM_huart,g_GSM_ReceivedData,GSM_ATREADY_MESSAGE_SIZE);
 8003272:	4804      	ldr	r0, [pc, #16]	; (8003284 <GSM_VerifyATReady+0x24>)
 8003274:	2213      	movs	r2, #19
 8003276:	f7fe bdb4 	b.w	8001de2 <HAL_UART_Receive_IT>
 800327a:	bf00      	nop
 800327c:	200006b8 	.word	0x200006b8
 8003280:	2000067a 	.word	0x2000067a
 8003284:	200007b0 	.word	0x200007b0

08003288 <GSM_VerifyAutoBaudrate>:
			HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
		}
}

void GSM_VerifyAutoBaudrate()
{
 8003288:	b508      	push	{r3, lr}
	if(strncmp(g_GSM_ReceivedData,"OK\r\n",GSM_RETURN_MESSAGE_SIZE)==0)
 800328a:	2204      	movs	r2, #4
 800328c:	490a      	ldr	r1, [pc, #40]	; (80032b8 <GSM_VerifyAutoBaudrate+0x30>)
 800328e:	480b      	ldr	r0, [pc, #44]	; (80032bc <GSM_VerifyAutoBaudrate+0x34>)
 8003290:	f000 ff7f 	bl	8004192 <strncmp>
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <GSM_VerifyAutoBaudrate+0x38>)
 8003296:	b930      	cbnz	r0, 80032a6 <GSM_VerifyAutoBaudrate+0x1e>
	{
		g_GSM_BaudrateSetFlag=1;
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 800329c:	4809      	ldr	r0, [pc, #36]	; (80032c4 <GSM_VerifyAutoBaudrate+0x3c>)
	else
	{
		g_GSM_BaudrateSetFlag=0;
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
	}
}
 800329e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void GSM_VerifyAutoBaudrate()
{
	if(strncmp(g_GSM_ReceivedData,"OK\r\n",GSM_RETURN_MESSAGE_SIZE)==0)
	{
		g_GSM_BaudrateSetFlag=1;
		HAL_TIM_Base_Stop_IT(&htim6);
 80032a2:	f7fe bac8 	b.w	8001836 <HAL_TIM_Base_Stop_IT>
	}
	else
	{
		g_GSM_BaudrateSetFlag=0;
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
 80032aa:	4907      	ldr	r1, [pc, #28]	; (80032c8 <GSM_VerifyAutoBaudrate+0x40>)
 80032ac:	4807      	ldr	r0, [pc, #28]	; (80032cc <GSM_VerifyAutoBaudrate+0x44>)
 80032ae:	2204      	movs	r2, #4
	}
}
 80032b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop_IT(&htim6);
	}
	else
	{
		g_GSM_BaudrateSetFlag=0;
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
 80032b4:	f7fe bd76 	b.w	8001da4 <HAL_UART_Transmit_IT>
 80032b8:	0800441d 	.word	0x0800441d
 80032bc:	200006b8 	.word	0x200006b8
 80032c0:	2000067b 	.word	0x2000067b
 80032c4:	20000774 	.word	0x20000774
 80032c8:	08004418 	.word	0x08004418
 80032cc:	200007b0 	.word	0x200007b0

080032d0 <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit_IT(&GSM_huart,"AT\r\n",GSM_AUTOBAUDRATE_MESSAGE_SIZE);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	if(huart==&GSM_huart)
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_UART_RxCpltCallback+0x1c>)
 80032d2:	4283      	cmp	r3, r0
 80032d4:	d109      	bne.n	80032ea <HAL_UART_RxCpltCallback+0x1a>
	{
		if(!g_GSM_ATReadyFlag)
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_UART_RxCpltCallback+0x20>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b90b      	cbnz	r3, 80032e0 <HAL_UART_RxCpltCallback+0x10>
			GSM_VerifyATReady();
 80032dc:	f7ff bfc0 	b.w	8003260 <GSM_VerifyATReady>
		else if(!g_GSM_BaudrateSetFlag)
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <HAL_UART_RxCpltCallback+0x24>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b90b      	cbnz	r3, 80032ea <HAL_UART_RxCpltCallback+0x1a>
			GSM_VerifyAutoBaudrate();
 80032e6:	f7ff bfcf 	b.w	8003288 <GSM_VerifyAutoBaudrate>
 80032ea:	4770      	bx	lr
 80032ec:	200007b0 	.word	0x200007b0
 80032f0:	2000067a 	.word	0x2000067a
 80032f4:	2000067b 	.word	0x2000067b

080032f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032f8:	b510      	push	{r4, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032fc:	4b23      	ldr	r3, [pc, #140]	; (800338c <MX_GPIO_Init+0x94>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accelerometer_Interrupt_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Accelerometer_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80032fe:	4824      	ldr	r0, [pc, #144]	; (8003390 <MX_GPIO_Init+0x98>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003300:	2400      	movs	r4, #0
 8003302:	9400      	str	r4, [sp, #0]
 8003304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003306:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
 800330c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003312:	9200      	str	r2, [sp, #0]
 8003314:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003316:	9401      	str	r4, [sp, #4]
 8003318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331a:	f042 0210 	orr.w	r2, r2, #16
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
 8003320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003322:	f002 0210 	and.w	r2, r2, #16
 8003326:	9201      	str	r2, [sp, #4]
 8003328:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	9402      	str	r4, [sp, #8]
 800332c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332e:	f042 0204 	orr.w	r2, r2, #4
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
 8003334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003336:	f002 0204 	and.w	r2, r2, #4
 800333a:	9202      	str	r2, [sp, #8]
 800333c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	9403      	str	r4, [sp, #12]
 8003340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	f002 0201 	and.w	r2, r2, #1
 800334e:	9203      	str	r2, [sp, #12]
 8003350:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	9404      	str	r4, [sp, #16]
 8003354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003356:	f042 0202 	orr.w	r2, r2, #2
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	9304      	str	r3, [sp, #16]
 8003364:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accelerometer_Interrupt_Pin;
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Accelerometer_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800336a:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accelerometer_Interrupt_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <MX_GPIO_Init+0x9c>)
 800336e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Accelerometer_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8003372:	f7fd f801 	bl	8000378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003376:	4622      	mov	r2, r4
 8003378:	4621      	mov	r1, r4
 800337a:	2017      	movs	r0, #23
 800337c:	f7fc ff82 	bl	8000284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003380:	2017      	movs	r0, #23
 8003382:	f7fc ffb3 	bl	80002ec <HAL_NVIC_EnableIRQ>

}
 8003386:	b00a      	add	sp, #40	; 0x28
 8003388:	bd10      	pop	{r4, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
 8003390:	40021000 	.word	0x40021000
 8003394:	10110000 	.word	0x10110000

08003398 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003398:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <MX_I2C1_Init+0x38>)
 800339e:	f8df e034 	ldr.w	lr, [pc, #52]	; 80033d4 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
 80033a6:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033aa:	2300      	movs	r3, #0
 80033ac:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80033ae:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033b2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80033b4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033b6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033b8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033ba:	f7fd f8cb 	bl	8000554 <HAL_I2C_Init>
 80033be:	b118      	cbz	r0, 80033c8 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80033c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
 80033c4:	f000 b8aa 	b.w	800351c <Error_Handler>
 80033c8:	bd08      	pop	{r3, pc}
 80033ca:	bf00      	nop
 80033cc:	20000700 	.word	0x20000700
 80033d0:	40005400 	.word	0x40005400
 80033d4:	00061a80 	.word	0x00061a80

080033d8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80033d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80033da:	6802      	ldr	r2, [r0, #0]
 80033dc:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_I2C_MspInit+0x48>)
 80033de:	429a      	cmp	r2, r3
 80033e0:	d11a      	bne.n	8003418 <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Accelerometer_SCL_Pin|Accelerometer_SDA_Pin;
 80033e2:	23c0      	movs	r3, #192	; 0xc0
 80033e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033e6:	2312      	movs	r3, #18
 80033e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ea:	2301      	movs	r3, #1
 80033ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ee:	2303      	movs	r3, #3
 80033f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033f2:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f4:	eb0d 0103 	add.w	r1, sp, r3
 80033f8:	480a      	ldr	r0, [pc, #40]	; (8003424 <HAL_I2C_MspInit+0x4c>)
    */
    GPIO_InitStruct.Pin = Accelerometer_SCL_Pin|Accelerometer_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033fa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fc:	f7fc ffbc 	bl	8000378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003400:	2300      	movs	r3, #0
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_I2C_MspInit+0x50>)
 8003406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003408:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003418:	b007      	add	sp, #28
 800341a:	f85d fb04 	ldr.w	pc, [sp], #4
 800341e:	bf00      	nop
 8003420:	40005400 	.word	0x40005400
 8003424:	40020400 	.word	0x40020400
 8003428:	40023800 	.word	0x40023800

0800342c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800342c:	b510      	push	{r4, lr}
 800342e:	b098      	sub	sp, #96	; 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <SystemClock_Config+0xc0>)
 8003432:	2100      	movs	r1, #0
 8003434:	9101      	str	r1, [sp, #4]
 8003436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003438:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003448:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <SystemClock_Config+0xc4>)
 800344a:	9102      	str	r1, [sp, #8]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345a:	9302      	str	r3, [sp, #8]
 800345c:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800345e:	230b      	movs	r3, #11
 8003460:	930c      	str	r3, [sp, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003466:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003468:	2301      	movs	r3, #1
 800346a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800346c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003470:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003472:	2319      	movs	r3, #25
 8003474:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003476:	f44f 73a8 	mov.w	r3, #336	; 0x150
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800347a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 800347c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800347e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003480:	2307      	movs	r3, #7
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003482:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003484:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003486:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003488:	f7fd fd1c 	bl	8000ec4 <HAL_RCC_OscConfig>
 800348c:	b100      	cbz	r0, 8003490 <SystemClock_Config+0x64>
 800348e:	e7fe      	b.n	800348e <SystemClock_Config+0x62>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003490:	230f      	movs	r3, #15
 8003492:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003494:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003498:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800349a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800349c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800349e:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034a2:	a807      	add	r0, sp, #28

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034a4:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034a6:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034a8:	f7fd fed8 	bl	800125c <HAL_RCC_ClockConfig>
 80034ac:	b100      	cbz	r0, 80034b0 <SystemClock_Config+0x84>
 80034ae:	e7fe      	b.n	80034ae <SystemClock_Config+0x82>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80034b0:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b4:	a803      	add	r0, sp, #12
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034b6:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80034b8:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ba:	f7fd ffb9 	bl	8001430 <HAL_RCCEx_PeriphCLKConfig>
 80034be:	4604      	mov	r4, r0
 80034c0:	b100      	cbz	r0, 80034c4 <SystemClock_Config+0x98>
 80034c2:	e7fe      	b.n	80034c2 <SystemClock_Config+0x96>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80034c4:	f7fd ff7e 	bl	80013c4 <HAL_RCC_GetHCLKFreq>
 80034c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80034d0:	f7fc ff18 	bl	8000304 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80034d4:	2004      	movs	r0, #4
 80034d6:	f7fc ff2b 	bl	8000330 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034da:	4622      	mov	r2, r4
 80034dc:	4621      	mov	r1, r4
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	f7fc fecf 	bl	8000284 <HAL_NVIC_SetPriority>
}
 80034e6:	b018      	add	sp, #96	; 0x60
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000

080034f4 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80034f4:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034f6:	f7fc fe7b 	bl	80001f0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80034fa:	f7ff ff97 	bl	800342c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034fe:	f7ff fefb 	bl	80032f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8003502:	f000 f9b1 	bl	8003868 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8003506:	f7ff ff47 	bl	8003398 <MX_I2C1_Init>
  MX_UART4_Init();
 800350a:	f000 f91d 	bl	8003748 <MX_UART4_Init>
  MX_USART6_UART_Init();
 800350e:	f000 f937 	bl	8003780 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8003512:	f000 f8db 	bl	80036cc <MX_TIM6_Init>
  MX_RTC_Init();
 8003516:	f000 f803 	bl	8003520 <MX_RTC_Init>
 800351a:	e7fe      	b.n	800351a <main+0x26>

0800351c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800351c:	e7fe      	b.n	800351c <Error_Handler>
	...

08003520 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003520:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 8003522:	4822      	ldr	r0, [pc, #136]	; (80035ac <MX_RTC_Init+0x8c>)
 8003524:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <MX_RTC_Init+0x90>)
 8003526:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8003528:	227f      	movs	r2, #127	; 0x7f
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800352a:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = 127;
 800352c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800352e:	22ff      	movs	r2, #255	; 0xff
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003530:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8003532:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003534:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003536:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003538:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800353a:	f7fe f853 	bl	80015e4 <HAL_RTC_Init>
 800353e:	b108      	cbz	r0, 8003544 <MX_RTC_Init+0x24>
  {
    Error_Handler();
 8003540:	f7ff ffec 	bl	800351c <Error_Handler>
  }

    /**Initialize RTC and set the Time and Date 
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8003544:	2100      	movs	r1, #0
 8003546:	4819      	ldr	r0, [pc, #100]	; (80035ac <MX_RTC_Init+0x8c>)
 8003548:	f7fe f970 	bl	800182c <HAL_RTCEx_BKUPRead>
 800354c:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8003550:	4298      	cmp	r0, r3
 8003552:	d027      	beq.n	80035a4 <MX_RTC_Init+0x84>
  sTime.Hours = 0x0;
 8003554:	2300      	movs	r3, #0
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003556:	2201      	movs	r2, #1
 8003558:	a901      	add	r1, sp, #4
 800355a:	4814      	ldr	r0, [pc, #80]	; (80035ac <MX_RTC_Init+0x8c>)
  }

    /**Initialize RTC and set the Time and Date 
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
  sTime.Hours = 0x0;
 800355c:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8003560:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8003564:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003568:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800356a:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800356c:	f7fe f889 	bl	8001682 <HAL_RTC_SetTime>
 8003570:	b108      	cbz	r0, 8003576 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8003572:	f7ff ffd3 	bl	800351c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003576:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 8003578:	2300      	movs	r3, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800357a:	4669      	mov	r1, sp
 800357c:	480b      	ldr	r0, [pc, #44]	; (80035ac <MX_RTC_Init+0x8c>)
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800357e:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8003582:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8003586:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800358a:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800358e:	f7fe f8e7 	bl	8001760 <HAL_RTC_SetDate>
 8003592:	b108      	cbz	r0, 8003598 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8003594:	f7ff ffc2 	bl	800351c <Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8003598:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800359c:	2100      	movs	r1, #0
 800359e:	4803      	ldr	r0, [pc, #12]	; (80035ac <MX_RTC_Init+0x8c>)
 80035a0:	f7fe f93f 	bl	8001822 <HAL_RTCEx_BKUPWrite>
  }

}
 80035a4:	b007      	add	sp, #28
 80035a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035aa:	bf00      	nop
 80035ac:	20000754 	.word	0x20000754
 80035b0:	40002800 	.word	0x40002800

080035b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80035b4:	6802      	ldr	r2, [r0, #0]
 80035b6:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_RTC_MspInit+0x10>)
 80035b8:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035ba:	bf02      	ittt	eq
 80035bc:	4b02      	ldreq	r3, [pc, #8]	; (80035c8 <HAL_RTC_MspInit+0x14>)
 80035be:	2201      	moveq	r2, #1
 80035c0:	601a      	streq	r2, [r3, #0]
 80035c2:	4770      	bx	lr
 80035c4:	40002800 	.word	0x40002800
 80035c8:	42470e3c 	.word	0x42470e3c

080035cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ce:	2003      	movs	r0, #3
 80035d0:	f7fc fe46 	bl	8000260 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80035d4:	2200      	movs	r2, #0
 80035d6:	4611      	mov	r1, r2
 80035d8:	f06f 000b 	mvn.w	r0, #11
 80035dc:	f7fc fe52 	bl	8000284 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80035e0:	2200      	movs	r2, #0
 80035e2:	4611      	mov	r1, r2
 80035e4:	f06f 000a 	mvn.w	r0, #10
 80035e8:	f7fc fe4c 	bl	8000284 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	4611      	mov	r1, r2
 80035f0:	f06f 0009 	mvn.w	r0, #9
 80035f4:	f7fc fe46 	bl	8000284 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80035f8:	2200      	movs	r2, #0
 80035fa:	4611      	mov	r1, r2
 80035fc:	f06f 0004 	mvn.w	r0, #4
 8003600:	f7fc fe40 	bl	8000284 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003604:	2200      	movs	r2, #0
 8003606:	4611      	mov	r1, r2
 8003608:	f06f 0003 	mvn.w	r0, #3
 800360c:	f7fc fe3a 	bl	8000284 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003610:	2200      	movs	r2, #0
 8003612:	4611      	mov	r1, r2
 8003614:	f06f 0001 	mvn.w	r0, #1
 8003618:	f7fc fe34 	bl	8000284 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	4611      	mov	r1, r2
 8003620:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003628:	f7fc be2c 	b.w	8000284 <HAL_NVIC_SetPriority>

0800362c <NMI_Handler>:
 800362c:	4770      	bx	lr

0800362e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800362e:	e7fe      	b.n	800362e <HardFault_Handler>

08003630 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003630:	e7fe      	b.n	8003630 <MemManage_Handler>

08003632 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003632:	e7fe      	b.n	8003632 <BusFault_Handler>

08003634 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003634:	e7fe      	b.n	8003634 <UsageFault_Handler>

08003636 <SVC_Handler>:
 8003636:	4770      	bx	lr

08003638 <DebugMon_Handler>:
 8003638:	4770      	bx	lr

0800363a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800363a:	4770      	bx	lr

0800363c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800363c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800363e:	f7fc fdf1 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8003646:	f7fc be80 	b.w	800034a <HAL_SYSTICK_IRQHandler>

0800364a <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800364a:	2080      	movs	r0, #128	; 0x80
 800364c:	f7fc bf76 	b.w	800053c <HAL_GPIO_EXTI_IRQHandler>

08003650 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <UART4_IRQHandler+0x8>)
 8003652:	f7fe bc27 	b.w	8001ea4 <HAL_UART_IRQHandler>
 8003656:	bf00      	nop
 8003658:	200007f0 	.word	0x200007f0

0800365c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800365c:	4801      	ldr	r0, [pc, #4]	; (8003664 <TIM6_DAC_IRQHandler+0x8>)
 800365e:	f7fe b903 	b.w	8001868 <HAL_TIM_IRQHandler>
 8003662:	bf00      	nop
 8003664:	20000774 	.word	0x20000774

08003668 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003668:	4801      	ldr	r0, [pc, #4]	; (8003670 <OTG_FS_IRQHandler+0x8>)
 800366a:	f7fd b863 	b.w	8000734 <HAL_PCD_IRQHandler>
 800366e:	bf00      	nop
 8003670:	20000ab8 	.word	0x20000ab8

08003674 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003674:	4801      	ldr	r0, [pc, #4]	; (800367c <USART6_IRQHandler+0x8>)
 8003676:	f7fe bc15 	b.w	8001ea4 <HAL_UART_IRQHandler>
 800367a:	bf00      	nop
 800367c:	200007b0 	.word	0x200007b0

08003680 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003680:	490f      	ldr	r1, [pc, #60]	; (80036c0 <SystemInit+0x40>)
 8003682:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <SystemInit+0x44>)
 8003690:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003692:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800369a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80036a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <SystemInit+0x48>)
 80036aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036b2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80036b4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036ba:	608b      	str	r3, [r1, #8]
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000ed00 	.word	0xe000ed00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	24003010 	.word	0x24003010

080036cc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80036cc:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = TIM6_PRESCALER;
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <MX_TIM6_Init+0x38>)
/* TIM6 init function */
void MX_TIM6_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <MX_TIM6_Init+0x3c>)
  htim6.Init.Prescaler = TIM6_PRESCALER;
 80036d2:	f242 0ccf 	movw	ip, #8399	; 0x20cf
 80036d6:	e880 1008 	stmia.w	r0, {r3, ip}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036da:	2400      	movs	r4, #0
  htim6.Init.Period = TIM6_COUNTER;
 80036dc:	f240 33e7 	movw	r3, #999	; 0x3e7
{
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = TIM6_PRESCALER;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e0:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = TIM6_COUNTER;
 80036e2:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80036e4:	f7fe f9c6 	bl	8001a74 <HAL_TIM_Base_Init>
 80036e8:	b108      	cbz	r0, 80036ee <MX_TIM6_Init+0x22>
  {
    Error_Handler();
 80036ea:	f7ff ff17 	bl	800351c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036ee:	4669      	mov	r1, sp
 80036f0:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_TIM6_Init+0x3c>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f2:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f4:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036f6:	f7fe f9d7 	bl	8001aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80036fa:	b108      	cbz	r0, 8003700 <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 80036fc:	f7ff ff0e 	bl	800351c <Error_Handler>
  }

}
 8003700:	b002      	add	sp, #8
 8003702:	bd10      	pop	{r4, pc}
 8003704:	40001000 	.word	0x40001000
 8003708:	20000774 	.word	0x20000774

0800370c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800370c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_TIM_Base_MspInit+0x38>)
 8003710:	6802      	ldr	r2, [r0, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d113      	bne.n	800373e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003716:	2200      	movs	r2, #0
 8003718:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800371c:	9201      	str	r2, [sp, #4]
 800371e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003720:	f041 0110 	orr.w	r1, r1, #16
 8003724:	6419      	str	r1, [r3, #64]	; 0x40
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800372e:	2036      	movs	r0, #54	; 0x36
 8003730:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003732:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003734:	f7fc fda6 	bl	8000284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003738:	2036      	movs	r0, #54	; 0x36
 800373a:	f7fc fdd7 	bl	80002ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800373e:	b003      	add	sp, #12
 8003740:	f85d fb04 	ldr.w	pc, [sp], #4
 8003744:	40001000 	.word	0x40001000

08003748 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003748:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 800374a:	480b      	ldr	r0, [pc, #44]	; (8003778 <MX_UART4_Init+0x30>)
  huart4.Init.BaudRate = 115200;
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <MX_UART4_Init+0x34>)
 800374e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003752:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003756:	220c      	movs	r2, #12
void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003758:	2300      	movs	r3, #0
 800375a:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800375c:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800375e:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003760:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003762:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003764:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003766:	f7fe faef 	bl	8001d48 <HAL_UART_Init>
 800376a:	b118      	cbz	r0, 8003774 <MX_UART4_Init+0x2c>
  {
    Error_Handler();
  }

}
 800376c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
 8003770:	f7ff bed4 	b.w	800351c <Error_Handler>
 8003774:	bd08      	pop	{r3, pc}
 8003776:	bf00      	nop
 8003778:	200007f0 	.word	0x200007f0
 800377c:	40004c00 	.word	0x40004c00

08003780 <MX_USART6_UART_Init>:

}
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003780:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8003782:	480b      	ldr	r0, [pc, #44]	; (80037b0 <MX_USART6_UART_Init+0x30>)
  huart6.Init.BaudRate = 115200;
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <MX_USART6_UART_Init+0x34>)
 8003786:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800378a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800378e:	220c      	movs	r2, #12
void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003790:	2300      	movs	r3, #0
 8003792:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003794:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003796:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003798:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800379a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800379c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800379e:	f7fe fad3 	bl	8001d48 <HAL_UART_Init>
 80037a2:	b118      	cbz	r0, 80037ac <MX_USART6_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80037a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
 80037a8:	f7ff beb8 	b.w	800351c <Error_Handler>
 80037ac:	bd08      	pop	{r3, pc}
 80037ae:	bf00      	nop
 80037b0:	200007b0 	.word	0x200007b0
 80037b4:	40011400 	.word	0x40011400

080037b8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037b8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 80037ba:	6803      	ldr	r3, [r0, #0]
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <HAL_UART_MspInit+0xa0>)
 80037be:	4293      	cmp	r3, r2
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037c0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 80037c2:	d121      	bne.n	8003808 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037c4:	2400      	movs	r4, #0
 80037c6:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_UART_MspInit+0xa4>)
 80037c8:	9401      	str	r4, [sp, #4]
 80037ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = CommunicationUART_TX_Pin|CommunicationUART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037cc:	4824      	ldr	r0, [pc, #144]	; (8003860 <HAL_UART_MspInit+0xa8>)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037ce:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 80037d2:	6419      	str	r1, [r3, #64]	; 0x40
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	9b01      	ldr	r3, [sp, #4]
  
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = CommunicationUART_TX_Pin|CommunicationUART_RX_Pin;
 80037de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e8:	2301      	movs	r3, #1
 80037ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ec:	2303      	movs	r3, #3
 80037ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f0:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = CommunicationUART_TX_Pin|CommunicationUART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80037f2:	2308      	movs	r3, #8
 80037f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f6:	f7fc fdbf 	bl	8000378 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80037fa:	2034      	movs	r0, #52	; 0x34
 80037fc:	4622      	mov	r2, r4
 80037fe:	4621      	mov	r1, r4
 8003800:	f7fc fd40 	bl	8000284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003804:	2034      	movs	r0, #52	; 0x34
 8003806:	e022      	b.n	800384e <HAL_UART_MspInit+0x96>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_UART_MspInit+0xac>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d121      	bne.n	8003852 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800380e:	2400      	movs	r4, #0
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_UART_MspInit+0xa4>)
 8003812:	9402      	str	r4, [sp, #8]
 8003814:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SIM808_USART_TX_Pin|SIM808_USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003816:	4812      	ldr	r0, [pc, #72]	; (8003860 <HAL_UART_MspInit+0xa8>)
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003818:	f041 0120 	orr.w	r1, r1, #32
 800381c:	6459      	str	r1, [r3, #68]	; 0x44
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	9302      	str	r3, [sp, #8]
 8003826:	9b02      	ldr	r3, [sp, #8]
  
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = SIM808_USART_TX_Pin|SIM808_USART_RX_Pin;
 8003828:	23c0      	movs	r3, #192	; 0xc0
 800382a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382c:	2302      	movs	r3, #2
 800382e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003830:	2301      	movs	r3, #1
 8003832:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003834:	2303      	movs	r3, #3
 8003836:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003838:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = SIM808_USART_TX_Pin|SIM808_USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800383a:	2308      	movs	r3, #8
 800383c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800383e:	f7fc fd9b 	bl	8000378 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003842:	2047      	movs	r0, #71	; 0x47
 8003844:	4622      	mov	r2, r4
 8003846:	4621      	mov	r1, r4
 8003848:	f7fc fd1c 	bl	8000284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800384c:	2047      	movs	r0, #71	; 0x47
 800384e:	f7fc fd4d 	bl	80002ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003852:	b008      	add	sp, #32
 8003854:	bd10      	pop	{r4, pc}
 8003856:	bf00      	nop
 8003858:	40004c00 	.word	0x40004c00
 800385c:	40023800 	.word	0x40023800
 8003860:	40020800 	.word	0x40020800
 8003864:	40011400 	.word	0x40011400

08003868 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8003868:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800386a:	4c09      	ldr	r4, [pc, #36]	; (8003890 <MX_USB_DEVICE_Init+0x28>)
 800386c:	4909      	ldr	r1, [pc, #36]	; (8003894 <MX_USB_DEVICE_Init+0x2c>)
 800386e:	2200      	movs	r2, #0
 8003870:	4620      	mov	r0, r4
 8003872:	f7ff f9a2 	bl	8002bba <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <MX_USB_DEVICE_Init+0x30>)
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff f9b3 	bl	8002be4 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800387e:	4620      	mov	r0, r4
 8003880:	4906      	ldr	r1, [pc, #24]	; (800389c <MX_USB_DEVICE_Init+0x34>)
 8003882:	f7ff f972 	bl	8002b6a <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8003886:	4620      	mov	r0, r4

}
 8003888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 800388c:	f7ff b9b1 	b.w	8002bf2 <USBD_Start>
 8003890:	20000830 	.word	0x20000830
 8003894:	20000124 	.word	0x20000124
 8003898:	20000044 	.word	0x20000044
 800389c:	20000114 	.word	0x20000114

080038a0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 80038a0:	2000      	movs	r0, #0
 80038a2:	4770      	bx	lr

080038a4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80038a4:	2000      	movs	r0, #0
 80038a6:	4770      	bx	lr

080038a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4604      	mov	r4, r0
 80038ac:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80038ae:	4601      	mov	r1, r0
 80038b0:	480b      	ldr	r0, [pc, #44]	; (80038e0 <CDC_Receive_FS+0x38>)
 80038b2:	f7ff f969 	bl	8002b88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80038b6:	480a      	ldr	r0, [pc, #40]	; (80038e0 <CDC_Receive_FS+0x38>)
 80038b8:	f7ff f96c 	bl	8002b94 <USBD_CDC_ReceivePacket>
 80038bc:	2300      	movs	r3, #0

  extern uint8_t g_ReceivedDataBuffer[APP_RX_DATA_SIZE];
  extern uint8_t g_USBRcvCpltFlag;

  for(uint8_t i=0; i<APP_RX_DATA_SIZE;++i)
	  g_ReceivedDataBuffer[i]=0;
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <CDC_Receive_FS+0x3c>)
 80038c0:	4619      	mov	r1, r3
 80038c2:	5499      	strb	r1, [r3, r2]
 80038c4:	3301      	adds	r3, #1
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);

  extern uint8_t g_ReceivedDataBuffer[APP_RX_DATA_SIZE];
  extern uint8_t g_USBRcvCpltFlag;

  for(uint8_t i=0; i<APP_RX_DATA_SIZE;++i)
 80038c6:	2b32      	cmp	r3, #50	; 0x32
 80038c8:	d1fb      	bne.n	80038c2 <CDC_Receive_FS+0x1a>
	  g_ReceivedDataBuffer[i]=0;

  strlcpy(g_ReceivedDataBuffer,Buf,(*Len)+1);
 80038ca:	682a      	ldr	r2, [r5, #0]
 80038cc:	4805      	ldr	r0, [pc, #20]	; (80038e4 <CDC_Receive_FS+0x3c>)
 80038ce:	3201      	adds	r2, #1
 80038d0:	4621      	mov	r1, r4
 80038d2:	f000 fc49 	bl	8004168 <strlcpy>
  g_USBRcvCpltFlag=1;
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <CDC_Receive_FS+0x40>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 80038dc:	2000      	movs	r0, #0
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	20000830 	.word	0x20000830
 80038e4:	200006cc 	.word	0x200006cc
 80038e8:	200006fe 	.word	0x200006fe

080038ec <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 80038ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80038ee:	4c06      	ldr	r4, [pc, #24]	; (8003908 <CDC_Init_FS+0x1c>)
 80038f0:	4906      	ldr	r1, [pc, #24]	; (800390c <CDC_Init_FS+0x20>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff f93f 	bl	8002b78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80038fa:	4905      	ldr	r1, [pc, #20]	; (8003910 <CDC_Init_FS+0x24>)
 80038fc:	4620      	mov	r0, r4
 80038fe:	f7ff f943 	bl	8002b88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 8003902:	2000      	movs	r0, #0
 8003904:	bd10      	pop	{r4, pc}
 8003906:	bf00      	nop
 8003908:	20000830 	.word	0x20000830
 800390c:	20000a86 	.word	0x20000a86
 8003910:	20000a54 	.word	0x20000a54

08003914 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003914:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8003916:	6803      	ldr	r3, [r0, #0]
 8003918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800391c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800391e:	d125      	bne.n	800396c <HAL_PCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003920:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003924:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003926:	2302      	movs	r3, #2
 8003928:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003930:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003932:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003934:	480e      	ldr	r0, [pc, #56]	; (8003970 <HAL_PCD_MspInit+0x5c>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003936:	9305      	str	r3, [sp, #20]
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393a:	f7fc fd1d 	bl	8000378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <HAL_PCD_MspInit+0x60>)
 8003940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003946:	635a      	str	r2, [r3, #52]	; 0x34
 8003948:	9400      	str	r4, [sp, #0]
 800394a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003958:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800395a:	2043      	movs	r0, #67	; 0x43
 800395c:	4622      	mov	r2, r4
 800395e:	4621      	mov	r1, r4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003960:	9b00      	ldr	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003962:	f7fc fc8f 	bl	8000284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003966:	2043      	movs	r0, #67	; 0x43
 8003968:	f7fc fcc0 	bl	80002ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800396c:	b006      	add	sp, #24
 800396e:	bd10      	pop	{r4, pc}
 8003970:	40020000 	.word	0x40020000
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003978:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 800397c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003980:	f7ff b94e 	b.w	8002c20 <USBD_LL_SetupStage>

08003984 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003984:	231c      	movs	r3, #28
 8003986:	fb03 0301 	mla	r3, r3, r1, r0
 800398a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800398e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003992:	f7ff b972 	b.w	8002c7a <USBD_LL_DataOutStage>

08003996 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003996:	231c      	movs	r3, #28
 8003998:	fb03 0301 	mla	r3, r3, r1, r0
 800399c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80039a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a2:	f7ff b99b 	b.w	8002cdc <USBD_LL_DataInStage>

080039a6 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80039a6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80039aa:	f7ff ba16 	b.w	8002dda <USBD_LL_SOF>

080039ae <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80039ae:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 80039b0:	68c1      	ldr	r1, [r0, #12]
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80039b2:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 80039b4:	3100      	adds	r1, #0
 80039b6:	bf18      	it	ne
 80039b8:	2101      	movne	r1, #1
 80039ba:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80039be:	f7ff f9fa 	bl	8002db6 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80039c2:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 80039c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80039ca:	f7ff b9d5 	b.w	8002d78 <USBD_LL_Reset>
	...

080039d0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 80039d0:	b510      	push	{r4, lr}
 80039d2:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80039d4:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80039d8:	f7ff f9f0 	bl	8002dbc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80039dc:	6822      	ldr	r2, [r4, #0]
 80039de:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80039ea:	6a23      	ldr	r3, [r4, #32]
 80039ec:	b123      	cbz	r3, 80039f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80039ee:	4a03      	ldr	r2, [pc, #12]	; (80039fc <HAL_PCD_SuspendCallback+0x2c>)
 80039f0:	6913      	ldr	r3, [r2, #16]
 80039f2:	f043 0306 	orr.w	r3, r3, #6
 80039f6:	6113      	str	r3, [r2, #16]
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	bf00      	nop
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003a00:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003a04:	f7ff b9e3 	b.w	8002dce <USBD_LL_Resume>

08003a08 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003a08:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003a0c:	f7ff b9f3 	b.w	8002df6 <USBD_LL_IsoOUTIncomplete>

08003a10 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003a10:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003a14:	f7ff b9ed 	b.w	8002df2 <USBD_LL_IsoINIncomplete>

08003a18 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003a18:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003a1c:	f7ff b9ed 	b.w	8002dfa <USBD_LL_DevConnected>

08003a20 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003a20:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003a24:	f7ff b9eb 	b.w	8002dfe <USBD_LL_DevDisconnected>

08003a28 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8003a28:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8003a2a:	7802      	ldrb	r2, [r0, #0]
 8003a2c:	bb42      	cbnz	r2, 8003a80 <USBD_LL_Init+0x58>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003a30:	2104      	movs	r1, #4
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8003a32:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 8003a36:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003a3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a3e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003a42:	2102      	movs	r1, #2
 8003a44:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a46:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003a48:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003a4a:	2101      	movs	r1, #1
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003a4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003a4e:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003a50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003a52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003a56:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003a5a:	f7fc fde9 	bl	8000630 <HAL_PCD_Init>
 8003a5e:	b108      	cbz	r0, 8003a64 <USBD_LL_Init+0x3c>
  {
    Error_Handler();
 8003a60:	f7ff fd5c 	bl	800351c <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	4807      	ldr	r0, [pc, #28]	; (8003a84 <USBD_LL_Init+0x5c>)
 8003a68:	f7fd fa28 	bl	8000ebc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4804      	ldr	r0, [pc, #16]	; (8003a84 <USBD_LL_Init+0x5c>)
 8003a72:	f7fd fa02 	bl	8000e7a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003a76:	2280      	movs	r2, #128	; 0x80
 8003a78:	2101      	movs	r1, #1
 8003a7a:	4802      	ldr	r0, [pc, #8]	; (8003a84 <USBD_LL_Init+0x5c>)
 8003a7c:	f7fd f9fd 	bl	8000e7a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003a80:	2000      	movs	r0, #0
 8003a82:	bd08      	pop	{r3, pc}
 8003a84:	20000ab8 	.word	0x20000ab8

08003a88 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003a88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003a8a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a8e:	f7fc fe3b 	bl	8000708 <HAL_PCD_Start>
 8003a92:	2803      	cmp	r0, #3
 8003a94:	bf9a      	itte	ls
 8003a96:	4b02      	ldrls	r3, [pc, #8]	; (8003aa0 <USBD_LL_Start+0x18>)
 8003a98:	5c18      	ldrbls	r0, [r3, r0]
 8003a9a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003a9c:	bd08      	pop	{r3, pc}
 8003a9e:	bf00      	nop
 8003aa0:	0800443a 	.word	0x0800443a

08003aa4 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8003aa8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003aac:	4613      	mov	r3, r2
 8003aae:	4622      	mov	r2, r4
 8003ab0:	f7fd f8f6 	bl	8000ca0 <HAL_PCD_EP_Open>
 8003ab4:	2803      	cmp	r0, #3
 8003ab6:	bf9a      	itte	ls
 8003ab8:	4b01      	ldrls	r3, [pc, #4]	; (8003ac0 <USBD_LL_OpenEP+0x1c>)
 8003aba:	5c18      	ldrbls	r0, [r3, r0]
 8003abc:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003abe:	bd10      	pop	{r4, pc}
 8003ac0:	0800443a 	.word	0x0800443a

08003ac4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003ac4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003ac6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003aca:	f7fd f917 	bl	8000cfc <HAL_PCD_EP_Close>
 8003ace:	2803      	cmp	r0, #3
 8003ad0:	bf9a      	itte	ls
 8003ad2:	4b02      	ldrls	r3, [pc, #8]	; (8003adc <USBD_LL_CloseEP+0x18>)
 8003ad4:	5c18      	ldrbls	r0, [r3, r0]
 8003ad6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003ad8:	bd08      	pop	{r3, pc}
 8003ada:	bf00      	nop
 8003adc:	0800443a 	.word	0x0800443a

08003ae0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003ae0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003ae2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ae6:	f7fd f977 	bl	8000dd8 <HAL_PCD_EP_SetStall>
 8003aea:	2803      	cmp	r0, #3
 8003aec:	bf9a      	itte	ls
 8003aee:	4b02      	ldrls	r3, [pc, #8]	; (8003af8 <USBD_LL_StallEP+0x18>)
 8003af0:	5c18      	ldrbls	r0, [r3, r0]
 8003af2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003af4:	bd08      	pop	{r3, pc}
 8003af6:	bf00      	nop
 8003af8:	0800443a 	.word	0x0800443a

08003afc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003afc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003afe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b02:	f7fd f995 	bl	8000e30 <HAL_PCD_EP_ClrStall>
 8003b06:	2803      	cmp	r0, #3
 8003b08:	bf9a      	itte	ls
 8003b0a:	4b02      	ldrls	r3, [pc, #8]	; (8003b14 <USBD_LL_ClearStallEP+0x18>)
 8003b0c:	5c18      	ldrbls	r0, [r3, r0]
 8003b0e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003b10:	bd08      	pop	{r3, pc}
 8003b12:	bf00      	nop
 8003b14:	0800443a 	.word	0x0800443a

08003b18 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003b18:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003b1c:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003b20:	bf18      	it	ne
 8003b22:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8003b26:	f04f 001c 	mov.w	r0, #28
 8003b2a:	bf15      	itete	ne
 8003b2c:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003b30:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003b34:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003b38:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8003b3c:	4770      	bx	lr
	...

08003b40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003b40:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003b42:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b46:	f7fd f899 	bl	8000c7c <HAL_PCD_SetAddress>
 8003b4a:	2803      	cmp	r0, #3
 8003b4c:	bf9a      	itte	ls
 8003b4e:	4b02      	ldrls	r3, [pc, #8]	; (8003b58 <USBD_LL_SetUSBAddress+0x18>)
 8003b50:	5c18      	ldrbls	r0, [r3, r0]
 8003b52:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003b54:	bd08      	pop	{r3, pc}
 8003b56:	bf00      	nop
 8003b58:	0800443a 	.word	0x0800443a

08003b5c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003b5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003b5e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b62:	f7fd f919 	bl	8000d98 <HAL_PCD_EP_Transmit>
 8003b66:	2803      	cmp	r0, #3
 8003b68:	bf9a      	itte	ls
 8003b6a:	4b02      	ldrls	r3, [pc, #8]	; (8003b74 <USBD_LL_Transmit+0x18>)
 8003b6c:	5c18      	ldrbls	r0, [r3, r0]
 8003b6e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003b70:	bd08      	pop	{r3, pc}
 8003b72:	bf00      	nop
 8003b74:	0800443a 	.word	0x0800443a

08003b78 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8003b78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003b7a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b7e:	f7fd f8e0 	bl	8000d42 <HAL_PCD_EP_Receive>
 8003b82:	2803      	cmp	r0, #3
 8003b84:	bf9a      	itte	ls
 8003b86:	4b02      	ldrls	r3, [pc, #8]	; (8003b90 <USBD_LL_PrepareReceive+0x18>)
 8003b88:	5c18      	ldrbls	r0, [r3, r0]
 8003b8a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003b8c:	bd08      	pop	{r3, pc}
 8003b8e:	bf00      	nop
 8003b90:	0800443a 	.word	0x0800443a

08003b94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8003b94:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003b96:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b9a:	f7fd f8f5 	bl	8000d88 <HAL_PCD_EP_GetRxCount>
}
 8003b9e:	bd08      	pop	{r3, pc}

08003ba0 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003ba0:	2312      	movs	r3, #18
 8003ba2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003ba4:	4800      	ldr	r0, [pc, #0]	; (8003ba8 <USBD_FS_DeviceDescriptor+0x8>)
 8003ba6:	4770      	bx	lr
 8003ba8:	20000144 	.word	0x20000144

08003bac <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003bac:	2304      	movs	r3, #4
 8003bae:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003bb0:	4800      	ldr	r0, [pc, #0]	; (8003bb4 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003bb2:	4770      	bx	lr
 8003bb4:	20000140 	.word	0x20000140

08003bb8 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003bb8:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003bba:	4c04      	ldr	r4, [pc, #16]	; (8003bcc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003bbc:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	f7ff facc 	bl	800315e <USBD_GetString>
  return USBD_StrDesc;
}
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	bd10      	pop	{r4, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000ea8 	.word	0x20000ea8
 8003bd0:	0800443e 	.word	0x0800443e

08003bd4 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003bd4:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003bd6:	4c04      	ldr	r4, [pc, #16]	; (8003be8 <USBD_FS_ProductStrDescriptor+0x14>)
 8003bd8:	4804      	ldr	r0, [pc, #16]	; (8003bec <USBD_FS_ProductStrDescriptor+0x18>)
 8003bda:	460a      	mov	r2, r1
 8003bdc:	4621      	mov	r1, r4
 8003bde:	f7ff fabe 	bl	800315e <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003be2:	4620      	mov	r0, r4
 8003be4:	bd10      	pop	{r4, pc}
 8003be6:	bf00      	nop
 8003be8:	20000ea8 	.word	0x20000ea8
 8003bec:	08004451 	.word	0x08004451

08003bf0 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003bf0:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003bf2:	4c04      	ldr	r4, [pc, #16]	; (8003c04 <USBD_FS_SerialStrDescriptor+0x14>)
 8003bf4:	4804      	ldr	r0, [pc, #16]	; (8003c08 <USBD_FS_SerialStrDescriptor+0x18>)
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f7ff fab0 	bl	800315e <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003bfe:	4620      	mov	r0, r4
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	20000ea8 	.word	0x20000ea8
 8003c08:	08004467 	.word	0x08004467

08003c0c <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003c0c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003c0e:	4c04      	ldr	r4, [pc, #16]	; (8003c20 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003c10:	4804      	ldr	r0, [pc, #16]	; (8003c24 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003c12:	460a      	mov	r2, r1
 8003c14:	4621      	mov	r1, r4
 8003c16:	f7ff faa2 	bl	800315e <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	bd10      	pop	{r4, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000ea8 	.word	0x20000ea8
 8003c24:	08004474 	.word	0x08004474

08003c28 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003c28:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003c2a:	4c04      	ldr	r4, [pc, #16]	; (8003c3c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003c2c:	4804      	ldr	r0, [pc, #16]	; (8003c40 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003c2e:	460a      	mov	r2, r1
 8003c30:	4621      	mov	r1, r4
 8003c32:	f7ff fa94 	bl	800315e <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003c36:	4620      	mov	r0, r4
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000ea8 	.word	0x20000ea8
 8003c40:	0800447f 	.word	0x0800447f

08003c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c4a:	e003      	b.n	8003c54 <LoopCopyDataInit>

08003c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c52:	3104      	adds	r1, #4

08003c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c54:	480b      	ldr	r0, [pc, #44]	; (8003c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c5c:	d3f6      	bcc.n	8003c4c <CopyDataInit>
  ldr  r2, =_sbss
 8003c5e:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c60:	e002      	b.n	8003c68 <LoopFillZerobss>

08003c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c64:	f842 3b04 	str.w	r3, [r2], #4

08003c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c6c:	d3f9      	bcc.n	8003c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c6e:	f7ff fd07 	bl	8003680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c72:	f000 f811 	bl	8003c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c76:	f7ff fc3d 	bl	80034f4 <main>
  bx  lr    
 8003c7a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c7c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8003c80:	08004498 	.word	0x08004498
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c88:	2000065c 	.word	0x2000065c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003c8c:	2000065c 	.word	0x2000065c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c90:	200010ac 	.word	0x200010ac

08003c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c94:	e7fe      	b.n	8003c94 <ADC_IRQHandler>
	...

08003c98 <__libc_init_array>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <__libc_init_array+0x3c>)
 8003c9c:	4c0e      	ldr	r4, [pc, #56]	; (8003cd8 <__libc_init_array+0x40>)
 8003c9e:	1ae4      	subs	r4, r4, r3
 8003ca0:	10a4      	asrs	r4, r4, #2
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	461e      	mov	r6, r3
 8003ca6:	42a5      	cmp	r5, r4
 8003ca8:	d004      	beq.n	8003cb4 <__libc_init_array+0x1c>
 8003caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cae:	4798      	blx	r3
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	e7f8      	b.n	8003ca6 <__libc_init_array+0xe>
 8003cb4:	f000 fba4 	bl	8004400 <_init>
 8003cb8:	4c08      	ldr	r4, [pc, #32]	; (8003cdc <__libc_init_array+0x44>)
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <__libc_init_array+0x48>)
 8003cbc:	1ae4      	subs	r4, r4, r3
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	2500      	movs	r5, #0
 8003cc2:	461e      	mov	r6, r3
 8003cc4:	42a5      	cmp	r5, r4
 8003cc6:	d004      	beq.n	8003cd2 <__libc_init_array+0x3a>
 8003cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ccc:	4798      	blx	r3
 8003cce:	3501      	adds	r5, #1
 8003cd0:	e7f8      	b.n	8003cc4 <__libc_init_array+0x2c>
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	08004490 	.word	0x08004490
 8003cd8:	08004490 	.word	0x08004490
 8003cdc:	08004494 	.word	0x08004494
 8003ce0:	08004490 	.word	0x08004490

08003ce4 <malloc>:
 8003ce4:	4b02      	ldr	r3, [pc, #8]	; (8003cf0 <malloc+0xc>)
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	f000 b80b 	b.w	8003d04 <_malloc_r>
 8003cee:	bf00      	nop
 8003cf0:	20000658 	.word	0x20000658

08003cf4 <free>:
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <free+0xc>)
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	f000 bab5 	b.w	8004268 <_free_r>
 8003cfe:	bf00      	nop
 8003d00:	20000658 	.word	0x20000658

08003d04 <_malloc_r>:
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	f101 040b 	add.w	r4, r1, #11
 8003d0c:	2c16      	cmp	r4, #22
 8003d0e:	b085      	sub	sp, #20
 8003d10:	4681      	mov	r9, r0
 8003d12:	d903      	bls.n	8003d1c <_malloc_r+0x18>
 8003d14:	f034 0407 	bics.w	r4, r4, #7
 8003d18:	d501      	bpl.n	8003d1e <_malloc_r+0x1a>
 8003d1a:	e002      	b.n	8003d22 <_malloc_r+0x1e>
 8003d1c:	2410      	movs	r4, #16
 8003d1e:	428c      	cmp	r4, r1
 8003d20:	d203      	bcs.n	8003d2a <_malloc_r+0x26>
 8003d22:	230c      	movs	r3, #12
 8003d24:	f8c9 3000 	str.w	r3, [r9]
 8003d28:	e1ea      	b.n	8004100 <_malloc_r+0x3fc>
 8003d2a:	4648      	mov	r0, r9
 8003d2c:	f000 fa0a 	bl	8004144 <__malloc_lock>
 8003d30:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003d34:	4d9e      	ldr	r5, [pc, #632]	; (8003fb0 <_malloc_r+0x2ac>)
 8003d36:	d217      	bcs.n	8003d68 <_malloc_r+0x64>
 8003d38:	f104 0208 	add.w	r2, r4, #8
 8003d3c:	442a      	add	r2, r5
 8003d3e:	f1a2 0108 	sub.w	r1, r2, #8
 8003d42:	6856      	ldr	r6, [r2, #4]
 8003d44:	428e      	cmp	r6, r1
 8003d46:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003d4a:	d102      	bne.n	8003d52 <_malloc_r+0x4e>
 8003d4c:	68d6      	ldr	r6, [r2, #12]
 8003d4e:	42b2      	cmp	r2, r6
 8003d50:	d008      	beq.n	8003d64 <_malloc_r+0x60>
 8003d52:	6873      	ldr	r3, [r6, #4]
 8003d54:	68f2      	ldr	r2, [r6, #12]
 8003d56:	68b1      	ldr	r1, [r6, #8]
 8003d58:	f023 0303 	bic.w	r3, r3, #3
 8003d5c:	60ca      	str	r2, [r1, #12]
 8003d5e:	4433      	add	r3, r6
 8003d60:	6091      	str	r1, [r2, #8]
 8003d62:	e02f      	b.n	8003dc4 <_malloc_r+0xc0>
 8003d64:	3302      	adds	r3, #2
 8003d66:	e03d      	b.n	8003de4 <_malloc_r+0xe0>
 8003d68:	0a63      	lsrs	r3, r4, #9
 8003d6a:	d01a      	beq.n	8003da2 <_malloc_r+0x9e>
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d802      	bhi.n	8003d76 <_malloc_r+0x72>
 8003d70:	09a3      	lsrs	r3, r4, #6
 8003d72:	3338      	adds	r3, #56	; 0x38
 8003d74:	e018      	b.n	8003da8 <_malloc_r+0xa4>
 8003d76:	2b14      	cmp	r3, #20
 8003d78:	d801      	bhi.n	8003d7e <_malloc_r+0x7a>
 8003d7a:	335b      	adds	r3, #91	; 0x5b
 8003d7c:	e014      	b.n	8003da8 <_malloc_r+0xa4>
 8003d7e:	2b54      	cmp	r3, #84	; 0x54
 8003d80:	d802      	bhi.n	8003d88 <_malloc_r+0x84>
 8003d82:	0b23      	lsrs	r3, r4, #12
 8003d84:	336e      	adds	r3, #110	; 0x6e
 8003d86:	e00f      	b.n	8003da8 <_malloc_r+0xa4>
 8003d88:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003d8c:	d802      	bhi.n	8003d94 <_malloc_r+0x90>
 8003d8e:	0be3      	lsrs	r3, r4, #15
 8003d90:	3377      	adds	r3, #119	; 0x77
 8003d92:	e009      	b.n	8003da8 <_malloc_r+0xa4>
 8003d94:	f240 5254 	movw	r2, #1364	; 0x554
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d804      	bhi.n	8003da6 <_malloc_r+0xa2>
 8003d9c:	0ca3      	lsrs	r3, r4, #18
 8003d9e:	337c      	adds	r3, #124	; 0x7c
 8003da0:	e002      	b.n	8003da8 <_malloc_r+0xa4>
 8003da2:	233f      	movs	r3, #63	; 0x3f
 8003da4:	e000      	b.n	8003da8 <_malloc_r+0xa4>
 8003da6:	237e      	movs	r3, #126	; 0x7e
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003dae:	f1a2 0008 	sub.w	r0, r2, #8
 8003db2:	6856      	ldr	r6, [r2, #4]
 8003db4:	e00c      	b.n	8003dd0 <_malloc_r+0xcc>
 8003db6:	2900      	cmp	r1, #0
 8003db8:	68f1      	ldr	r1, [r6, #12]
 8003dba:	db08      	blt.n	8003dce <_malloc_r+0xca>
 8003dbc:	68b3      	ldr	r3, [r6, #8]
 8003dbe:	60d9      	str	r1, [r3, #12]
 8003dc0:	608b      	str	r3, [r1, #8]
 8003dc2:	18b3      	adds	r3, r6, r2
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	e1a3      	b.n	8004116 <_malloc_r+0x412>
 8003dce:	460e      	mov	r6, r1
 8003dd0:	4286      	cmp	r6, r0
 8003dd2:	d006      	beq.n	8003de2 <_malloc_r+0xde>
 8003dd4:	6872      	ldr	r2, [r6, #4]
 8003dd6:	f022 0203 	bic.w	r2, r2, #3
 8003dda:	1b11      	subs	r1, r2, r4
 8003ddc:	290f      	cmp	r1, #15
 8003dde:	ddea      	ble.n	8003db6 <_malloc_r+0xb2>
 8003de0:	3b01      	subs	r3, #1
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a72      	ldr	r2, [pc, #456]	; (8003fb0 <_malloc_r+0x2ac>)
 8003de6:	692e      	ldr	r6, [r5, #16]
 8003de8:	f102 0708 	add.w	r7, r2, #8
 8003dec:	42be      	cmp	r6, r7
 8003dee:	4639      	mov	r1, r7
 8003df0:	d079      	beq.n	8003ee6 <_malloc_r+0x1e2>
 8003df2:	6870      	ldr	r0, [r6, #4]
 8003df4:	f020 0003 	bic.w	r0, r0, #3
 8003df8:	ebc4 0e00 	rsb	lr, r4, r0
 8003dfc:	f1be 0f0f 	cmp.w	lr, #15
 8003e00:	dd0d      	ble.n	8003e1e <_malloc_r+0x11a>
 8003e02:	1933      	adds	r3, r6, r4
 8003e04:	f044 0401 	orr.w	r4, r4, #1
 8003e08:	6074      	str	r4, [r6, #4]
 8003e0a:	6153      	str	r3, [r2, #20]
 8003e0c:	6113      	str	r3, [r2, #16]
 8003e0e:	f04e 0201 	orr.w	r2, lr, #1
 8003e12:	60df      	str	r7, [r3, #12]
 8003e14:	609f      	str	r7, [r3, #8]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	f843 e00e 	str.w	lr, [r3, lr]
 8003e1c:	e17b      	b.n	8004116 <_malloc_r+0x412>
 8003e1e:	f1be 0f00 	cmp.w	lr, #0
 8003e22:	6157      	str	r7, [r2, #20]
 8003e24:	6117      	str	r7, [r2, #16]
 8003e26:	db05      	blt.n	8003e34 <_malloc_r+0x130>
 8003e28:	4430      	add	r0, r6
 8003e2a:	6843      	ldr	r3, [r0, #4]
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6043      	str	r3, [r0, #4]
 8003e32:	e170      	b.n	8004116 <_malloc_r+0x412>
 8003e34:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003e38:	d215      	bcs.n	8003e66 <_malloc_r+0x162>
 8003e3a:	08c0      	lsrs	r0, r0, #3
 8003e3c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8003e40:	2701      	movs	r7, #1
 8003e42:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003e46:	6857      	ldr	r7, [r2, #4]
 8003e48:	3001      	adds	r0, #1
 8003e4a:	ea4e 0707 	orr.w	r7, lr, r7
 8003e4e:	6057      	str	r7, [r2, #4]
 8003e50:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8003e54:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8003e58:	f8c6 e008 	str.w	lr, [r6, #8]
 8003e5c:	3f08      	subs	r7, #8
 8003e5e:	60f7      	str	r7, [r6, #12]
 8003e60:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8003e64:	e03d      	b.n	8003ee2 <_malloc_r+0x1de>
 8003e66:	0a42      	lsrs	r2, r0, #9
 8003e68:	2a04      	cmp	r2, #4
 8003e6a:	d802      	bhi.n	8003e72 <_malloc_r+0x16e>
 8003e6c:	0982      	lsrs	r2, r0, #6
 8003e6e:	3238      	adds	r2, #56	; 0x38
 8003e70:	e015      	b.n	8003e9e <_malloc_r+0x19a>
 8003e72:	2a14      	cmp	r2, #20
 8003e74:	d801      	bhi.n	8003e7a <_malloc_r+0x176>
 8003e76:	325b      	adds	r2, #91	; 0x5b
 8003e78:	e011      	b.n	8003e9e <_malloc_r+0x19a>
 8003e7a:	2a54      	cmp	r2, #84	; 0x54
 8003e7c:	d802      	bhi.n	8003e84 <_malloc_r+0x180>
 8003e7e:	0b02      	lsrs	r2, r0, #12
 8003e80:	326e      	adds	r2, #110	; 0x6e
 8003e82:	e00c      	b.n	8003e9e <_malloc_r+0x19a>
 8003e84:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003e88:	d802      	bhi.n	8003e90 <_malloc_r+0x18c>
 8003e8a:	0bc2      	lsrs	r2, r0, #15
 8003e8c:	3277      	adds	r2, #119	; 0x77
 8003e8e:	e006      	b.n	8003e9e <_malloc_r+0x19a>
 8003e90:	f240 5754 	movw	r7, #1364	; 0x554
 8003e94:	42ba      	cmp	r2, r7
 8003e96:	bf9a      	itte	ls
 8003e98:	0c82      	lsrls	r2, r0, #18
 8003e9a:	327c      	addls	r2, #124	; 0x7c
 8003e9c:	227e      	movhi	r2, #126	; 0x7e
 8003e9e:	1c57      	adds	r7, r2, #1
 8003ea0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003ea4:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003ea8:	f8df c104 	ldr.w	ip, [pc, #260]	; 8003fb0 <_malloc_r+0x2ac>
 8003eac:	45be      	cmp	lr, r7
 8003eae:	d10d      	bne.n	8003ecc <_malloc_r+0x1c8>
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	1092      	asrs	r2, r2, #2
 8003eb4:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003ebc:	4310      	orrs	r0, r2
 8003ebe:	f8cc 0004 	str.w	r0, [ip, #4]
 8003ec2:	4672      	mov	r2, lr
 8003ec4:	e009      	b.n	8003eda <_malloc_r+0x1d6>
 8003ec6:	68bf      	ldr	r7, [r7, #8]
 8003ec8:	45be      	cmp	lr, r7
 8003eca:	d004      	beq.n	8003ed6 <_malloc_r+0x1d2>
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	f022 0203 	bic.w	r2, r2, #3
 8003ed2:	4290      	cmp	r0, r2
 8003ed4:	d3f7      	bcc.n	8003ec6 <_malloc_r+0x1c2>
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	46be      	mov	lr, r7
 8003eda:	60f2      	str	r2, [r6, #12]
 8003edc:	f8c6 e008 	str.w	lr, [r6, #8]
 8003ee0:	6096      	str	r6, [r2, #8]
 8003ee2:	f8ce 600c 	str.w	r6, [lr, #12]
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	109a      	asrs	r2, r3, #2
 8003eea:	fa00 f202 	lsl.w	r2, r0, r2
 8003eee:	6868      	ldr	r0, [r5, #4]
 8003ef0:	4282      	cmp	r2, r0
 8003ef2:	d85f      	bhi.n	8003fb4 <_malloc_r+0x2b0>
 8003ef4:	4202      	tst	r2, r0
 8003ef6:	d106      	bne.n	8003f06 <_malloc_r+0x202>
 8003ef8:	f023 0303 	bic.w	r3, r3, #3
 8003efc:	0052      	lsls	r2, r2, #1
 8003efe:	4202      	tst	r2, r0
 8003f00:	f103 0304 	add.w	r3, r3, #4
 8003f04:	d0fa      	beq.n	8003efc <_malloc_r+0x1f8>
 8003f06:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8003f0a:	46c2      	mov	sl, r8
 8003f0c:	469c      	mov	ip, r3
 8003f0e:	f8da 600c 	ldr.w	r6, [sl, #12]
 8003f12:	4556      	cmp	r6, sl
 8003f14:	d02c      	beq.n	8003f70 <_malloc_r+0x26c>
 8003f16:	6870      	ldr	r0, [r6, #4]
 8003f18:	68f7      	ldr	r7, [r6, #12]
 8003f1a:	f020 0003 	bic.w	r0, r0, #3
 8003f1e:	ebc4 0e00 	rsb	lr, r4, r0
 8003f22:	f1be 0f0f 	cmp.w	lr, #15
 8003f26:	dd11      	ble.n	8003f4c <_malloc_r+0x248>
 8003f28:	1933      	adds	r3, r6, r4
 8003f2a:	f044 0401 	orr.w	r4, r4, #1
 8003f2e:	6074      	str	r4, [r6, #4]
 8003f30:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8003f34:	60d7      	str	r7, [r2, #12]
 8003f36:	60ba      	str	r2, [r7, #8]
 8003f38:	f04e 0201 	orr.w	r2, lr, #1
 8003f3c:	616b      	str	r3, [r5, #20]
 8003f3e:	612b      	str	r3, [r5, #16]
 8003f40:	60d9      	str	r1, [r3, #12]
 8003f42:	6099      	str	r1, [r3, #8]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	f843 e00e 	str.w	lr, [r3, lr]
 8003f4a:	e00b      	b.n	8003f64 <_malloc_r+0x260>
 8003f4c:	f1be 0f00 	cmp.w	lr, #0
 8003f50:	db0c      	blt.n	8003f6c <_malloc_r+0x268>
 8003f52:	1833      	adds	r3, r6, r0
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003f60:	60df      	str	r7, [r3, #12]
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	4648      	mov	r0, r9
 8003f66:	f000 f8ee 	bl	8004146 <__malloc_unlock>
 8003f6a:	e0d8      	b.n	800411e <_malloc_r+0x41a>
 8003f6c:	463e      	mov	r6, r7
 8003f6e:	e7d0      	b.n	8003f12 <_malloc_r+0x20e>
 8003f70:	f10c 0c01 	add.w	ip, ip, #1
 8003f74:	f01c 0f03 	tst.w	ip, #3
 8003f78:	f10a 0a08 	add.w	sl, sl, #8
 8003f7c:	d1c7      	bne.n	8003f0e <_malloc_r+0x20a>
 8003f7e:	0798      	lsls	r0, r3, #30
 8003f80:	d104      	bne.n	8003f8c <_malloc_r+0x288>
 8003f82:	686b      	ldr	r3, [r5, #4]
 8003f84:	ea23 0302 	bic.w	r3, r3, r2
 8003f88:	606b      	str	r3, [r5, #4]
 8003f8a:	e005      	b.n	8003f98 <_malloc_r+0x294>
 8003f8c:	f858 0908 	ldr.w	r0, [r8], #-8
 8003f90:	4580      	cmp	r8, r0
 8003f92:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f96:	d0f2      	beq.n	8003f7e <_malloc_r+0x27a>
 8003f98:	6868      	ldr	r0, [r5, #4]
 8003f9a:	0052      	lsls	r2, r2, #1
 8003f9c:	4282      	cmp	r2, r0
 8003f9e:	d809      	bhi.n	8003fb4 <_malloc_r+0x2b0>
 8003fa0:	b142      	cbz	r2, 8003fb4 <_malloc_r+0x2b0>
 8003fa2:	4663      	mov	r3, ip
 8003fa4:	4202      	tst	r2, r0
 8003fa6:	d1ae      	bne.n	8003f06 <_malloc_r+0x202>
 8003fa8:	3304      	adds	r3, #4
 8003faa:	0052      	lsls	r2, r2, #1
 8003fac:	e7fa      	b.n	8003fa4 <_malloc_r+0x2a0>
 8003fae:	bf00      	nop
 8003fb0:	20000158 	.word	0x20000158
 8003fb4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003fb8:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003fbc:	f026 0603 	bic.w	r6, r6, #3
 8003fc0:	42b4      	cmp	r4, r6
 8003fc2:	d803      	bhi.n	8003fcc <_malloc_r+0x2c8>
 8003fc4:	1b33      	subs	r3, r6, r4
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	f300 809c 	bgt.w	8004104 <_malloc_r+0x400>
 8003fcc:	4a56      	ldr	r2, [pc, #344]	; (8004128 <_malloc_r+0x424>)
 8003fce:	4957      	ldr	r1, [pc, #348]	; (800412c <_malloc_r+0x428>)
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	6808      	ldr	r0, [r1, #0]
 8003fd4:	9101      	str	r1, [sp, #4]
 8003fd6:	f102 0810 	add.w	r8, r2, #16
 8003fda:	4a55      	ldr	r2, [pc, #340]	; (8004130 <_malloc_r+0x42c>)
 8003fdc:	9203      	str	r2, [sp, #12]
 8003fde:	3001      	adds	r0, #1
 8003fe0:	bf18      	it	ne
 8003fe2:	f102 31ff 	addne.w	r1, r2, #4294967295
 8003fe6:	44a0      	add	r8, r4
 8003fe8:	bf1e      	ittt	ne
 8003fea:	4488      	addne	r8, r1
 8003fec:	4251      	negne	r1, r2
 8003fee:	ea01 0808 	andne.w	r8, r1, r8
 8003ff2:	eb0b 0306 	add.w	r3, fp, r6
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	4648      	mov	r0, r9
 8003ffa:	9302      	str	r3, [sp, #8]
 8003ffc:	f000 f8a4 	bl	8004148 <_sbrk_r>
 8004000:	1c42      	adds	r2, r0, #1
 8004002:	4607      	mov	r7, r0
 8004004:	d06f      	beq.n	80040e6 <_malloc_r+0x3e2>
 8004006:	9b02      	ldr	r3, [sp, #8]
 8004008:	9a03      	ldr	r2, [sp, #12]
 800400a:	4283      	cmp	r3, r0
 800400c:	d901      	bls.n	8004012 <_malloc_r+0x30e>
 800400e:	45ab      	cmp	fp, r5
 8004010:	d169      	bne.n	80040e6 <_malloc_r+0x3e2>
 8004012:	f8df a128 	ldr.w	sl, [pc, #296]	; 800413c <_malloc_r+0x438>
 8004016:	f8df c128 	ldr.w	ip, [pc, #296]	; 8004140 <_malloc_r+0x43c>
 800401a:	f8da 0000 	ldr.w	r0, [sl]
 800401e:	42bb      	cmp	r3, r7
 8004020:	4440      	add	r0, r8
 8004022:	f8ca 0000 	str.w	r0, [sl]
 8004026:	d108      	bne.n	800403a <_malloc_r+0x336>
 8004028:	ea13 0f0c 	tst.w	r3, ip
 800402c:	d105      	bne.n	800403a <_malloc_r+0x336>
 800402e:	68ab      	ldr	r3, [r5, #8]
 8004030:	4446      	add	r6, r8
 8004032:	f046 0601 	orr.w	r6, r6, #1
 8004036:	605e      	str	r6, [r3, #4]
 8004038:	e049      	b.n	80040ce <_malloc_r+0x3ca>
 800403a:	9901      	ldr	r1, [sp, #4]
 800403c:	f8d1 e000 	ldr.w	lr, [r1]
 8004040:	f1be 3fff 	cmp.w	lr, #4294967295
 8004044:	bf15      	itete	ne
 8004046:	1afb      	subne	r3, r7, r3
 8004048:	4b38      	ldreq	r3, [pc, #224]	; (800412c <_malloc_r+0x428>)
 800404a:	181b      	addne	r3, r3, r0
 800404c:	601f      	streq	r7, [r3, #0]
 800404e:	bf18      	it	ne
 8004050:	f8ca 3000 	strne.w	r3, [sl]
 8004054:	f017 0307 	ands.w	r3, r7, #7
 8004058:	bf1c      	itt	ne
 800405a:	f1c3 0308 	rsbne	r3, r3, #8
 800405e:	18ff      	addne	r7, r7, r3
 8004060:	44b8      	add	r8, r7
 8004062:	441a      	add	r2, r3
 8004064:	ea08 080c 	and.w	r8, r8, ip
 8004068:	ebc8 0802 	rsb	r8, r8, r2
 800406c:	4641      	mov	r1, r8
 800406e:	4648      	mov	r0, r9
 8004070:	f000 f86a 	bl	8004148 <_sbrk_r>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	bf04      	itt	eq
 8004078:	4638      	moveq	r0, r7
 800407a:	f04f 0800 	moveq.w	r8, #0
 800407e:	f8da 3000 	ldr.w	r3, [sl]
 8004082:	60af      	str	r7, [r5, #8]
 8004084:	1bc2      	subs	r2, r0, r7
 8004086:	4442      	add	r2, r8
 8004088:	4443      	add	r3, r8
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	45ab      	cmp	fp, r5
 8004090:	f8ca 3000 	str.w	r3, [sl]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	d01a      	beq.n	80040ce <_malloc_r+0x3ca>
 8004098:	2e0f      	cmp	r6, #15
 800409a:	d802      	bhi.n	80040a2 <_malloc_r+0x39e>
 800409c:	2301      	movs	r3, #1
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	e021      	b.n	80040e6 <_malloc_r+0x3e2>
 80040a2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80040a6:	3e0c      	subs	r6, #12
 80040a8:	f026 0607 	bic.w	r6, r6, #7
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	4333      	orrs	r3, r6
 80040b2:	f8cb 3004 	str.w	r3, [fp, #4]
 80040b6:	eb0b 0306 	add.w	r3, fp, r6
 80040ba:	2205      	movs	r2, #5
 80040bc:	2e0f      	cmp	r6, #15
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	d904      	bls.n	80040ce <_malloc_r+0x3ca>
 80040c4:	f10b 0108 	add.w	r1, fp, #8
 80040c8:	4648      	mov	r0, r9
 80040ca:	f000 f8cd 	bl	8004268 <_free_r>
 80040ce:	4a19      	ldr	r2, [pc, #100]	; (8004134 <_malloc_r+0x430>)
 80040d0:	f8da 3000 	ldr.w	r3, [sl]
 80040d4:	6811      	ldr	r1, [r2, #0]
 80040d6:	428b      	cmp	r3, r1
 80040d8:	bf88      	it	hi
 80040da:	6013      	strhi	r3, [r2, #0]
 80040dc:	4a16      	ldr	r2, [pc, #88]	; (8004138 <_malloc_r+0x434>)
 80040de:	6811      	ldr	r1, [r2, #0]
 80040e0:	428b      	cmp	r3, r1
 80040e2:	bf88      	it	hi
 80040e4:	6013      	strhi	r3, [r2, #0]
 80040e6:	68ab      	ldr	r3, [r5, #8]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	f022 0203 	bic.w	r2, r2, #3
 80040ee:	4294      	cmp	r4, r2
 80040f0:	eba2 0304 	sub.w	r3, r2, r4
 80040f4:	d801      	bhi.n	80040fa <_malloc_r+0x3f6>
 80040f6:	2b0f      	cmp	r3, #15
 80040f8:	dc04      	bgt.n	8004104 <_malloc_r+0x400>
 80040fa:	4648      	mov	r0, r9
 80040fc:	f000 f823 	bl	8004146 <__malloc_unlock>
 8004100:	2600      	movs	r6, #0
 8004102:	e00c      	b.n	800411e <_malloc_r+0x41a>
 8004104:	68ae      	ldr	r6, [r5, #8]
 8004106:	f044 0201 	orr.w	r2, r4, #1
 800410a:	4434      	add	r4, r6
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6072      	str	r2, [r6, #4]
 8004112:	60ac      	str	r4, [r5, #8]
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	4648      	mov	r0, r9
 8004118:	f000 f815 	bl	8004146 <__malloc_unlock>
 800411c:	3608      	adds	r6, #8
 800411e:	4630      	mov	r0, r6
 8004120:	b005      	add	sp, #20
 8004122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004126:	bf00      	nop
 8004128:	20000684 	.word	0x20000684
 800412c:	20000564 	.word	0x20000564
 8004130:	00000080 	.word	0x00000080
 8004134:	20000680 	.word	0x20000680
 8004138:	2000067c 	.word	0x2000067c
 800413c:	20000688 	.word	0x20000688
 8004140:	0000007f 	.word	0x0000007f

08004144 <__malloc_lock>:
 8004144:	4770      	bx	lr

08004146 <__malloc_unlock>:
 8004146:	4770      	bx	lr

08004148 <_sbrk_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4c06      	ldr	r4, [pc, #24]	; (8004164 <_sbrk_r+0x1c>)
 800414c:	2300      	movs	r3, #0
 800414e:	4605      	mov	r5, r0
 8004150:	4608      	mov	r0, r1
 8004152:	6023      	str	r3, [r4, #0]
 8004154:	f000 f946 	bl	80043e4 <_sbrk>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d102      	bne.n	8004162 <_sbrk_r+0x1a>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	b103      	cbz	r3, 8004162 <_sbrk_r+0x1a>
 8004160:	602b      	str	r3, [r5, #0]
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	200010a8 	.word	0x200010a8

08004168 <strlcpy>:
 8004168:	b510      	push	{r4, lr}
 800416a:	460b      	mov	r3, r1
 800416c:	b152      	cbz	r2, 8004184 <strlcpy+0x1c>
 800416e:	3a01      	subs	r2, #1
 8004170:	d006      	beq.n	8004180 <strlcpy+0x18>
 8004172:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004176:	f800 4b01 	strb.w	r4, [r0], #1
 800417a:	2c00      	cmp	r4, #0
 800417c:	d1f7      	bne.n	800416e <strlcpy+0x6>
 800417e:	e005      	b.n	800418c <strlcpy+0x24>
 8004180:	2200      	movs	r2, #0
 8004182:	7002      	strb	r2, [r0, #0]
 8004184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004188:	2a00      	cmp	r2, #0
 800418a:	d1fb      	bne.n	8004184 <strlcpy+0x1c>
 800418c:	1a58      	subs	r0, r3, r1
 800418e:	3801      	subs	r0, #1
 8004190:	bd10      	pop	{r4, pc}

08004192 <strncmp>:
 8004192:	b530      	push	{r4, r5, lr}
 8004194:	b182      	cbz	r2, 80041b8 <strncmp+0x26>
 8004196:	1e45      	subs	r5, r0, #1
 8004198:	3901      	subs	r1, #1
 800419a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800419e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80041a2:	42a3      	cmp	r3, r4
 80041a4:	d106      	bne.n	80041b4 <strncmp+0x22>
 80041a6:	43ec      	mvns	r4, r5
 80041a8:	4414      	add	r4, r2
 80041aa:	42e0      	cmn	r0, r4
 80041ac:	d001      	beq.n	80041b2 <strncmp+0x20>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f3      	bne.n	800419a <strncmp+0x8>
 80041b2:	461c      	mov	r4, r3
 80041b4:	1b18      	subs	r0, r3, r4
 80041b6:	bd30      	pop	{r4, r5, pc}
 80041b8:	4610      	mov	r0, r2
 80041ba:	bd30      	pop	{r4, r5, pc}

080041bc <_malloc_trim_r>:
 80041bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c0:	4f25      	ldr	r7, [pc, #148]	; (8004258 <_malloc_trim_r+0x9c>)
 80041c2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004264 <_malloc_trim_r+0xa8>
 80041c6:	4689      	mov	r9, r1
 80041c8:	4606      	mov	r6, r0
 80041ca:	f7ff ffbb 	bl	8004144 <__malloc_lock>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	685d      	ldr	r5, [r3, #4]
 80041d2:	f1a8 0411 	sub.w	r4, r8, #17
 80041d6:	f025 0503 	bic.w	r5, r5, #3
 80041da:	442c      	add	r4, r5
 80041dc:	ebc9 0404 	rsb	r4, r9, r4
 80041e0:	fbb4 f4f8 	udiv	r4, r4, r8
 80041e4:	3c01      	subs	r4, #1
 80041e6:	fb08 f404 	mul.w	r4, r8, r4
 80041ea:	4544      	cmp	r4, r8
 80041ec:	da05      	bge.n	80041fa <_malloc_trim_r+0x3e>
 80041ee:	4630      	mov	r0, r6
 80041f0:	f7ff ffa9 	bl	8004146 <__malloc_unlock>
 80041f4:	2000      	movs	r0, #0
 80041f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fa:	2100      	movs	r1, #0
 80041fc:	4630      	mov	r0, r6
 80041fe:	f7ff ffa3 	bl	8004148 <_sbrk_r>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	442b      	add	r3, r5
 8004206:	4298      	cmp	r0, r3
 8004208:	d1f1      	bne.n	80041ee <_malloc_trim_r+0x32>
 800420a:	4261      	negs	r1, r4
 800420c:	4630      	mov	r0, r6
 800420e:	f7ff ff9b 	bl	8004148 <_sbrk_r>
 8004212:	3001      	adds	r0, #1
 8004214:	d110      	bne.n	8004238 <_malloc_trim_r+0x7c>
 8004216:	2100      	movs	r1, #0
 8004218:	4630      	mov	r0, r6
 800421a:	f7ff ff95 	bl	8004148 <_sbrk_r>
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	1a83      	subs	r3, r0, r2
 8004222:	2b0f      	cmp	r3, #15
 8004224:	dde3      	ble.n	80041ee <_malloc_trim_r+0x32>
 8004226:	490d      	ldr	r1, [pc, #52]	; (800425c <_malloc_trim_r+0xa0>)
 8004228:	6809      	ldr	r1, [r1, #0]
 800422a:	1a40      	subs	r0, r0, r1
 800422c:	490c      	ldr	r1, [pc, #48]	; (8004260 <_malloc_trim_r+0xa4>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6008      	str	r0, [r1, #0]
 8004234:	6053      	str	r3, [r2, #4]
 8004236:	e7da      	b.n	80041ee <_malloc_trim_r+0x32>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a09      	ldr	r2, [pc, #36]	; (8004260 <_malloc_trim_r+0xa4>)
 800423c:	1b2d      	subs	r5, r5, r4
 800423e:	f045 0501 	orr.w	r5, r5, #1
 8004242:	605d      	str	r5, [r3, #4]
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	4630      	mov	r0, r6
 8004248:	1b1c      	subs	r4, r3, r4
 800424a:	6014      	str	r4, [r2, #0]
 800424c:	f7ff ff7b 	bl	8004146 <__malloc_unlock>
 8004250:	2001      	movs	r0, #1
 8004252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004256:	bf00      	nop
 8004258:	20000158 	.word	0x20000158
 800425c:	20000564 	.word	0x20000564
 8004260:	20000688 	.word	0x20000688
 8004264:	00000080 	.word	0x00000080

08004268 <_free_r>:
 8004268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800426c:	4604      	mov	r4, r0
 800426e:	4688      	mov	r8, r1
 8004270:	2900      	cmp	r1, #0
 8004272:	f000 80ad 	beq.w	80043d0 <_free_r+0x168>
 8004276:	f7ff ff65 	bl	8004144 <__malloc_lock>
 800427a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800427e:	4d55      	ldr	r5, [pc, #340]	; (80043d4 <_free_r+0x16c>)
 8004280:	f022 0001 	bic.w	r0, r2, #1
 8004284:	f1a8 0308 	sub.w	r3, r8, #8
 8004288:	181f      	adds	r7, r3, r0
 800428a:	68a9      	ldr	r1, [r5, #8]
 800428c:	687e      	ldr	r6, [r7, #4]
 800428e:	428f      	cmp	r7, r1
 8004290:	f026 0603 	bic.w	r6, r6, #3
 8004294:	f002 0201 	and.w	r2, r2, #1
 8004298:	d11b      	bne.n	80042d2 <_free_r+0x6a>
 800429a:	4430      	add	r0, r6
 800429c:	b93a      	cbnz	r2, 80042ae <_free_r+0x46>
 800429e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	4410      	add	r0, r2
 80042a6:	6899      	ldr	r1, [r3, #8]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	60ca      	str	r2, [r1, #12]
 80042ac:	6091      	str	r1, [r2, #8]
 80042ae:	f040 0201 	orr.w	r2, r0, #1
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	60ab      	str	r3, [r5, #8]
 80042b6:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <_free_r+0x170>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4298      	cmp	r0, r3
 80042bc:	d304      	bcc.n	80042c8 <_free_r+0x60>
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <_free_r+0x174>)
 80042c0:	4620      	mov	r0, r4
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	f7ff ff7a 	bl	80041bc <_malloc_trim_r>
 80042c8:	4620      	mov	r0, r4
 80042ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ce:	f7ff bf3a 	b.w	8004146 <__malloc_unlock>
 80042d2:	607e      	str	r6, [r7, #4]
 80042d4:	b97a      	cbnz	r2, 80042f6 <_free_r+0x8e>
 80042d6:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80042da:	1a5b      	subs	r3, r3, r1
 80042dc:	4408      	add	r0, r1
 80042de:	6899      	ldr	r1, [r3, #8]
 80042e0:	f105 0e08 	add.w	lr, r5, #8
 80042e4:	4571      	cmp	r1, lr
 80042e6:	d008      	beq.n	80042fa <_free_r+0x92>
 80042e8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80042ec:	f8c1 e00c 	str.w	lr, [r1, #12]
 80042f0:	f8ce 1008 	str.w	r1, [lr, #8]
 80042f4:	e002      	b.n	80042fc <_free_r+0x94>
 80042f6:	2200      	movs	r2, #0
 80042f8:	e000      	b.n	80042fc <_free_r+0x94>
 80042fa:	2201      	movs	r2, #1
 80042fc:	19b9      	adds	r1, r7, r6
 80042fe:	6849      	ldr	r1, [r1, #4]
 8004300:	07c9      	lsls	r1, r1, #31
 8004302:	d40e      	bmi.n	8004322 <_free_r+0xba>
 8004304:	4430      	add	r0, r6
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	b942      	cbnz	r2, 800431c <_free_r+0xb4>
 800430a:	4e35      	ldr	r6, [pc, #212]	; (80043e0 <_free_r+0x178>)
 800430c:	42b1      	cmp	r1, r6
 800430e:	d105      	bne.n	800431c <_free_r+0xb4>
 8004310:	616b      	str	r3, [r5, #20]
 8004312:	612b      	str	r3, [r5, #16]
 8004314:	2201      	movs	r2, #1
 8004316:	60d9      	str	r1, [r3, #12]
 8004318:	6099      	str	r1, [r3, #8]
 800431a:	e002      	b.n	8004322 <_free_r+0xba>
 800431c:	68fe      	ldr	r6, [r7, #12]
 800431e:	60ce      	str	r6, [r1, #12]
 8004320:	60b1      	str	r1, [r6, #8]
 8004322:	f040 0101 	orr.w	r1, r0, #1
 8004326:	6059      	str	r1, [r3, #4]
 8004328:	5018      	str	r0, [r3, r0]
 800432a:	2a00      	cmp	r2, #0
 800432c:	d1cc      	bne.n	80042c8 <_free_r+0x60>
 800432e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004332:	d212      	bcs.n	800435a <_free_r+0xf2>
 8004334:	08c0      	lsrs	r0, r0, #3
 8004336:	1081      	asrs	r1, r0, #2
 8004338:	2201      	movs	r2, #1
 800433a:	fa02 f101 	lsl.w	r1, r2, r1
 800433e:	686a      	ldr	r2, [r5, #4]
 8004340:	3001      	adds	r0, #1
 8004342:	430a      	orrs	r2, r1
 8004344:	606a      	str	r2, [r5, #4]
 8004346:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800434a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800434e:	6099      	str	r1, [r3, #8]
 8004350:	3a08      	subs	r2, #8
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004358:	e038      	b.n	80043cc <_free_r+0x164>
 800435a:	0a42      	lsrs	r2, r0, #9
 800435c:	2a04      	cmp	r2, #4
 800435e:	d802      	bhi.n	8004366 <_free_r+0xfe>
 8004360:	0982      	lsrs	r2, r0, #6
 8004362:	3238      	adds	r2, #56	; 0x38
 8004364:	e015      	b.n	8004392 <_free_r+0x12a>
 8004366:	2a14      	cmp	r2, #20
 8004368:	d801      	bhi.n	800436e <_free_r+0x106>
 800436a:	325b      	adds	r2, #91	; 0x5b
 800436c:	e011      	b.n	8004392 <_free_r+0x12a>
 800436e:	2a54      	cmp	r2, #84	; 0x54
 8004370:	d802      	bhi.n	8004378 <_free_r+0x110>
 8004372:	0b02      	lsrs	r2, r0, #12
 8004374:	326e      	adds	r2, #110	; 0x6e
 8004376:	e00c      	b.n	8004392 <_free_r+0x12a>
 8004378:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800437c:	d802      	bhi.n	8004384 <_free_r+0x11c>
 800437e:	0bc2      	lsrs	r2, r0, #15
 8004380:	3277      	adds	r2, #119	; 0x77
 8004382:	e006      	b.n	8004392 <_free_r+0x12a>
 8004384:	f240 5154 	movw	r1, #1364	; 0x554
 8004388:	428a      	cmp	r2, r1
 800438a:	bf9a      	itte	ls
 800438c:	0c82      	lsrls	r2, r0, #18
 800438e:	327c      	addls	r2, #124	; 0x7c
 8004390:	227e      	movhi	r2, #126	; 0x7e
 8004392:	1c51      	adds	r1, r2, #1
 8004394:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004398:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800439c:	4f0d      	ldr	r7, [pc, #52]	; (80043d4 <_free_r+0x16c>)
 800439e:	428e      	cmp	r6, r1
 80043a0:	d10b      	bne.n	80043ba <_free_r+0x152>
 80043a2:	2101      	movs	r1, #1
 80043a4:	1092      	asrs	r2, r2, #2
 80043a6:	fa01 f202 	lsl.w	r2, r1, r2
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4311      	orrs	r1, r2
 80043ae:	6079      	str	r1, [r7, #4]
 80043b0:	4631      	mov	r1, r6
 80043b2:	e008      	b.n	80043c6 <_free_r+0x15e>
 80043b4:	6889      	ldr	r1, [r1, #8]
 80043b6:	428e      	cmp	r6, r1
 80043b8:	d004      	beq.n	80043c4 <_free_r+0x15c>
 80043ba:	684a      	ldr	r2, [r1, #4]
 80043bc:	f022 0203 	bic.w	r2, r2, #3
 80043c0:	4290      	cmp	r0, r2
 80043c2:	d3f7      	bcc.n	80043b4 <_free_r+0x14c>
 80043c4:	68ce      	ldr	r6, [r1, #12]
 80043c6:	60de      	str	r6, [r3, #12]
 80043c8:	6099      	str	r1, [r3, #8]
 80043ca:	60b3      	str	r3, [r6, #8]
 80043cc:	60cb      	str	r3, [r1, #12]
 80043ce:	e77b      	b.n	80042c8 <_free_r+0x60>
 80043d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d4:	20000158 	.word	0x20000158
 80043d8:	20000560 	.word	0x20000560
 80043dc:	20000684 	.word	0x20000684
 80043e0:	20000160 	.word	0x20000160

080043e4 <_sbrk>:
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <_sbrk+0x14>)
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	4602      	mov	r2, r0
 80043ea:	b909      	cbnz	r1, 80043f0 <_sbrk+0xc>
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <_sbrk+0x18>)
 80043ee:	6019      	str	r1, [r3, #0]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	4402      	add	r2, r0
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	4770      	bx	lr
 80043f8:	200006b0 	.word	0x200006b0
 80043fc:	200010ac 	.word	0x200010ac

08004400 <_init>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr

0800440c <_fini>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr
