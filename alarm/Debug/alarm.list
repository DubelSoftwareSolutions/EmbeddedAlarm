
C:\Users\Krzysztof\Documents\Studia\Semestr 6\Sterowniki Robotów\sterop\alarm\Debug\alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08009e80  08009e80  00019e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a36c  0800a36c  0001a36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a370  0800a370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000056c  20000000  0800a374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002056c  2**0
                  CONTENTS
  8 .bss          00004700  2000056c  2000056c  0002056c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004c6c  20004c6c  0002056c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019ab1  00000000  00000000  0002059c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003e0f  00000000  00000000  0003a04d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000bfcc  00000000  00000000  0003de5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  00049e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001470  00000000  00000000  0004aee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009757  00000000  00000000  0004c358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005ab1  00000000  00000000  00055aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  0005b560  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004098  00000000  00000000  0005b5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000084  00000000  00000000  0005f678  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000117  00000000  00000000  0005f6fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000056c 	.word	0x2000056c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e68 	.word	0x08009e68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000570 	.word	0x20000570
 80001cc:	08009e68 	.word	0x08009e68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97e 	b.w	8000f54 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460e      	mov	r6, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9d08      	ldr	r5, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d150      	bne.n	8000d22 <__udivmoddi4+0xb2>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96c      	bls.n	8000d60 <__udivmoddi4+0xf0>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0420 	rsb	r4, lr, #32
 8000c94:	fa20 f404 	lsr.w	r4, r0, r4
 8000c98:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c9c:	ea44 0c06 	orr.w	ip, r4, r6
 8000ca0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cac:	0c22      	lsrs	r2, r4, #16
 8000cae:	fbbc f0f9 	udiv	r0, ip, r9
 8000cb2:	fa1f f887 	uxth.w	r8, r7
 8000cb6:	fb09 c610 	mls	r6, r9, r0, ip
 8000cba:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cbe:	fb00 f308 	mul.w	r3, r0, r8
 8000cc2:	42b3      	cmp	r3, r6
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x6a>
 8000cc6:	19f6      	adds	r6, r6, r7
 8000cc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ccc:	f080 8122 	bcs.w	8000f14 <__udivmoddi4+0x2a4>
 8000cd0:	42b3      	cmp	r3, r6
 8000cd2:	f240 811f 	bls.w	8000f14 <__udivmoddi4+0x2a4>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	443e      	add	r6, r7
 8000cda:	1af6      	subs	r6, r6, r3
 8000cdc:	b2a2      	uxth	r2, r4
 8000cde:	fbb6 f3f9 	udiv	r3, r6, r9
 8000ce2:	fb09 6613 	mls	r6, r9, r3, r6
 8000ce6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000cea:	fb03 f808 	mul.w	r8, r3, r8
 8000cee:	45a0      	cmp	r8, r4
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x96>
 8000cf2:	19e4      	adds	r4, r4, r7
 8000cf4:	f103 32ff 	add.w	r2, r3, #4294967295
 8000cf8:	f080 810a 	bcs.w	8000f10 <__udivmoddi4+0x2a0>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f240 8107 	bls.w	8000f10 <__udivmoddi4+0x2a0>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ebc8 0404 	rsb	r4, r8, r4
 8000d0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d062      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d14:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d18:	2300      	movs	r3, #0
 8000d1a:	602c      	str	r4, [r5, #0]
 8000d1c:	606b      	str	r3, [r5, #4]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0xc6>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d055      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000d30:	4608      	mov	r0, r1
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	f040 8090 	bne.w	8000e60 <__udivmoddi4+0x1f0>
 8000d40:	42b3      	cmp	r3, r6
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xda>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb66 0603 	sbc.w	r6, r6, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	46b4      	mov	ip, r6
 8000d54:	2d00      	cmp	r5, #0
 8000d56:	d040      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d58:	e885 1010 	stmia.w	r5, {r4, ip}
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	b912      	cbnz	r2, 8000d68 <__udivmoddi4+0xf8>
 8000d62:	2701      	movs	r7, #1
 8000d64:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d68:	fab7 fe87 	clz	lr, r7
 8000d6c:	f1be 0f00 	cmp.w	lr, #0
 8000d70:	d135      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d72:	1bf3      	subs	r3, r6, r7
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d82:	0c22      	lsrs	r2, r4, #16
 8000d84:	fb08 3610 	mls	r6, r8, r0, r3
 8000d88:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d8c:	fb0c f300 	mul.w	r3, ip, r0
 8000d90:	42b3      	cmp	r3, r6
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19f6      	adds	r6, r6, r7
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42b3      	cmp	r3, r6
 8000d9e:	f200 80ce 	bhi.w	8000f3e <__udivmoddi4+0x2ce>
 8000da2:	4610      	mov	r0, r2
 8000da4:	1af6      	subs	r6, r6, r3
 8000da6:	b2a2      	uxth	r2, r4
 8000da8:	fbb6 f3f8 	udiv	r3, r6, r8
 8000dac:	fb08 6613 	mls	r6, r8, r3, r6
 8000db0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000db4:	fb0c fc03 	mul.w	ip, ip, r3
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b5 	bhi.w	8000f34 <__udivmoddi4+0x2c4>
 8000dca:	4613      	mov	r3, r2
 8000dcc:	ebcc 0404 	rsb	r4, ip, r4
 8000dd0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dd4:	e79c      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000dd6:	4629      	mov	r1, r5
 8000dd8:	4628      	mov	r0, r5
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0120 	rsb	r1, lr, #32
 8000de2:	fa06 f30e 	lsl.w	r3, r6, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f901 	lsr.w	r9, r0, r1
 8000dee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000df2:	40ce      	lsrs	r6, r1
 8000df4:	ea49 0903 	orr.w	r9, r9, r3
 8000df8:	fbb6 faf8 	udiv	sl, r6, r8
 8000dfc:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e00:	fb08 661a 	mls	r6, r8, sl, r6
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e0c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e10:	429a      	cmp	r2, r3
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1be>
 8000e18:	19db      	adds	r3, r3, r7
 8000e1a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e1e:	f080 8087 	bcs.w	8000f30 <__udivmoddi4+0x2c0>
 8000e22:	429a      	cmp	r2, r3
 8000e24:	f240 8084 	bls.w	8000f30 <__udivmoddi4+0x2c0>
 8000e28:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e2c:	443b      	add	r3, r7
 8000e2e:	1a9b      	subs	r3, r3, r2
 8000e30:	fa1f f989 	uxth.w	r9, r9
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000e40:	fb01 f60c 	mul.w	r6, r1, ip
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x1e8>
 8000e48:	19db      	adds	r3, r3, r7
 8000e4a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e4e:	d26b      	bcs.n	8000f28 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d969      	bls.n	8000f28 <__udivmoddi4+0x2b8>
 8000e54:	3902      	subs	r1, #2
 8000e56:	443b      	add	r3, r7
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000e5e:	e78e      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e60:	f1c1 0e20 	rsb	lr, r1, #32
 8000e64:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	4323      	orrs	r3, r4
 8000e6c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e70:	fa06 f401 	lsl.w	r4, r6, r1
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e7c:	433c      	orrs	r4, r7
 8000e7e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e82:	0c27      	lsrs	r7, r4, #16
 8000e84:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e88:	fa1f f883 	uxth.w	r8, r3
 8000e8c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e90:	fb09 f708 	mul.w	r7, r9, r8
 8000e94:	42b7      	cmp	r7, r6
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x242>
 8000ea0:	18f6      	adds	r6, r6, r3
 8000ea2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea6:	d241      	bcs.n	8000f2c <__udivmoddi4+0x2bc>
 8000ea8:	42b7      	cmp	r7, r6
 8000eaa:	d93f      	bls.n	8000f2c <__udivmoddi4+0x2bc>
 8000eac:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb0:	441e      	add	r6, r3
 8000eb2:	1bf6      	subs	r6, r6, r7
 8000eb4:	b2a0      	uxth	r0, r4
 8000eb6:	fbb6 f4fc 	udiv	r4, r6, ip
 8000eba:	fb0c 6614 	mls	r6, ip, r4, r6
 8000ebe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000ec2:	fb04 f808 	mul.w	r8, r4, r8
 8000ec6:	45b8      	cmp	r8, r7
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x26a>
 8000eca:	18ff      	adds	r7, r7, r3
 8000ecc:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ed0:	d228      	bcs.n	8000f24 <__udivmoddi4+0x2b4>
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d926      	bls.n	8000f24 <__udivmoddi4+0x2b4>
 8000ed6:	3c02      	subs	r4, #2
 8000ed8:	441f      	add	r7, r3
 8000eda:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000ede:	ebc8 0707 	rsb	r7, r8, r7
 8000ee2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee6:	454f      	cmp	r7, r9
 8000ee8:	4644      	mov	r4, r8
 8000eea:	464e      	mov	r6, r9
 8000eec:	d314      	bcc.n	8000f18 <__udivmoddi4+0x2a8>
 8000eee:	d029      	beq.n	8000f44 <__udivmoddi4+0x2d4>
 8000ef0:	b365      	cbz	r5, 8000f4c <__udivmoddi4+0x2dc>
 8000ef2:	ebba 0304 	subs.w	r3, sl, r4
 8000ef6:	eb67 0706 	sbc.w	r7, r7, r6
 8000efa:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	40cf      	lsrs	r7, r1
 8000f02:	ea4e 0303 	orr.w	r3, lr, r3
 8000f06:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	4613      	mov	r3, r2
 8000f12:	e6f8      	b.n	8000d06 <__udivmoddi4+0x96>
 8000f14:	4610      	mov	r0, r2
 8000f16:	e6e0      	b.n	8000cda <__udivmoddi4+0x6a>
 8000f18:	ebb8 0402 	subs.w	r4, r8, r2
 8000f1c:	eb69 0603 	sbc.w	r6, r9, r3
 8000f20:	3801      	subs	r0, #1
 8000f22:	e7e5      	b.n	8000ef0 <__udivmoddi4+0x280>
 8000f24:	4604      	mov	r4, r0
 8000f26:	e7d8      	b.n	8000eda <__udivmoddi4+0x26a>
 8000f28:	4611      	mov	r1, r2
 8000f2a:	e795      	b.n	8000e58 <__udivmoddi4+0x1e8>
 8000f2c:	4681      	mov	r9, r0
 8000f2e:	e7c0      	b.n	8000eb2 <__udivmoddi4+0x242>
 8000f30:	468a      	mov	sl, r1
 8000f32:	e77c      	b.n	8000e2e <__udivmoddi4+0x1be>
 8000f34:	3b02      	subs	r3, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e748      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xe4>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	443e      	add	r6, r7
 8000f42:	e72f      	b.n	8000da4 <__udivmoddi4+0x134>
 8000f44:	45c2      	cmp	sl, r8
 8000f46:	d3e7      	bcc.n	8000f18 <__udivmoddi4+0x2a8>
 8000f48:	463e      	mov	r6, r7
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x280>
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x30>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f62:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f6a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f827 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f003 fe0e 	bl	8004b9c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f003 fddb 	bl	8004b3a <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000f84:	2000      	movs	r0, #0
 8000f86:	bd08      	pop	{r3, pc}
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f8c:	4a02      	ldr	r2, [pc, #8]	; (8000f98 <HAL_IncTick+0xc>)
 8000f8e:	6813      	ldr	r3, [r2, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000430c 	.word	0x2000430c

08000f9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f9c:	4b01      	ldr	r3, [pc, #4]	; (8000fa4 <HAL_GetTick+0x8>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	2000430c 	.word	0x2000430c

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000faa:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff6 	bl	8000f9c <HAL_GetTick>
  uint32_t wait = Delay;
 8000fb0:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000fb6:	bf18      	it	ne
 8000fb8:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fba:	f7ff ffef 	bl	8000f9c <HAL_GetTick>
 8000fbe:	1b40      	subs	r0, r0, r5
 8000fc0:	42a0      	cmp	r0, r4
 8000fc2:	d3fa      	bcc.n	8000fba <HAL_Delay+0x12>
  {
  }
}
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd30      	pop	{r4, r5, pc}

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fca:	68d3      	ldr	r3, [r2, #12]
 8000fcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fd0:	041b      	lsls	r3, r3, #16
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000fd8:	0200      	lsls	r0, r0, #8
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000fe2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000fe4:	60d3      	str	r3, [r2, #12]
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_NVIC_SetPriority+0x60>)
 8000fee:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff4:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	2c04      	cmp	r4, #4
 8000ffe:	bf28      	it	cs
 8001000:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	2d06      	cmp	r5, #6

  return (
 8001004:	f04f 0501 	mov.w	r5, #1
 8001008:	fa05 f404 	lsl.w	r4, r5, r4
 800100c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001010:	bf8c      	ite	hi
 8001012:	3b03      	subhi	r3, #3
 8001014:	2300      	movls	r3, #0

  return (
 8001016:	400c      	ands	r4, r1
 8001018:	409c      	lsls	r4, r3
 800101a:	fa05 f303 	lsl.w	r3, r5, r3
 800101e:	3b01      	subs	r3, #1
 8001020:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001022:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001024:	ea42 0204 	orr.w	r2, r2, r4
 8001028:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	bfaf      	iteee	ge
 800102e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	f000 000f 	andlt.w	r0, r0, #15
 8001036:	4b06      	ldrlt	r3, [pc, #24]	; (8001050 <HAL_NVIC_SetPriority+0x64>)
 8001038:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	bfa5      	ittet	ge
 800103c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001040:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001048:	bd30      	pop	{r4, r5, pc}
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	e000ed14 	.word	0xe000ed14

08001054 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001054:	0942      	lsrs	r2, r0, #5
 8001056:	2301      	movs	r3, #1
 8001058:	f000 001f 	and.w	r0, r0, #31
 800105c:	fa03 f000 	lsl.w	r0, r3, r0
 8001060:	4b01      	ldr	r3, [pc, #4]	; (8001068 <HAL_NVIC_EnableIRQ+0x14>)
 8001062:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100

0800106c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	3801      	subs	r0, #1
 800106e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001072:	d20a      	bcs.n	800108a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001078:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	21f0      	movs	r1, #240	; 0xf0
 800107c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800109a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800109c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800109e:	bf0c      	ite	eq
 80010a0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010a4:	f022 0204 	bicne.w	r2, r2, #4
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	4770      	bx	lr
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d003      	beq.n	80010c0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
 80010be:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c0:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c2:	2305      	movs	r3, #5
 80010c4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	4770      	bx	lr

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4f6a      	ldr	r7, [pc, #424]	; (8001284 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800128c <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001290 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80010ee:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f0:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80010f2:	ea34 0303 	bics.w	r3, r4, r3
 80010f6:	f040 80bd 	bne.w	8001274 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fa:	684d      	ldr	r5, [r1, #4]
 80010fc:	f025 0a10 	bic.w	sl, r5, #16
 8001100:	f1ba 0f02 	cmp.w	sl, #2
 8001104:	d114      	bne.n	8001130 <HAL_GPIO_Init+0x5c>
 8001106:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 800110a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001112:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800111a:	230f      	movs	r3, #15
 800111c:	fa03 f30b 	lsl.w	r3, r3, fp
 8001120:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	690b      	ldr	r3, [r1, #16]
 8001126:	fa03 f30b 	lsl.w	r3, r3, fp
 800112a:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 800112c:	f8c9 3020 	str.w	r3, [r9, #32]
 8001130:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001134:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113a:	fa09 f90b 	lsl.w	r9, r9, fp
 800113e:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001142:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114a:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114e:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001152:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001154:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001158:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115a:	d80f      	bhi.n	800117c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115c:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001160:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001164:	fa06 f60b 	lsl.w	r6, r6, fp
 8001168:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800116a:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116c:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800116e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001172:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001176:	4096      	lsls	r6, r2
 8001178:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800117a:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800117c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001182:	688b      	ldr	r3, [r1, #8]
 8001184:	fa03 f30b 	lsl.w	r3, r3, fp
 8001188:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800118c:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118e:	00eb      	lsls	r3, r5, #3
 8001190:	d570      	bpl.n	8001274 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	9303      	str	r3, [sp, #12]
 8001196:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80011a0:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 80011a4:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 80011a8:	f022 0903 	bic.w	r9, r2, #3
 80011ac:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80011b0:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80011b4:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 80011b8:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ba:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c0:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80011c8:	260f      	movs	r6, #15
 80011ca:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d0:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d4:	d01c      	beq.n	8001210 <HAL_GPIO_Init+0x13c>
 80011d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011da:	4298      	cmp	r0, r3
 80011dc:	d01a      	beq.n	8001214 <HAL_GPIO_Init+0x140>
 80011de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d018      	beq.n	8001218 <HAL_GPIO_Init+0x144>
 80011e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011ea:	4298      	cmp	r0, r3
 80011ec:	d016      	beq.n	800121c <HAL_GPIO_Init+0x148>
 80011ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011f2:	4298      	cmp	r0, r3
 80011f4:	d014      	beq.n	8001220 <HAL_GPIO_Init+0x14c>
 80011f6:	4540      	cmp	r0, r8
 80011f8:	d014      	beq.n	8001224 <HAL_GPIO_Init+0x150>
 80011fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011fe:	4298      	cmp	r0, r3
 8001200:	d012      	beq.n	8001228 <HAL_GPIO_Init+0x154>
 8001202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001206:	4298      	cmp	r0, r3
 8001208:	bf14      	ite	ne
 800120a:	2308      	movne	r3, #8
 800120c:	2307      	moveq	r3, #7
 800120e:	e00c      	b.n	800122a <HAL_GPIO_Init+0x156>
 8001210:	2300      	movs	r3, #0
 8001212:	e00a      	b.n	800122a <HAL_GPIO_Init+0x156>
 8001214:	2301      	movs	r3, #1
 8001216:	e008      	b.n	800122a <HAL_GPIO_Init+0x156>
 8001218:	2302      	movs	r3, #2
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x156>
 800121c:	2303      	movs	r3, #3
 800121e:	e004      	b.n	800122a <HAL_GPIO_Init+0x156>
 8001220:	2304      	movs	r3, #4
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x156>
 8001224:	2305      	movs	r3, #5
 8001226:	e000      	b.n	800122a <HAL_GPIO_Init+0x156>
 8001228:	2306      	movs	r3, #6
 800122a:	fa03 f30a 	lsl.w	r3, r3, sl
 800122e:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001234:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001236:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001238:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800123c:	bf0c      	ite	eq
 800123e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001240:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8001242:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001246:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124a:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800124e:	bf0c      	ite	eq
 8001250:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001252:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001254:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001256:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001258:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800125c:	bf0c      	ite	eq
 800125e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001260:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8001262:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001266:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800126a:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800126c:	bf54      	ite	pl
 800126e:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001270:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8001272:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001274:	3201      	adds	r2, #1
 8001276:	2a10      	cmp	r2, #16
 8001278:	f47f af38 	bne.w	80010ec <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800127c:	b005      	add	sp, #20
 800127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001282:	bf00      	nop
 8001284:	40013c00 	.word	0x40013c00
 8001288:	40020000 	.word	0x40020000
 800128c:	40023800 	.word	0x40023800
 8001290:	40021400 	.word	0x40021400

08001294 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	b902      	cbnz	r2, 8001298 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001296:	0409      	lsls	r1, r1, #16
 8001298:	6181      	str	r1, [r0, #24]
 800129a:	4770      	bx	lr

0800129c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800129c:	6802      	ldr	r2, [r0, #0]
 800129e:	6953      	ldr	r3, [r2, #20]
 80012a0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80012a4:	d00d      	beq.n	80012c2 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012a6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012aa:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012ac:	2304      	movs	r3, #4
 80012ae:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80012b0:	2220      	movs	r2, #32
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80012ba:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
 80012be:	2001      	movs	r0, #1
 80012c0:	4770      	bx	lr
  }
  return HAL_OK;
 80012c2:	4618      	mov	r0, r3
}
 80012c4:	4770      	bx	lr

080012c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80012c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012ca:	4604      	mov	r4, r0
 80012cc:	460e      	mov	r6, r1
 80012ce:	4617      	mov	r7, r2
 80012d0:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012d2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012d6:	6825      	ldr	r5, [r4, #0]
 80012d8:	f1b8 0f01 	cmp.w	r8, #1
 80012dc:	bf0c      	ite	eq
 80012de:	6968      	ldreq	r0, [r5, #20]
 80012e0:	69a8      	ldrne	r0, [r5, #24]
 80012e2:	43c0      	mvns	r0, r0
 80012e4:	b280      	uxth	r0, r0
 80012e6:	4230      	tst	r0, r6
 80012e8:	bf14      	ite	ne
 80012ea:	2001      	movne	r0, #1
 80012ec:	2000      	moveq	r0, #0
 80012ee:	b348      	cbz	r0, 8001344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7e>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012f0:	696b      	ldr	r3, [r5, #20]
 80012f2:	055a      	lsls	r2, r3, #21
 80012f4:	d512      	bpl.n	800131c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x56>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fc:	602b      	str	r3, [r5, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012fe:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001302:	616b      	str	r3, [r5, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001304:	2304      	movs	r3, #4
 8001306:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001308:	2220      	movs	r2, #32

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	2300      	movs	r3, #0
 800130c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800130e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001312:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
 8001316:	2001      	movs	r0, #1
 8001318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800131c:	1c7b      	adds	r3, r7, #1
 800131e:	d0da      	beq.n	80012d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001320:	b94f      	cbnz	r7, 8001336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001322:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001324:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001326:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001328:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 800132c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT;
 8001330:	2003      	movs	r0, #3
 8001332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001336:	f7ff fe31 	bl	8000f9c <HAL_GetTick>
 800133a:	ebc9 0000 	rsb	r0, r9, r0
 800133e:	4287      	cmp	r7, r0
 8001340:	d2c9      	bcs.n	80012d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001342:	e7ee      	b.n	8001322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800134c:	9d08      	ldr	r5, [sp, #32]
 800134e:	4604      	mov	r4, r0
 8001350:	460e      	mov	r6, r1
 8001352:	4690      	mov	r8, r2
 8001354:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001356:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f1b9 0f01 	cmp.w	r9, #1
 8001360:	bf0c      	ite	eq
 8001362:	6958      	ldreq	r0, [r3, #20]
 8001364:	6998      	ldrne	r0, [r3, #24]
 8001366:	43c0      	mvns	r0, r0
 8001368:	b280      	uxth	r0, r0
 800136a:	4230      	tst	r0, r6
 800136c:	bf0c      	ite	eq
 800136e:	2301      	moveq	r3, #1
 8001370:	2300      	movne	r3, #0
 8001372:	4543      	cmp	r3, r8
 8001374:	d114      	bne.n	80013a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001376:	1c7b      	adds	r3, r7, #1
 8001378:	d0ef      	beq.n	800135a <I2C_WaitOnFlagUntilTimeout+0x12>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800137a:	b95f      	cbnz	r7, 8001394 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800137c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800137e:	2220      	movs	r2, #32
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001380:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001382:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001386:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800138a:	2003      	movs	r0, #3
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800138c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001394:	f7ff fe02 	bl	8000f9c <HAL_GetTick>
 8001398:	1b40      	subs	r0, r0, r5
 800139a:	4287      	cmp	r7, r0
 800139c:	d2dd      	bcs.n	800135a <I2C_WaitOnFlagUntilTimeout+0x12>
 800139e:	e7ed      	b.n	800137c <I2C_WaitOnFlagUntilTimeout+0x34>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 80013a0:	2000      	movs	r0, #0
}
 80013a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080013a6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80013a6:	b570      	push	{r4, r5, r6, lr}
 80013a8:	4604      	mov	r4, r0
 80013aa:	460d      	mov	r5, r1
 80013ac:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	061b      	lsls	r3, r3, #24
 80013b4:	d419      	bmi.n	80013ea <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ff70 	bl	800129c <I2C_IsAcknowledgeFailed>
 80013bc:	b9b8      	cbnz	r0, 80013ee <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80013be:	1c6a      	adds	r2, r5, #1
 80013c0:	d0f5      	beq.n	80013ae <I2C_WaitOnTXEFlagUntilTimeout+0x8>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013c2:	b965      	cbnz	r5, 80013de <I2C_WaitOnTXEFlagUntilTimeout+0x38>
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80013cc:	2220      	movs	r2, #32
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 80013d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013da:	2003      	movs	r0, #3
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013de:	f7ff fddd 	bl	8000f9c <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	4285      	cmp	r5, r0
 80013e6:	d2e2      	bcs.n	80013ae <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80013e8:	e7ec      	b.n	80013c4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 80013ea:	2000      	movs	r0, #0
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
    {
      return HAL_ERROR;
 80013ee:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 80013f0:	bd70      	pop	{r4, r5, r6, pc}

080013f2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80013f2:	b570      	push	{r4, r5, r6, lr}
 80013f4:	4604      	mov	r4, r0
 80013f6:	460d      	mov	r5, r1
 80013f8:	4616      	mov	r6, r2

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013fa:	6820      	ldr	r0, [r4, #0]
 80013fc:	6943      	ldr	r3, [r0, #20]
 80013fe:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001402:	d121      	bne.n	8001448 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001404:	6942      	ldr	r2, [r0, #20]
 8001406:	06d2      	lsls	r2, r2, #27
 8001408:	d50b      	bpl.n	8001422 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800140a:	f06f 0210 	mvn.w	r2, #16
 800140e:	6142      	str	r2, [r0, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001410:	2220      	movs	r2, #32
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001412:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001414:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
 8001418:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
 800141a:	2001      	movs	r0, #1
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 800141c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
 8001420:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001422:	b95d      	cbnz	r5, 800143c <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800142c:	2320      	movs	r3, #32
 800142e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001432:	2300      	movs	r3, #0
 8001434:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001438:	2003      	movs	r0, #3
 800143a:	bd70      	pop	{r4, r5, r6, pc}

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800143c:	f7ff fdae 	bl	8000f9c <HAL_GetTick>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	4285      	cmp	r5, r0
 8001444:	d2d9      	bcs.n	80013fa <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001446:	e7ed      	b.n	8001424 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001448:	2000      	movs	r0, #0
}
 800144a:	bd70      	pop	{r4, r5, r6, pc}

0800144c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	4604      	mov	r4, r0
 8001450:	460d      	mov	r5, r1
 8001452:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	075b      	lsls	r3, r3, #29
 800145a:	d419      	bmi.n	8001490 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800145c:	4620      	mov	r0, r4
 800145e:	f7ff ff1d 	bl	800129c <I2C_IsAcknowledgeFailed>
 8001462:	b9b8      	cbnz	r0, 8001494 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001464:	1c6a      	adds	r2, r5, #1
 8001466:	d0f5      	beq.n	8001454 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001468:	b965      	cbnz	r5, 8001484 <I2C_WaitOnBTFFlagUntilTimeout+0x38>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800146a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8001472:	2220      	movs	r2, #32
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
 8001474:	2300      	movs	r3, #0
 8001476:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001478:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 800147c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001480:	2003      	movs	r0, #3
 8001482:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001484:	f7ff fd8a 	bl	8000f9c <HAL_GetTick>
 8001488:	1b80      	subs	r0, r0, r6
 800148a:	4285      	cmp	r5, r0
 800148c:	d2e2      	bcs.n	8001454 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800148e:	e7ec      	b.n	800146a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001490:	2000      	movs	r0, #0
 8001492:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
    {
      return HAL_ERROR;
 8001494:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001496:	bd70      	pop	{r4, r5, r6, pc}

08001498 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800149a:	4604      	mov	r4, r0
 800149c:	2800      	cmp	r0, #0
 800149e:	d063      	beq.n	8001568 <HAL_I2C_Init+0xd0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80014a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014a8:	b91b      	cbnz	r3, 80014b2 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014aa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ae:	f003 fa03 	bl	80048b8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b2:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014b4:	4d2d      	ldr	r5, [pc, #180]	; (800156c <HAL_I2C_Init+0xd4>)
    hi2c->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b6:	2324      	movs	r3, #36	; 0x24
 80014b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c4:	f001 f93a 	bl	800273c <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014c8:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80014ca:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014cc:	4928      	ldr	r1, [pc, #160]	; (8001570 <HAL_I2C_Init+0xd8>)
 80014ce:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014d2:	42ab      	cmp	r3, r5
 80014d4:	462e      	mov	r6, r5
 80014d6:	bf88      	it	hi
 80014d8:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80014dc:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014de:	bf82      	ittt	hi
 80014e0:	4369      	mulhi	r1, r5
 80014e2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80014e6:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014ea:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014ec:	f101 0101 	add.w	r1, r1, #1
 80014f0:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014f2:	d808      	bhi.n	8001506 <HAL_I2C_Init+0x6e>
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80014fa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80014fe:	2b03      	cmp	r3, #3
 8001500:	bf98      	it	ls
 8001502:	2004      	movls	r0, #4
 8001504:	e016      	b.n	8001534 <HAL_I2C_Init+0x9c>
 8001506:	68a1      	ldr	r1, [r4, #8]
 8001508:	b949      	cbnz	r1, 800151e <HAL_I2C_Init+0x86>
 800150a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800150e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001512:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001516:	b163      	cbz	r3, 8001532 <HAL_I2C_Init+0x9a>
 8001518:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800151c:	e00a      	b.n	8001534 <HAL_I2C_Init+0x9c>
 800151e:	2119      	movs	r1, #25
 8001520:	434b      	muls	r3, r1
 8001522:	fbb0 f0f3 	udiv	r0, r0, r3
 8001526:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800152a:	b113      	cbz	r3, 8001532 <HAL_I2C_Init+0x9a>
 800152c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001530:	e000      	b.n	8001534 <HAL_I2C_Init+0x9c>
 8001532:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001534:	69e1      	ldr	r1, [r4, #28]
 8001536:	6a23      	ldr	r3, [r4, #32]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001538:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800153a:	430b      	orrs	r3, r1
 800153c:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800153e:	6921      	ldr	r1, [r4, #16]
 8001540:	68e3      	ldr	r3, [r4, #12]
 8001542:	430b      	orrs	r3, r1
 8001544:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001546:	6961      	ldr	r1, [r4, #20]
 8001548:	69a3      	ldr	r3, [r4, #24]
 800154a:	430b      	orrs	r3, r1
 800154c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800154e:	6813      	ldr	r3, [r2, #0]
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001556:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001558:	2320      	movs	r3, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800155a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800155c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001560:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001562:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001566:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	000186a0 	.word	0x000186a0
 8001570:	000f4240 	.word	0x000f4240

08001574 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001574:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001578:	4604      	mov	r4, r0
 800157a:	461f      	mov	r7, r3
 800157c:	460d      	mov	r5, r1
 800157e:	4690      	mov	r8, r2
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001580:	f7ff fd0c 	bl	8000f9c <HAL_GetTick>

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001584:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001588:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800158a:	4606      	mov	r6, r0

  if(hi2c->State == HAL_I2C_STATE_READY)
 800158c:	d001      	beq.n	8001592 <HAL_I2C_Master_Transmit+0x1e>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800158e:	2502      	movs	r5, #2
 8001590:	e0bd      	b.n	800170e <HAL_I2C_Master_Transmit+0x19a>
  tickstart = HAL_GetTick();

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001592:	9000      	str	r0, [sp, #0]
 8001594:	2319      	movs	r3, #25
 8001596:	2201      	movs	r2, #1
 8001598:	495f      	ldr	r1, [pc, #380]	; (8001718 <HAL_I2C_Master_Transmit+0x1a4>)
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fed4 	bl	8001348 <I2C_WaitOnFlagUntilTimeout>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d1f4      	bne.n	800158e <HAL_I2C_Master_Transmit+0x1a>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d0f0      	beq.n	800158e <HAL_I2C_Master_Transmit+0x1a>
 80015ac:	2301      	movs	r3, #1
 80015ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	07d2      	lsls	r2, r2, #31
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015b8:	bf5e      	ittt	pl
 80015ba:	681a      	ldrpl	r2, [r3, #0]
 80015bc:	f042 0201 	orrpl.w	r2, r2, #1
 80015c0:	601a      	strpl	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015ca:	2221      	movs	r2, #33	; 0x21
 80015cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015d0:	2210      	movs	r2, #16
 80015d2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d6:	2200      	movs	r2, #0
 80015d8:	6422      	str	r2, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015da:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 80015de:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015e0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015e4:	8522      	strh	r2, [r4, #40]	; 0x28
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015e8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015ec:	2a04      	cmp	r2, #4
 80015ee:	d007      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x8c>
 80015f0:	2a01      	cmp	r2, #1
 80015f2:	d005      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x8c>
 80015f4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80015f8:	d002      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x8c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015fc:	2a12      	cmp	r2, #18
 80015fe:	d103      	bne.n	8001608 <HAL_I2C_Master_Transmit+0x94>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001606:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001608:	9600      	str	r6, [sp, #0]
 800160a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800160c:	2200      	movs	r2, #0
 800160e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fe98 	bl	8001348 <I2C_WaitOnFlagUntilTimeout>
 8001618:	bb10      	cbnz	r0, 8001660 <HAL_I2C_Master_Transmit+0xec>
  {
    return HAL_TIMEOUT;
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800161a:	6923      	ldr	r3, [r4, #16]
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001622:	d103      	bne.n	800162c <HAL_I2C_Master_Transmit+0xb8>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001624:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001628:	6115      	str	r5, [r2, #16]
 800162a:	e00f      	b.n	800164c <HAL_I2C_Master_Transmit+0xd8>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800162c:	11eb      	asrs	r3, r5, #7
 800162e:	f003 0306 	and.w	r3, r3, #6
 8001632:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001636:	6113      	str	r3, [r2, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001638:	4938      	ldr	r1, [pc, #224]	; (800171c <HAL_I2C_Master_Transmit+0x1a8>)
 800163a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800163c:	4633      	mov	r3, r6
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff fe41 	bl	80012c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001644:	b958      	cbnz	r0, 800165e <HAL_I2C_Master_Transmit+0xea>
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	b2ed      	uxtb	r5, r5
 800164a:	611d      	str	r5, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800164c:	4633      	mov	r3, r6
 800164e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001650:	4933      	ldr	r1, [pc, #204]	; (8001720 <HAL_I2C_Master_Transmit+0x1ac>)
 8001652:	4620      	mov	r0, r4
 8001654:	f7ff fe37 	bl	80012c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001658:	4605      	mov	r5, r0
 800165a:	2800      	cmp	r0, #0
 800165c:	d036      	beq.n	80016cc <HAL_I2C_Master_Transmit+0x158>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hi2c->XferSize    = hi2c->XferCount;

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001662:	2b04      	cmp	r3, #4
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_I2C_Master_Transmit+0xfc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800166a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800166e:	e02b      	b.n	80016c8 <HAL_I2C_Master_Transmit+0x154>
        return HAL_ERROR;
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001670:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 8001674:	2503      	movs	r5, #3
 8001676:	e04a      	b.n	800170e <HAL_I2C_Master_Transmit+0x19a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001678:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800167a:	6820      	ldr	r0, [r4, #0]
      hi2c->XferCount--;
      hi2c->XferSize--;
 800167c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800167e:	1c4b      	adds	r3, r1, #1
 8001680:	6263      	str	r3, [r4, #36]	; 0x24
 8001682:	780b      	ldrb	r3, [r1, #0]
 8001684:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001686:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001688:	3b01      	subs	r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800168e:	6947      	ldr	r7, [r0, #20]
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
      hi2c->XferSize--;
 8001690:	1e53      	subs	r3, r2, #1
 8001692:	b29b      	uxth	r3, r3

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001694:	077f      	lsls	r7, r7, #29
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
      hi2c->XferSize--;
 8001696:	8523      	strh	r3, [r4, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001698:	d420      	bmi.n	80016dc <HAL_I2C_Master_Transmit+0x168>
        hi2c->XferCount--;
        hi2c->XferSize--;
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169a:	4632      	mov	r2, r6
 800169c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff fed4 	bl	800144c <I2C_WaitOnBTFFlagUntilTimeout>
 80016a4:	b940      	cbnz	r0, 80016b8 <HAL_I2C_Master_Transmit+0x144>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    while(hi2c->XferSize > 0U)
 80016a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016a8:	b32b      	cbz	r3, 80016f6 <HAL_I2C_Master_Transmit+0x182>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016aa:	4632      	mov	r2, r6
 80016ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016ae:	4620      	mov	r0, r4
 80016b0:	f7ff fe79 	bl	80013a6 <I2C_WaitOnTXEFlagUntilTimeout>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d0df      	beq.n	8001678 <HAL_I2C_Master_Transmit+0x104>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d1da      	bne.n	8001674 <HAL_I2C_Master_Transmit+0x100>
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016be:	6822      	ldr	r2, [r4, #0]
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c6:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 80016c8:	2501      	movs	r5, #1
 80016ca:	e020      	b.n	800170e <HAL_I2C_Master_Transmit+0x19a>
        return HAL_TIMEOUT;
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	9003      	str	r0, [sp, #12]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	9203      	str	r2, [sp, #12]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	9303      	str	r3, [sp, #12]
 80016d8:	9b03      	ldr	r3, [sp, #12]

    while(hi2c->XferSize > 0U)
 80016da:	e7e4      	b.n	80016a6 <HAL_I2C_Master_Transmit+0x132>
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
      hi2c->XferSize--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0dc      	beq.n	800169a <HAL_I2C_Master_Transmit+0x126>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016e0:	1c8b      	adds	r3, r1, #2
 80016e2:	6263      	str	r3, [r4, #36]	; 0x24
 80016e4:	784b      	ldrb	r3, [r1, #1]
 80016e6:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80016e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80016ee:	3a02      	subs	r2, #2

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
        hi2c->XferCount--;
 80016f0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016f2:	8522      	strh	r2, [r4, #40]	; 0x28
 80016f4:	e7d1      	b.n	800169a <HAL_I2C_Master_Transmit+0x126>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016f6:	6821      	ldr	r1, [r4, #0]
 80016f8:	680a      	ldr	r2, [r1, #0]
 80016fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016fe:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001700:	2220      	movs	r2, #32
 8001702:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001706:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800170a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  }
  else
  {
    return HAL_BUSY;
  }
}
 800170e:	4628      	mov	r0, r5
 8001710:	b004      	add	sp, #16
 8001712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001716:	bf00      	nop
 8001718:	00100002 	.word	0x00100002
 800171c:	00010008 	.word	0x00010008
 8001720:	00010002 	.word	0x00010002

08001724 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001728:	4604      	mov	r4, r0
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	4698      	mov	r8, r3
 800172e:	460d      	mov	r5, r1
 8001730:	4691      	mov	r9, r2
 8001732:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001734:	f7ff fc32 	bl	8000f9c <HAL_GetTick>

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001738:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800173c:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0x00U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800173e:	4606      	mov	r6, r0

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001740:	d001      	beq.n	8001746 <HAL_I2C_Master_Receive+0x22>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001742:	2502      	movs	r5, #2
 8001744:	e15a      	b.n	80019fc <HAL_I2C_Master_Receive+0x2d8>
  tickstart = HAL_GetTick();

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001746:	9000      	str	r0, [sp, #0]
 8001748:	2319      	movs	r3, #25
 800174a:	2201      	movs	r2, #1
 800174c:	4990      	ldr	r1, [pc, #576]	; (8001990 <HAL_I2C_Master_Receive+0x26c>)
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff fdfa 	bl	8001348 <I2C_WaitOnFlagUntilTimeout>
 8001754:	2800      	cmp	r0, #0
 8001756:	d1f4      	bne.n	8001742 <HAL_I2C_Master_Receive+0x1e>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001758:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800175c:	2b01      	cmp	r3, #1
 800175e:	d0f0      	beq.n	8001742 <HAL_I2C_Master_Receive+0x1e>
 8001760:	2301      	movs	r3, #1
 8001762:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	07d2      	lsls	r2, r2, #31
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176c:	bf5e      	ittt	pl
 800176e:	681a      	ldrpl	r2, [r3, #0]
 8001770:	f042 0201 	orrpl.w	r2, r2, #1
 8001774:	601a      	strpl	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800177e:	2222      	movs	r2, #34	; 0x22
 8001780:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001784:	2210      	movs	r2, #16
 8001786:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800178a:	2200      	movs	r2, #0
 800178c:	6422      	str	r2, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800178e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8001792:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001796:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001798:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800179a:	8522      	strh	r2, [r4, #40]	; 0x28
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800179c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800179e:	6819      	ldr	r1, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017a4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017a8:	2a04      	cmp	r2, #4
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017aa:	6019      	str	r1, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017ac:	d007      	beq.n	80017be <HAL_I2C_Master_Receive+0x9a>
 80017ae:	2a01      	cmp	r2, #1
 80017b0:	d005      	beq.n	80017be <HAL_I2C_Master_Receive+0x9a>
 80017b2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80017b6:	d002      	beq.n	80017be <HAL_I2C_Master_Receive+0x9a>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80017b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017ba:	2a11      	cmp	r2, #17
 80017bc:	d103      	bne.n	80017c6 <HAL_I2C_Master_Receive+0xa2>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017c6:	9600      	str	r6, [sp, #0]
 80017c8:	463b      	mov	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7ff fdb9 	bl	8001348 <I2C_WaitOnFlagUntilTimeout>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d143      	bne.n	8001862 <HAL_I2C_Master_Receive+0x13e>
  {
    return HAL_TIMEOUT;
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017da:	6923      	ldr	r3, [r4, #16]
 80017dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	d104      	bne.n	80017ee <HAL_I2C_Master_Receive+0xca>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80017e4:	f045 0501 	orr.w	r5, r5, #1
 80017e8:	b2ed      	uxtb	r5, r5
 80017ea:	611d      	str	r5, [r3, #16]
 80017ec:	e02f      	b.n	800184e <HAL_I2C_Master_Receive+0x12a>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017ee:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80017f2:	f008 0806 	and.w	r8, r8, #6
 80017f6:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80017fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017fc:	4965      	ldr	r1, [pc, #404]	; (8001994 <HAL_I2C_Master_Receive+0x270>)
 80017fe:	4633      	mov	r3, r6
 8001800:	463a      	mov	r2, r7
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fd5f 	bl	80012c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001808:	bb50      	cbnz	r0, 8001860 <HAL_I2C_Master_Receive+0x13c>
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800180a:	6823      	ldr	r3, [r4, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800180c:	4962      	ldr	r1, [pc, #392]	; (8001998 <HAL_I2C_Master_Receive+0x274>)
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800180e:	b2ed      	uxtb	r5, r5
 8001810:	611d      	str	r5, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001812:	463a      	mov	r2, r7
 8001814:	4633      	mov	r3, r6
 8001816:	4620      	mov	r0, r4
 8001818:	f7ff fd55 	bl	80012c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800181c:	4602      	mov	r2, r0
 800181e:	b9f8      	cbnz	r0, 8001860 <HAL_I2C_Master_Receive+0x13c>
        return HAL_TIMEOUT;
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	9007      	str	r0, [sp, #28]
 8001824:	6959      	ldr	r1, [r3, #20]
 8001826:	9107      	str	r1, [sp, #28]
 8001828:	6999      	ldr	r1, [r3, #24]
 800182a:	9107      	str	r1, [sp, #28]
 800182c:	9907      	ldr	r1, [sp, #28]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001834:	6019      	str	r1, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001836:	4620      	mov	r0, r4
 8001838:	9600      	str	r6, [sp, #0]
 800183a:	463b      	mov	r3, r7
 800183c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001840:	f7ff fd82 	bl	8001348 <I2C_WaitOnFlagUntilTimeout>
 8001844:	b968      	cbnz	r0, 8001862 <HAL_I2C_Master_Receive+0x13e>
    {
      return HAL_TIMEOUT;
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800184c:	6113      	str	r3, [r2, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800184e:	4633      	mov	r3, r6
 8001850:	463a      	mov	r2, r7
 8001852:	4951      	ldr	r1, [pc, #324]	; (8001998 <HAL_I2C_Master_Receive+0x274>)
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff fd36 	bl	80012c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800185a:	4605      	mov	r5, r0
 800185c:	2800      	cmp	r0, #0
 800185e:	d031      	beq.n	80018c4 <HAL_I2C_Master_Receive+0x1a0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001860:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hi2c->XferSize    = hi2c->XferCount;

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001864:	2b04      	cmp	r3, #4
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	d102      	bne.n	8001872 <HAL_I2C_Master_Receive+0x14e>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800186c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001870:	e026      	b.n	80018c0 <HAL_I2C_Master_Receive+0x19c>
        return HAL_ERROR;
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001872:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001876:	e021      	b.n	80018bc <HAL_I2C_Master_Receive+0x198>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 1U)
 8001878:	2a01      	cmp	r2, #1
 800187a:	d132      	bne.n	80018e2 <HAL_I2C_Master_Receive+0x1be>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001882:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001884:	9504      	str	r5, [sp, #16]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	9204      	str	r2, [sp, #16]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	9204      	str	r2, [sp, #16]
 800188e:	9a04      	ldr	r2, [sp, #16]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001896:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(hi2c->XferSize > 0U)
 8001898:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80a6 	beq.w	80019ec <HAL_I2C_Master_Receive+0x2c8>
    {
      if(hi2c->XferSize <= 3U)
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d87d      	bhi.n	80019a0 <HAL_I2C_Master_Receive+0x27c>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d137      	bne.n	8001918 <HAL_I2C_Master_Receive+0x1f4>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80018a8:	4632      	mov	r2, r6
 80018aa:	4639      	mov	r1, r7
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff fda0 	bl	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d067      	beq.n	8001986 <HAL_I2C_Master_Receive+0x262>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80018b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018b8:	2b20      	cmp	r3, #32
 80018ba:	d101      	bne.n	80018c0 <HAL_I2C_Master_Receive+0x19c>
            {
              return HAL_TIMEOUT;
 80018bc:	2503      	movs	r5, #3
 80018be:	e09d      	b.n	80019fc <HAL_I2C_Master_Receive+0x2d8>
            }
            else
            {
              return HAL_ERROR;
 80018c0:	2501      	movs	r5, #1
 80018c2:	e09b      	b.n	80019fc <HAL_I2C_Master_Receive+0x2d8>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(hi2c->XferSize == 0U)
 80018c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	d1d5      	bne.n	8001878 <HAL_I2C_Master_Receive+0x154>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018cc:	9503      	str	r5, [sp, #12]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	9203      	str	r2, [sp, #12]
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	9203      	str	r2, [sp, #12]
 80018d6:	9a03      	ldr	r2, [sp, #12]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e084      	b.n	80019ec <HAL_I2C_Master_Receive+0x2c8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 2U)
 80018e2:	2a02      	cmp	r2, #2
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018e4:	681a      	ldr	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
    }
    else if(hi2c->XferSize == 2U)
 80018e6:	d10d      	bne.n	8001904 <HAL_I2C_Master_Receive+0x1e0>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f6:	9505      	str	r5, [sp, #20]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	9205      	str	r2, [sp, #20]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	9305      	str	r3, [sp, #20]
 8001900:	9b05      	ldr	r3, [sp, #20]
 8001902:	e7c9      	b.n	8001898 <HAL_I2C_Master_Receive+0x174>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	9506      	str	r5, [sp, #24]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	9206      	str	r2, [sp, #24]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	9306      	str	r3, [sp, #24]
 8001914:	9b06      	ldr	r3, [sp, #24]
 8001916:	e7bf      	b.n	8001898 <HAL_I2C_Master_Receive+0x174>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
          hi2c->XferCount--;
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001918:	2b02      	cmp	r3, #2
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800191a:	9600      	str	r6, [sp, #0]
 800191c:	463b      	mov	r3, r7
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	491e      	ldr	r1, [pc, #120]	; (800199c <HAL_I2C_Master_Receive+0x278>)
 8001924:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
          hi2c->XferCount--;
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001926:	d019      	beq.n	800195c <HAL_I2C_Master_Receive+0x238>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001928:	f7ff fd0e 	bl	8001348 <I2C_WaitOnFlagUntilTimeout>
 800192c:	4602      	mov	r2, r0
 800192e:	2800      	cmp	r0, #0
 8001930:	d1c4      	bne.n	80018bc <HAL_I2C_Master_Receive+0x198>
          {
            return HAL_TIMEOUT;
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800193a:	6019      	str	r1, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800193c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	1c48      	adds	r0, r1, #1
 8001942:	6260      	str	r0, [r4, #36]	; 0x24
 8001944:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001946:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001948:	4914      	ldr	r1, [pc, #80]	; (800199c <HAL_I2C_Master_Receive+0x278>)
 800194a:	9600      	str	r6, [sp, #0]
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
          hi2c->XferSize--;
 800194c:	3b01      	subs	r3, #1
 800194e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001950:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	8563      	strh	r3, [r4, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001958:	4620      	mov	r0, r4
 800195a:	463b      	mov	r3, r7
 800195c:	f7ff fcf4 	bl	8001348 <I2C_WaitOnFlagUntilTimeout>
 8001960:	2800      	cmp	r0, #0
 8001962:	d1ab      	bne.n	80018bc <HAL_I2C_Master_Receive+0x198>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800196e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	1c51      	adds	r1, r2, #1
 8001974:	6261      	str	r1, [r4, #36]	; 0x24
 8001976:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001978:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800197a:	3b01      	subs	r3, #1
 800197c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800197e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001980:	3b01      	subs	r3, #1
 8001982:	b29b      	uxth	r3, r3
 8001984:	8563      	strh	r3, [r4, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	6262      	str	r2, [r4, #36]	; 0x24
 800198c:	6822      	ldr	r2, [r4, #0]
 800198e:	e023      	b.n	80019d8 <HAL_I2C_Master_Receive+0x2b4>
 8001990:	00100002 	.word	0x00100002
 8001994:	00010008 	.word	0x00010008
 8001998:	00010002 	.word	0x00010002
 800199c:	00010004 	.word	0x00010004
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80019a0:	4632      	mov	r2, r6
 80019a2:	4639      	mov	r1, r7
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff fd24 	bl	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d183      	bne.n	80018b6 <HAL_I2C_Master_Receive+0x192>
            return HAL_ERROR;
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	6262      	str	r2, [r4, #36]	; 0x24
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	6912      	ldr	r2, [r2, #16]
 80019b8:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80019ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019bc:	6822      	ldr	r2, [r4, #0]
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        hi2c->XferSize--;
 80019be:	3b01      	subs	r3, #1
 80019c0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80019c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	8563      	strh	r3, [r4, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019ca:	6953      	ldr	r3, [r2, #20]
 80019cc:	075b      	lsls	r3, r3, #29
 80019ce:	f57f af63 	bpl.w	8001898 <HAL_I2C_Master_Receive+0x174>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019d4:	1c59      	adds	r1, r3, #1
 80019d6:	6261      	str	r1, [r4, #36]	; 0x24
 80019d8:	6912      	ldr	r2, [r2, #16]
 80019da:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80019dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019de:	3b01      	subs	r3, #1
 80019e0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80019ea:	e755      	b.n	8001898 <HAL_I2C_Master_Receive+0x174>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80019ec:	2320      	movs	r3, #32
 80019ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }
  else
  {
    return HAL_BUSY;
  }
}
 80019fc:	4628      	mov	r0, r5
 80019fe:	b009      	add	sp, #36	; 0x24
 8001a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a04 <HAL_I2C_MasterTxCpltCallback>:
 8001a04:	4770      	bx	lr

08001a06 <HAL_I2C_MasterRxCpltCallback>:
 8001a06:	4770      	bx	lr

08001a08 <HAL_I2C_SlaveTxCpltCallback>:
 8001a08:	4770      	bx	lr

08001a0a <HAL_I2C_SlaveRxCpltCallback>:
 8001a0a:	4770      	bx	lr

08001a0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a0c:	4770      	bx	lr

08001a0e <HAL_I2C_ListenCpltCallback>:
 8001a0e:	4770      	bx	lr

08001a10 <HAL_I2C_MemTxCpltCallback>:
 8001a10:	4770      	bx	lr

08001a12 <HAL_I2C_MemRxCpltCallback>:
 8001a12:	4770      	bx	lr

08001a14 <HAL_I2C_ErrorCallback>:
 8001a14:	4770      	bx	lr

08001a16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a16:	4770      	bx	lr

08001a18 <I2C_ITError>:
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8001a18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001a1c:	3b29      	subs	r3, #41	; 0x29
 8001a1e:	2b01      	cmp	r3, #1
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b510      	push	{r4, lr}
 8001a22:	6803      	ldr	r3, [r0, #0]
 8001a24:	4604      	mov	r4, r0
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001a26:	d805      	bhi.n	8001a34 <I2C_ITError+0x1c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a28:	2200      	movs	r2, #0
 8001a2a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001a2c:	2228      	movs	r2, #40	; 0x28
 8001a2e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 8001a32:	e00d      	b.n	8001a50 <I2C_ITError+0x38>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8001a34:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001a38:	2a60      	cmp	r2, #96	; 0x60
 8001a3a:	d005      	beq.n	8001a48 <I2C_ITError+0x30>
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	0512      	lsls	r2, r2, #20
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	bf5c      	itt	pl
 8001a42:	2220      	movpl	r2, #32
 8001a44:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a56:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001a5e:	d033      	beq.n	8001ac8 <I2C_ITError+0xb0>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001a60:	685a      	ldr	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001a62:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a68:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001a6a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <I2C_ITError+0x120>)
 8001a72:	d00e      	beq.n	8001a92 <I2C_ITError+0x7a>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001a74:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001a76:	f7ff fb1b 	bl	80010b0 <HAL_DMA_Abort_IT>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d048      	beq.n	8001b10 <I2C_ITError+0xf8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8001a7e:	6822      	ldr	r2, [r4, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001a80:	6b60      	ldr	r0, [r4, #52]	; 0x34
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001a90:	e017      	b.n	8001ac2 <I2C_ITError+0xaa>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a94:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a96:	f7ff fb0b 	bl	80010b0 <HAL_DMA_Abort_IT>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d038      	beq.n	8001b10 <I2C_ITError+0xf8>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	6953      	ldr	r3, [r2, #20]
 8001aa2:	0658      	lsls	r0, r3, #25
 8001aa4:	d504      	bpl.n	8001ab0 <I2C_ITError+0x98>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa8:	6912      	ldr	r2, [r2, #16]
 8001aaa:	1c59      	adds	r1, r3, #1
 8001aac:	6261      	str	r1, [r4, #36]	; 0x24
 8001aae:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8001ab0:	6822      	ldr	r2, [r4, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ab2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8001ab4:	6813      	ldr	r3, [r2, #0]
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001abc:	2320      	movs	r3, #32
 8001abe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ac2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ac4:	4798      	blx	r3
 8001ac6:	e023      	b.n	8001b10 <I2C_ITError+0xf8>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001ac8:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001acc:	2960      	cmp	r1, #96	; 0x60
 8001ace:	d114      	bne.n	8001afa <I2C_ITError+0xe2>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad6:	6422      	str	r2, [r4, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	0651      	lsls	r1, r2, #25
 8001adc:	d504      	bpl.n	8001ae8 <I2C_ITError+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ade:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	1c51      	adds	r1, r2, #1
 8001ae4:	6261      	str	r1, [r4, #36]	; 0x24
 8001ae6:	7013      	strb	r3, [r2, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	6813      	ldr	r3, [r2, #0]
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff ff8f 	bl	8001a16 <HAL_I2C_AbortCpltCallback>
 8001af8:	e00a      	b.n	8001b10 <I2C_ITError+0xf8>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	0652      	lsls	r2, r2, #25
 8001afe:	d504      	bpl.n	8001b0a <I2C_ITError+0xf2>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	1c51      	adds	r1, r2, #1
 8001b06:	6261      	str	r1, [r4, #36]	; 0x24
 8001b08:	7013      	strb	r3, [r2, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff ff82 	bl	8001a14 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001b10:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001b14:	2b28      	cmp	r3, #40	; 0x28
 8001b16:	d10e      	bne.n	8001b36 <I2C_ITError+0x11e>
 8001b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b1a:	075b      	lsls	r3, r3, #29
 8001b1c:	d50b      	bpl.n	8001b36 <I2C_ITError+0x11e>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <I2C_ITError+0x124>)
 8001b20:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	2220      	movs	r2, #32
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b28:	4620      	mov	r0, r4
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b32:	f7ff ff6c 	bl	8001a0e <HAL_I2C_ListenCpltCallback>
 8001b36:	bd10      	pop	{r4, pc}
 8001b38:	080021e5 	.word	0x080021e5
 8001b3c:	ffff0000 	.word	0xffff0000

08001b40 <HAL_I2C_EV_IRQHandler>:
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b40:	6803      	ldr	r3, [r0, #0]
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b42:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b44:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b46:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8001b48:	685a      	ldr	r2, [r3, #4]

  uint32_t CurrentMode  = hi2c->Mode;
 8001b4a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001b4e:	b2e4      	uxtb	r4, r4

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b50:	2c10      	cmp	r4, #16
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b52:	b08d      	sub	sp, #52	; 0x34
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);

  uint32_t CurrentMode  = hi2c->Mode;

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b54:	d002      	beq.n	8001b5c <HAL_I2C_EV_IRQHandler+0x1c>
 8001b56:	2c40      	cmp	r4, #64	; 0x40
 8001b58:	f040 8240 	bne.w	8001fdc <HAL_I2C_EV_IRQHandler+0x49c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001b5c:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8001b60:	d02f      	beq.n	8001bc2 <HAL_I2C_EV_IRQHandler+0x82>
 8001b62:	0597      	lsls	r7, r2, #22
 8001b64:	d52d      	bpl.n	8001bc2 <HAL_I2C_EV_IRQHandler+0x82>
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b66:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001b6a:	2c40      	cmp	r4, #64	; 0x40
 8001b6c:	d105      	bne.n	8001b7a <HAL_I2C_EV_IRQHandler+0x3a>
  {
    if(hi2c->EventCount == 0U)
 8001b6e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001b70:	b90c      	cbnz	r4, 8001b76 <HAL_I2C_EV_IRQHandler+0x36>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b72:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b74:	e00a      	b.n	8001b8c <HAL_I2C_EV_IRQHandler+0x4c>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001b76:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b78:	e00b      	b.n	8001b92 <HAL_I2C_EV_IRQHandler+0x52>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b7a:	6904      	ldr	r4, [r0, #16]
 8001b7c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8001b80:	d10a      	bne.n	8001b98 <HAL_I2C_EV_IRQHandler+0x58>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001b82:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001b86:	2c21      	cmp	r4, #33	; 0x21
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b88:	6c44      	ldr	r4, [r0, #68]	; 0x44
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001b8a:	d102      	bne.n	8001b92 <HAL_I2C_EV_IRQHandler+0x52>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b8c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
 8001b90:	e015      	b.n	8001bbe <HAL_I2C_EV_IRQHandler+0x7e>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001b92:	f044 0401 	orr.w	r4, r4, #1
 8001b96:	e01a      	b.n	8001bce <HAL_I2C_EV_IRQHandler+0x8e>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8001b98:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001b9a:	b934      	cbnz	r4, 8001baa <HAL_I2C_EV_IRQHandler+0x6a>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001b9c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b9e:	11e4      	asrs	r4, r4, #7
 8001ba0:	f004 0406 	and.w	r4, r4, #6
 8001ba4:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8001ba8:	e009      	b.n	8001bbe <HAL_I2C_EV_IRQHandler+0x7e>
      }
      else if(hi2c->EventCount == 1U)
 8001baa:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001bac:	2c01      	cmp	r4, #1
 8001bae:	f040 80d2 	bne.w	8001d56 <HAL_I2C_EV_IRQHandler+0x216>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001bb2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001bb4:	11e4      	asrs	r4, r4, #7
 8001bb6:	f004 0406 	and.w	r4, r4, #6
 8001bba:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8001bbe:	611c      	str	r4, [r3, #16]
 8001bc0:	e0c9      	b.n	8001d56 <HAL_I2C_EV_IRQHandler+0x216>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
    {
      I2C_Master_SB(hi2c);
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001bc2:	4c95      	ldr	r4, [pc, #596]	; (8001e18 <HAL_I2C_EV_IRQHandler+0x2d8>)
 8001bc4:	400c      	ands	r4, r1
 8001bc6:	b124      	cbz	r4, 8001bd2 <HAL_I2C_EV_IRQHandler+0x92>
 8001bc8:	0596      	lsls	r6, r2, #22
 8001bca:	d502      	bpl.n	8001bd2 <HAL_I2C_EV_IRQHandler+0x92>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001bcc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001bce:	b2e4      	uxtb	r4, r4
 8001bd0:	e7f5      	b.n	8001bbe <HAL_I2C_EV_IRQHandler+0x7e>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
    {
      I2C_Master_ADD10(hi2c);
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001bd2:	4c92      	ldr	r4, [pc, #584]	; (8001e1c <HAL_I2C_EV_IRQHandler+0x2dc>)
 8001bd4:	400c      	ands	r4, r1
 8001bd6:	2c00      	cmp	r4, #0
 8001bd8:	f000 80bd 	beq.w	8001d56 <HAL_I2C_EV_IRQHandler+0x216>
 8001bdc:	0594      	lsls	r4, r2, #22
 8001bde:	f140 80ba 	bpl.w	8001d56 <HAL_I2C_EV_IRQHandler+0x216>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8001be2:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001be6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001be8:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bec:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8001bf0:	2f22      	cmp	r7, #34	; 0x22
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8001bf2:	b2e4      	uxtb	r4, r4
  uint32_t CurrentXferOptions = hi2c->XferOptions;
  uint32_t Prev_State         = hi2c->PreviousState;

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bf4:	f040 80a8 	bne.w	8001d48 <HAL_I2C_EV_IRQHandler+0x208>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001bf8:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8001bfa:	b947      	cbnz	r7, 8001c0e <HAL_I2C_EV_IRQHandler+0xce>
 8001bfc:	2c40      	cmp	r4, #64	; 0x40
 8001bfe:	d106      	bne.n	8001c0e <HAL_I2C_EV_IRQHandler+0xce>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c00:	9701      	str	r7, [sp, #4]
 8001c02:	695c      	ldr	r4, [r3, #20]
 8001c04:	9401      	str	r4, [sp, #4]
 8001c06:	699c      	ldr	r4, [r3, #24]
 8001c08:	9401      	str	r4, [sp, #4]
 8001c0a:	9c01      	ldr	r4, [sp, #4]
 8001c0c:	e0a3      	b.n	8001d56 <HAL_I2C_EV_IRQHandler+0x216>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001c0e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001c10:	b984      	cbnz	r4, 8001c34 <HAL_I2C_EV_IRQHandler+0xf4>
 8001c12:	6907      	ldr	r7, [r0, #16]
 8001c14:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001c18:	d10c      	bne.n	8001c34 <HAL_I2C_EV_IRQHandler+0xf4>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c1a:	9402      	str	r4, [sp, #8]
 8001c1c:	695c      	ldr	r4, [r3, #20]
 8001c1e:	9402      	str	r4, [sp, #8]
 8001c20:	699c      	ldr	r4, [r3, #24]
 8001c22:	9402      	str	r4, [sp, #8]
 8001c24:	9c02      	ldr	r4, [sp, #8]
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c26:	681c      	ldr	r4, [r3, #0]
 8001c28:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001c2c:	601c      	str	r4, [r3, #0]
      
      hi2c->EventCount++;
 8001c2e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001c30:	3401      	adds	r4, #1
 8001c32:	e087      	b.n	8001d44 <HAL_I2C_EV_IRQHandler+0x204>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8001c34:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001c36:	b2a4      	uxth	r4, r4
 8001c38:	b934      	cbnz	r4, 8001c48 <HAL_I2C_EV_IRQHandler+0x108>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3a:	9403      	str	r4, [sp, #12]
 8001c3c:	695c      	ldr	r4, [r3, #20]
 8001c3e:	9403      	str	r4, [sp, #12]
 8001c40:	699c      	ldr	r4, [r3, #24]
 8001c42:	9403      	str	r4, [sp, #12]
 8001c44:	9c03      	ldr	r4, [sp, #12]
 8001c46:	e020      	b.n	8001c8a <HAL_I2C_EV_IRQHandler+0x14a>
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
      }
      else if(hi2c->XferCount == 1U)   
 8001c48:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001c4a:	b2a4      	uxth	r4, r4
 8001c4c:	2c01      	cmp	r4, #1
 8001c4e:	d145      	bne.n	8001cdc <HAL_I2C_EV_IRQHandler+0x19c>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001c50:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8001c54:	d11e      	bne.n	8001c94 <HAL_I2C_EV_IRQHandler+0x154>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c56:	681c      	ldr	r4, [r3, #0]
 8001c58:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001c5c:	601c      	str	r4, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001c5e:	685c      	ldr	r4, [r3, #4]
 8001c60:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8001c64:	d00b      	beq.n	8001c7e <HAL_I2C_EV_IRQHandler+0x13e>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001c6c:	601c      	str	r4, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6e:	2400      	movs	r4, #0
 8001c70:	9404      	str	r4, [sp, #16]
 8001c72:	695c      	ldr	r4, [r3, #20]
 8001c74:	9404      	str	r4, [sp, #16]
 8001c76:	699c      	ldr	r4, [r3, #24]
 8001c78:	9404      	str	r4, [sp, #16]
 8001c7a:	9c04      	ldr	r4, [sp, #16]
 8001c7c:	e061      	b.n	8001d42 <HAL_I2C_EV_IRQHandler+0x202>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7e:	9405      	str	r4, [sp, #20]
 8001c80:	695c      	ldr	r4, [r3, #20]
 8001c82:	9405      	str	r4, [sp, #20]
 8001c84:	699c      	ldr	r4, [r3, #24]
 8001c86:	9405      	str	r4, [sp, #20]
 8001c88:	9c05      	ldr	r4, [sp, #20]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c8a:	681c      	ldr	r4, [r3, #0]
 8001c8c:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001c90:	601c      	str	r4, [r3, #0]
 8001c92:	e056      	b.n	8001d42 <HAL_I2C_EV_IRQHandler+0x202>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001c94:	2e04      	cmp	r6, #4
 8001c96:	d015      	beq.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x184>
 8001c98:	2e08      	cmp	r6, #8
 8001c9a:	d013      	beq.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x184>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001c9c:	f1be 0f12 	cmp.w	lr, #18
 8001ca0:	d010      	beq.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x184>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001ca2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ca4:	2c02      	cmp	r4, #2
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ca6:	681c      	ldr	r4, [r3, #0]
 8001ca8:	bf14      	ite	ne
 8001caa:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cae:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8001cb2:	601c      	str	r4, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb4:	2400      	movs	r4, #0
 8001cb6:	9406      	str	r4, [sp, #24]
 8001cb8:	695c      	ldr	r4, [r3, #20]
 8001cba:	9406      	str	r4, [sp, #24]
 8001cbc:	699c      	ldr	r4, [r3, #24]
 8001cbe:	9406      	str	r4, [sp, #24]
 8001cc0:	9c06      	ldr	r4, [sp, #24]
 8001cc2:	e03e      	b.n	8001d42 <HAL_I2C_EV_IRQHandler+0x202>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cc4:	681c      	ldr	r4, [r3, #0]
 8001cc6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001cca:	601c      	str	r4, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ccc:	2400      	movs	r4, #0
 8001cce:	9407      	str	r4, [sp, #28]
 8001cd0:	695c      	ldr	r4, [r3, #20]
 8001cd2:	9407      	str	r4, [sp, #28]
 8001cd4:	699c      	ldr	r4, [r3, #24]
 8001cd6:	9407      	str	r4, [sp, #28]
 8001cd8:	9c07      	ldr	r4, [sp, #28]
 8001cda:	e7d6      	b.n	8001c8a <HAL_I2C_EV_IRQHandler+0x14a>
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
        }
      }
      else if(hi2c->XferCount == 2U)
 8001cdc:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001cde:	b2a4      	uxth	r4, r4
 8001ce0:	2c02      	cmp	r4, #2
 8001ce2:	d11c      	bne.n	8001d1e <HAL_I2C_EV_IRQHandler+0x1de>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001ce4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ce6:	2c02      	cmp	r4, #2
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ce8:	681c      	ldr	r4, [r3, #0]
 8001cea:	bf1d      	ittte	ne
 8001cec:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8001cf0:	601c      	strne	r4, [r3, #0]
          
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001cf2:	681c      	ldrne	r4, [r3, #0]
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cf4:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
          
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001cf8:	bf18      	it	ne
 8001cfa:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001cfe:	601c      	str	r4, [r3, #0]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d00:	685c      	ldr	r4, [r3, #4]
 8001d02:	0527      	lsls	r7, r4, #20
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001d04:	bf42      	ittt	mi
 8001d06:	685c      	ldrmi	r4, [r3, #4]
 8001d08:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001d0c:	605c      	strmi	r4, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0e:	2400      	movs	r4, #0
 8001d10:	9408      	str	r4, [sp, #32]
 8001d12:	695c      	ldr	r4, [r3, #20]
 8001d14:	9408      	str	r4, [sp, #32]
 8001d16:	699c      	ldr	r4, [r3, #24]
 8001d18:	9408      	str	r4, [sp, #32]
 8001d1a:	9c08      	ldr	r4, [sp, #32]
 8001d1c:	e011      	b.n	8001d42 <HAL_I2C_EV_IRQHandler+0x202>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d1e:	681c      	ldr	r4, [r3, #0]
 8001d20:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001d24:	601c      	str	r4, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d26:	685c      	ldr	r4, [r3, #4]
 8001d28:	0526      	lsls	r6, r4, #20
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001d2a:	bf42      	ittt	mi
 8001d2c:	685c      	ldrmi	r4, [r3, #4]
 8001d2e:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001d32:	605c      	strmi	r4, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d34:	2400      	movs	r4, #0
 8001d36:	9409      	str	r4, [sp, #36]	; 0x24
 8001d38:	695c      	ldr	r4, [r3, #20]
 8001d3a:	9409      	str	r4, [sp, #36]	; 0x24
 8001d3c:	699c      	ldr	r4, [r3, #24]
 8001d3e:	9409      	str	r4, [sp, #36]	; 0x24
 8001d40:	9c09      	ldr	r4, [sp, #36]	; 0x24
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001d42:	2400      	movs	r4, #0
 8001d44:	6504      	str	r4, [r0, #80]	; 0x50
 8001d46:	e006      	b.n	8001d56 <HAL_I2C_EV_IRQHandler+0x216>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d48:	2400      	movs	r4, #0
 8001d4a:	940a      	str	r4, [sp, #40]	; 0x28
 8001d4c:	695c      	ldr	r4, [r3, #20]
 8001d4e:	940a      	str	r4, [sp, #40]	; 0x28
 8001d50:	699c      	ldr	r4, [r3, #24]
 8001d52:	940a      	str	r4, [sp, #40]	; 0x28
 8001d54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    {
      I2C_Master_ADDR(hi2c);
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001d56:	4e32      	ldr	r6, [pc, #200]	; (8001e20 <HAL_I2C_EV_IRQHandler+0x2e0>)
 8001d58:	4c32      	ldr	r4, [pc, #200]	; (8001e24 <HAL_I2C_EV_IRQHandler+0x2e4>)
 8001d5a:	402e      	ands	r6, r5
 8001d5c:	400c      	ands	r4, r1
 8001d5e:	2e00      	cmp	r6, #0
 8001d60:	f000 80a6 	beq.w	8001eb0 <HAL_I2C_EV_IRQHandler+0x370>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001d64:	4d30      	ldr	r5, [pc, #192]	; (8001e28 <HAL_I2C_EV_IRQHandler+0x2e8>)
 8001d66:	400d      	ands	r5, r1
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	d065      	beq.n	8001e38 <HAL_I2C_EV_IRQHandler+0x2f8>
 8001d6c:	0555      	lsls	r5, r2, #21
 8001d6e:	d563      	bpl.n	8001e38 <HAL_I2C_EV_IRQHandler+0x2f8>
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	d161      	bne.n	8001e38 <HAL_I2C_EV_IRQHandler+0x2f8>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8001d74:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  uint32_t CurrentMode        = hi2c->Mode;
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d78:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
  uint32_t CurrentMode        = hi2c->Mode;
 8001d7a:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d7e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8001d80:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 8001d82:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d84:	b98d      	cbnz	r5, 8001daa <HAL_I2C_EV_IRQHandler+0x26a>
 8001d86:	2a21      	cmp	r2, #33	; 0x21
 8001d88:	d111      	bne.n	8001dae <HAL_I2C_EV_IRQHandler+0x26e>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d8a:	2c04      	cmp	r4, #4
 8001d8c:	d07a      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x344>
 8001d8e:	2c08      	cmp	r4, #8
 8001d90:	d078      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x344>
 8001d92:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001d96:	d075      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x344>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001da0:	2311      	movs	r3, #17
 8001da2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
 8001da8:	e066      	b.n	8001e78 <HAL_I2C_EV_IRQHandler+0x338>
        hi2c->Mode = HAL_I2C_MODE_NONE;
        HAL_I2C_MasterTxCpltCallback(hi2c);
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001daa:	2a21      	cmp	r2, #33	; 0x21
 8001dac:	d005      	beq.n	8001dba <HAL_I2C_EV_IRQHandler+0x27a>
 8001dae:	2940      	cmp	r1, #64	; 0x40
 8001db0:	f040 820e 	bne.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001db4:	2a22      	cmp	r2, #34	; 0x22
 8001db6:	f040 820b 	bne.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  {
    if(hi2c->XferCount == 0U)
 8001dba:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001dbc:	b292      	uxth	r2, r2
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	f000 8093 	beq.w	8001eea <HAL_I2C_EV_IRQHandler+0x3aa>
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dc4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001dc8:	2a40      	cmp	r2, #64	; 0x40
 8001dca:	f040 81c5 	bne.w	8002158 <HAL_I2C_EV_IRQHandler+0x618>
      {
        if(hi2c->EventCount == 0)
 8001dce:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001dd0:	b97a      	cbnz	r2, 8001df2 <HAL_I2C_EV_IRQHandler+0x2b2>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001dd2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001dd4:	2a01      	cmp	r2, #1
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dd6:	6c82      	ldr	r2, [r0, #72]	; 0x48
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
      {
        if(hi2c->EventCount == 0)
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001dd8:	d104      	bne.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2a4>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 8001dde:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001de0:	3302      	adds	r3, #2
 8001de2:	e004      	b.n	8001dee <HAL_I2C_EV_IRQHandler+0x2ae>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001de4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001de8:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 8001dea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001dec:	3301      	adds	r3, #1
 8001dee:	6503      	str	r3, [r0, #80]	; 0x50
 8001df0:	e1ee      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
          }
        }
        else if(hi2c->EventCount == 1)
 8001df2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001df4:	2a01      	cmp	r2, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_I2C_EV_IRQHandler+0x2be>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001df8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	e7f4      	b.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2a8>
          
          hi2c->EventCount++;
        }
        else if(hi2c->EventCount == 2)
 8001dfe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001e00:	2a02      	cmp	r2, #2
 8001e02:	f040 81e5 	bne.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e06:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001e0a:	2a22      	cmp	r2, #34	; 0x22
 8001e0c:	d10e      	bne.n	8001e2c <HAL_I2C_EV_IRQHandler+0x2ec>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e1db      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
 8001e18:	00010008 	.word	0x00010008
 8001e1c:	00010002 	.word	0x00010002
 8001e20:	00100004 	.word	0x00100004
 8001e24:	00010004 	.word	0x00010004
 8001e28:	00010080 	.word	0x00010080
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e2c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001e30:	2a21      	cmp	r2, #33	; 0x21
 8001e32:	f040 81cd 	bne.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
 8001e36:	e18f      	b.n	8002158 <HAL_I2C_EV_IRQHandler+0x618>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
      {
        I2C_MasterTransmit_TXE(hi2c);
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001e38:	2c00      	cmp	r4, #0
 8001e3a:	f000 81c9 	beq.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
 8001e3e:	0594      	lsls	r4, r2, #22
 8001e40:	f140 81c6 	bpl.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e44:	6ac1      	ldr	r1, [r0, #44]	; 0x2c

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e46:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001e4a:	2a21      	cmp	r2, #33	; 0x21
 8001e4c:	f040 81c0 	bne.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  {    
    if(hi2c->XferCount != 0U)
 8001e50:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001e52:	b292      	uxth	r2, r2
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	f040 817f 	bne.w	8002158 <HAL_I2C_EV_IRQHandler+0x618>
      hi2c->XferCount--;
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e5a:	2904      	cmp	r1, #4
 8001e5c:	d012      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x344>
 8001e5e:	2908      	cmp	r1, #8
 8001e60:	d010      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x344>
 8001e62:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001e66:	d00d      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x344>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001e6e:	6059      	str	r1, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e70:	2311      	movs	r3, #17
 8001e72:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e7e:	f7ff fdc1 	bl	8001a04 <HAL_I2C_MasterTxCpltCallback>
 8001e82:	e1a5      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e8a:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e92:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e94:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	2220      	movs	r2, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
        
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e98:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e9e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
        
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State = HAL_I2C_STATE_READY;
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ea6:	2a40      	cmp	r2, #64	; 0x40
 8001ea8:	d1e9      	bne.n	8001e7e <HAL_I2C_EV_IRQHandler+0x33e>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001eaa:	f7ff fdb1 	bl	8001a10 <HAL_I2C_MemTxCpltCallback>
 8001eae:	e18f      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001eb0:	4d8a      	ldr	r5, [pc, #552]	; (80020dc <HAL_I2C_EV_IRQHandler+0x59c>)
 8001eb2:	400d      	ands	r5, r1
 8001eb4:	2d00      	cmp	r5, #0
 8001eb6:	d032      	beq.n	8001f1e <HAL_I2C_EV_IRQHandler+0x3de>
 8001eb8:	0551      	lsls	r1, r2, #21
 8001eba:	d530      	bpl.n	8001f1e <HAL_I2C_EV_IRQHandler+0x3de>
 8001ebc:	2c00      	cmp	r4, #0
 8001ebe:	d12e      	bne.n	8001f1e <HAL_I2C_EV_IRQHandler+0x3de>
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ec0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001ec4:	2a22      	cmp	r2, #34	; 0x22
 8001ec6:	f040 8183 	bne.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  {
    uint32_t tmp = 0U;
    
    tmp = hi2c->XferCount;
 8001eca:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001ecc:	b292      	uxth	r2, r2
    if(tmp > 3U)
 8001ece:	2a03      	cmp	r2, #3
 8001ed0:	f200 8175 	bhi.w	80021be <HAL_I2C_EV_IRQHandler+0x67e>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferCount--;
    }
    else if((tmp == 2U) || (tmp == 3U))
 8001ed4:	3a02      	subs	r2, #2
 8001ed6:	2a01      	cmp	r2, #1
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	601a      	str	r2, [r3, #0]
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
      hi2c->XferCount--;
    }
    else if((tmp == 2U) || (tmp == 3U))
 8001ee0:	d808      	bhi.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x3b4>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
      
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee8:	601a      	str	r2, [r3, #0]
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	e16d      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    else
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
      
      if(hi2c->XferOptions == I2C_NEXT_FRAME)
 8001ef4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001ef6:	2a02      	cmp	r2, #2
      {
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001ef8:	bf02      	ittt	eq
 8001efa:	681a      	ldreq	r2, [r3, #0]
 8001efc:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8001f00:	601a      	streq	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f08:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f0a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	1c51      	adds	r1, r2, #1
 8001f10:	6241      	str	r1, [r0, #36]	; 0x24
 8001f12:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001f14:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001f1c:	e048      	b.n	8001fb0 <HAL_I2C_EV_IRQHandler+0x470>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
      {
        I2C_MasterReceive_RXNE(hi2c);
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001f1e:	2c00      	cmp	r4, #0
 8001f20:	f000 8156 	beq.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
 8001f24:	0597      	lsls	r7, r2, #22
 8001f26:	f140 8153 	bpl.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f2a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  if(hi2c->XferCount == 3U)
 8001f2c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001f2e:	b289      	uxth	r1, r1
 8001f30:	2903      	cmp	r1, #3
 8001f32:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001f34:	d10b      	bne.n	8001f4e <HAL_I2C_EV_IRQHandler+0x40e>
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f36:	2a04      	cmp	r2, #4
 8001f38:	d004      	beq.n	8001f44 <HAL_I2C_EV_IRQHandler+0x404>
 8001f3a:	2a08      	cmp	r2, #8
 8001f3c:	d002      	beq.n	8001f44 <HAL_I2C_EV_IRQHandler+0x404>
 8001f3e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f42:	d146      	bne.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x492>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e041      	b.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x492>

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
    hi2c->XferCount--;
  }
  else if(hi2c->XferCount == 2U)
 8001f4e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001f50:	b2a4      	uxth	r4, r4
 8001f52:	2c02      	cmp	r4, #2
 8001f54:	d13d      	bne.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x492>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f56:	2a04      	cmp	r2, #4
 8001f58:	d00f      	beq.n	8001f7a <HAL_I2C_EV_IRQHandler+0x43a>
 8001f5a:	2a08      	cmp	r2, #8
 8001f5c:	d00d      	beq.n	8001f7a <HAL_I2C_EV_IRQHandler+0x43a>
 8001f5e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f62:	d00a      	beq.n	8001f7a <HAL_I2C_EV_IRQHandler+0x43a>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f64:	681c      	ldr	r4, [r3, #0]
      
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8001f66:	3a01      	subs	r2, #1
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f68:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
      
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8001f6c:	2a01      	cmp	r2, #1
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f6e:	601c      	str	r4, [r3, #0]
      
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8001f70:	d807      	bhi.n	8001f82 <HAL_I2C_EV_IRQHandler+0x442>
      {
        /* Generate ReStart */
        hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f78:	e002      	b.n	8001f80 <HAL_I2C_EV_IRQHandler+0x440>
      }
    }
    else
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f80:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	1c4a      	adds	r2, r1, #1
 8001f86:	6242      	str	r2, [r0, #36]	; 0x24
 8001f88:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8001f8a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	8543      	strh	r3, [r0, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	6242      	str	r2, [r0, #36]	; 0x24
 8001f98:	6802      	ldr	r2, [r0, #0]
 8001f9a:	6912      	ldr	r2, [r2, #16]
 8001f9c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001f9e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fa0:	6802      	ldr	r2, [r0, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
    hi2c->XferCount--;

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
    hi2c->XferCount--;
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	8543      	strh	r3, [r0, #42]	; 0x2a

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fa8:	6853      	ldr	r3, [r2, #4]
 8001faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6303      	str	r3, [r0, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fba:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->PreviousState = I2C_STATE_NONE;

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fc2:	2a40      	cmp	r2, #64	; 0x40
 8001fc4:	d102      	bne.n	8001fcc <HAL_I2C_EV_IRQHandler+0x48c>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;

      HAL_I2C_MemRxCpltCallback(hi2c);
 8001fc6:	f7ff fd24 	bl	8001a12 <HAL_I2C_MemRxCpltCallback>
 8001fca:	e101      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;

      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fcc:	f7ff fd1b 	bl	8001a06 <HAL_I2C_MasterRxCpltCallback>
 8001fd0:	e0fe      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fd2:	1c4a      	adds	r2, r1, #1
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	6242      	str	r2, [r0, #36]	; 0x24
 8001fd8:	700b      	strb	r3, [r1, #0]
 8001fda:	e0f5      	b.n	80021c8 <HAL_I2C_EV_IRQHandler+0x688>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001fdc:	4c40      	ldr	r4, [pc, #256]	; (80020e0 <HAL_I2C_EV_IRQHandler+0x5a0>)
 8001fde:	400c      	ands	r4, r1
 8001fe0:	b174      	cbz	r4, 8002000 <HAL_I2C_EV_IRQHandler+0x4c0>
 8001fe2:	0596      	lsls	r6, r2, #22
 8001fe4:	d50c      	bpl.n	8002000 <HAL_I2C_EV_IRQHandler+0x4c0>
{
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode = 0U;

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001fe6:	6999      	ldr	r1, [r3, #24]
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001fe8:	699b      	ldr	r3, [r3, #24]
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001fea:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001fee:	061d      	lsls	r5, r3, #24
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001ff0:	f3c1 0180 	ubfx	r1, r1, #2, #1
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001ff4:	bf54      	ite	pl
 8001ff6:	8982      	ldrhpl	r2, [r0, #12]
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001ff8:	8b02      	ldrhmi	r2, [r0, #24]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001ffa:	f7ff fd07 	bl	8001a0c <HAL_I2C_AddrCallback>
 8001ffe:	e0e7      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
    {
      I2C_Slave_ADDR(hi2c);
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002000:	4c38      	ldr	r4, [pc, #224]	; (80020e4 <HAL_I2C_EV_IRQHandler+0x5a4>)
 8002002:	400c      	ands	r4, r1
 8002004:	2c00      	cmp	r4, #0
 8002006:	d071      	beq.n	80020ec <HAL_I2C_EV_IRQHandler+0x5ac>
 8002008:	0594      	lsls	r4, r2, #22
 800200a:	d56f      	bpl.n	80020ec <HAL_I2C_EV_IRQHandler+0x5ac>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800200c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002016:	6059      	str	r1, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002018:	2100      	movs	r1, #0
 800201a:	910b      	str	r1, [sp, #44]	; 0x2c
 800201c:	6959      	ldr	r1, [r3, #20]
 800201e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	f041 0101 	orr.w	r1, r1, #1
 8002026:	6019      	str	r1, [r3, #0]
 8002028:	990b      	ldr	r1, [sp, #44]	; 0x2c

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002030:	6019      	str	r1, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	0509      	lsls	r1, r1, #20
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8002036:	b2d2      	uxtb	r2, r2

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002038:	d50e      	bpl.n	8002058 <HAL_I2C_EV_IRQHandler+0x518>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800203a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800203e:	2922      	cmp	r1, #34	; 0x22
 8002040:	d003      	beq.n	800204a <HAL_I2C_EV_IRQHandler+0x50a>
 8002042:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002046:	292a      	cmp	r1, #42	; 0x2a
 8002048:	d101      	bne.n	800204e <HAL_I2C_EV_IRQHandler+0x50e>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800204a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800204c:	e000      	b.n	8002050 <HAL_I2C_EV_IRQHandler+0x510>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800204e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002050:	6809      	ldr	r1, [r1, #0]
 8002052:	6849      	ldr	r1, [r1, #4]
 8002054:	b289      	uxth	r1, r1
 8002056:	8541      	strh	r1, [r0, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8002058:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800205a:	b289      	uxth	r1, r1
 800205c:	b1e1      	cbz	r1, 8002098 <HAL_I2C_EV_IRQHandler+0x558>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800205e:	6959      	ldr	r1, [r3, #20]
 8002060:	074f      	lsls	r7, r1, #29
 8002062:	d508      	bpl.n	8002076 <HAL_I2C_EV_IRQHandler+0x536>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002064:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	1c4c      	adds	r4, r1, #1
 800206a:	6244      	str	r4, [r0, #36]	; 0x24
 800206c:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 800206e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002070:	3b01      	subs	r3, #1
 8002072:	b29b      	uxth	r3, r3
 8002074:	8543      	strh	r3, [r0, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002076:	6801      	ldr	r1, [r0, #0]
 8002078:	694b      	ldr	r3, [r1, #20]
 800207a:	065e      	lsls	r6, r3, #25
 800207c:	d508      	bpl.n	8002090 <HAL_I2C_EV_IRQHandler+0x550>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800207e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002080:	6909      	ldr	r1, [r1, #16]
 8002082:	1c5c      	adds	r4, r3, #1
 8002084:	6244      	str	r4, [r0, #36]	; 0x24
 8002086:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 8002088:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800208a:	3b01      	subs	r3, #1
 800208c:	b29b      	uxth	r3, r3
 800208e:	8543      	strh	r3, [r0, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002090:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6403      	str	r3, [r0, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002098:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800209a:	b113      	cbz	r3, 80020a2 <HAL_I2C_EV_IRQHandler+0x562>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800209c:	f7ff fcbc 	bl	8001a18 <I2C_ITError>
 80020a0:	e096      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80020a2:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80020a6:	2902      	cmp	r1, #2
 80020a8:	d80a      	bhi.n	80020c0 <HAL_I2C_EV_IRQHandler+0x580>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <HAL_I2C_EV_IRQHandler+0x5a8>)
 80020ac:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	2220      	movs	r2, #32
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
      hi2c->PreviousState = I2C_STATE_NONE;
 80020b0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 80020ba:	f7ff fca8 	bl	8001a0e <HAL_I2C_ListenCpltCallback>
 80020be:	e087      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80020c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80020c2:	2b22      	cmp	r3, #34	; 0x22
 80020c4:	d002      	beq.n	80020cc <HAL_I2C_EV_IRQHandler+0x58c>
 80020c6:	2a22      	cmp	r2, #34	; 0x22
 80020c8:	f040 8082 	bne.w	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80020cc:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	2220      	movs	r2, #32
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80020d0:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80020da:	e067      	b.n	80021ac <HAL_I2C_EV_IRQHandler+0x66c>
 80020dc:	00010040 	.word	0x00010040
 80020e0:	00010002 	.word	0x00010002
 80020e4:	00010010 	.word	0x00010010
 80020e8:	ffff0000 	.word	0xffff0000
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
    {
      I2C_Slave_STOPF(hi2c);
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80020ec:	4e39      	ldr	r6, [pc, #228]	; (80021d4 <HAL_I2C_EV_IRQHandler+0x694>)
 80020ee:	4c3a      	ldr	r4, [pc, #232]	; (80021d8 <HAL_I2C_EV_IRQHandler+0x698>)
 80020f0:	402e      	ands	r6, r5
 80020f2:	400c      	ands	r4, r1
 80020f4:	2e00      	cmp	r6, #0
 80020f6:	d035      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0x624>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80020f8:	4d38      	ldr	r5, [pc, #224]	; (80021dc <HAL_I2C_EV_IRQHandler+0x69c>)
 80020fa:	400d      	ands	r5, r1
 80020fc:	b325      	cbz	r5, 8002148 <HAL_I2C_EV_IRQHandler+0x608>
 80020fe:	0555      	lsls	r5, r2, #21
 8002100:	d522      	bpl.n	8002148 <HAL_I2C_EV_IRQHandler+0x608>
 8002102:	bb0c      	cbnz	r4, 8002148 <HAL_I2C_EV_IRQHandler+0x608>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8002104:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d

  if(hi2c->XferCount != 0U)
 8002108:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800210a:	b292      	uxth	r2, r2
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800210c:	b2c9      	uxtb	r1, r1

  if(hi2c->XferCount != 0U)
 800210e:	2a00      	cmp	r2, #0
 8002110:	d05e      	beq.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002112:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002114:	1c54      	adds	r4, r2, #1
 8002116:	6244      	str	r4, [r0, #36]	; 0x24
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800211c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800211e:	3a01      	subs	r2, #1
 8002120:	b292      	uxth	r2, r2
 8002122:	8542      	strh	r2, [r0, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002124:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002126:	b292      	uxth	r2, r2
 8002128:	2a00      	cmp	r2, #0
 800212a:	d151      	bne.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
 800212c:	2929      	cmp	r1, #41	; 0x29
 800212e:	d14f      	bne.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002138:	2321      	movs	r3, #33	; 0x21
 800213a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800213c:	2328      	movs	r3, #40	; 0x28
 800213e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002142:	f7ff fc61 	bl	8001a08 <HAL_I2C_SlaveTxCpltCallback>
 8002146:	e043      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
      {
        I2C_SlaveTransmit_TXE(hi2c);
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002148:	2c00      	cmp	r4, #0
 800214a:	d041      	beq.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
 800214c:	0594      	lsls	r4, r2, #22
 800214e:	d53f      	bpl.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8002150:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002152:	b292      	uxth	r2, r2
 8002154:	2a00      	cmp	r2, #0
 8002156:	d03b      	beq.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002158:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800215a:	1c51      	adds	r1, r2, #1
 800215c:	6241      	str	r1, [r0, #36]	; 0x24
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e031      	b.n	80021c8 <HAL_I2C_EV_IRQHandler+0x688>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002164:	4d1e      	ldr	r5, [pc, #120]	; (80021e0 <HAL_I2C_EV_IRQHandler+0x6a0>)
 8002166:	400d      	ands	r5, r1
 8002168:	b31d      	cbz	r5, 80021b2 <HAL_I2C_EV_IRQHandler+0x672>
 800216a:	0551      	lsls	r1, r2, #21
 800216c:	d521      	bpl.n	80021b2 <HAL_I2C_EV_IRQHandler+0x672>
 800216e:	bb04      	cbnz	r4, 80021b2 <HAL_I2C_EV_IRQHandler+0x672>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8002170:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  if(hi2c->XferCount != 0U)
 8002174:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002176:	b289      	uxth	r1, r1
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8002178:	b2d2      	uxtb	r2, r2

  if(hi2c->XferCount != 0U)
 800217a:	b349      	cbz	r1, 80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800217c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	1c4c      	adds	r4, r1, #1
 8002182:	6244      	str	r4, [r0, #36]	; 0x24
 8002184:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8002186:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	8543      	strh	r3, [r0, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800218e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	b9eb      	cbnz	r3, 80021d0 <HAL_I2C_EV_IRQHandler+0x690>
 8002194:	2a2a      	cmp	r2, #42	; 0x2a
 8002196:	d11b      	bne.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	6853      	ldr	r3, [r2, #4]
 800219c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021a0:	6053      	str	r3, [r2, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021a2:	2322      	movs	r3, #34	; 0x22
 80021a4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80021a6:	2328      	movs	r3, #40	; 0x28
 80021a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021ac:	f7ff fc2d 	bl	8001a0a <HAL_I2C_SlaveRxCpltCallback>
 80021b0:	e00e      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
      {
        I2C_SlaveReceive_RXNE(hi2c);
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80021b2:	b16c      	cbz	r4, 80021d0 <HAL_I2C_EV_IRQHandler+0x690>
 80021b4:	0592      	lsls	r2, r2, #22
 80021b6:	d50b      	bpl.n	80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 80021b8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80021ba:	b292      	uxth	r2, r2
 80021bc:	b142      	cbz	r2, 80021d0 <HAL_I2C_EV_IRQHandler+0x690>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021be:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	1c51      	adds	r1, r2, #1
 80021c4:	6241      	str	r1, [r0, #36]	; 0x24
 80021c6:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80021c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	8543      	strh	r3, [r0, #42]	; 0x2a
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 80021d0:	b00d      	add	sp, #52	; 0x34
 80021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d4:	00100004 	.word	0x00100004
 80021d8:	00010004 	.word	0x00010004
 80021dc:	00010080 	.word	0x00010080
 80021e0:	00010040 	.word	0x00010040

080021e4 <I2C_DMAAbort>:
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80021e6:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021e8:	6803      	ldr	r3, [r0, #0]

  hi2c->XferCount = 0U;

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80021ea:	6b41      	ldr	r1, [r0, #52]	; 0x34
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f2:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80021f4:	2200      	movs	r2, #0
 80021f6:	8542      	strh	r2, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80021f8:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80021fa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80021fc:	650a      	str	r2, [r1, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80021fe:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002202:	2960      	cmp	r1, #96	; 0x60
 8002204:	f04f 0120 	mov.w	r1, #32
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
  hi2c->hdmarx->XferAbortCallback = NULL;

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002210:	d107      	bne.n	8002222 <I2C_DMAAbort+0x3e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002212:	6402      	str	r2, [r0, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 800221c:	f7ff fbfb 	bl	8001a16 <HAL_I2C_AbortCpltCallback>
 8002220:	bd08      	pop	{r3, pc}
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 800222a:	f7ff fbf3 	bl	8001a14 <HAL_I2C_ErrorCallback>
 800222e:	bd08      	pop	{r3, pc}

08002230 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002230:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002232:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002236:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002238:	07d8      	lsls	r0, r3, #31
 800223a:	d403      	bmi.n	8002244 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	0799      	lsls	r1, r3, #30
 8002240:	d44b      	bmi.n	80022da <HAL_RCC_OscConfig+0xaa>
 8002242:	e09b      	b.n	800237c <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002244:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	f002 020c 	and.w	r2, r2, #12
 800224c:	2a04      	cmp	r2, #4
 800224e:	d007      	beq.n	8002260 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002250:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002252:	f002 020c 	and.w	r2, r2, #12
 8002256:	2a08      	cmp	r2, #8
 8002258:	d10b      	bne.n	8002272 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	025a      	lsls	r2, r3, #9
 800225e:	d508      	bpl.n	8002272 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b85      	ldr	r3, [pc, #532]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	039b      	lsls	r3, r3, #14
 8002266:	d5e9      	bpl.n	800223c <HAL_RCC_OscConfig+0xc>
 8002268:	6863      	ldr	r3, [r4, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1e6      	bne.n	800223c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 800226e:	2001      	movs	r0, #1
 8002270:	e164      	b.n	800253c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	6863      	ldr	r3, [r4, #4]
 8002274:	4d80      	ldr	r5, [pc, #512]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227a:	d006      	beq.n	800228a <HAL_RCC_OscConfig+0x5a>
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x64>
 8002282:	682b      	ldr	r3, [r5, #0]
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	602b      	str	r3, [r5, #0]
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	602b      	str	r3, [r5, #0]
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x76>
 8002294:	682a      	ldr	r2, [r5, #0]
 8002296:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800229a:	602a      	str	r2, [r5, #0]
 800229c:	682a      	ldr	r2, [r5, #0]
 800229e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a2:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a4:	b16b      	cbz	r3, 80022c2 <HAL_RCC_OscConfig+0x92>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fe79 	bl	8000f9c <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4d73      	ldr	r5, [pc, #460]	; (8002478 <HAL_RCC_OscConfig+0x248>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	682b      	ldr	r3, [r5, #0]
 80022b0:	039f      	lsls	r7, r3, #14
 80022b2:	d4c3      	bmi.n	800223c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b4:	f7fe fe72 	bl	8000f9c <HAL_GetTick>
 80022b8:	1b80      	subs	r0, r0, r6
 80022ba:	2864      	cmp	r0, #100	; 0x64
 80022bc:	d9f7      	bls.n	80022ae <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 80022be:	2003      	movs	r0, #3
 80022c0:	e13c      	b.n	800253c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe fe6b 	bl	8000f9c <HAL_GetTick>
 80022c6:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	0398      	lsls	r0, r3, #14
 80022cc:	d5b6      	bpl.n	800223c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ce:	f7fe fe65 	bl	8000f9c <HAL_GetTick>
 80022d2:	1b80      	subs	r0, r0, r6
 80022d4:	2864      	cmp	r0, #100	; 0x64
 80022d6:	d9f7      	bls.n	80022c8 <HAL_RCC_OscConfig+0x98>
 80022d8:	e7f1      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022da:	4b67      	ldr	r3, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	f012 0f0c 	tst.w	r2, #12
 80022e2:	d007      	beq.n	80022f4 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e4:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e6:	f002 020c 	and.w	r2, r2, #12
 80022ea:	2a08      	cmp	r2, #8
 80022ec:	d117      	bne.n	800231e <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0259      	lsls	r1, r3, #9
 80022f2:	d414      	bmi.n	800231e <HAL_RCC_OscConfig+0xee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f4:	4b60      	ldr	r3, [pc, #384]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	0792      	lsls	r2, r2, #30
 80022fa:	d502      	bpl.n	8002302 <HAL_RCC_OscConfig+0xd2>
 80022fc:	68e2      	ldr	r2, [r4, #12]
 80022fe:	2a01      	cmp	r2, #1
 8002300:	d1b5      	bne.n	800226e <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	21f8      	movs	r1, #248	; 0xf8
 8002306:	fa91 f1a1 	rbit	r1, r1
 800230a:	6920      	ldr	r0, [r4, #16]
 800230c:	fab1 f181 	clz	r1, r1
 8002310:	fa00 f101 	lsl.w	r1, r0, r1
 8002314:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002318:	430a      	orrs	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231c:	e02e      	b.n	800237c <HAL_RCC_OscConfig+0x14c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800231e:	68e2      	ldr	r2, [r4, #12]
 8002320:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_RCC_OscConfig+0x24c>)
 8002322:	b1ea      	cbz	r2, 8002360 <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fe38 	bl	8000f9c <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4d52      	ldr	r5, [pc, #328]	; (8002478 <HAL_RCC_OscConfig+0x248>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	682b      	ldr	r3, [r5, #0]
 8002332:	4851      	ldr	r0, [pc, #324]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002334:	079b      	lsls	r3, r3, #30
 8002336:	d405      	bmi.n	8002344 <HAL_RCC_OscConfig+0x114>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002338:	f7fe fe30 	bl	8000f9c <HAL_GetTick>
 800233c:	1b80      	subs	r0, r0, r6
 800233e:	2802      	cmp	r0, #2
 8002340:	d9f6      	bls.n	8002330 <HAL_RCC_OscConfig+0x100>
 8002342:	e7bc      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	6803      	ldr	r3, [r0, #0]
 8002346:	22f8      	movs	r2, #248	; 0xf8
 8002348:	fa92 f2a2 	rbit	r2, r2
 800234c:	6921      	ldr	r1, [r4, #16]
 800234e:	fab2 f282 	clz	r2, r2
 8002352:	fa01 f202 	lsl.w	r2, r1, r2
 8002356:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800235a:	4313      	orrs	r3, r2
 800235c:	6003      	str	r3, [r0, #0]
 800235e:	e00d      	b.n	800237c <HAL_RCC_OscConfig+0x14c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fe1b 	bl	8000f9c <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4d44      	ldr	r5, [pc, #272]	; (8002478 <HAL_RCC_OscConfig+0x248>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	682b      	ldr	r3, [r5, #0]
 800236c:	079f      	lsls	r7, r3, #30
 800236e:	d505      	bpl.n	800237c <HAL_RCC_OscConfig+0x14c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002370:	f7fe fe14 	bl	8000f9c <HAL_GetTick>
 8002374:	1b80      	subs	r0, r0, r6
 8002376:	2802      	cmp	r0, #2
 8002378:	d9f7      	bls.n	800236a <HAL_RCC_OscConfig+0x13a>
 800237a:	e7a0      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	071e      	lsls	r6, r3, #28
 8002380:	d403      	bmi.n	800238a <HAL_RCC_OscConfig+0x15a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	075d      	lsls	r5, r3, #29
 8002386:	d548      	bpl.n	800241a <HAL_RCC_OscConfig+0x1ea>
 8002388:	e01f      	b.n	80023ca <HAL_RCC_OscConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800238a:	6962      	ldr	r2, [r4, #20]
 800238c:	4b3c      	ldr	r3, [pc, #240]	; (8002480 <HAL_RCC_OscConfig+0x250>)
 800238e:	b172      	cbz	r2, 80023ae <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7fe fe02 	bl	8000f9c <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002398:	4d37      	ldr	r5, [pc, #220]	; (8002478 <HAL_RCC_OscConfig+0x248>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800239e:	0798      	lsls	r0, r3, #30
 80023a0:	d4ef      	bmi.n	8002382 <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a2:	f7fe fdfb 	bl	8000f9c <HAL_GetTick>
 80023a6:	1b80      	subs	r0, r0, r6
 80023a8:	2802      	cmp	r0, #2
 80023aa:	d9f7      	bls.n	800239c <HAL_RCC_OscConfig+0x16c>
 80023ac:	e787      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ae:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe fdf4 	bl	8000f9c <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	4d30      	ldr	r5, [pc, #192]	; (8002478 <HAL_RCC_OscConfig+0x248>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023ba:	0799      	lsls	r1, r3, #30
 80023bc:	d5e1      	bpl.n	8002382 <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023be:	f7fe fded 	bl	8000f9c <HAL_GetTick>
 80023c2:	1b80      	subs	r0, r0, r6
 80023c4:	2802      	cmp	r0, #2
 80023c6:	d9f7      	bls.n	80023b8 <HAL_RCC_OscConfig+0x188>
 80023c8:	e779      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_RCC_OscConfig+0x248>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023d0:	4d2c      	ldr	r5, [pc, #176]	; (8002484 <HAL_RCC_OscConfig+0x254>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ea:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fdd6 	bl	8000f9c <HAL_GetTick>
 80023f0:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	05da      	lsls	r2, r3, #23
 80023f6:	d513      	bpl.n	8002420 <HAL_RCC_OscConfig+0x1f0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	68a3      	ldr	r3, [r4, #8]
 80023fa:	4d1f      	ldr	r5, [pc, #124]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d115      	bne.n	800242c <HAL_RCC_OscConfig+0x1fc>
 8002400:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fdc8 	bl	8000f9c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	4d1a      	ldr	r5, [pc, #104]	; (8002478 <HAL_RCC_OscConfig+0x248>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002416:	079b      	lsls	r3, r3, #30
 8002418:	d519      	bpl.n	800244e <HAL_RCC_OscConfig+0x21e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	69a2      	ldr	r2, [r4, #24]
 800241c:	bba2      	cbnz	r2, 8002488 <HAL_RCC_OscConfig+0x258>
 800241e:	e072      	b.n	8002506 <HAL_RCC_OscConfig+0x2d6>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002420:	f7fe fdbc 	bl	8000f9c <HAL_GetTick>
 8002424:	1b80      	subs	r0, r0, r6
 8002426:	2802      	cmp	r0, #2
 8002428:	d9e3      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1c2>
 800242a:	e748      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	2b05      	cmp	r3, #5
 800242e:	d104      	bne.n	800243a <HAL_RCC_OscConfig+0x20a>
 8002430:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	672b      	str	r3, [r5, #112]	; 0x70
 8002438:	e7e2      	b.n	8002400 <HAL_RCC_OscConfig+0x1d0>
 800243a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	672a      	str	r2, [r5, #112]	; 0x70
 8002442:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002444:	f022 0204 	bic.w	r2, r2, #4
 8002448:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800244a:	b133      	cbz	r3, 800245a <HAL_RCC_OscConfig+0x22a>
 800244c:	e7dc      	b.n	8002408 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fda5 	bl	8000f9c <HAL_GetTick>
 8002452:	1b80      	subs	r0, r0, r6
 8002454:	42b8      	cmp	r0, r7
 8002456:	d9dd      	bls.n	8002414 <HAL_RCC_OscConfig+0x1e4>
 8002458:	e731      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe fd9f 	bl	8000f9c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002466:	0798      	lsls	r0, r3, #30
 8002468:	d5d7      	bpl.n	800241a <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fd97 	bl	8000f9c <HAL_GetTick>
 800246e:	1b80      	subs	r0, r0, r6
 8002470:	42b8      	cmp	r0, r7
 8002472:	d9f7      	bls.n	8002464 <HAL_RCC_OscConfig+0x234>
 8002474:	e723      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	42470000 	.word	0x42470000
 8002480:	42470e80 	.word	0x42470e80
 8002484:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002488:	4d2e      	ldr	r5, [pc, #184]	; (8002544 <HAL_RCC_OscConfig+0x314>)
 800248a:	68ab      	ldr	r3, [r5, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	f43f aeec 	beq.w	800226e <HAL_RCC_OscConfig+0x3e>
 8002496:	4e2c      	ldr	r6, [pc, #176]	; (8002548 <HAL_RCC_OscConfig+0x318>)
 8002498:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249a:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249e:	d141      	bne.n	8002524 <HAL_RCC_OscConfig+0x2f4>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd7c 	bl	8000f9c <HAL_GetTick>
 80024a4:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	682b      	ldr	r3, [r5, #0]
 80024a8:	4f26      	ldr	r7, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x314>)
 80024aa:	0199      	lsls	r1, r3, #6
 80024ac:	d42d      	bmi.n	800250a <HAL_RCC_OscConfig+0x2da>
 80024ae:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80024b2:	fa92 f2a2 	rbit	r2, r2
 80024b6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ba:	fab2 fe82 	clz	lr, r2
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80024c6:	fab3 f583 	clz	r5, r3
 80024ca:	fa92 f2a2 	rbit	r2, r2
 80024ce:	69e0      	ldr	r0, [r4, #28]
 80024d0:	6a23      	ldr	r3, [r4, #32]
 80024d2:	fab2 f182 	clz	r1, r2
 80024d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024d8:	4303      	orrs	r3, r0
 80024da:	fa02 f20e 	lsl.w	r2, r2, lr
 80024de:	ea43 0002 	orr.w	r0, r3, r2
 80024e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024e4:	085a      	lsrs	r2, r3, #1
 80024e6:	3a01      	subs	r2, #1
 80024e8:	fa02 f305 	lsl.w	r3, r2, r5
 80024ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024ee:	4303      	orrs	r3, r0
 80024f0:	408a      	lsls	r2, r1
 80024f2:	4313      	orrs	r3, r2
 80024f4:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f6:	2301      	movs	r3, #1
 80024f8:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fd4f 	bl	8000f9c <HAL_GetTick>
 80024fe:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	019a      	lsls	r2, r3, #6
 8002504:	d508      	bpl.n	8002518 <HAL_RCC_OscConfig+0x2e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002506:	2000      	movs	r0, #0
 8002508:	e018      	b.n	800253c <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe fd47 	bl	8000f9c <HAL_GetTick>
 800250e:	ebc8 0000 	rsb	r0, r8, r0
 8002512:	2802      	cmp	r0, #2
 8002514:	d9c7      	bls.n	80024a6 <HAL_RCC_OscConfig+0x276>
 8002516:	e6d2      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fd40 	bl	8000f9c <HAL_GetTick>
 800251c:	1b00      	subs	r0, r0, r4
 800251e:	2802      	cmp	r0, #2
 8002520:	d9ee      	bls.n	8002500 <HAL_RCC_OscConfig+0x2d0>
 8002522:	e6cc      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fd3a 	bl	8000f9c <HAL_GetTick>
 8002528:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	682b      	ldr	r3, [r5, #0]
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	d5ea      	bpl.n	8002506 <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fd34 	bl	8000f9c <HAL_GetTick>
 8002534:	1b00      	subs	r0, r0, r4
 8002536:	2802      	cmp	r0, #2
 8002538:	d9f7      	bls.n	800252a <HAL_RCC_OscConfig+0x2fa>
 800253a:	e6c0      	b.n	80022be <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800253c:	b002      	add	sp, #8
 800253e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	42470060 	.word	0x42470060

0800254c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254c:	491b      	ldr	r1, [pc, #108]	; (80025bc <HAL_RCC_GetSysClockFreq+0x70>)
 800254e:	688b      	ldr	r3, [r1, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b04      	cmp	r3, #4
 8002556:	d02c      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x66>
 8002558:	2b08      	cmp	r3, #8
 800255a:	d12c      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800255c:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255e:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002564:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002568:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800256c:	684b      	ldr	r3, [r1, #4]
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002576:	fab2 f282 	clz	r2, r2
 800257a:	ea01 0103 	and.w	r1, r1, r3
 800257e:	fa21 f102 	lsr.w	r1, r1, r2
 8002582:	bf14      	ite	ne
 8002584:	4a0e      	ldrne	r2, [pc, #56]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002586:	4a0f      	ldreq	r2, [pc, #60]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002588:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800258c:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800258e:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002592:	6852      	ldr	r2, [r2, #4]
 8002594:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002598:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 800259c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80025a0:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80025a4:	fa22 f000 	lsr.w	r0, r2, r0
 80025a8:	3001      	adds	r0, #1
 80025aa:	0040      	lsls	r0, r0, #1
 80025ac:	fbb3 f0f0 	udiv	r0, r3, r0
 80025b0:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b2:	4803      	ldr	r0, [pc, #12]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x74>)
 80025b4:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b6:	4803      	ldr	r0, [pc, #12]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	007a1200 	.word	0x007a1200
 80025c4:	00f42400 	.word	0x00f42400

080025c8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025c8:	4b55      	ldr	r3, [pc, #340]	; (8002720 <HAL_RCC_ClockConfig+0x158>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f002 020f 	and.w	r2, r2, #15
 80025d0:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d6:	4605      	mov	r5, r0
 80025d8:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025da:	d30a      	bcc.n	80025f2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	6829      	ldr	r1, [r5, #0]
 80025de:	0788      	lsls	r0, r1, #30
 80025e0:	d511      	bpl.n	8002606 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4850      	ldr	r0, [pc, #320]	; (8002724 <HAL_RCC_ClockConfig+0x15c>)
 80025e4:	6883      	ldr	r3, [r0, #8]
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ea:	68ab      	ldr	r3, [r5, #8]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	6083      	str	r3, [r0, #8]
 80025f0:	e009      	b.n	8002606 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	4299      	cmp	r1, r3
 80025fe:	d0ed      	beq.n	80025dc <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8002600:	2001      	movs	r0, #1
 8002602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	07c9      	lsls	r1, r1, #31
 8002608:	d406      	bmi.n	8002618 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800260a:	4b45      	ldr	r3, [pc, #276]	; (8002720 <HAL_RCC_ClockConfig+0x158>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	f002 020f 	and.w	r2, r2, #15
 8002612:	4296      	cmp	r6, r2
 8002614:	d351      	bcc.n	80026ba <HAL_RCC_ClockConfig+0xf2>
 8002616:	e057      	b.n	80026c8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002618:	686b      	ldr	r3, [r5, #4]
 800261a:	4a42      	ldr	r2, [pc, #264]	; (8002724 <HAL_RCC_ClockConfig+0x15c>)
 800261c:	2b01      	cmp	r3, #1
 800261e:	d103      	bne.n	8002628 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002626:	e008      	b.n	800263a <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002628:	1e99      	subs	r1, r3, #2
 800262a:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262c:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800262e:	d802      	bhi.n	8002636 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002634:	e001      	b.n	800263a <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	f012 0f02 	tst.w	r2, #2
 800263a:	d0e1      	beq.n	8002600 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263c:	4c39      	ldr	r4, [pc, #228]	; (8002724 <HAL_RCC_ClockConfig+0x15c>)
 800263e:	68a2      	ldr	r2, [r4, #8]
 8002640:	f022 0203 	bic.w	r2, r2, #3
 8002644:	4313      	orrs	r3, r2
 8002646:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe fca8 	bl	8000f9c <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264c:	686b      	ldr	r3, [r5, #4]
 800264e:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002650:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002652:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002658:	68a3      	ldr	r3, [r4, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b04      	cmp	r3, #4
 8002660:	d0d3      	beq.n	800260a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002662:	f7fe fc9b 	bl	8000f9c <HAL_GetTick>
 8002666:	1bc0      	subs	r0, r0, r7
 8002668:	4540      	cmp	r0, r8
 800266a:	d9f5      	bls.n	8002658 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 800266c:	2003      	movs	r0, #3
 800266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002672:	2b02      	cmp	r3, #2
 8002674:	d10a      	bne.n	800268c <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002676:	68a3      	ldr	r3, [r4, #8]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d0c4      	beq.n	800260a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe fc8c 	bl	8000f9c <HAL_GetTick>
 8002684:	1bc0      	subs	r0, r0, r7
 8002686:	4540      	cmp	r0, r8
 8002688:	d9f5      	bls.n	8002676 <HAL_RCC_ClockConfig+0xae>
 800268a:	e7ef      	b.n	800266c <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800268c:	2b03      	cmp	r3, #3
 800268e:	d10f      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002690:	68a3      	ldr	r3, [r4, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d0b7      	beq.n	800260a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269a:	f7fe fc7f 	bl	8000f9c <HAL_GetTick>
 800269e:	1bc0      	subs	r0, r0, r7
 80026a0:	4540      	cmp	r0, r8
 80026a2:	d9f5      	bls.n	8002690 <HAL_RCC_ClockConfig+0xc8>
 80026a4:	e7e2      	b.n	800266c <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a6:	f7fe fc79 	bl	8000f9c <HAL_GetTick>
 80026aa:	1bc0      	subs	r0, r0, r7
 80026ac:	4540      	cmp	r0, r8
 80026ae:	d8dd      	bhi.n	800266c <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b0:	68a3      	ldr	r3, [r4, #8]
 80026b2:	f013 0f0c 	tst.w	r3, #12
 80026b6:	d1f6      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
 80026b8:	e7a7      	b.n	800260a <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	b2f2      	uxtb	r2, r6
 80026bc:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	429e      	cmp	r6, r3
 80026c6:	d19b      	bne.n	8002600 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	6829      	ldr	r1, [r5, #0]
 80026ca:	074a      	lsls	r2, r1, #29
 80026cc:	d506      	bpl.n	80026dc <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ce:	4815      	ldr	r0, [pc, #84]	; (8002724 <HAL_RCC_ClockConfig+0x15c>)
 80026d0:	6883      	ldr	r3, [r0, #8]
 80026d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d6:	68eb      	ldr	r3, [r5, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	070b      	lsls	r3, r1, #28
 80026de:	d507      	bpl.n	80026f0 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e0:	4a10      	ldr	r2, [pc, #64]	; (8002724 <HAL_RCC_ClockConfig+0x15c>)
 80026e2:	6929      	ldr	r1, [r5, #16]
 80026e4:	6893      	ldr	r3, [r2, #8]
 80026e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026ee:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80026f0:	f7ff ff2c 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x15c>)
 80026f6:	22f0      	movs	r2, #240	; 0xf0
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	fa92 f2a2 	rbit	r2, r2
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002706:	40d3      	lsrs	r3, r2
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_RCC_ClockConfig+0x160>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	40d8      	lsrs	r0, r3
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_RCC_ClockConfig+0x164>)
 8002710:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002712:	2000      	movs	r0, #0
 8002714:	f002 fa42 	bl	8004b9c <HAL_InitTick>
  
  return HAL_OK;
 8002718:	2000      	movs	r0, #0
}
 800271a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800271e:	bf00      	nop
 8002720:	40023c00 	.word	0x40023c00
 8002724:	40023800 	.word	0x40023800
 8002728:	0800a142 	.word	0x0800a142
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002730:	4b01      	ldr	r3, [pc, #4]	; (8002738 <HAL_RCC_GetHCLKFreq+0x8>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	fa92 f2a2 	rbit	r2, r2
 8002748:	fab2 f282 	clz	r2, r2
 800274c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002750:	40d3      	lsrs	r3, r2
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002758:	6810      	ldr	r0, [r2, #0]
}
 800275a:	40d8      	lsrs	r0, r3
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	0800a152 	.word	0x0800a152
 8002768:	20000004 	.word	0x20000004

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002780:	40d3      	lsrs	r3, r2
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002788:	6810      	ldr	r0, [r2, #0]
} 
 800278a:	40d8      	lsrs	r0, r3
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	0800a152 	.word	0x0800a152
 8002798:	20000004 	.word	0x20000004

0800279c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800279c:	230f      	movs	r3, #15
 800279e:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_GetClockConfig+0x34>)
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	f002 0203 	and.w	r2, r2, #3
 80027a8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80027b0:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80027b8:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80027c2:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_RCC_GetClockConfig+0x38>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	600b      	str	r3, [r1, #0]
 80027ce:	4770      	bx	lr
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40023c00 	.word	0x40023c00

080027d8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027d8:	6803      	ldr	r3, [r0, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80027ea:	2000      	movs	r0, #0
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_OnePulse_MspInit>:
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_OC_DelayElapsedCallback>:
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIM_IC_CaptureCallback>:
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80027f4:	4770      	bx	lr

080027f6 <HAL_TIM_TriggerCallback>:
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027f8:	6803      	ldr	r3, [r0, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027fe:	b510      	push	{r4, lr}
 8002800:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002802:	d514      	bpl.n	800282e <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	0792      	lsls	r2, r2, #30
 8002808:	d511      	bpl.n	800282e <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800280a:	f06f 0202 	mvn.w	r2, #2
 800280e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002810:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002812:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002814:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002816:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002818:	d002      	beq.n	8002820 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800281a:	f7ff ffea 	bl	80027f2 <HAL_TIM_IC_CaptureCallback>
 800281e:	e004      	b.n	800282a <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002820:	f7ff ffe6 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ffe5 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	2300      	movs	r3, #0
 800282c:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	0750      	lsls	r0, r2, #29
 8002834:	d516      	bpl.n	8002864 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	0751      	lsls	r1, r2, #29
 800283a:	d513      	bpl.n	8002864 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800283c:	f06f 0204 	mvn.w	r2, #4
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002842:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002844:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002846:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800284a:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800284c:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800284e:	d002      	beq.n	8002856 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002850:	f7ff ffcf 	bl	80027f2 <HAL_TIM_IC_CaptureCallback>
 8002854:	e004      	b.n	8002860 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	f7ff ffcb 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff ffca 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002860:	2300      	movs	r3, #0
 8002862:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	0712      	lsls	r2, r2, #28
 800286a:	d515      	bpl.n	8002898 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	0710      	lsls	r0, r2, #28
 8002870:	d512      	bpl.n	8002898 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002872:	f06f 0208 	mvn.w	r2, #8
 8002876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002878:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800287a:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287c:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800287e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002880:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002882:	d002      	beq.n	800288a <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002884:	f7ff ffb5 	bl	80027f2 <HAL_TIM_IC_CaptureCallback>
 8002888:	e004      	b.n	8002894 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	f7ff ffb1 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff ffb0 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002894:	2300      	movs	r3, #0
 8002896:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	06d2      	lsls	r2, r2, #27
 800289e:	d516      	bpl.n	80028ce <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	06d0      	lsls	r0, r2, #27
 80028a4:	d513      	bpl.n	80028ce <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028a6:	f06f 0210 	mvn.w	r2, #16
 80028aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ac:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ae:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b0:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b4:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b8:	d002      	beq.n	80028c0 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80028ba:	f7ff ff9a 	bl	80027f2 <HAL_TIM_IC_CaptureCallback>
 80028be:	e004      	b.n	80028ca <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c0:	f7ff ff96 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7ff ff95 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	2300      	movs	r3, #0
 80028cc:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	07d1      	lsls	r1, r2, #31
 80028d4:	d508      	bpl.n	80028e8 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	07d2      	lsls	r2, r2, #31
 80028da:	d505      	bpl.n	80028e8 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028dc:	f06f 0201 	mvn.w	r2, #1
 80028e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e2:	4620      	mov	r0, r4
 80028e4:	f002 f91e 	bl	8004b24 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	0610      	lsls	r0, r2, #24
 80028ee:	d508      	bpl.n	8002902 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	0611      	lsls	r1, r2, #24
 80028f4:	d505      	bpl.n	8002902 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80028fc:	4620      	mov	r0, r4
 80028fe:	f000 f9c0 	bl	8002c82 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	0652      	lsls	r2, r2, #25
 8002908:	d508      	bpl.n	800291c <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	0650      	lsls	r0, r2, #25
 800290e:	d505      	bpl.n	800291c <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002910:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002914:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff ff6d 	bl	80027f6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	0691      	lsls	r1, r2, #26
 8002922:	d50a      	bpl.n	800293a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	0692      	lsls	r2, r2, #26
 8002928:	d507      	bpl.n	800293a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800292a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800292e:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002930:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8002932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8002936:	f000 b9a3 	b.w	8002c80 <HAL_TIMEx_CommutationCallback>
 800293a:	bd10      	pop	{r4, pc}

0800293c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800293c:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800293e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002940:	4290      	cmp	r0, r2
 8002942:	d012      	beq.n	800296a <TIM_Base_SetConfig+0x2e>
 8002944:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002948:	d00f      	beq.n	800296a <TIM_Base_SetConfig+0x2e>
 800294a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800294e:	4290      	cmp	r0, r2
 8002950:	d00b      	beq.n	800296a <TIM_Base_SetConfig+0x2e>
 8002952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002956:	4290      	cmp	r0, r2
 8002958:	d007      	beq.n	800296a <TIM_Base_SetConfig+0x2e>
 800295a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295e:	4290      	cmp	r0, r2
 8002960:	d003      	beq.n	800296a <TIM_Base_SetConfig+0x2e>
 8002962:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002966:	4290      	cmp	r0, r2
 8002968:	d118      	bne.n	800299c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800296a:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002970:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <TIM_Base_SetConfig+0xbc>)
 8002974:	4290      	cmp	r0, r2
 8002976:	d037      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 8002978:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800297c:	d034      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 800297e:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <TIM_Base_SetConfig+0xc0>)
 8002980:	4290      	cmp	r0, r2
 8002982:	d031      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 8002984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002988:	4290      	cmp	r0, r2
 800298a:	d02d      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 800298c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002990:	4290      	cmp	r0, r2
 8002992:	d029      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 8002994:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002998:	4290      	cmp	r0, r2
 800299a:	d025      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 800299c:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <TIM_Base_SetConfig+0xc4>)
 800299e:	4290      	cmp	r0, r2
 80029a0:	d022      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 80029a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029a6:	4290      	cmp	r0, r2
 80029a8:	d01e      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 80029aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ae:	4290      	cmp	r0, r2
 80029b0:	d01a      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 80029b2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80029b6:	4290      	cmp	r0, r2
 80029b8:	d016      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 80029ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029be:	4290      	cmp	r0, r2
 80029c0:	d012      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
 80029c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029c6:	4290      	cmp	r0, r2
 80029c8:	d00e      	beq.n	80029e8 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80029ca:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029cc:	688b      	ldr	r3, [r1, #8]
 80029ce:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80029d0:	680b      	ldr	r3, [r1, #0]
 80029d2:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <TIM_Base_SetConfig+0xbc>)
 80029d6:	4298      	cmp	r0, r3
 80029d8:	d00b      	beq.n	80029f2 <TIM_Base_SetConfig+0xb6>
 80029da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029de:	4298      	cmp	r0, r3
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e2:	2301      	movs	r3, #1
 80029e4:	6143      	str	r3, [r0, #20]
}
 80029e6:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e8:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ee:	4313      	orrs	r3, r2
 80029f0:	e7eb      	b.n	80029ca <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f2:	690b      	ldr	r3, [r1, #16]
 80029f4:	6303      	str	r3, [r0, #48]	; 0x30
 80029f6:	e7f4      	b.n	80029e2 <TIM_Base_SetConfig+0xa6>
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40014000 	.word	0x40014000

08002a04 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002a04:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002a06:	4604      	mov	r4, r0
 8002a08:	b1a0      	cbz	r0, 8002a34 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a0a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a12:	b91b      	cbnz	r3, 8002a1c <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a14:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a18:	f002 f9dc 	bl	8004dd4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	1d21      	adds	r1, r4, #4
 8002a26:	f7ff ff89 	bl	800293c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002a30:	2000      	movs	r0, #0
 8002a32:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002a36:	bd10      	pop	{r4, pc}

08002a38 <HAL_TIM_IC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a38:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	b1a0      	cbz	r0, 8002a68 <HAL_TIM_IC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a46:	b91b      	cbnz	r3, 8002a50 <HAL_TIM_IC_Init+0x18>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a48:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a4c:	f002 f998 	bl	8004d80 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002a50:	2302      	movs	r3, #2
 8002a52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	1d21      	adds	r1, r4, #4
 8002a5a:	f7ff ff6f 	bl	800293c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002a64:	2000      	movs	r0, #0
 8002a66:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002a68:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002a6a:	bd10      	pop	{r4, pc}

08002a6c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	460d      	mov	r5, r1
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002a70:	4604      	mov	r4, r0
 8002a72:	b1e0      	cbz	r0, 8002aae <HAL_TIM_OnePulse_Init+0x42>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a74:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a7c:	b91b      	cbnz	r3, 8002a86 <HAL_TIM_OnePulse_Init+0x1a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002a82:	f7ff feb4 	bl	80027ee <HAL_TIM_OnePulse_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002a86:	2302      	movs	r3, #2
 8002a88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8c:	6820      	ldr	r0, [r4, #0]
 8002a8e:	1d21      	adds	r1, r4, #4
 8002a90:	f7ff ff54 	bl	800293c <TIM_Base_SetConfig>
  
  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f022 0208 	bic.w	r2, r2, #8
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4315      	orrs	r5, r2
 8002aa2:	601d      	str	r5, [r3, #0]
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002aaa:	2000      	movs	r0, #0
 8002aac:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002aae:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002ab0:	bd38      	pop	{r3, r4, r5, pc}
	...

08002ab4 <TIM_TI1_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ab4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab6:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ab8:	4e1a      	ldr	r6, [pc, #104]	; (8002b24 <TIM_TI1_SetConfig+0x70>)
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	f024 0401 	bic.w	r4, r4, #1
 8002abe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002ac2:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ac4:	42b0      	cmp	r0, r6
 8002ac6:	f024 0403 	bic.w	r4, r4, #3
 8002aca:	d01a      	beq.n	8002b02 <TIM_TI1_SetConfig+0x4e>
 8002acc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ad0:	d017      	beq.n	8002b02 <TIM_TI1_SetConfig+0x4e>
 8002ad2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8002ad6:	42b0      	cmp	r0, r6
 8002ad8:	d013      	beq.n	8002b02 <TIM_TI1_SetConfig+0x4e>
 8002ada:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ade:	42b0      	cmp	r0, r6
 8002ae0:	d00f      	beq.n	8002b02 <TIM_TI1_SetConfig+0x4e>
 8002ae2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ae6:	42b0      	cmp	r0, r6
 8002ae8:	d00b      	beq.n	8002b02 <TIM_TI1_SetConfig+0x4e>
 8002aea:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002aee:	42b0      	cmp	r0, r6
 8002af0:	d007      	beq.n	8002b02 <TIM_TI1_SetConfig+0x4e>
 8002af2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002af6:	42b0      	cmp	r0, r6
 8002af8:	d003      	beq.n	8002b02 <TIM_TI1_SetConfig+0x4e>
 8002afa:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002afe:	42b0      	cmp	r0, r6
 8002b00:	d10d      	bne.n	8002b1e <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
 8002b02:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b04:	011b      	lsls	r3, r3, #4
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b0a:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b10:	f001 010a 	and.w	r1, r1, #10
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b14:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b16:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b18:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b1a:	6205      	str	r5, [r0, #32]
}
 8002b1c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_ICSelection;
  } 
  else
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b1e:	f044 0201 	orr.w	r2, r4, #1
 8002b22:	e7ef      	b.n	8002b04 <TIM_TI1_SetConfig+0x50>
 8002b24:	40010000 	.word	0x40010000

08002b28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8002b2a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b2e:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002b30:	4605      	mov	r5, r0
 8002b32:	460c      	mov	r4, r1
 8002b34:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8002b38:	d07f      	beq.n	8002c3a <HAL_TIM_IC_ConfigChannel+0x112>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
  
  if (Channel == TIM_CHANNEL_1)
 8002b44:	b972      	cbnz	r2, 8002b64 <HAL_TIM_IC_ConfigChannel+0x3c>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b46:	68cb      	ldr	r3, [r1, #12]
 8002b48:	6828      	ldr	r0, [r5, #0]
 8002b4a:	c906      	ldmia	r1, {r1, r2}
 8002b4c:	f7ff ffb2 	bl	8002ab4 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	f022 020c 	bic.w	r2, r2, #12
 8002b58:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b5a:	6999      	ldr	r1, [r3, #24]
 8002b5c:	68a2      	ldr	r2, [r4, #8]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	619a      	str	r2, [r3, #24]
 8002b62:	e064      	b.n	8002c2e <HAL_TIM_IC_ConfigChannel+0x106>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b64:	2a04      	cmp	r2, #4
 8002b66:	688e      	ldr	r6, [r1, #8]
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	68e0      	ldr	r0, [r4, #12]
 8002b6c:	e891 4002 	ldmia.w	r1, {r1, lr}
 8002b70:	d11f      	bne.n	8002bb2 <HAL_TIM_IC_ConfigChannel+0x8a>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	f022 0210 	bic.w	r2, r2, #16
 8002b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7a:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8002b7c:	6a1f      	ldr	r7, [r3, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b7e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b82:	ea44 220e 	orr.w	r2, r4, lr, lsl #8
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b86:	0300      	lsls	r0, r0, #12
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b88:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b8c:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b8e:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b90:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b92:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b96:	f027 02a0 	bic.w	r2, r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b9a:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b9c:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9e:	6219      	str	r1, [r3, #32]
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ba6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002bae:	619e      	str	r6, [r3, #24]
 8002bb0:	e03d      	b.n	8002c2e <HAL_TIM_IC_ConfigChannel+0x106>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002bb2:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
  }
  else if (Channel == TIM_CHANNEL_3)
 8002bb6:	d11c      	bne.n	8002bf2 <HAL_TIM_IC_ConfigChannel+0xca>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bbe:	69dc      	ldr	r4, [r3, #28]
  tmpccer = TIMx->CCER;
 8002bc0:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002bc2:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8002bc6:	ea4e 0204 	orr.w	r2, lr, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bca:	0100      	lsls	r0, r0, #4
  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002bcc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bd0:	b2c0      	uxtb	r0, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002bd2:	0209      	lsls	r1, r1, #8
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bd4:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002bd6:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002bda:	f427 6220 	bic.w	r2, r7, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002bde:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002be0:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer;
 8002be2:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	f022 020c 	bic.w	r2, r2, #12
 8002bea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	4316      	orrs	r6, r2
 8002bf0:	e01c      	b.n	8002c2c <HAL_TIM_IC_ConfigChannel+0x104>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bf6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bf8:	69dc      	ldr	r4, [r3, #28]
  tmpccer = TIMx->CCER;
 8002bfa:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002bfc:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c00:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c04:	0300      	lsls	r0, r0, #12
  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c06:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c0a:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c0c:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c0e:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c10:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c14:	f427 4220 	bic.w	r2, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c18:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c1a:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c1c:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002c2c:	61de      	str	r6, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002c2e:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8002c30:	2000      	movs	r0, #0

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002c32:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002c36:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  
  return HAL_OK; 
}
 8002c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c3c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002c3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c40:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c42:	b510      	push	{r4, lr}
 8002c44:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002c48:	d018      	beq.n	8002c7c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002c4e:	6803      	ldr	r3, [r0, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c56:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002c58:	685c      	ldr	r4, [r3, #4]
 8002c5a:	680a      	ldr	r2, [r1, #0]
 8002c5c:	4322      	orrs	r2, r4
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c66:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002c68:	689c      	ldr	r4, [r3, #8]
 8002c6a:	684a      	ldr	r2, [r1, #4]
 8002c6c:	4322      	orrs	r2, r4
 8002c6e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002c76:	2300      	movs	r3, #0
 8002c78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002c7c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8002c7e:	bd10      	pop	{r4, pc}

08002c80 <HAL_TIMEx_CommutationCallback>:
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	4770      	bx	lr

08002c84 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c84:	6803      	ldr	r3, [r0, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c8c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c96:	2320      	movs	r3, #32
 8002c98:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002c9c:	4770      	bx	lr
	...

08002ca0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002ca4:	6807      	ldr	r7, [r0, #0]
 8002ca6:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002caa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002cae:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cb0:	68a1      	ldr	r1, [r4, #8]
 8002cb2:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002cb4:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cb6:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002cb8:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cbc:	4311      	orrs	r1, r2
 8002cbe:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002cc0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002cc8:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ccc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002cd0:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002cd6:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002cdc:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	4b7c      	ldr	r3, [pc, #496]	; (8002ed4 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce4:	d17c      	bne.n	8002de0 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ce6:	429f      	cmp	r7, r3
 8002ce8:	d003      	beq.n	8002cf2 <UART_SetConfig+0x52>
 8002cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cee:	429f      	cmp	r7, r3
 8002cf0:	d131      	bne.n	8002d56 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002cf2:	f7ff fd3b 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002cf6:	6863      	ldr	r3, [r4, #4]
 8002cf8:	2519      	movs	r5, #25
 8002cfa:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002cfe:	4368      	muls	r0, r5
 8002d00:	fbb0 f8f8 	udiv	r8, r0, r8
 8002d04:	f7ff fd32 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002d08:	6866      	ldr	r6, [r4, #4]
 8002d0a:	4368      	muls	r0, r5
 8002d0c:	0076      	lsls	r6, r6, #1
 8002d0e:	fbb0 f6f6 	udiv	r6, r0, r6
 8002d12:	f7ff fd2b 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002d16:	6863      	ldr	r3, [r4, #4]
 8002d18:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4368      	muls	r0, r5
 8002d20:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d24:	fbb0 f0f9 	udiv	r0, r0, r9
 8002d28:	fb09 6610 	mls	r6, r9, r0, r6
 8002d2c:	f7ff fd1e 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002d30:	fbb8 f8f9 	udiv	r8, r8, r9
 8002d34:	6861      	ldr	r1, [r4, #4]
 8002d36:	00f6      	lsls	r6, r6, #3
 8002d38:	3632      	adds	r6, #50	; 0x32
 8002d3a:	fbb6 f6f9 	udiv	r6, r6, r9
 8002d3e:	0076      	lsls	r6, r6, #1
 8002d40:	4368      	muls	r0, r5
 8002d42:	0049      	lsls	r1, r1, #1
 8002d44:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002d48:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8002d4c:	fbb0 faf1 	udiv	sl, r0, r1
 8002d50:	f7ff fd0c 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002d54:	e030      	b.n	8002db8 <UART_SetConfig+0x118>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d56:	f7ff fcf1 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002d5a:	6863      	ldr	r3, [r4, #4]
 8002d5c:	2519      	movs	r5, #25
 8002d5e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002d62:	4368      	muls	r0, r5
 8002d64:	fbb0 f8f8 	udiv	r8, r0, r8
 8002d68:	f7ff fce8 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002d6c:	6866      	ldr	r6, [r4, #4]
 8002d6e:	4368      	muls	r0, r5
 8002d70:	0076      	lsls	r6, r6, #1
 8002d72:	fbb0 f6f6 	udiv	r6, r0, r6
 8002d76:	f7ff fce1 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4368      	muls	r0, r5
 8002d84:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d88:	fbb0 f0f9 	udiv	r0, r0, r9
 8002d8c:	fb09 6610 	mls	r6, r9, r0, r6
 8002d90:	f7ff fcd4 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002d94:	fbb8 f8f9 	udiv	r8, r8, r9
 8002d98:	00f6      	lsls	r6, r6, #3
 8002d9a:	6861      	ldr	r1, [r4, #4]
 8002d9c:	3632      	adds	r6, #50	; 0x32
 8002d9e:	fbb6 f6f9 	udiv	r6, r6, r9
 8002da2:	0076      	lsls	r6, r6, #1
 8002da4:	4368      	muls	r0, r5
 8002da6:	0049      	lsls	r1, r1, #1
 8002da8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002dac:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8002db0:	fbb0 faf1 	udiv	sl, r0, r1
 8002db4:	f7ff fcc2 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002db8:	4345      	muls	r5, r0
 8002dba:	6860      	ldr	r0, [r4, #4]
 8002dbc:	0040      	lsls	r0, r0, #1
 8002dbe:	fbb5 f0f0 	udiv	r0, r5, r0
 8002dc2:	fbb0 f0f9 	udiv	r0, r0, r9
 8002dc6:	fb09 a210 	mls	r2, r9, r0, sl
 8002dca:	00d2      	lsls	r2, r2, #3
 8002dcc:	3232      	adds	r2, #50	; 0x32
 8002dce:	fbb2 f3f9 	udiv	r3, r2, r9
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	4443      	add	r3, r8
 8002dd8:	441e      	add	r6, r3
 8002dda:	60be      	str	r6, [r7, #8]
 8002ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002de0:	429f      	cmp	r7, r3
 8002de2:	d002      	beq.n	8002dea <UART_SetConfig+0x14a>
 8002de4:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <UART_SetConfig+0x238>)
 8002de6:	429f      	cmp	r7, r3
 8002de8:	d130      	bne.n	8002e4c <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002dea:	f7ff fcbf 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002dee:	6863      	ldr	r3, [r4, #4]
 8002df0:	2519      	movs	r5, #25
 8002df2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002df6:	4368      	muls	r0, r5
 8002df8:	fbb0 f8f8 	udiv	r8, r0, r8
 8002dfc:	f7ff fcb6 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002e00:	6866      	ldr	r6, [r4, #4]
 8002e02:	4368      	muls	r0, r5
 8002e04:	00b6      	lsls	r6, r6, #2
 8002e06:	fbb0 f6f6 	udiv	r6, r0, r6
 8002e0a:	f7ff fcaf 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002e0e:	6863      	ldr	r3, [r4, #4]
 8002e10:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4368      	muls	r0, r5
 8002e18:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e1c:	fbb0 f0f9 	udiv	r0, r0, r9
 8002e20:	fb09 6610 	mls	r6, r9, r0, r6
 8002e24:	f7ff fca2 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002e28:	fbb8 f8f9 	udiv	r8, r8, r9
 8002e2c:	6861      	ldr	r1, [r4, #4]
 8002e2e:	0136      	lsls	r6, r6, #4
 8002e30:	4368      	muls	r0, r5
 8002e32:	0089      	lsls	r1, r1, #2
 8002e34:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002e38:	3632      	adds	r6, #50	; 0x32
 8002e3a:	fbb0 faf1 	udiv	sl, r0, r1
 8002e3e:	fbb6 f6f9 	udiv	r6, r6, r9
 8002e42:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8002e46:	f7ff fc91 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002e4a:	e02f      	b.n	8002eac <UART_SetConfig+0x20c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e4c:	f7ff fc76 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002e50:	6863      	ldr	r3, [r4, #4]
 8002e52:	2519      	movs	r5, #25
 8002e54:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002e58:	4368      	muls	r0, r5
 8002e5a:	fbb0 f8f8 	udiv	r8, r0, r8
 8002e5e:	f7ff fc6d 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002e62:	6866      	ldr	r6, [r4, #4]
 8002e64:	4368      	muls	r0, r5
 8002e66:	00b6      	lsls	r6, r6, #2
 8002e68:	fbb0 f6f6 	udiv	r6, r0, r6
 8002e6c:	f7ff fc66 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4368      	muls	r0, r5
 8002e7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e7e:	fbb0 f0f9 	udiv	r0, r0, r9
 8002e82:	fb09 6610 	mls	r6, r9, r0, r6
 8002e86:	f7ff fc59 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002e8a:	fbb8 f8f9 	udiv	r8, r8, r9
 8002e8e:	6861      	ldr	r1, [r4, #4]
 8002e90:	0136      	lsls	r6, r6, #4
 8002e92:	3632      	adds	r6, #50	; 0x32
 8002e94:	4368      	muls	r0, r5
 8002e96:	fbb6 f6f9 	udiv	r6, r6, r9
 8002e9a:	0089      	lsls	r1, r1, #2
 8002e9c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002ea0:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8002ea4:	fbb0 faf1 	udiv	sl, r0, r1
 8002ea8:	f7ff fc48 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002eac:	4345      	muls	r5, r0
 8002eae:	6860      	ldr	r0, [r4, #4]
 8002eb0:	0080      	lsls	r0, r0, #2
 8002eb2:	fbb5 f0f0 	udiv	r0, r5, r0
 8002eb6:	fbb0 f0f9 	udiv	r0, r0, r9
 8002eba:	fb09 a210 	mls	r2, r9, r0, sl
 8002ebe:	0112      	lsls	r2, r2, #4
 8002ec0:	3232      	adds	r2, #50	; 0x32
 8002ec2:	fbb2 f3f9 	udiv	r3, r2, r9
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	4433      	add	r3, r6
 8002ecc:	4443      	add	r3, r8
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed4:	40011000 	.word	0x40011000
 8002ed8:	40011400 	.word	0x40011400

08002edc <UART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	4604      	mov	r4, r0
 8002ee0:	460e      	mov	r6, r1
 8002ee2:	4617      	mov	r7, r2
 8002ee4:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002ee6:	6821      	ldr	r1, [r4, #0]
 8002ee8:	680b      	ldr	r3, [r1, #0]
 8002eea:	ea36 0303 	bics.w	r3, r6, r3
 8002eee:	d01b      	beq.n	8002f28 <UART_WaitOnFlagUntilTimeout.constprop.3+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002ef0:	1c6b      	adds	r3, r5, #1
 8002ef2:	d0f9      	beq.n	8002ee8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002ef4:	b995      	cbnz	r5, 8002f1c <UART_WaitOnFlagUntilTimeout.constprop.3+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002efe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f12:	2300      	movs	r3, #0
 8002f14:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002f18:	2003      	movs	r0, #3
 8002f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002f1c:	f7fe f83e 	bl	8000f9c <HAL_GetTick>
 8002f20:	1bc0      	subs	r0, r0, r7
 8002f22:	4285      	cmp	r5, r0
 8002f24:	d2df      	bcs.n	8002ee6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002f26:	e7e6      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 8002f28:	2000      	movs	r0, #0
}
 8002f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f2c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f2c:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f2e:	4604      	mov	r4, r0
 8002f30:	b340      	cbz	r0, 8002f84 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002f32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f3a:	b91b      	cbnz	r3, 8002f44 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002f40:	f001 ffba 	bl	8004eb8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f44:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f46:	2324      	movs	r3, #36	; 0x24
 8002f48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f4c:	68d3      	ldr	r3, [r2, #12]
 8002f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f52:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff fea3 	bl	8002ca0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f72:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002f76:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002f7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002f7e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8002f82:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8002f86:	bd10      	pop	{r4, pc}

08002f88 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8c:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8002f8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f92:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f94:	4604      	mov	r4, r0
 8002f96:	460d      	mov	r5, r1
 8002f98:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8002f9a:	d150      	bne.n	800303e <HAL_UART_Transmit+0xb6>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002f9c:	2900      	cmp	r1, #0
 8002f9e:	d04b      	beq.n	8003038 <HAL_UART_Transmit+0xb0>
 8002fa0:	2a00      	cmp	r2, #0
 8002fa2:	d049      	beq.n	8003038 <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002fa4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d048      	beq.n	800303e <HAL_UART_Transmit+0xb6>
 8002fac:	2301      	movs	r3, #1
 8002fae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb6:	2321      	movs	r3, #33	; 0x21
 8002fb8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fbc:	f7fd ffee 	bl	8000f9c <HAL_GetTick>

    huart->TxXferSize = Size;
 8002fc0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fc4:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8002fc6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002fca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b323      	cbz	r3, 800301a <HAL_UART_Transmit+0x92>
    {
      huart->TxXferCount--;
 8002fd0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fd8:	68a3      	ldr	r3, [r4, #8]
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fde:	4632      	mov	r2, r6
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002fe6:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fe8:	d10e      	bne.n	8003008 <HAL_UART_Transmit+0x80>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	f7ff ff77 	bl	8002edc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002fee:	b110      	cbz	r0, 8002ff6 <HAL_UART_Transmit+0x6e>
        { 
          return HAL_TIMEOUT;
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ff6:	882b      	ldrh	r3, [r5, #0]
 8002ff8:	6822      	ldr	r2, [r4, #0]
 8002ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffe:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003000:	6923      	ldr	r3, [r4, #16]
 8003002:	b943      	cbnz	r3, 8003016 <HAL_UART_Transmit+0x8e>
        {
          pData +=2U;
 8003004:	3502      	adds	r5, #2
 8003006:	e7e0      	b.n	8002fca <HAL_UART_Transmit+0x42>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003008:	f7ff ff68 	bl	8002edc <UART_WaitOnFlagUntilTimeout.constprop.3>
 800300c:	2800      	cmp	r0, #0
 800300e:	d1ef      	bne.n	8002ff0 <HAL_UART_Transmit+0x68>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	782a      	ldrb	r2, [r5, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	3501      	adds	r5, #1
 8003018:	e7d7      	b.n	8002fca <HAL_UART_Transmit+0x42>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800301a:	463b      	mov	r3, r7
 800301c:	4632      	mov	r2, r6
 800301e:	2140      	movs	r1, #64	; 0x40
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff ff5b 	bl	8002edc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003026:	2800      	cmp	r0, #0
 8003028:	d1e2      	bne.n	8002ff0 <HAL_UART_Transmit+0x68>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800302a:	2320      	movs	r3, #32
 800302c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003030:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 8003034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return  HAL_ERROR;
 8003038:	2001      	movs	r0, #1
 800303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800303e:	2002      	movs	r0, #2
  }
}
 8003040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003044 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003044:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003048:	2b20      	cmp	r3, #32
 800304a:	d118      	bne.n	800307e <HAL_UART_Transmit_IT+0x3a>
  {
    if((pData == NULL ) || (Size == 0)) 
 800304c:	b1a9      	cbz	r1, 800307a <HAL_UART_Transmit_IT+0x36>
 800304e:	b1a2      	cbz	r2, 800307a <HAL_UART_Transmit_IT+0x36>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8003050:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003054:	2b01      	cmp	r3, #1
 8003056:	d012      	beq.n	800307e <HAL_UART_Transmit_IT+0x3a>
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8003058:	84c2      	strh	r2, [r0, #38]	; 0x26
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr = pData;
 800305a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800305c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003060:	6801      	ldr	r1, [r0, #0]
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003064:	2221      	movs	r2, #33	; 0x21
 8003066:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800306a:	68ca      	ldr	r2, [r1, #12]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800306c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003070:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003074:	60ca      	str	r2, [r1, #12]
    
    return HAL_OK;
 8003076:	4618      	mov	r0, r3
 8003078:	4770      	bx	lr
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 800307a:	2001      	movs	r0, #1
 800307c:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;   
 800307e:	2002      	movs	r0, #2
  }
}
 8003080:	4770      	bx	lr

08003082 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8003082:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003086:	2b20      	cmp	r3, #32
 8003088:	d11c      	bne.n	80030c4 <HAL_UART_Receive_IT+0x42>
  {
    if((pData == NULL ) || (Size == 0)) 
 800308a:	b1c9      	cbz	r1, 80030c0 <HAL_UART_Receive_IT+0x3e>
 800308c:	b1c2      	cbz	r2, 80030c0 <HAL_UART_Receive_IT+0x3e>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800308e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003092:	2b01      	cmp	r3, #1
 8003094:	d016      	beq.n	80030c4 <HAL_UART_Receive_IT+0x42>
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 8003096:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8003098:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800309c:	2222      	movs	r2, #34	; 0x22
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 80030a6:	6281      	str	r1, [r0, #40]	; 0x28
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a8:	6951      	ldr	r1, [r2, #20]
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ae:	f041 0101 	orr.w	r1, r1, #1
 80030b2:	6151      	str	r1, [r2, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80030b4:	68d1      	ldr	r1, [r2, #12]
 80030b6:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80030ba:	60d1      	str	r1, [r2, #12]
    
    return HAL_OK;
 80030bc:	4618      	mov	r0, r3
 80030be:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 80030c0:	2001      	movs	r0, #1
 80030c2:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 80030c4:	2002      	movs	r0, #2
  }
}
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_TxCpltCallback>:
 80030c8:	4770      	bx	lr

080030ca <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80030ca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80030ce:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030d0:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80030d2:	d132      	bne.n	800313a <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030d4:	6883      	ldr	r3, [r0, #8]
 80030d6:	6901      	ldr	r1, [r0, #16]
 80030d8:	6802      	ldr	r2, [r0, #0]
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030e0:	d10b      	bne.n	80030fa <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030e2:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 80030e4:	b921      	cbnz	r1, 80030f0 <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ea:	f823 2b02 	strh.w	r2, [r3], #2
 80030ee:	e002      	b.n	80030f6 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 80030f6:	6283      	str	r3, [r0, #40]	; 0x28
 80030f8:	e00a      	b.n	8003110 <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80030fa:	b919      	cbnz	r1, 8003104 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030fc:	1c59      	adds	r1, r3, #1
 80030fe:	6281      	str	r1, [r0, #40]	; 0x28
 8003100:	6852      	ldr	r2, [r2, #4]
 8003102:	e004      	b.n	800310e <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003104:	6852      	ldr	r2, [r2, #4]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	6281      	str	r1, [r0, #40]	; 0x28
 800310a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800310e:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003110:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003112:	3c01      	subs	r4, #1
 8003114:	b2a4      	uxth	r4, r4
 8003116:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003118:	b98c      	cbnz	r4, 800313e <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311a:	6803      	ldr	r3, [r0, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800312c:	2320      	movs	r3, #32
 800312e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8003132:	f001 fc19 	bl	8004968 <HAL_UART_RxCpltCallback>
 8003136:	4620      	mov	r0, r4
 8003138:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800313a:	2002      	movs	r0, #2
 800313c:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
    }

    if(--huart->RxXferCount == 0U)
 800313e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003140:	bd10      	pop	{r4, pc}

08003142 <HAL_UART_ErrorCallback>:
 8003142:	4770      	bx	lr

08003144 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003144:	6803      	ldr	r3, [r0, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003148:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800314a:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 800314c:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800314e:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003150:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8003152:	d107      	bne.n	8003164 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003154:	0696      	lsls	r6, r2, #26
 8003156:	d55a      	bpl.n	800320e <HAL_UART_IRQHandler+0xca>
 8003158:	068d      	lsls	r5, r1, #26
 800315a:	d558      	bpl.n	800320e <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 800315c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 8003160:	f7ff bfb3 	b.w	80030ca <UART_Receive_IT>
      return;
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003164:	f015 0001 	ands.w	r0, r5, #1
 8003168:	d102      	bne.n	8003170 <HAL_UART_IRQHandler+0x2c>
 800316a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800316e:	d04e      	beq.n	800320e <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003170:	07d3      	lsls	r3, r2, #31
 8003172:	d505      	bpl.n	8003180 <HAL_UART_IRQHandler+0x3c>
 8003174:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003176:	bf42      	ittt	mi
 8003178:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800317a:	f043 0301 	orrmi.w	r3, r3, #1
 800317e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003180:	0755      	lsls	r5, r2, #29
 8003182:	d504      	bpl.n	800318e <HAL_UART_IRQHandler+0x4a>
 8003184:	b118      	cbz	r0, 800318e <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003186:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800318e:	0793      	lsls	r3, r2, #30
 8003190:	d504      	bpl.n	800319c <HAL_UART_IRQHandler+0x58>
 8003192:	b118      	cbz	r0, 800319c <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003194:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003196:	f043 0304 	orr.w	r3, r3, #4
 800319a:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800319c:	0716      	lsls	r6, r2, #28
 800319e:	d504      	bpl.n	80031aa <HAL_UART_IRQHandler+0x66>
 80031a0:	b118      	cbz	r0, 80031aa <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031a4:	f043 0308 	orr.w	r3, r3, #8
 80031a8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d066      	beq.n	800327e <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031b0:	0695      	lsls	r5, r2, #26
 80031b2:	d504      	bpl.n	80031be <HAL_UART_IRQHandler+0x7a>
 80031b4:	0688      	lsls	r0, r1, #26
 80031b6:	d502      	bpl.n	80031be <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7ff ff86 	bl	80030ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80031c4:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031c6:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031c8:	d402      	bmi.n	80031d0 <HAL_UART_IRQHandler+0x8c>
 80031ca:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 80031ce:	d01a      	beq.n	8003206 <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031d0:	f7ff fd58 	bl	8002c84 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	0652      	lsls	r2, r2, #25
 80031da:	d510      	bpl.n	80031fe <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031dc:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80031de:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e4:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80031e6:	b150      	cbz	r0, 80031fe <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_UART_IRQHandler+0x13c>)
 80031ea:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ec:	f7fd ff60 	bl	80010b0 <HAL_DMA_Abort_IT>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d044      	beq.n	800327e <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 80031f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80031fc:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80031fe:	4620      	mov	r0, r4
 8003200:	f7ff ff9f 	bl	8003142 <HAL_UART_ErrorCallback>
 8003204:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003206:	f7ff ff9c 	bl	8003142 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800320c:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800320e:	0616      	lsls	r6, r2, #24
 8003210:	d527      	bpl.n	8003262 <HAL_UART_IRQHandler+0x11e>
 8003212:	060d      	lsls	r5, r1, #24
 8003214:	d525      	bpl.n	8003262 <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003216:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800321a:	2a21      	cmp	r2, #33	; 0x21
 800321c:	d12f      	bne.n	800327e <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800321e:	68a2      	ldr	r2, [r4, #8]
 8003220:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003224:	6a22      	ldr	r2, [r4, #32]
 8003226:	d10a      	bne.n	800323e <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003228:	8811      	ldrh	r1, [r2, #0]
 800322a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800322e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003230:	6921      	ldr	r1, [r4, #16]
 8003232:	b909      	cbnz	r1, 8003238 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8003234:	3202      	adds	r2, #2
 8003236:	e000      	b.n	800323a <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003238:	3201      	adds	r2, #1
 800323a:	6222      	str	r2, [r4, #32]
 800323c:	e003      	b.n	8003246 <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800323e:	1c51      	adds	r1, r2, #1
 8003240:	6221      	str	r1, [r4, #32]
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003246:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003248:	3a01      	subs	r2, #1
 800324a:	b292      	uxth	r2, r2
 800324c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800324e:	b9b2      	cbnz	r2, 800327e <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003256:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003262:	0650      	lsls	r0, r2, #25
 8003264:	d50b      	bpl.n	800327e <HAL_UART_IRQHandler+0x13a>
 8003266:	064a      	lsls	r2, r1, #25
 8003268:	d509      	bpl.n	800327e <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003270:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003272:	2320      	movs	r3, #32
 8003274:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff ff25 	bl	80030c8 <HAL_UART_TxCpltCallback>
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	08003285 	.word	0x08003285

08003284 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003284:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003286:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 800328c:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800328e:	f7ff ff58 	bl	8003142 <HAL_UART_ErrorCallback>
 8003292:	bd08      	pop	{r3, pc}

08003294 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003294:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003296:	f000 fbf3 	bl	8003a80 <vTaskStartScheduler>
  
  return osOK;
}
 800329a:	2000      	movs	r0, #0
 800329c:	bd08      	pop	{r3, pc}

0800329e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800329e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80032a4:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032a6:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a8:	e890 0022 	ldmia.w	r0, {r1, r5}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032ac:	b085      	sub	sp, #20
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80032ae:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80032b0:	bf14      	ite	ne
 80032b2:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032b4:	2400      	moveq	r4, #0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032b6:	a803      	add	r0, sp, #12
 80032b8:	9001      	str	r0, [sp, #4]
 80032ba:	9400      	str	r4, [sp, #0]
 80032bc:	4628      	mov	r0, r5
 80032be:	f000 fb09 	bl	80038d4 <xTaskCreate>
 80032c2:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032c4:	bf0c      	ite	eq
 80032c6:	9803      	ldreq	r0, [sp, #12]
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 80032c8:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
}
 80032ca:	b005      	add	sp, #20
 80032cc:	bd30      	pop	{r4, r5, pc}

080032ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80032ce:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80032d0:	2800      	cmp	r0, #0
 80032d2:	bf08      	it	eq
 80032d4:	2001      	moveq	r0, #1
 80032d6:	f000 fd27 	bl	8003d28 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80032da:	2000      	movs	r0, #0
 80032dc:	bd08      	pop	{r3, pc}

080032de <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80032de:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80032e0:	f000 fdbc 	bl	8003e5c <xTaskGetSchedulerState>
 80032e4:	2801      	cmp	r0, #1
 80032e6:	d003      	beq.n	80032f0 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80032e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80032ec:	f000 b90a 	b.w	8003504 <xPortSysTickHandler>
 80032f0:	bd08      	pop	{r3, pc}

080032f2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f2:	f100 0308 	add.w	r3, r0, #8
 80032f6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003300:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003302:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003304:	6003      	str	r3, [r0, #0]
 8003306:	4770      	bx	lr

08003308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	6103      	str	r3, [r0, #16]
 800330c:	4770      	bx	lr

0800330e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800330e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003310:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800331a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800331c:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800331e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003320:	3301      	adds	r3, #1
 8003322:	6003      	str	r3, [r0, #0]
 8003324:	4770      	bx	lr

08003326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003326:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003328:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800332a:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800332c:	d101      	bne.n	8003332 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800332e:	6903      	ldr	r3, [r0, #16]
 8003330:	e007      	b.n	8003342 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003332:	f100 0308 	add.w	r3, r0, #8
 8003336:	685c      	ldr	r4, [r3, #4]
 8003338:	6825      	ldr	r5, [r4, #0]
 800333a:	42aa      	cmp	r2, r5
 800333c:	d301      	bcc.n	8003342 <vListInsert+0x1c>
 800333e:	4623      	mov	r3, r4
 8003340:	e7f9      	b.n	8003336 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003346:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003348:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800334a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800334c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800334e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003350:	3301      	adds	r3, #1
 8003352:	6003      	str	r3, [r0, #0]
 8003354:	bd30      	pop	{r4, r5, pc}

08003356 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003356:	6841      	ldr	r1, [r0, #4]
 8003358:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800335a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800335c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800335e:	6882      	ldr	r2, [r0, #8]
 8003360:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003366:	bf08      	it	eq
 8003368:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800336a:	2200      	movs	r2, #0
 800336c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	3801      	subs	r0, #1
 8003372:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003374:	4770      	bx	lr
	...

08003378 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <prvTaskExitError+0x2c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	d008      	beq.n	8003392 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	e7fe      	b.n	8003390 <prvTaskExitError+0x18>
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	e7fe      	b.n	80033a2 <prvTaskExitError+0x2a>
 80033a4:	20000000 	.word	0x20000000

080033a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80033a8:	4806      	ldr	r0, [pc, #24]	; (80033c4 <prvPortStartFirstTask+0x1c>)
 80033aa:	6800      	ldr	r0, [r0, #0]
 80033ac:	6800      	ldr	r0, [r0, #0]
 80033ae:	f380 8808 	msr	MSP, r0
 80033b2:	b662      	cpsie	i
 80033b4:	b661      	cpsie	f
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	df00      	svc	0
 80033c0:	bf00      	nop
 80033c2:	0000      	.short	0x0000
 80033c4:	e000ed08 	.word	0xe000ed08

080033c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80033c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033d8 <vPortEnableVFP+0x10>
 80033cc:	6801      	ldr	r1, [r0, #0]
 80033ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033d2:	6001      	str	r1, [r0, #0]
 80033d4:	4770      	bx	lr
 80033d6:	0000      	.short	0x0000
 80033d8:	e000ed88 	.word	0xe000ed88

080033dc <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <pxPortInitialiseStack+0x28>)
 80033e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033ea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80033ee:	f06f 0302 	mvn.w	r3, #2
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033f2:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033f6:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80033fa:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80033fe:	3844      	subs	r0, #68	; 0x44
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	08003379 	.word	0x08003379
	...

08003410 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <pxCurrentTCBConst2>)
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	6808      	ldr	r0, [r1, #0]
 8003416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800341a:	f380 8809 	msr	PSP, r0
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f380 8811 	msr	BASEPRI, r0
 800342a:	4770      	bx	lr
 800342c:	f3af 8000 	nop.w

08003430 <pxCurrentTCBConst2>:
 8003430:	20004274 	.word	0x20004274

08003434 <vPortEnterCritical>:
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003444:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <vPortEnterCritical+0x3c>)
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800344a:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800344c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800344e:	d10d      	bne.n	800346c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <vPortEnterCritical+0x40>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003458:	d008      	beq.n	800346c <vPortEnterCritical+0x38>
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	e7fe      	b.n	800346a <vPortEnterCritical+0x36>
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000000 	.word	0x20000000
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003478:	4a08      	ldr	r2, [pc, #32]	; (800349c <vPortExitCritical+0x24>)
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	b943      	cbnz	r3, 8003490 <vPortExitCritical+0x18>
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	e7fe      	b.n	800348e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003490:	3b01      	subs	r3, #1
 8003492:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003494:	b90b      	cbnz	r3, 800349a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	4770      	bx	lr
 800349c:	20000000 	.word	0x20000000

080034a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034a0:	f3ef 8009 	mrs	r0, PSP
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <pxCurrentTCBConst>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	f01e 0f10 	tst.w	lr, #16
 80034b0:	bf08      	it	eq
 80034b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ba:	6010      	str	r0, [r2, #0]
 80034bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80034c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034c4:	f380 8811 	msr	BASEPRI, r0
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f000 fc8a 	bl	8003de8 <vTaskSwitchContext>
 80034d4:	f04f 0000 	mov.w	r0, #0
 80034d8:	f380 8811 	msr	BASEPRI, r0
 80034dc:	bc08      	pop	{r3}
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	6808      	ldr	r0, [r1, #0]
 80034e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e6:	f01e 0f10 	tst.w	lr, #16
 80034ea:	bf08      	it	eq
 80034ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034f0:	f380 8809 	msr	PSP, r0
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	f3af 8000 	nop.w

08003500 <pxCurrentTCBConst>:
 8003500:	20004274 	.word	0x20004274

08003504 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003504:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003516:	f000 faf7 	bl	8003b08 <xTaskIncrementTick>
 800351a:	b118      	cbz	r0, 8003524 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <xPortSysTickHandler+0x28>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003524:	2300      	movs	r3, #0
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	bd08      	pop	{r3, pc}
 800352c:	e000ed04 	.word	0xe000ed04

08003530 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <vPortSetupTimerInterrupt+0x1c>)
 8003532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fbb3 f3f2 	udiv	r3, r3, r2
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <vPortSetupTimerInterrupt+0x20>)
 800353e:	3b01      	subs	r3, #1
 8003540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <vPortSetupTimerInterrupt+0x24>)
 8003544:	2207      	movs	r2, #7
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000004 	.word	0x20000004
 8003550:	e000e014 	.word	0xe000e014
 8003554:	e000e010 	.word	0xe000e010

08003558 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <xPortStartScheduler+0xc8>)
 800355a:	4a32      	ldr	r2, [pc, #200]	; (8003624 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800355c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	4291      	cmp	r1, r2
 8003562:	d108      	bne.n	8003576 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	e7fe      	b.n	8003574 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <xPortStartScheduler+0xd0>)
 800357a:	429a      	cmp	r2, r3
 800357c:	d108      	bne.n	8003590 <xPortStartScheduler+0x38>
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	e7fe      	b.n	800358e <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003590:	4b26      	ldr	r3, [pc, #152]	; (800362c <xPortStartScheduler+0xd4>)
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003598:	22ff      	movs	r2, #255	; 0xff
 800359a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800359c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800359e:	4a24      	ldr	r2, [pc, #144]	; (8003630 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80035aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035ae:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035b0:	4b20      	ldr	r3, [pc, #128]	; (8003634 <xPortStartScheduler+0xdc>)
 80035b2:	2207      	movs	r2, #7
 80035b4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035b6:	2100      	movs	r1, #0
 80035b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80035bc:	0600      	lsls	r0, r0, #24
 80035be:	f102 34ff 	add.w	r4, r2, #4294967295
 80035c2:	d508      	bpl.n	80035d6 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80035c8:	0052      	lsls	r2, r2, #1
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	f88d 2003 	strb.w	r2, [sp, #3]
 80035d0:	2101      	movs	r1, #1
 80035d2:	4622      	mov	r2, r4
 80035d4:	e7f0      	b.n	80035b8 <xPortStartScheduler+0x60>
 80035d6:	b101      	cbz	r1, 80035da <xPortStartScheduler+0x82>
 80035d8:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	0212      	lsls	r2, r2, #8
 80035de:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80035e2:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035e4:	9b01      	ldr	r3, [sp, #4]
 80035e6:	4a11      	ldr	r2, [pc, #68]	; (800362c <xPortStartScheduler+0xd4>)
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <xPortStartScheduler+0xe0>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80035f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80035fc:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035fe:	f7ff ff97 	bl	8003530 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <xPortStartScheduler+0xe4>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003608:	f7ff fede 	bl	80033c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800360c:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <xPortStartScheduler+0xe8>)
 800360e:	6813      	ldr	r3, [r2, #0]
 8003610:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003614:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003616:	f7ff fec7 	bl	80033a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800361a:	f7ff fead 	bl	8003378 <prvTaskExitError>
 800361e:	bf00      	nop
 8003620:	e000ed00 	.word	0xe000ed00
 8003624:	410fc271 	.word	0x410fc271
 8003628:	410fc270 	.word	0x410fc270
 800362c:	e000e400 	.word	0xe000e400
 8003630:	20000588 	.word	0x20000588
 8003634:	2000058c 	.word	0x2000058c
 8003638:	e000ed20 	.word	0xe000ed20
 800363c:	20000000 	.word	0x20000000
 8003640:	e000ef34 	.word	0xe000ef34

08003644 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003644:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003646:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <prvInsertBlockIntoFreeList+0x40>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4282      	cmp	r2, r0
 800364c:	d201      	bcs.n	8003652 <prvInsertBlockIntoFreeList+0xe>
 800364e:	4613      	mov	r3, r2
 8003650:	e7fa      	b.n	8003648 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	185c      	adds	r4, r3, r1
 8003656:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003658:	bf01      	itttt	eq
 800365a:	6840      	ldreq	r0, [r0, #4]
 800365c:	1809      	addeq	r1, r1, r0
 800365e:	4618      	moveq	r0, r3
 8003660:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003662:	6841      	ldr	r1, [r0, #4]
 8003664:	1844      	adds	r4, r0, r1
 8003666:	42a2      	cmp	r2, r4
 8003668:	d107      	bne.n	800367a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800366a:	4c07      	ldr	r4, [pc, #28]	; (8003688 <prvInsertBlockIntoFreeList+0x44>)
 800366c:	6824      	ldr	r4, [r4, #0]
 800366e:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003670:	bf1f      	itttt	ne
 8003672:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003674:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003676:	1909      	addne	r1, r1, r4
 8003678:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800367a:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800367c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800367e:	bf18      	it	ne
 8003680:	6018      	strne	r0, [r3, #0]
 8003682:	bd10      	pop	{r4, pc}
 8003684:	20000598 	.word	0x20000598
 8003688:	20000594 	.word	0x20000594

0800368c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003690:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8003692:	f000 fa31 	bl	8003af8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003696:	4940      	ldr	r1, [pc, #256]	; (8003798 <pvPortMalloc+0x10c>)
 8003698:	4d40      	ldr	r5, [pc, #256]	; (800379c <pvPortMalloc+0x110>)
 800369a:	680b      	ldr	r3, [r1, #0]
 800369c:	bb0b      	cbnz	r3, 80036e2 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800369e:	4a40      	ldr	r2, [pc, #256]	; (80037a0 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036a0:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036a2:	bf1f      	itttt	ne
 80036a4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036a6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036aa:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80036ae:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036b0:	bf14      	ite	ne
 80036b2:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036b4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036b8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80036ba:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036bc:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036c0:	4e38      	ldr	r6, [pc, #224]	; (80037a4 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 80036c2:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 80036c4:	2000      	movs	r0, #0
 80036c6:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036c8:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 80036ca:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80036cc:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036ce:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036d0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036d2:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036d4:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036d6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <pvPortMalloc+0x120>)
 80036da:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80036dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036e0:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036e2:	682f      	ldr	r7, [r5, #0]
 80036e4:	4227      	tst	r7, r4
 80036e6:	d146      	bne.n	8003776 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80036e8:	2c00      	cmp	r4, #0
 80036ea:	d045      	beq.n	8003778 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 80036ec:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80036f0:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80036f2:	bf1c      	itt	ne
 80036f4:	f023 0307 	bicne.w	r3, r3, #7
 80036f8:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d039      	beq.n	8003772 <pvPortMalloc+0xe6>
 80036fe:	4a2b      	ldr	r2, [pc, #172]	; (80037ac <pvPortMalloc+0x120>)
 8003700:	6816      	ldr	r6, [r2, #0]
 8003702:	42b3      	cmp	r3, r6
 8003704:	4690      	mov	r8, r2
 8003706:	d836      	bhi.n	8003776 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8003708:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <pvPortMalloc+0x118>)
 800370a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800370c:	6868      	ldr	r0, [r5, #4]
 800370e:	4283      	cmp	r3, r0
 8003710:	d803      	bhi.n	800371a <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003712:	6809      	ldr	r1, [r1, #0]
 8003714:	428d      	cmp	r5, r1
 8003716:	d106      	bne.n	8003726 <pvPortMalloc+0x9a>
 8003718:	e02d      	b.n	8003776 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800371a:	682c      	ldr	r4, [r5, #0]
 800371c:	2c00      	cmp	r4, #0
 800371e:	d0f8      	beq.n	8003712 <pvPortMalloc+0x86>
 8003720:	462a      	mov	r2, r5
 8003722:	4625      	mov	r5, r4
 8003724:	e7f2      	b.n	800370c <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003726:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003728:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800372a:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800372c:	1ac2      	subs	r2, r0, r3
 800372e:	2a10      	cmp	r2, #16
 8003730:	d90f      	bls.n	8003752 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003732:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003734:	0741      	lsls	r1, r0, #29
 8003736:	d008      	beq.n	800374a <pvPortMalloc+0xbe>
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	e7fe      	b.n	8003748 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800374a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800374c:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800374e:	f7ff ff79 	bl	8003644 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003752:	4915      	ldr	r1, [pc, #84]	; (80037a8 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003754:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003756:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003758:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800375a:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800375c:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 800375e:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003762:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003766:	bf38      	it	cc
 8003768:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800376a:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800376c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	e002      	b.n	8003778 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003772:	461c      	mov	r4, r3
 8003774:	e000      	b.n	8003778 <pvPortMalloc+0xec>
 8003776:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003778:	f000 fa5e 	bl	8003c38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800377c:	0763      	lsls	r3, r4, #29
 800377e:	d008      	beq.n	8003792 <pvPortMalloc+0x106>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	e7fe      	b.n	8003790 <pvPortMalloc+0x104>
	return pvReturn;
}
 8003792:	4620      	mov	r0, r4
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003798:	20000594 	.word	0x20000594
 800379c:	200041a0 	.word	0x200041a0
 80037a0:	200005a0 	.word	0x200005a0
 80037a4:	20000598 	.word	0x20000598
 80037a8:	200041a4 	.word	0x200041a4
 80037ac:	20000590 	.word	0x20000590

080037b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037b0:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80037b2:	4604      	mov	r4, r0
 80037b4:	b370      	cbz	r0, 8003814 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <vPortFree+0x68>)
 80037b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	4213      	tst	r3, r2
 80037c0:	d108      	bne.n	80037d4 <vPortFree+0x24>
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	e7fe      	b.n	80037d2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037d4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80037d8:	b141      	cbz	r1, 80037ec <vPortFree+0x3c>
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	e7fe      	b.n	80037ea <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80037ec:	ea23 0302 	bic.w	r3, r3, r2
 80037f0:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 80037f4:	f000 f980 	bl	8003af8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037f8:	4a08      	ldr	r2, [pc, #32]	; (800381c <vPortFree+0x6c>)
 80037fa:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80037fe:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003800:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003804:	440b      	add	r3, r1
 8003806:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003808:	f7ff ff1c 	bl	8003644 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800380c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8003810:	f000 ba12 	b.w	8003c38 <xTaskResumeAll>
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	200041a0 	.word	0x200041a0
 800381c:	20000590 	.word	0x20000590

08003820 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003820:	4a06      	ldr	r2, [pc, #24]	; (800383c <prvResetNextTaskUnblockTime+0x1c>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <prvResetNextTaskUnblockTime+0x20>)
 8003828:	b911      	cbnz	r1, 8003830 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800382a:	f04f 32ff 	mov.w	r2, #4294967295
 800382e:	e003      	b.n	8003838 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003834:	68d2      	ldr	r2, [r2, #12]
 8003836:	6852      	ldr	r2, [r2, #4]
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	4770      	bx	lr
 800383c:	200041ac 	.word	0x200041ac
 8003840:	20004278 	.word	0x20004278

08003844 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003846:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <prvAddCurrentTaskToDelayedList+0x74>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003848:	4d1c      	ldr	r5, [pc, #112]	; (80038bc <prvAddCurrentTaskToDelayedList+0x78>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800384a:	681e      	ldr	r6, [r3, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800384c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800384e:	6828      	ldr	r0, [r5, #0]
 8003850:	3004      	adds	r0, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003852:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003854:	f7ff fd7f 	bl	8003356 <uxListRemove>
 8003858:	462b      	mov	r3, r5
 800385a:	b940      	cbnz	r0, 800386e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800385c:	682a      	ldr	r2, [r5, #0]
 800385e:	4d18      	ldr	r5, [pc, #96]	; (80038c0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003860:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003862:	6828      	ldr	r0, [r5, #0]
 8003864:	2201      	movs	r2, #1
 8003866:	408a      	lsls	r2, r1
 8003868:	ea20 0202 	bic.w	r2, r0, r2
 800386c:	602a      	str	r2, [r5, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800386e:	1c62      	adds	r2, r4, #1
 8003870:	d107      	bne.n	8003882 <prvAddCurrentTaskToDelayedList+0x3e>
 8003872:	b137      	cbz	r7, 8003882 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	4813      	ldr	r0, [pc, #76]	; (80038c4 <prvAddCurrentTaskToDelayedList+0x80>)
 8003878:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800387a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800387e:	f7ff bd46 	b.w	800330e <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003882:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <prvAddCurrentTaskToDelayedList+0x78>)
 8003888:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800388a:	42a6      	cmp	r6, r4
 800388c:	d907      	bls.n	800389e <prvAddCurrentTaskToDelayedList+0x5a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <prvAddCurrentTaskToDelayedList+0x84>)
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003894:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003898:	3104      	adds	r1, #4
 800389a:	f7ff bd44 	b.w	8003326 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <prvAddCurrentTaskToDelayedList+0x88>)
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	6811      	ldr	r1, [r2, #0]
 80038a4:	3104      	adds	r1, #4
 80038a6:	f7ff fd3e 	bl	8003326 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <prvAddCurrentTaskToDelayedList+0x8c>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80038b0:	bf38      	it	cc
 80038b2:	601c      	strcc	r4, [r3, #0]
 80038b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2000427c 	.word	0x2000427c
 80038bc:	20004274 	.word	0x20004274
 80038c0:	200042cc 	.word	0x200042cc
 80038c4:	200042b8 	.word	0x200042b8
 80038c8:	20004280 	.word	0x20004280
 80038cc:	200041ac 	.word	0x200041ac
 80038d0:	20004278 	.word	0x20004278

080038d4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d8:	0095      	lsls	r5, r2, #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038da:	4680      	mov	r8, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038dc:	4628      	mov	r0, r5
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038de:	460f      	mov	r7, r1
 80038e0:	4699      	mov	r9, r3
 80038e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e4:	f7ff fed2 	bl	800368c <pvPortMalloc>

			if( pxStack != NULL )
 80038e8:	4682      	mov	sl, r0
 80038ea:	2800      	cmp	r0, #0
 80038ec:	f000 80a8 	beq.w	8003a40 <xTaskCreate+0x16c>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038f0:	205c      	movs	r0, #92	; 0x5c
 80038f2:	f7ff fecb 	bl	800368c <pvPortMalloc>

				if( pxNewTCB != NULL )
 80038f6:	4604      	mov	r4, r0
 80038f8:	b188      	cbz	r0, 800391e <xTaskCreate+0x4a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038fa:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038fe:	462a      	mov	r2, r5
 8003900:	4650      	mov	r0, sl
 8003902:	21a5      	movs	r1, #165	; 0xa5
 8003904:	f001 fddb 	bl	80054be <memset>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003908:	f1a5 0a04 	sub.w	sl, r5, #4
 800390c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800390e:	44aa      	add	sl, r5
 8003910:	1e7b      	subs	r3, r7, #1
 8003912:	f02a 0a07 	bic.w	sl, sl, #7
 8003916:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800391a:	370f      	adds	r7, #15
 800391c:	e005      	b.n	800392a <xTaskCreate+0x56>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800391e:	4650      	mov	r0, sl
 8003920:	f7ff ff46 	bl	80037b0 <vPortFree>
 8003924:	e08c      	b.n	8003a40 <xTaskCreate+0x16c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003926:	429f      	cmp	r7, r3
 8003928:	d006      	beq.n	8003938 <xTaskCreate+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800392a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800392e:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003932:	7819      	ldrb	r1, [r3, #0]
 8003934:	2900      	cmp	r1, #0
 8003936:	d1f6      	bne.n	8003926 <xTaskCreate+0x52>
 8003938:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800393a:	2d06      	cmp	r5, #6
 800393c:	bf28      	it	cs
 800393e:	2506      	movcs	r5, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003940:	f04f 0b00 	mov.w	fp, #0
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003944:	1d27      	adds	r7, r4, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003946:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003948:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800394a:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800394c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8003950:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003954:	f7ff fcd8 	bl	8003308 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003958:	f1c5 0507 	rsb	r5, r5, #7
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800395c:	f104 0018 	add.w	r0, r4, #24
 8003960:	f7ff fcd2 	bl	8003308 <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003964:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003968:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800396c:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800396e:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003972:	464a      	mov	r2, r9
 8003974:	4641      	mov	r1, r8
 8003976:	4650      	mov	r0, sl
 8003978:	f7ff fd30 	bl	80033dc <pxPortInitialiseStack>
 800397c:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800397e:	b106      	cbz	r6, 8003982 <xTaskCreate+0xae>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003980:	6034      	str	r4, [r6, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003982:	f7ff fd57 	bl	8003434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 8003988:	4e30      	ldr	r6, [pc, #192]	; (8003a4c <xTaskCreate+0x178>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003a78 <xTaskCreate+0x1a4>
 8003990:	3201      	adds	r2, #1
 8003992:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003994:	6835      	ldr	r5, [r6, #0]
 8003996:	bb15      	cbnz	r5, 80039de <xTaskCreate+0x10a>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003998:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d127      	bne.n	80039f0 <xTaskCreate+0x11c>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039a0:	eb08 0005 	add.w	r0, r8, r5
 80039a4:	3514      	adds	r5, #20
 80039a6:	f7ff fca4 	bl	80032f2 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039aa:	2d8c      	cmp	r5, #140	; 0x8c
 80039ac:	d1f8      	bne.n	80039a0 <xTaskCreate+0xcc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80039ae:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003a7c <xTaskCreate+0x1a8>
	vListInitialise( &xDelayedTaskList2 );
 80039b2:	4d27      	ldr	r5, [pc, #156]	; (8003a50 <xTaskCreate+0x17c>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80039b4:	4648      	mov	r0, r9
 80039b6:	f7ff fc9c 	bl	80032f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039ba:	4628      	mov	r0, r5
 80039bc:	f7ff fc99 	bl	80032f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039c0:	4824      	ldr	r0, [pc, #144]	; (8003a54 <xTaskCreate+0x180>)
 80039c2:	f7ff fc96 	bl	80032f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039c6:	4824      	ldr	r0, [pc, #144]	; (8003a58 <xTaskCreate+0x184>)
 80039c8:	f7ff fc93 	bl	80032f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039cc:	4823      	ldr	r0, [pc, #140]	; (8003a5c <xTaskCreate+0x188>)
 80039ce:	f7ff fc90 	bl	80032f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <xTaskCreate+0x18c>)
 80039d4:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039d8:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <xTaskCreate+0x190>)
 80039da:	601d      	str	r5, [r3, #0]
 80039dc:	e008      	b.n	80039f0 <xTaskCreate+0x11c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039de:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <xTaskCreate+0x194>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	b92b      	cbnz	r3, 80039f0 <xTaskCreate+0x11c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039ea:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 80039ec:	bf98      	it	ls
 80039ee:	6034      	strls	r4, [r6, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039f0:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <xTaskCreate+0x198>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039f2:	491f      	ldr	r1, [pc, #124]	; (8003a70 <xTaskCreate+0x19c>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	3301      	adds	r3, #1
 80039f8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		uxTaskNumber++;

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039fc:	6463      	str	r3, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039fe:	2501      	movs	r5, #1
 8003a00:	680b      	ldr	r3, [r1, #0]
 8003a02:	fa05 f002 	lsl.w	r0, r5, r2
 8003a06:	4303      	orrs	r3, r0
 8003a08:	2014      	movs	r0, #20
 8003a0a:	600b      	str	r3, [r1, #0]
 8003a0c:	fb00 8002 	mla	r0, r0, r2, r8
 8003a10:	4639      	mov	r1, r7
 8003a12:	f7ff fc7c 	bl	800330e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a16:	f7ff fd2f 	bl	8003478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <xTaskCreate+0x194>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b163      	cbz	r3, 8003a3a <xTaskCreate+0x166>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a20:	6833      	ldr	r3, [r6, #0]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d207      	bcs.n	8003a3a <xTaskCreate+0x166>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <xTaskCreate+0x1a0>)
 8003a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8003a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a48:	2000429c 	.word	0x2000429c
 8003a4c:	20004274 	.word	0x20004274
 8003a50:	200042a0 	.word	0x200042a0
 8003a54:	20004284 	.word	0x20004284
 8003a58:	2000425c 	.word	0x2000425c
 8003a5c:	200042b8 	.word	0x200042b8
 8003a60:	200041ac 	.word	0x200041ac
 8003a64:	20004280 	.word	0x20004280
 8003a68:	200041b0 	.word	0x200041b0
 8003a6c:	20004298 	.word	0x20004298
 8003a70:	200042cc 	.word	0x200042cc
 8003a74:	e000ed04 	.word	0xe000ed04
 8003a78:	200041d0 	.word	0x200041d0
 8003a7c:	200041b8 	.word	0x200041b8

08003a80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a80:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003a82:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <vTaskStartScheduler+0x60>)
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	2400      	movs	r4, #0
 8003a88:	9400      	str	r4, [sp, #0]
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	4915      	ldr	r1, [pc, #84]	; (8003ae4 <vTaskStartScheduler+0x64>)
 8003a90:	4815      	ldr	r0, [pc, #84]	; (8003ae8 <vTaskStartScheduler+0x68>)
 8003a92:	f7ff ff1f 	bl	80038d4 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a96:	2801      	cmp	r0, #1
 8003a98:	d114      	bne.n	8003ac4 <vTaskStartScheduler+0x44>
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <vTaskStartScheduler+0x6c>)
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <vTaskStartScheduler+0x70>)
 8003ab4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <vTaskStartScheduler+0x74>)
 8003ab8:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003aba:	b002      	add	sp, #8
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ac0:	f7ff bd4a 	b.w	8003558 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d108      	bne.n	8003ada <vTaskStartScheduler+0x5a>
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	e7fe      	b.n	8003ad8 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ada:	b002      	add	sp, #8
 8003adc:	bd10      	pop	{r4, pc}
 8003ade:	bf00      	nop
 8003ae0:	200042b4 	.word	0x200042b4
 8003ae4:	08009e94 	.word	0x08009e94
 8003ae8:	08003d71 	.word	0x08003d71
 8003aec:	20004278 	.word	0x20004278
 8003af0:	200041b0 	.word	0x200041b0
 8003af4:	2000427c 	.word	0x2000427c

08003af8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003af8:	4a02      	ldr	r2, [pc, #8]	; (8003b04 <vTaskSuspendAll+0xc>)
 8003afa:	6813      	ldr	r3, [r2, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	200041b4 	.word	0x200041b4

08003b08 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <xTaskIncrementTick+0x104>)
 8003b0a:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d13b      	bne.n	8003b8c <xTaskIncrementTick+0x84>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003b14:	4b3e      	ldr	r3, [pc, #248]	; (8003c10 <xTaskIncrementTick+0x108>)
 8003b16:	681c      	ldr	r4, [r3, #0]
 8003b18:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b1a:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003b1c:	b9bc      	cbnz	r4, 8003b4e <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <xTaskIncrementTick+0x10c>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	b142      	cbz	r2, 8003b38 <xTaskIncrementTick+0x30>
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	e7fe      	b.n	8003b36 <xTaskIncrementTick+0x2e>
 8003b38:	4a37      	ldr	r2, [pc, #220]	; (8003c18 <xTaskIncrementTick+0x110>)
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	6810      	ldr	r0, [r2, #0]
 8003b3e:	6018      	str	r0, [r3, #0]
 8003b40:	6011      	str	r1, [r2, #0]
 8003b42:	4a36      	ldr	r2, [pc, #216]	; (8003c1c <xTaskIncrementTick+0x114>)
 8003b44:	6813      	ldr	r3, [r2, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	f7ff fe69 	bl	8003820 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b4e:	4d34      	ldr	r5, [pc, #208]	; (8003c20 <xTaskIncrementTick+0x118>)
 8003b50:	9501      	str	r5, [sp, #4]
 8003b52:	682b      	ldr	r3, [r5, #0]
 8003b54:	4e33      	ldr	r6, [pc, #204]	; (8003c24 <xTaskIncrementTick+0x11c>)
 8003b56:	4f34      	ldr	r7, [pc, #208]	; (8003c28 <xTaskIncrementTick+0x120>)
 8003b58:	429c      	cmp	r4, r3
 8003b5a:	f04f 0b00 	mov.w	fp, #0
 8003b5e:	d30b      	bcc.n	8003b78 <xTaskIncrementTick+0x70>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b60:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8003c14 <xTaskIncrementTick+0x10c>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b64:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003c34 <xTaskIncrementTick+0x12c>
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b68:	f8d8 2000 	ldr.w	r2, [r8]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	b9a2      	cbnz	r2, 8003b9a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b70:	9b01      	ldr	r3, [sp, #4]
 8003b72:	f04f 32ff 	mov.w	r2, #4294967295
 8003b76:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b7c:	2214      	movs	r2, #20
 8003b7e:	434a      	muls	r2, r1
 8003b80:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8003b82:	2a02      	cmp	r2, #2
 8003b84:	bf28      	it	cs
 8003b86:	f04f 0b01 	movcs.w	fp, #1
 8003b8a:	e034      	b.n	8003bf6 <xTaskIncrementTick+0xee>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b8c:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <xTaskIncrementTick+0x124>)
 8003b8e:	6813      	ldr	r3, [r2, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b94:	f04f 0b00 	mov.w	fp, #0
 8003b98:	e02d      	b.n	8003bf6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b9a:	f8d8 2000 	ldr.w	r2, [r8]
 8003b9e:	68d2      	ldr	r2, [r2, #12]
 8003ba0:	68d5      	ldr	r5, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ba2:	6869      	ldr	r1, [r5, #4]

					if( xConstTickCount < xItemValue )
 8003ba4:	428c      	cmp	r4, r1
 8003ba6:	d202      	bcs.n	8003bae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ba8:	9b01      	ldr	r3, [sp, #4]
 8003baa:	6019      	str	r1, [r3, #0]
						break;
 8003bac:	e7e4      	b.n	8003b78 <xTaskIncrementTick+0x70>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bae:	f105 0a04 	add.w	sl, r5, #4
 8003bb2:	4650      	mov	r0, sl
 8003bb4:	f7ff fbcf 	bl	8003356 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bb8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003bba:	b119      	cbz	r1, 8003bc4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bbc:	f105 0018 	add.w	r0, r5, #24
 8003bc0:	f7ff fbc9 	bl	8003356 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bc4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003bc6:	f8d9 1000 	ldr.w	r1, [r9]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	fa03 fe00 	lsl.w	lr, r3, r0
 8003bd0:	ea4e 0101 	orr.w	r1, lr, r1
 8003bd4:	f04f 0e14 	mov.w	lr, #20
 8003bd8:	f8c9 1000 	str.w	r1, [r9]
 8003bdc:	fb0e 6000 	mla	r0, lr, r0, r6
 8003be0:	4651      	mov	r1, sl
 8003be2:	f7ff fb94 	bl	800330e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003be6:	6838      	ldr	r0, [r7, #0]
 8003be8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003bea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8003bec:	4291      	cmp	r1, r2
 8003bee:	bf28      	it	cs
 8003bf0:	f04f 0b01 	movcs.w	fp, #1
 8003bf4:	e7b8      	b.n	8003b68 <xTaskIncrementTick+0x60>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <xTaskIncrementTick+0x128>)
 8003bf8:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8003bfa:	2a00      	cmp	r2, #0
 8003bfc:	bf18      	it	ne
 8003bfe:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8003c02:	4658      	mov	r0, fp
 8003c04:	b003      	add	sp, #12
 8003c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200041b4 	.word	0x200041b4
 8003c10:	2000427c 	.word	0x2000427c
 8003c14:	200041ac 	.word	0x200041ac
 8003c18:	20004280 	.word	0x20004280
 8003c1c:	200041a8 	.word	0x200041a8
 8003c20:	20004278 	.word	0x20004278
 8003c24:	200041d0 	.word	0x200041d0
 8003c28:	20004274 	.word	0x20004274
 8003c2c:	200041cc 	.word	0x200041cc
 8003c30:	200042d0 	.word	0x200042d0
 8003c34:	200042cc 	.word	0x200042cc

08003c38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c3c:	4c31      	ldr	r4, [pc, #196]	; (8003d04 <xTaskResumeAll+0xcc>)
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	b943      	cbnz	r3, 8003c54 <xTaskResumeAll+0x1c>
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	e7fe      	b.n	8003c52 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c54:	f7ff fbee 	bl	8003434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c5e:	6824      	ldr	r4, [r4, #0]
 8003c60:	b10c      	cbz	r4, 8003c66 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8003c62:	2400      	movs	r4, #0
 8003c64:	e049      	b.n	8003cfa <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c66:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <xTaskResumeAll+0xd0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f9      	beq.n	8003c62 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c6e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003d20 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8003c72:	4f26      	ldr	r7, [pc, #152]	; (8003d0c <xTaskResumeAll+0xd4>)
 8003c74:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003d24 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c78:	f8d9 3000 	ldr.w	r3, [r9]
 8003c7c:	b303      	cbz	r3, 8003cc0 <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c7e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003c82:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c84:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c86:	f104 0018 	add.w	r0, r4, #24
 8003c8a:	f7ff fb64 	bl	8003356 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f7ff fb61 	bl	8003356 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2501      	movs	r5, #1
 8003c9a:	fa05 f102 	lsl.w	r1, r5, r2
 8003c9e:	2014      	movs	r0, #20
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	fb00 8002 	mla	r0, r0, r2, r8
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	f7ff fb30 	bl	800330e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cae:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <xTaskResumeAll+0xd8>)
 8003cb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8003cb8:	bf24      	itt	cs
 8003cba:	4b16      	ldrcs	r3, [pc, #88]	; (8003d14 <xTaskResumeAll+0xdc>)
 8003cbc:	601d      	strcs	r5, [r3, #0]
 8003cbe:	e7db      	b.n	8003c78 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cc0:	b10c      	cbz	r4, 8003cc6 <xTaskResumeAll+0x8e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cc2:	f7ff fdad 	bl	8003820 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <xTaskResumeAll+0xe0>)
 8003cc8:	681c      	ldr	r4, [r3, #0]
 8003cca:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ccc:	b144      	cbz	r4, 8003ce0 <xTaskResumeAll+0xa8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 8003cce:	4e11      	ldr	r6, [pc, #68]	; (8003d14 <xTaskResumeAll+0xdc>)
 8003cd0:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cd2:	f7ff ff19 	bl	8003b08 <xTaskIncrementTick>
 8003cd6:	b100      	cbz	r0, 8003cda <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
 8003cd8:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cda:	3c01      	subs	r4, #1
 8003cdc:	d1f9      	bne.n	8003cd2 <xTaskResumeAll+0x9a>

						uxPendedTicks = 0;
 8003cde:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <xTaskResumeAll+0xdc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0bc      	beq.n	8003c62 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <xTaskResumeAll+0xe4>)
 8003cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cf8:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cfa:	f7ff fbbd 	bl	8003478 <vPortExitCritical>

	return xAlreadyYielded;
}
 8003cfe:	4620      	mov	r0, r4
 8003d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d04:	200041b4 	.word	0x200041b4
 8003d08:	2000429c 	.word	0x2000429c
 8003d0c:	200042cc 	.word	0x200042cc
 8003d10:	20004274 	.word	0x20004274
 8003d14:	200042d0 	.word	0x200042d0
 8003d18:	200041cc 	.word	0x200041cc
 8003d1c:	e000ed04 	.word	0xe000ed04
 8003d20:	20004284 	.word	0x20004284
 8003d24:	200041d0 	.word	0x200041d0

08003d28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d28:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d2a:	b940      	cbnz	r0, 8003d3e <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <vTaskDelay+0x40>)
 8003d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	bd08      	pop	{r3, pc}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <vTaskDelay+0x44>)
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	b141      	cbz	r1, 8003d56 <vTaskDelay+0x2e>
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	e7fe      	b.n	8003d54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d56:	f7ff fecf 	bl	8003af8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d5a:	f7ff fd73 	bl	8003844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d5e:	f7ff ff6b 	bl	8003c38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d0e2      	beq.n	8003d2c <vTaskDelay+0x4>
 8003d66:	bd08      	pop	{r3, pc}
 8003d68:	e000ed04 	.word	0xe000ed04
 8003d6c:	200041b4 	.word	0x200041b4

08003d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d70:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d72:	4d18      	ldr	r5, [pc, #96]	; (8003dd4 <prvIdleTask+0x64>)
 8003d74:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003d76:	4f18      	ldr	r7, [pc, #96]	; (8003dd8 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	b1f3      	cbz	r3, 8003dba <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8003d7c:	f7ff febc 	bl	8003af8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003d80:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8003d82:	f7ff ff59 	bl	8003c38 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003d86:	2c00      	cmp	r4, #0
 8003d88:	d0f6      	beq.n	8003d78 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003d8a:	f7ff fb53 	bl	8003434 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <prvIdleTask+0x68>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d94:	1d20      	adds	r0, r4, #4
 8003d96:	f7ff fade 	bl	8003356 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <prvIdleTask+0x6c>)
 8003d9c:	6813      	ldr	r3, [r2, #0]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003da2:	6833      	ldr	r3, [r6, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8003da8:	f7ff fb66 	bl	8003478 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003dac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003dae:	f7ff fcff 	bl	80037b0 <vPortFree>
			vPortFree( pxTCB );
 8003db2:	4620      	mov	r0, r4
 8003db4:	f7ff fcfc 	bl	80037b0 <vPortFree>
 8003db8:	e7de      	b.n	8003d78 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <prvIdleTask+0x70>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d9d9      	bls.n	8003d76 <prvIdleTask+0x6>
			{
				taskYIELD();
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <prvIdleTask+0x74>)
 8003dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	e7d0      	b.n	8003d76 <prvIdleTask+0x6>
 8003dd4:	20004270 	.word	0x20004270
 8003dd8:	2000425c 	.word	0x2000425c
 8003ddc:	2000429c 	.word	0x2000429c
 8003de0:	200041d0 	.word	0x200041d0
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <vTaskSwitchContext+0x60>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003df0:	b10a      	cbz	r2, 8003df6 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003df2:	2201      	movs	r2, #1
 8003df4:	e025      	b.n	8003e42 <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 8003df6:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <vTaskSwitchContext+0x68>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f1c3 031f 	rsb	r3, r3, #31
 8003e06:	2214      	movs	r2, #20
 8003e08:	4912      	ldr	r1, [pc, #72]	; (8003e54 <vTaskSwitchContext+0x6c>)
 8003e0a:	435a      	muls	r2, r3
 8003e0c:	1888      	adds	r0, r1, r2
 8003e0e:	588c      	ldr	r4, [r1, r2]
 8003e10:	b944      	cbnz	r4, 8003e24 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	e7fe      	b.n	8003e22 <vTaskSwitchContext+0x3a>
 8003e24:	6844      	ldr	r4, [r0, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	6864      	ldr	r4, [r4, #4]
 8003e2a:	6044      	str	r4, [r0, #4]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	4294      	cmp	r4, r2
 8003e30:	bf04      	itt	eq
 8003e32:	6862      	ldreq	r2, [r4, #4]
 8003e34:	6042      	streq	r2, [r0, #4]
 8003e36:	2214      	movs	r2, #20
 8003e38:	fb02 1303 	mla	r3, r2, r3, r1
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <vTaskSwitchContext+0x70>)
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	bd10      	pop	{r4, pc}
 8003e46:	bf00      	nop
 8003e48:	200041b4 	.word	0x200041b4
 8003e4c:	200042d0 	.word	0x200042d0
 8003e50:	200042cc 	.word	0x200042cc
 8003e54:	200041d0 	.word	0x200041d0
 8003e58:	20004274 	.word	0x20004274

08003e5c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <xTaskGetSchedulerState+0x18>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b133      	cbz	r3, 8003e70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <xTaskGetSchedulerState+0x1c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e68:	bf0c      	ite	eq
 8003e6a:	2002      	moveq	r0, #2
 8003e6c:	2000      	movne	r0, #0
 8003e6e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e70:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8003e72:	4770      	bx	lr
 8003e74:	200041b0 	.word	0x200041b0
 8003e78:	200041b4 	.word	0x200041b4

08003e7c <GetAccelerometerData>:
	/* Return OK */
	return HAL_OK;
}

HAL_StatusTypeDef GetAccelerometerData(MPU_6050* mpu)
{
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	b086      	sub	sp, #24
	uint8_t data[6];
	uint8_t reg = MPU6050_ACC_XOUT_H;
 8003e80:	ad06      	add	r5, sp, #24
 8003e82:	233b      	movs	r3, #59	; 0x3b
 8003e84:	f805 3d09 	strb.w	r3, [r5, #-9]!
	/* Return OK */
	return HAL_OK;
}

HAL_StatusTypeDef GetAccelerometerData(MPU_6050* mpu)
{
 8003e88:	4604      	mov	r4, r0
	uint8_t data[6];
	uint8_t reg = MPU6050_ACC_XOUT_H;
	uint8_t address = MPU6050_I2C_ADDR | MPU6050_Device_0;

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003e8a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003e8e:	9600      	str	r6, [sp, #0]
 8003e90:	2301      	movs	r3, #1
 8003e92:	462a      	mov	r2, r5
 8003e94:	21d0      	movs	r1, #208	; 0xd0
 8003e96:	4813      	ldr	r0, [pc, #76]	; (8003ee4 <GetAccelerometerData+0x68>)
 8003e98:	f7fd fb6c 	bl	8001574 <HAL_I2C_Master_Transmit>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d1f6      	bne.n	8003e8e <GetAccelerometerData+0x12>

	while(HAL_I2C_Master_Receive(&ACC_I2C_HANDLE, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8003ea0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003ea4:	9500      	str	r5, [sp, #0]
 8003ea6:	2306      	movs	r3, #6
 8003ea8:	aa04      	add	r2, sp, #16
 8003eaa:	21d0      	movs	r1, #208	; 0xd0
 8003eac:	480d      	ldr	r0, [pc, #52]	; (8003ee4 <GetAccelerometerData+0x68>)
 8003eae:	f7fd fc39 	bl	8001724 <HAL_I2C_Master_Receive>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d1f6      	bne.n	8003ea4 <GetAccelerometerData+0x28>

	/* Format */
	mpu->acc_x = (int16_t)(data[0] << 8 | data[1]);
 8003eb6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003eba:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003ebe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ec2:	81a3      	strh	r3, [r4, #12]
	mpu->acc_y = (int16_t)(data[2] << 8 | data[3]);
 8003ec4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003ec8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ed0:	81e3      	strh	r3, [r4, #14]
	mpu->acc_z = (int16_t)(data[4] << 8 | data[5]);
 8003ed2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003ed6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003eda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ede:	8223      	strh	r3, [r4, #16]

	/* Return OK */
	return HAL_OK;
}
 8003ee0:	b006      	add	sp, #24
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	20004a4c 	.word	0x20004a4c

08003ee8 <GetGyroData>:

HAL_StatusTypeDef GetGyroData(MPU_6050* mpu)
{
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	b086      	sub	sp, #24
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;;
 8003eec:	ad06      	add	r5, sp, #24
 8003eee:	2343      	movs	r3, #67	; 0x43
 8003ef0:	f805 3d09 	strb.w	r3, [r5, #-9]!
	/* Return OK */
	return HAL_OK;
}

HAL_StatusTypeDef GetGyroData(MPU_6050* mpu)
{
 8003ef4:	4604      	mov	r4, r0
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;;
	uint8_t address = MPU6050_I2C_ADDR | MPU6050_Device_0;

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003ef6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003efa:	9600      	str	r6, [sp, #0]
 8003efc:	2301      	movs	r3, #1
 8003efe:	462a      	mov	r2, r5
 8003f00:	21d0      	movs	r1, #208	; 0xd0
 8003f02:	4813      	ldr	r0, [pc, #76]	; (8003f50 <GetGyroData+0x68>)
 8003f04:	f7fd fb36 	bl	8001574 <HAL_I2C_Master_Transmit>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d1f6      	bne.n	8003efa <GetGyroData+0x12>

	while(HAL_I2C_Master_Receive(&ACC_I2C_HANDLE, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8003f0c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003f10:	9500      	str	r5, [sp, #0]
 8003f12:	2306      	movs	r3, #6
 8003f14:	aa04      	add	r2, sp, #16
 8003f16:	21d0      	movs	r1, #208	; 0xd0
 8003f18:	480d      	ldr	r0, [pc, #52]	; (8003f50 <GetGyroData+0x68>)
 8003f1a:	f7fd fc03 	bl	8001724 <HAL_I2C_Master_Receive>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d1f6      	bne.n	8003f10 <GetGyroData+0x28>

	/* Format */
	mpu->gyro_x = (int16_t)(data[0] << 8 | data[1]);
 8003f22:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003f26:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003f2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f2e:	8263      	strh	r3, [r4, #18]
	mpu->gyro_y = (int16_t)(data[2] << 8 | data[3]);
 8003f30:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003f34:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003f38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f3c:	82a3      	strh	r3, [r4, #20]
	mpu->gyro_z = (int16_t)(data[4] << 8 | data[5]);
 8003f3e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003f42:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003f46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f4a:	82e3      	strh	r3, [r4, #22]

	/* Return OK */
	return HAL_OK;
}
 8003f4c:	b006      	add	sp, #24
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	20004a4c 	.word	0x20004a4c

08003f54 <AccelerometerInit>:

HAL_StatusTypeDef AccelerometerInit() {
 8003f54:	b530      	push	{r4, r5, lr}
 8003f56:	b085      	sub	sp, #20
	uint8_t reg = 0x00;
 8003f58:	2300      	movs	r3, #0
	uint8_t received = 0x00;
	uint8_t d[2];

	uint8_t WHO_AM_I = MPU6050_WHO_AM_I;
 8003f5a:	aa04      	add	r2, sp, #16
	/* Return OK */
	return HAL_OK;
}

HAL_StatusTypeDef AccelerometerInit() {
	uint8_t reg = 0x00;
 8003f5c:	f88d 3009 	strb.w	r3, [sp, #9]
	uint8_t received = 0x00;
 8003f60:	f88d 300a 	strb.w	r3, [sp, #10]
	uint8_t address = MPU6050_I2C_ADDR | MPU6050_Device_0;

	/* Check who am I */
	//------------------
	/* Send address */
	if (HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, address, &WHO_AM_I, 1, 1000)
 8003f64:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
HAL_StatusTypeDef AccelerometerInit() {
	uint8_t reg = 0x00;
	uint8_t received = 0x00;
	uint8_t d[2];

	uint8_t WHO_AM_I = MPU6050_WHO_AM_I;
 8003f68:	2375      	movs	r3, #117	; 0x75
 8003f6a:	f802 3d05 	strb.w	r3, [r2, #-5]!
	uint8_t address = MPU6050_I2C_ADDR | MPU6050_Device_0;

	/* Check who am I */
	//------------------
	/* Send address */
	if (HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, address, &WHO_AM_I, 1, 1000)
 8003f6e:	21d0      	movs	r1, #208	; 0xd0
 8003f70:	9400      	str	r4, [sp, #0]
 8003f72:	2301      	movs	r3, #1
 8003f74:	484f      	ldr	r0, [pc, #316]	; (80040b4 <AccelerometerInit+0x160>)
 8003f76:	f7fd fafd 	bl	8001574 <HAL_I2C_Master_Transmit>
 8003f7a:	b110      	cbz	r0, 8003f82 <AccelerometerInit+0x2e>
			!= HAL_OK) {
		printf("[DEBUG] Whoami address send error. \n\r");
 8003f7c:	484e      	ldr	r0, [pc, #312]	; (80040b8 <AccelerometerInit+0x164>)
 8003f7e:	f001 faa9 	bl	80054d4 <printf>
	}
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(&ACC_I2C_HANDLE, address, &received, 1, 1000)
 8003f82:	9400      	str	r4, [sp, #0]
 8003f84:	2301      	movs	r3, #1
 8003f86:	f10d 020a 	add.w	r2, sp, #10
 8003f8a:	21d0      	movs	r1, #208	; 0xd0
 8003f8c:	4849      	ldr	r0, [pc, #292]	; (80040b4 <AccelerometerInit+0x160>)
 8003f8e:	f7fd fbc9 	bl	8001724 <HAL_I2C_Master_Receive>
 8003f92:	b110      	cbz	r0, 8003f9a <AccelerometerInit+0x46>
			!= HAL_OK) {
		printf("[DEBUG] Receive whoami error. \n\r");
 8003f94:	4849      	ldr	r0, [pc, #292]	; (80040bc <AccelerometerInit+0x168>)
 8003f96:	f001 fa9d 	bl	80054d4 <printf>
	}
	/* Checking */
	if (received != MPU6050_I_AM) {
 8003f9a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003f9e:	2b68      	cmp	r3, #104	; 0x68
 8003fa0:	d002      	beq.n	8003fa8 <AccelerometerInit+0x54>
		/* Return error */
		printf("[DEBUG / CRITICAL MASSIVE ASSERTION ERROR] I DONT KNOW WHO AM I. \n\r");
 8003fa2:	4847      	ldr	r0, [pc, #284]	; (80040c0 <AccelerometerInit+0x16c>)
 8003fa4:	f001 fa96 	bl	80054d4 <printf>
	//------------------
	/* Wakeup MPU6050 */
	//------------------
	/* Format array to send */
	//uint8_t address = MPU6050_PWR_MGMT1 | MPU6050_Device_0;
	d[0] = MPU6050_PWR_MGMT1;
 8003fa8:	236b      	movs	r3, #107	; 0x6b
 8003faa:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = 0x00;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f88d 300d 	strb.w	r3, [sp, #13]
	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK) {
 8003fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	aa03      	add	r2, sp, #12
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	21d0      	movs	r1, #208	; 0xd0
 8003fc0:	483c      	ldr	r0, [pc, #240]	; (80040b4 <AccelerometerInit+0x160>)
 8003fc2:	f7fd fad7 	bl	8001574 <HAL_I2C_Master_Transmit>
 8003fc6:	b110      	cbz	r0, 8003fce <AccelerometerInit+0x7a>
		printf("[DEBUG] Wakeup error. \n\r");
 8003fc8:	483e      	ldr	r0, [pc, #248]	; (80040c4 <AccelerometerInit+0x170>)
 8003fca:	f001 fa83 	bl	80054d4 <printf>
	}
	//------------------
	/* Set sample rate to 1kHz */
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8003fce:	2319      	movs	r3, #25
 8003fd0:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = MPU6050_DataRate_1KHz;
 8003fd4:	2307      	movs	r3, #7
 8003fd6:	f88d 300d 	strb.w	r3, [sp, #13]
	while (HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, (uint16_t) address, (uint8_t *) d, 2, 1000) != HAL_OK);
 8003fda:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003fde:	9400      	str	r4, [sp, #0]
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	aa03      	add	r2, sp, #12
 8003fe4:	21d0      	movs	r1, #208	; 0xd0
 8003fe6:	4833      	ldr	r0, [pc, #204]	; (80040b4 <AccelerometerInit+0x160>)
 8003fe8:	f7fd fac4 	bl	8001574 <HAL_I2C_Master_Transmit>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d1f6      	bne.n	8003fde <AccelerometerInit+0x8a>

	/* Config accelerometer */
	reg =(uint8_t )MPU6050_ACC_CONFIG;
 8003ff0:	ac04      	add	r4, sp, #16
 8003ff2:	231c      	movs	r3, #28
 8003ff4:	f804 3d07 	strb.w	r3, [r4, #-7]!
	while(HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003ff8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003ffc:	9500      	str	r5, [sp, #0]
 8003ffe:	2301      	movs	r3, #1
 8004000:	4622      	mov	r2, r4
 8004002:	21d0      	movs	r1, #208	; 0xd0
 8004004:	482b      	ldr	r0, [pc, #172]	; (80040b4 <AccelerometerInit+0x160>)
 8004006:	f7fd fab5 	bl	8001574 <HAL_I2C_Master_Transmit>
 800400a:	2800      	cmp	r0, #0
 800400c:	d1f6      	bne.n	8003ffc <AccelerometerInit+0xa8>
	while(HAL_I2C_Master_Receive(&ACC_I2C_HANDLE, (uint16_t)address, &received, 1, 1000) != HAL_OK);
 800400e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004012:	9500      	str	r5, [sp, #0]
 8004014:	2301      	movs	r3, #1
 8004016:	f10d 020a 	add.w	r2, sp, #10
 800401a:	21d0      	movs	r1, #208	; 0xd0
 800401c:	4825      	ldr	r0, [pc, #148]	; (80040b4 <AccelerometerInit+0x160>)
 800401e:	f7fd fb81 	bl	8001724 <HAL_I2C_Master_Receive>
 8004022:	2800      	cmp	r0, #0
 8004024:	d1f5      	bne.n	8004012 <AccelerometerInit+0xbe>
	received = (received & 0xE7) | (uint8_t)MPU6050_Accelerometer_2G << 3;
 8004026:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800402a:	f023 0318 	bic.w	r3, r3, #24
 800402e:	f88d 300a 	strb.w	r3, [sp, #10]
	while(HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, (uint16_t)address, &received, 1, 1000) != HAL_OK);
 8004032:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004036:	9500      	str	r5, [sp, #0]
 8004038:	2301      	movs	r3, #1
 800403a:	f10d 020a 	add.w	r2, sp, #10
 800403e:	21d0      	movs	r1, #208	; 0xd0
 8004040:	481c      	ldr	r0, [pc, #112]	; (80040b4 <AccelerometerInit+0x160>)
 8004042:	f7fd fa97 	bl	8001574 <HAL_I2C_Master_Transmit>
 8004046:	2800      	cmp	r0, #0
 8004048:	d1f5      	bne.n	8004036 <AccelerometerInit+0xe2>

	gsens = (float)1 / MPU6050_GYRO_SENS_250;
 800404a:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <AccelerometerInit+0x174>)
 800404c:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <AccelerometerInit+0x178>)
 800404e:	601a      	str	r2, [r3, #0]
	asens = (float)1 / MPU6050_ACCE_SENS_2;
 8004050:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <AccelerometerInit+0x17c>)
 8004052:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8004056:	601a      	str	r2, [r3, #0]

	/* Config Gyroscope */
	reg =(uint8_t )MPU6050_GYRO_CONFIG;
 8004058:	231b      	movs	r3, #27
 800405a:	f88d 3009 	strb.w	r3, [sp, #9]
	while(HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, (uint16_t)address,&reg, 1, 1000) != HAL_OK);
 800405e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004062:	9500      	str	r5, [sp, #0]
 8004064:	2301      	movs	r3, #1
 8004066:	4622      	mov	r2, r4
 8004068:	21d0      	movs	r1, #208	; 0xd0
 800406a:	4812      	ldr	r0, [pc, #72]	; (80040b4 <AccelerometerInit+0x160>)
 800406c:	f7fd fa82 	bl	8001574 <HAL_I2C_Master_Transmit>
 8004070:	2800      	cmp	r0, #0
 8004072:	d1f6      	bne.n	8004062 <AccelerometerInit+0x10e>
	while(HAL_I2C_Master_Receive(&ACC_I2C_HANDLE, (uint16_t)address, &received, 1, 1000) != HAL_OK);
 8004074:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004078:	9400      	str	r4, [sp, #0]
 800407a:	2301      	movs	r3, #1
 800407c:	f10d 020a 	add.w	r2, sp, #10
 8004080:	21d0      	movs	r1, #208	; 0xd0
 8004082:	480c      	ldr	r0, [pc, #48]	; (80040b4 <AccelerometerInit+0x160>)
 8004084:	f7fd fb4e 	bl	8001724 <HAL_I2C_Master_Receive>
 8004088:	2800      	cmp	r0, #0
 800408a:	d1f5      	bne.n	8004078 <AccelerometerInit+0x124>
	received = (received & 0xE7) | (uint8_t)MPU6050_Gyroscope_250s << 3;
 800408c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004090:	f023 0318 	bic.w	r3, r3, #24
 8004094:	f88d 300a 	strb.w	r3, [sp, #10]
	while(HAL_I2C_Master_Transmit(&ACC_I2C_HANDLE, (uint16_t)address,&received, 1, 1000) != HAL_OK);
 8004098:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800409c:	9400      	str	r4, [sp, #0]
 800409e:	2301      	movs	r3, #1
 80040a0:	f10d 020a 	add.w	r2, sp, #10
 80040a4:	21d0      	movs	r1, #208	; 0xd0
 80040a6:	4803      	ldr	r0, [pc, #12]	; (80040b4 <AccelerometerInit+0x160>)
 80040a8:	f7fd fa64 	bl	8001574 <HAL_I2C_Master_Transmit>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d1f5      	bne.n	800409c <AccelerometerInit+0x148>

	/* Return OK */
	return HAL_OK;
}
 80040b0:	b005      	add	sp, #20
 80040b2:	bd30      	pop	{r4, r5, pc}
 80040b4:	20004a4c 	.word	0x20004a4c
 80040b8:	08009ecf 	.word	0x08009ecf
 80040bc:	08009ef5 	.word	0x08009ef5
 80040c0:	08009f16 	.word	0x08009f16
 80040c4:	08009f5a 	.word	0x08009f5a
 80040c8:	20004328 	.word	0x20004328
 80040cc:	3bfa232d 	.word	0x3bfa232d
 80040d0:	20004324 	.word	0x20004324
 80040d4:	00000000 	.word	0x00000000

080040d8 <ComplementaryFilter>:

void ComplementaryFilter(MPU_6050* mpu, float *pitch, float *roll)
{
 80040d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float pitchAcc, rollAcc;
    // Integrate the gyroscope data -> int(angularSpeed) = angle
    *pitch += (float)mpu->gyro_x * gsens * dt; // Angle around the X-axis
 80040dc:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 80040e0:	4f6d      	ldr	r7, [pc, #436]	; (8004298 <ComplementaryFilter+0x1c0>)
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	ed97 7a00 	vldr	s14, [r7]
 80040ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	/* Return OK */
	return HAL_OK;
}

void ComplementaryFilter(MPU_6050* mpu, float *pitch, float *roll)
{
 80040ee:	ed2d 8b02 	vpush	{d8}
    float pitchAcc, rollAcc;
    // Integrate the gyroscope data -> int(angularSpeed) = angle
    *pitch += (float)mpu->gyro_x * gsens * dt; // Angle around the X-axis
 80040f2:	ee67 7a87 	vmul.f32	s15, s15, s14
	/* Return OK */
	return HAL_OK;
}

void ComplementaryFilter(MPU_6050* mpu, float *pitch, float *roll)
{
 80040f6:	4604      	mov	r4, r0
    float pitchAcc, rollAcc;
    // Integrate the gyroscope data -> int(angularSpeed) = angle
    *pitch += (float)mpu->gyro_x * gsens * dt; // Angle around the X-axis
 80040f8:	ee17 0a90 	vmov	r0, s15
	/* Return OK */
	return HAL_OK;
}

void ComplementaryFilter(MPU_6050* mpu, float *pitch, float *roll)
{
 80040fc:	4615      	mov	r5, r2
 80040fe:	460e      	mov	r6, r1
    float pitchAcc, rollAcc;
    // Integrate the gyroscope data -> int(angularSpeed) = angle
    *pitch += (float)mpu->gyro_x * gsens * dt; // Angle around the X-axis
 8004100:	f7fc fa22 	bl	8000548 <__aeabi_f2d>
 8004104:	a35c      	add	r3, pc, #368	; (adr r3, 8004278 <ComplementaryFilter+0x1a0>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f7fc fa71 	bl	80005f0 <__aeabi_dmul>
 800410e:	4680      	mov	r8, r0
 8004110:	6830      	ldr	r0, [r6, #0]
 8004112:	4689      	mov	r9, r1
 8004114:	f7fc fa18 	bl	8000548 <__aeabi_f2d>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4640      	mov	r0, r8
 800411e:	4649      	mov	r1, r9
 8004120:	f7fc f8b4 	bl	800028c <__adddf3>
 8004124:	f7fc fd3c 	bl	8000ba0 <__aeabi_d2f>
 8004128:	6030      	str	r0, [r6, #0]
    *roll -= (float)mpu->gyro_y * gsens * dt;    // Angle around the Y-axis
 800412a:	6828      	ldr	r0, [r5, #0]
 800412c:	f7fc fa0c 	bl	8000548 <__aeabi_f2d>
 8004130:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8004134:	ed97 7a00 	vldr	s14, [r7]
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004140:	4680      	mov	r8, r0
 8004142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004146:	4689      	mov	r9, r1
 8004148:	ee17 0a90 	vmov	r0, s15
 800414c:	f7fc f9fc 	bl	8000548 <__aeabi_f2d>
 8004150:	a349      	add	r3, pc, #292	; (adr r3, 8004278 <ComplementaryFilter+0x1a0>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f7fc fa4b 	bl	80005f0 <__aeabi_dmul>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4640      	mov	r0, r8
 8004160:	4649      	mov	r1, r9
 8004162:	f7fc f891 	bl	8000288 <__aeabi_dsub>
 8004166:	f7fc fd1b 	bl	8000ba0 <__aeabi_d2f>

    // Compensate for drift with accelerometer data if !bullshit
    // Sensitivity = -2 to 2 G at 16Bit -> 2G = 32768 && 0.5G = 8192
    int forceMagnitudeApprox = abs(mpu->acc_x) + abs(mpu->acc_y) + abs(mpu->acc_z);
    if (forceMagnitudeApprox > 8192 && forceMagnitudeApprox < 32768)
 800416a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    *pitch += (float)mpu->gyro_x * gsens * dt; // Angle around the X-axis
    *roll -= (float)mpu->gyro_y * gsens * dt;    // Angle around the Y-axis

    // Compensate for drift with accelerometer data if !bullshit
    // Sensitivity = -2 to 2 G at 16Bit -> 2G = 32768 && 0.5G = 8192
    int forceMagnitudeApprox = abs(mpu->acc_x) + abs(mpu->acc_y) + abs(mpu->acc_z);
 800416e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
void ComplementaryFilter(MPU_6050* mpu, float *pitch, float *roll)
{
    float pitchAcc, rollAcc;
    // Integrate the gyroscope data -> int(angularSpeed) = angle
    *pitch += (float)mpu->gyro_x * gsens * dt; // Angle around the X-axis
    *roll -= (float)mpu->gyro_y * gsens * dt;    // Angle around the Y-axis
 8004172:	6028      	str	r0, [r5, #0]

    // Compensate for drift with accelerometer data if !bullshit
    // Sensitivity = -2 to 2 G at 16Bit -> 2G = 32768 && 0.5G = 8192
    int forceMagnitudeApprox = abs(mpu->acc_x) + abs(mpu->acc_y) + abs(mpu->acc_z);
    if (forceMagnitudeApprox > 8192 && forceMagnitudeApprox < 32768)
 8004174:	2b00      	cmp	r3, #0
    *pitch += (float)mpu->gyro_x * gsens * dt; // Angle around the X-axis
    *roll -= (float)mpu->gyro_y * gsens * dt;    // Angle around the Y-axis

    // Compensate for drift with accelerometer data if !bullshit
    // Sensitivity = -2 to 2 G at 16Bit -> 2G = 32768 && 0.5G = 8192
    int forceMagnitudeApprox = abs(mpu->acc_x) + abs(mpu->acc_y) + abs(mpu->acc_z);
 8004176:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
    if (forceMagnitudeApprox > 8192 && forceMagnitudeApprox < 32768)
 800417a:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800417e:	bfb8      	it	lt
 8004180:	425b      	neglt	r3, r3
 8004182:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8004186:	4413      	add	r3, r2
 8004188:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800418c:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 8004190:	4413      	add	r3, r2
 8004192:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8004196:	3b01      	subs	r3, #1
 8004198:	f645 72fe 	movw	r2, #24574	; 0x5ffe
 800419c:	4293      	cmp	r3, r2
 800419e:	d867      	bhi.n	8004270 <ComplementaryFilter+0x198>
    {
	// Turning around the X axis results in a vector on the Y-axis
        pitchAcc = atan2f((float)mpu->acc_y, (float)mpu->acc_z) * 180 / M_PI;
 80041a0:	ee07 0a90 	vmov	s15, r0
 80041a4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80041a8:	ee07 1a90 	vmov	s15, r1
 80041ac:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80041b0:	f005 fc99 	bl	8009ae6 <atan2f>
        *pitch = *pitch * 0.98 + pitchAcc * 0.02;
 80041b4:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800429c <ComplementaryFilter+0x1c4>
 80041b8:	ee60 7a08 	vmul.f32	s15, s0, s16
 80041bc:	ee17 0a90 	vmov	r0, s15
 80041c0:	f7fc f9c2 	bl	8000548 <__aeabi_f2d>
 80041c4:	a32e      	add	r3, pc, #184	; (adr r3, 8004280 <ComplementaryFilter+0x1a8>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f7fc fb3b 	bl	8000844 <__aeabi_ddiv>
 80041ce:	f7fc fce7 	bl	8000ba0 <__aeabi_d2f>
 80041d2:	f7fc f9b9 	bl	8000548 <__aeabi_f2d>
 80041d6:	a32c      	add	r3, pc, #176	; (adr r3, 8004288 <ComplementaryFilter+0x1b0>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc fa08 	bl	80005f0 <__aeabi_dmul>
 80041e0:	4680      	mov	r8, r0
 80041e2:	6830      	ldr	r0, [r6, #0]
 80041e4:	4689      	mov	r9, r1
 80041e6:	f7fc f9af 	bl	8000548 <__aeabi_f2d>
 80041ea:	a329      	add	r3, pc, #164	; (adr r3, 8004290 <ComplementaryFilter+0x1b8>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc f9fe 	bl	80005f0 <__aeabi_dmul>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4640      	mov	r0, r8
 80041fa:	4649      	mov	r1, r9
 80041fc:	f7fc f846 	bl	800028c <__adddf3>
 8004200:	f7fc fcce 	bl	8000ba0 <__aeabi_d2f>

	// Turning around the Y axis results in a vector on the X-axis
        rollAcc = atan2f((float)mpu->acc_x, (float)mpu->acc_z) * 180 / M_PI;
 8004204:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
    int forceMagnitudeApprox = abs(mpu->acc_x) + abs(mpu->acc_y) + abs(mpu->acc_z);
    if (forceMagnitudeApprox > 8192 && forceMagnitudeApprox < 32768)
    {
	// Turning around the X axis results in a vector on the Y-axis
        pitchAcc = atan2f((float)mpu->acc_y, (float)mpu->acc_z) * 180 / M_PI;
        *pitch = *pitch * 0.98 + pitchAcc * 0.02;
 8004208:	6030      	str	r0, [r6, #0]

	// Turning around the Y axis results in a vector on the X-axis
        rollAcc = atan2f((float)mpu->acc_x, (float)mpu->acc_z) * 180 / M_PI;
 800420a:	ee00 3a90 	vmov	s1, r3
 800420e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004212:	ee00 3a10 	vmov	s0, r3
 8004216:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800421a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800421e:	f005 fc62 	bl	8009ae6 <atan2f>
        *roll = *roll * 0.98 + rollAcc * 0.02;
 8004222:	ee60 7a08 	vmul.f32	s15, s0, s16
 8004226:	ee17 0a90 	vmov	r0, s15
 800422a:	f7fc f98d 	bl	8000548 <__aeabi_f2d>
 800422e:	a314      	add	r3, pc, #80	; (adr r3, 8004280 <ComplementaryFilter+0x1a8>)
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f7fc fb06 	bl	8000844 <__aeabi_ddiv>
 8004238:	f7fc fcb2 	bl	8000ba0 <__aeabi_d2f>
 800423c:	f7fc f984 	bl	8000548 <__aeabi_f2d>
 8004240:	a311      	add	r3, pc, #68	; (adr r3, 8004288 <ComplementaryFilter+0x1b0>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f7fc f9d3 	bl	80005f0 <__aeabi_dmul>
 800424a:	4606      	mov	r6, r0
 800424c:	6828      	ldr	r0, [r5, #0]
 800424e:	460f      	mov	r7, r1
 8004250:	f7fc f97a 	bl	8000548 <__aeabi_f2d>
 8004254:	a30e      	add	r3, pc, #56	; (adr r3, 8004290 <ComplementaryFilter+0x1b8>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f7fc f9c9 	bl	80005f0 <__aeabi_dmul>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4630      	mov	r0, r6
 8004264:	4639      	mov	r1, r7
 8004266:	f7fc f811 	bl	800028c <__adddf3>
 800426a:	f7fc fc99 	bl	8000ba0 <__aeabi_d2f>
 800426e:	6028      	str	r0, [r5, #0]
    }
}
 8004270:	ecbd 8b02 	vpop	{d8}
 8004274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004278:	47ae147b 	.word	0x47ae147b
 800427c:	3f847ae1 	.word	0x3f847ae1
 8004280:	54442eea 	.word	0x54442eea
 8004284:	400921fb 	.word	0x400921fb
 8004288:	47ae147b 	.word	0x47ae147b
 800428c:	3f947ae1 	.word	0x3f947ae1
 8004290:	f5c28f5c 	.word	0xf5c28f5c
 8004294:	3fef5c28 	.word	0x3fef5c28
 8004298:	20004328 	.word	0x20004328
 800429c:	43340000 	.word	0x43340000

080042a0 <GSM_Parse>:
#include <stdlib.h>
#include <string.h>
#include "GSM.h"

void GSM_Parse()
{
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if((char)gsm_Received == '\r')
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <GSM_Parse+0x6c>)
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <GSM_Parse+0x70>)
 80042a8:	2a0d      	cmp	r2, #13
#include <stdlib.h>
#include <string.h>
#include "GSM.h"

void GSM_Parse()
{
 80042aa:	af00      	add	r7, sp, #0
	if((char)gsm_Received == '\r')
 80042ac:	d101      	bne.n	80042b2 <GSM_Parse+0x12>
	{
		gsm_isCR = 1;
 80042ae:	2201      	movs	r2, #1
 80042b0:	e029      	b.n	8004306 <GSM_Parse+0x66>
	}
	else if((char)gsm_Received == '\n' && gsm_isCR==1){
 80042b2:	2a0a      	cmp	r2, #10
 80042b4:	d126      	bne.n	8004304 <GSM_Parse+0x64>
 80042b6:	681d      	ldr	r5, [r3, #0]
 80042b8:	2d01      	cmp	r5, #1
 80042ba:	d123      	bne.n	8004304 <GSM_Parse+0x64>

		char newBuff[gsm_currSize];
 80042bc:	4c15      	ldr	r4, [pc, #84]	; (8004314 <GSM_Parse+0x74>)
		memcpy(newBuff, gsm_buffer, gsm_currSize);
 80042be:	4916      	ldr	r1, [pc, #88]	; (8004318 <GSM_Parse+0x78>)
	{
		gsm_isCR = 1;
	}
	else if((char)gsm_Received == '\n' && gsm_isCR==1){

		char newBuff[gsm_currSize];
 80042c0:	6822      	ldr	r2, [r4, #0]
 80042c2:	1dd3      	adds	r3, r2, #7
 80042c4:	f023 0307 	bic.w	r3, r3, #7
{
	if((char)gsm_Received == '\r')
	{
		gsm_isCR = 1;
	}
	else if((char)gsm_Received == '\n' && gsm_isCR==1){
 80042c8:	466e      	mov	r6, sp

		char newBuff[gsm_currSize];
 80042ca:	ebad 0d03 	sub.w	sp, sp, r3
		memcpy(newBuff, gsm_buffer, gsm_currSize);
 80042ce:	4668      	mov	r0, sp
 80042d0:	f001 f8ea 	bl	80054a8 <memcpy>
		//printf("[DBG BUF]: %s\r\n",newBuff);

		if (strstr(newBuff, "OK\r\n") != NULL)
 80042d4:	4911      	ldr	r1, [pc, #68]	; (800431c <GSM_Parse+0x7c>)
 80042d6:	4668      	mov	r0, sp
 80042d8:	f001 f9a4 	bl	8005624 <strstr>
 80042dc:	b120      	cbz	r0, 80042e8 <GSM_Parse+0x48>
		{
			GSM_Status = HAL_OK;
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <GSM_Parse+0x80>)
			printf("[DBG] RECEIVED OK\r\n");
 80042e0:	4810      	ldr	r0, [pc, #64]	; (8004324 <GSM_Parse+0x84>)
		memcpy(newBuff, gsm_buffer, gsm_currSize);
		//printf("[DBG BUF]: %s\r\n",newBuff);

		if (strstr(newBuff, "OK\r\n") != NULL)
		{
			GSM_Status = HAL_OK;
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e007      	b.n	80042f8 <GSM_Parse+0x58>
			printf("[DBG] RECEIVED OK\r\n");
		}
		else if(strstr(newBuff, "ERROR\r\n") != NULL)
 80042e8:	490f      	ldr	r1, [pc, #60]	; (8004328 <GSM_Parse+0x88>)
 80042ea:	4668      	mov	r0, sp
 80042ec:	f001 f99a 	bl	8005624 <strstr>
 80042f0:	b120      	cbz	r0, 80042fc <GSM_Parse+0x5c>
		{
			GSM_Status = HAL_ERROR;
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <GSM_Parse+0x80>)
			printf("[DBG] RECEIVED ERROR\r\n");
 80042f4:	480d      	ldr	r0, [pc, #52]	; (800432c <GSM_Parse+0x8c>)
			GSM_Status = HAL_OK;
			printf("[DBG] RECEIVED OK\r\n");
		}
		else if(strstr(newBuff, "ERROR\r\n") != NULL)
		{
			GSM_Status = HAL_ERROR;
 80042f6:	701d      	strb	r5, [r3, #0]
			printf("[DBG] RECEIVED ERROR\r\n");
 80042f8:	f001 f950 	bl	800559c <puts>
		}
		gsm_currSize = 0; //clear buffer
 80042fc:	2300      	movs	r3, #0
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	46b5      	mov	sp, r6
{
	if((char)gsm_Received == '\r')
	{
		gsm_isCR = 1;
	}
	else if((char)gsm_Received == '\n' && gsm_isCR==1){
 8004302:	e001      	b.n	8004308 <GSM_Parse+0x68>
		}
		gsm_currSize = 0; //clear buffer
	}
	else
	{
		gsm_isCR=0;
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
	}
}
 8004308:	46bd      	mov	sp, r7
 800430a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800430c:	20004469 	.word	0x20004469
 8004310:	2000446c 	.word	0x2000446c
 8004314:	20004470 	.word	0x20004470
 8004318:	200045a4 	.word	0x200045a4
 800431c:	08009f73 	.word	0x08009f73
 8004320:	20004468 	.word	0x20004468
 8004324:	08009f78 	.word	0x08009f78
 8004328:	08009f8b 	.word	0x08009f8b
 800432c:	08009f93 	.word	0x08009f93

08004330 <GSM_ConfigureSMS>:
		sending = 0;
	}
}

void GSM_ConfigureSMS()
{
 8004330:	b500      	push	{lr}
 8004332:	b0cd      	sub	sp, #308	; 0x134
	uint8_t data[GSM_MAX_MESSAGE_SIZE];
	uint16_t MessageSize;
	MessageSize=sprintf(data,"AT+CMGF=1\r\n");
 8004334:	4905      	ldr	r1, [pc, #20]	; (800434c <GSM_ConfigureSMS+0x1c>)
 8004336:	a801      	add	r0, sp, #4
 8004338:	f001 f96c 	bl	8005614 <strcpy>
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 800433c:	220b      	movs	r2, #11
 800433e:	a901      	add	r1, sp, #4
 8004340:	4803      	ldr	r0, [pc, #12]	; (8004350 <GSM_ConfigureSMS+0x20>)
 8004342:	f7fe fe7f 	bl	8003044 <HAL_UART_Transmit_IT>
}
 8004346:	b04d      	add	sp, #308	; 0x134
 8004348:	f85d fb04 	ldr.w	pc, [sp], #4
 800434c:	08009fa9 	.word	0x08009fa9
 8004350:	20004ba8 	.word	0x20004ba8

08004354 <GSM_SetNumber>:

void GSM_SetNumber()
{
 8004354:	b510      	push	{r4, lr}
	MessageSize=sprintf(data,"AT+CMGS=\"48792770832\"\r\n");
 8004356:	4c09      	ldr	r4, [pc, #36]	; (800437c <GSM_SetNumber+0x28>)
 8004358:	4909      	ldr	r1, [pc, #36]	; (8004380 <GSM_SetNumber+0x2c>)
 800435a:	4620      	mov	r0, r4
 800435c:	f001 f95a 	bl	8005614 <strcpy>
 8004360:	4b08      	ldr	r3, [pc, #32]	; (8004384 <GSM_SetNumber+0x30>)
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 8004362:	4809      	ldr	r0, [pc, #36]	; (8004388 <GSM_SetNumber+0x34>)
 8004364:	4621      	mov	r1, r4
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
}

void GSM_SetNumber()
{
	MessageSize=sprintf(data,"AT+CMGS=\"48792770832\"\r\n");
 8004366:	2217      	movs	r2, #23
 8004368:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 800436a:	f7fe fe6b 	bl	8003044 <HAL_UART_Transmit_IT>
	printf("[DBG] Send buffer: %s",data);
 800436e:	4621      	mov	r1, r4
 8004370:	4806      	ldr	r0, [pc, #24]	; (800438c <GSM_SetNumber+0x38>)
}
 8004372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void GSM_SetNumber()
{
	MessageSize=sprintf(data,"AT+CMGS=\"48792770832\"\r\n");
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
	printf("[DBG] Send buffer: %s",data);
 8004376:	f001 b8ad 	b.w	80054d4 <printf>
 800437a:	bf00      	nop
 800437c:	20004476 	.word	0x20004476
 8004380:	08009fb5 	.word	0x08009fb5
 8004384:	20004474 	.word	0x20004474
 8004388:	20004ba8 	.word	0x20004ba8
 800438c:	08009fcd 	.word	0x08009fcd

08004390 <GSM_SendTestMessage>:
}

void GSM_SendTestMessage()
{
 8004390:	b510      	push	{r4, lr}
	HAL_Delay(100);
 8004392:	2064      	movs	r0, #100	; 0x64
 8004394:	f7fc fe08 	bl	8000fa8 <HAL_Delay>
	MessageSize=sprintf(data,msg);
 8004398:	4912      	ldr	r1, [pc, #72]	; (80043e4 <GSM_SendTestMessage+0x54>)
 800439a:	4813      	ldr	r0, [pc, #76]	; (80043e8 <GSM_SendTestMessage+0x58>)
 800439c:	4c13      	ldr	r4, [pc, #76]	; (80043ec <GSM_SendTestMessage+0x5c>)
 800439e:	f001 f915 	bl	80055cc <sprintf>
 80043a2:	8020      	strh	r0, [r4, #0]
	while(HAL_UART_Transmit(&GSM_huart,data,MessageSize,100)!=HAL_OK);
 80043a4:	2364      	movs	r3, #100	; 0x64
 80043a6:	8822      	ldrh	r2, [r4, #0]
 80043a8:	490f      	ldr	r1, [pc, #60]	; (80043e8 <GSM_SendTestMessage+0x58>)
 80043aa:	4811      	ldr	r0, [pc, #68]	; (80043f0 <GSM_SendTestMessage+0x60>)
 80043ac:	f7fe fdec 	bl	8002f88 <HAL_UART_Transmit>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d1f7      	bne.n	80043a4 <GSM_SendTestMessage+0x14>

	printf("[DBG] Text transmitted\r\n");
 80043b4:	480f      	ldr	r0, [pc, #60]	; (80043f4 <GSM_SendTestMessage+0x64>)
 80043b6:	f001 f8f1 	bl	800559c <puts>
	MessageSize=sprintf(data,"\x1A\r\n");
 80043ba:	490f      	ldr	r1, [pc, #60]	; (80043f8 <GSM_SendTestMessage+0x68>)
 80043bc:	480a      	ldr	r0, [pc, #40]	; (80043e8 <GSM_SendTestMessage+0x58>)
 80043be:	f001 f929 	bl	8005614 <strcpy>
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <GSM_SendTestMessage+0x5c>)
 80043c4:	2203      	movs	r2, #3
 80043c6:	801a      	strh	r2, [r3, #0]
	while(HAL_UART_Transmit(&GSM_huart,data,MessageSize,100)!=HAL_OK);
 80043c8:	2364      	movs	r3, #100	; 0x64
 80043ca:	8822      	ldrh	r2, [r4, #0]
 80043cc:	4906      	ldr	r1, [pc, #24]	; (80043e8 <GSM_SendTestMessage+0x58>)
 80043ce:	4808      	ldr	r0, [pc, #32]	; (80043f0 <GSM_SendTestMessage+0x60>)
 80043d0:	f7fe fdda 	bl	8002f88 <HAL_UART_Transmit>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d1f7      	bne.n	80043c8 <GSM_SendTestMessage+0x38>

	printf("[DBG] End sign transmitted\r\n");
 80043d8:	4808      	ldr	r0, [pc, #32]	; (80043fc <GSM_SendTestMessage+0x6c>)
}
 80043da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	printf("[DBG] Text transmitted\r\n");
	MessageSize=sprintf(data,"\x1A\r\n");
	while(HAL_UART_Transmit(&GSM_huart,data,MessageSize,100)!=HAL_OK);

	printf("[DBG] End sign transmitted\r\n");
 80043de:	f001 b8dd 	b.w	800559c <puts>
 80043e2:	bf00      	nop
 80043e4:	2000433c 	.word	0x2000433c
 80043e8:	20004476 	.word	0x20004476
 80043ec:	20004474 	.word	0x20004474
 80043f0:	20004ba8 	.word	0x20004ba8
 80043f4:	08009fe3 	.word	0x08009fe3
 80043f8:	08009ffb 	.word	0x08009ffb
 80043fc:	08009fff 	.word	0x08009fff

08004400 <GSM_SendSMS>:
	}
}

void GSM_SendSMS()
{
	if(!sending)
 8004400:	4b12      	ldr	r3, [pc, #72]	; (800444c <GSM_SendSMS+0x4c>)
 8004402:	681a      	ldr	r2, [r3, #0]
		gsm_isCR=0;
	}
}

void GSM_SendSMS()
{
 8004404:	b510      	push	{r4, lr}
 8004406:	461c      	mov	r4, r3
	if(!sending)
 8004408:	b9a2      	cbnz	r2, 8004434 <GSM_SendSMS+0x34>
	{
		osDelay(100);
 800440a:	2064      	movs	r0, #100	; 0x64
 800440c:	f7fe ff5f 	bl	80032ce <osDelay>
		printf("[DBG] confsms()\r\n");
 8004410:	480f      	ldr	r0, [pc, #60]	; (8004450 <GSM_SendSMS+0x50>)
 8004412:	f001 f8c3 	bl	800559c <puts>
		GSM_ConfigureSMS();
 8004416:	f7ff ff8b 	bl	8004330 <GSM_ConfigureSMS>
		osDelay(2000);
 800441a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800441e:	f7fe ff56 	bl	80032ce <osDelay>
		printf("[DBG] setnum()\r\n");
 8004422:	480c      	ldr	r0, [pc, #48]	; (8004454 <GSM_SendSMS+0x54>)
 8004424:	f001 f8ba 	bl	800559c <puts>
		GSM_SetNumber();
 8004428:	f7ff ff94 	bl	8004354 <GSM_SetNumber>
		osDelay(4000);
 800442c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004430:	f7fe ff4d 	bl	80032ce <osDelay>
	}

	if(sending)
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	b13b      	cbz	r3, 8004448 <GSM_SendSMS+0x48>
	{
		printf("[DBG] sendsms()\r\n");
 8004438:	4807      	ldr	r0, [pc, #28]	; (8004458 <GSM_SendSMS+0x58>)
 800443a:	f001 f8af 	bl	800559c <puts>
		GSM_SendTestMessage();
 800443e:	f7ff ffa7 	bl	8004390 <GSM_SendTestMessage>
		sending = 0;
 8004442:	4b02      	ldr	r3, [pc, #8]	; (800444c <GSM_SendSMS+0x4c>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	bd10      	pop	{r4, pc}
 800444a:	bf00      	nop
 800444c:	20004338 	.word	0x20004338
 8004450:	0800a01b 	.word	0x0800a01b
 8004454:	0800a02c 	.word	0x0800a02c
 8004458:	0800a03c 	.word	0x0800a03c

0800445c <GSM_Init>:

	printf("[DBG] End sign transmitted\r\n");
}

void GSM_Init()
{
 800445c:	b570      	push	{r4, r5, r6, lr}
	sending = 0;
 800445e:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <GSM_Init+0x54>)
	HAL_UART_Receive_IT(&GSM_huart, &gsm_Received, 1);
 8004460:	4c14      	ldr	r4, [pc, #80]	; (80044b4 <GSM_Init+0x58>)

	MessageSize=sprintf(data,"AT\r\n");
 8004462:	4d15      	ldr	r5, [pc, #84]	; (80044b8 <GSM_Init+0x5c>)
}

void GSM_Init()
{
	sending = 0;
	HAL_UART_Receive_IT(&GSM_huart, &gsm_Received, 1);
 8004464:	4915      	ldr	r1, [pc, #84]	; (80044bc <GSM_Init+0x60>)

	MessageSize=sprintf(data,"AT\r\n");
 8004466:	4e16      	ldr	r6, [pc, #88]	; (80044c0 <GSM_Init+0x64>)
	printf("[DBG] End sign transmitted\r\n");
}

void GSM_Init()
{
	sending = 0;
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&GSM_huart, &gsm_Received, 1);
 800446c:	4620      	mov	r0, r4
 800446e:	2201      	movs	r2, #1
 8004470:	f7fe fe07 	bl	8003082 <HAL_UART_Receive_IT>

	MessageSize=sprintf(data,"AT\r\n");
 8004474:	4913      	ldr	r1, [pc, #76]	; (80044c4 <GSM_Init+0x68>)
 8004476:	4628      	mov	r0, r5
 8004478:	f001 f8cc 	bl	8005614 <strcpy>
 800447c:	2204      	movs	r2, #4
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 800447e:	4629      	mov	r1, r5
 8004480:	4620      	mov	r0, r4
void GSM_Init()
{
	sending = 0;
	HAL_UART_Receive_IT(&GSM_huart, &gsm_Received, 1);

	MessageSize=sprintf(data,"AT\r\n");
 8004482:	8032      	strh	r2, [r6, #0]
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 8004484:	f7fe fdde 	bl	8003044 <HAL_UART_Transmit_IT>
	osDelay(300);
 8004488:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800448c:	f7fe ff1f 	bl	80032ce <osDelay>
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 8004490:	8832      	ldrh	r2, [r6, #0]
 8004492:	4629      	mov	r1, r5
 8004494:	4620      	mov	r0, r4
 8004496:	f7fe fdd5 	bl	8003044 <HAL_UART_Transmit_IT>
	osDelay(300);
 800449a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800449e:	f7fe ff16 	bl	80032ce <osDelay>
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 80044a2:	8832      	ldrh	r2, [r6, #0]
 80044a4:	4629      	mov	r1, r5
 80044a6:	4620      	mov	r0, r4
}
 80044a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MessageSize=sprintf(data,"AT\r\n");
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
	osDelay(300);
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
	osDelay(300);
	HAL_UART_Transmit_IT(&GSM_huart,data,MessageSize);
 80044ac:	f7fe bdca 	b.w	8003044 <HAL_UART_Transmit_IT>
 80044b0:	20004338 	.word	0x20004338
 80044b4:	20004ba8 	.word	0x20004ba8
 80044b8:	20004476 	.word	0x20004476
 80044bc:	20004469 	.word	0x20004469
 80044c0:	20004474 	.word	0x20004474
 80044c4:	0800a04d 	.word	0x0800a04d

080044c8 <_write>:
 */

#include "debug.h"

int _write(int file, char *ptr, int len)
{
 80044c8:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart4, ptr, len, 50);
 80044ca:	2332      	movs	r3, #50	; 0x32
 */

#include "debug.h"

int _write(int file, char *ptr, int len)
{
 80044cc:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart4, ptr, len, 50);
 80044ce:	4803      	ldr	r0, [pc, #12]	; (80044dc <_write+0x14>)
 80044d0:	b292      	uxth	r2, r2
 80044d2:	f7fe fd59 	bl	8002f88 <HAL_UART_Transmit>
	return len;
}
 80044d6:	4620      	mov	r0, r4
 80044d8:	bd10      	pop	{r4, pc}
 80044da:	bf00      	nop
 80044dc:	20004be8 	.word	0x20004be8

080044e0 <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80044e0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80044e2:	2001      	movs	r0, #1
 80044e4:	f7fe fef3 	bl	80032ce <osDelay>
 80044e8:	e7fb      	b.n	80044e2 <StartDefaultTask+0x2>
	...

080044ec <MPU6050_Reader>:
}

/* USER CODE BEGIN Application */

void MPU6050_Reader(void const * argument)
{
 80044ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	MPU_6050 mpu;

		for(;;)
		{

				GetAccelerometerData(&mpu);
 80044ee:	4668      	mov	r0, sp
 80044f0:	f7ff fcc4 	bl	8003e7c <GetAccelerometerData>
				GetGyroData(&mpu);
 80044f4:	4668      	mov	r0, sp
 80044f6:	f7ff fcf7 	bl	8003ee8 <GetGyroData>
				ComplementaryFilter(&mpu, &pitch, &roll);
 80044fa:	4668      	mov	r0, sp
 80044fc:	4a03      	ldr	r2, [pc, #12]	; (800450c <MPU6050_Reader+0x20>)
 80044fe:	4904      	ldr	r1, [pc, #16]	; (8004510 <MPU6050_Reader+0x24>)
 8004500:	f7ff fdea 	bl	80040d8 <ComplementaryFilter>

			//printf("Pitch: %d, Roll: %d\n\r", (int)pitch, (int)roll);

			osDelay(10);
 8004504:	200a      	movs	r0, #10
 8004506:	f7fe fee2 	bl	80032ce <osDelay>
 800450a:	e7f0      	b.n	80044ee <MPU6050_Reader+0x2>
 800450c:	20004334 	.word	0x20004334
 8004510:	20004330 	.word	0x20004330

08004514 <DebugPrinter>:
}



void DebugPrinter(void const * argument)
{
 8004514:	b508      	push	{r3, lr}
	for(;;)
	{
		//printf("Pitch: %d, Roll: %d\n\r", (int)pitch, (int)roll);
		//printf("Sonar: %d, is_landed: %d\n\r", sonar_result, landed);
		printf("GPS: %s    %s    %s\n\r", gps_time, gps_latitude, gps_longitude);
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <DebugPrinter+0x18>)
 8004518:	4a05      	ldr	r2, [pc, #20]	; (8004530 <DebugPrinter+0x1c>)
 800451a:	4906      	ldr	r1, [pc, #24]	; (8004534 <DebugPrinter+0x20>)
 800451c:	4806      	ldr	r0, [pc, #24]	; (8004538 <DebugPrinter+0x24>)
 800451e:	f000 ffd9 	bl	80054d4 <printf>
		osDelay(1000);
 8004522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004526:	f7fe fed2 	bl	80032ce <osDelay>
 800452a:	e7f4      	b.n	8004516 <DebugPrinter+0x2>
 800452c:	200047bc 	.word	0x200047bc
 8004530:	200047a8 	.word	0x200047a8
 8004534:	200047d8 	.word	0x200047d8
 8004538:	0800a052 	.word	0x0800a052

0800453c <SMS_Sender>:
	}
}

void SMS_Sender(void const * argument)
{
 800453c:	b507      	push	{r0, r1, r2, lr}
	for(;;)
	{
		//msg_size = sprintf(msg,"Pitch: %d, Roll: %d Sonar: %d, is_landed: %d GPS: %s     %s     %s Temp: %d Pressure: %d",
		//			(int)pitch, (int)roll, sonar_result, landed, gps_time, gps_latitude, gps_longitude, temperature, pressure);
		sprintf(msg,"GPS: %s %s %s",gps_time, gps_latitude, gps_longitude);
 800453e:	4c07      	ldr	r4, [pc, #28]	; (800455c <SMS_Sender+0x20>)
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <SMS_Sender+0x24>)
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <SMS_Sender+0x28>)
 8004544:	4908      	ldr	r1, [pc, #32]	; (8004568 <SMS_Sender+0x2c>)
 8004546:	9400      	str	r4, [sp, #0]
 8004548:	4808      	ldr	r0, [pc, #32]	; (800456c <SMS_Sender+0x30>)
 800454a:	f001 f83f 	bl	80055cc <sprintf>
		GSM_SendSMS();
 800454e:	f7ff ff57 	bl	8004400 <GSM_SendSMS>
		osDelay(6000);
 8004552:	f241 7070 	movw	r0, #6000	; 0x1770
 8004556:	f7fe feba 	bl	80032ce <osDelay>
 800455a:	e7f1      	b.n	8004540 <SMS_Sender+0x4>
 800455c:	200047bc 	.word	0x200047bc
 8004560:	200047a8 	.word	0x200047a8
 8004564:	200047d8 	.word	0x200047d8
 8004568:	0800a068 	.word	0x0800a068
 800456c:	2000433c 	.word	0x2000433c

08004570 <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 8004570:	b530      	push	{r4, r5, lr}
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004572:	4d14      	ldr	r5, [pc, #80]	; (80045c4 <MX_FREERTOS_Init+0x54>)
 8004574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 8004576:	b089      	sub	sp, #36	; 0x24
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004578:	ac03      	add	r4, sp, #12
 800457a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004580:	2100      	movs	r1, #0
 8004582:	a803      	add	r0, sp, #12
 8004584:	f7fe fe8b 	bl	800329e <osThreadCreate>
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <MX_FREERTOS_Init+0x58>)

  /* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(DebugPrinter, "DebugPrinter", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800458a:	4910      	ldr	r1, [pc, #64]	; (80045cc <MX_FREERTOS_Init+0x5c>)
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800458c:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(DebugPrinter, "DebugPrinter", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800458e:	2400      	movs	r4, #0
 8004590:	2501      	movs	r5, #1
 8004592:	4623      	mov	r3, r4
 8004594:	9401      	str	r4, [sp, #4]
 8004596:	9500      	str	r5, [sp, #0]
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	480d      	ldr	r0, [pc, #52]	; (80045d0 <MX_FREERTOS_Init+0x60>)
 800459c:	f7ff f99a 	bl	80038d4 <xTaskCreate>
	xTaskCreate(SMS_Sender, "SMS_Sender", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80045a0:	4623      	mov	r3, r4
 80045a2:	9401      	str	r4, [sp, #4]
 80045a4:	9500      	str	r5, [sp, #0]
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	490a      	ldr	r1, [pc, #40]	; (80045d4 <MX_FREERTOS_Init+0x64>)
 80045aa:	480b      	ldr	r0, [pc, #44]	; (80045d8 <MX_FREERTOS_Init+0x68>)
 80045ac:	f7ff f992 	bl	80038d4 <xTaskCreate>
	xTaskCreate(MPU6050_Reader, "MPU6050_Reader", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80045b0:	9401      	str	r4, [sp, #4]
 80045b2:	9500      	str	r5, [sp, #0]
 80045b4:	4623      	mov	r3, r4
 80045b6:	2280      	movs	r2, #128	; 0x80
 80045b8:	4908      	ldr	r1, [pc, #32]	; (80045dc <MX_FREERTOS_Init+0x6c>)
 80045ba:	4809      	ldr	r0, [pc, #36]	; (80045e0 <MX_FREERTOS_Init+0x70>)
 80045bc:	f7ff f98a 	bl	80038d4 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}
 80045c0:	b009      	add	sp, #36	; 0x24
 80045c2:	bd30      	pop	{r4, r5, pc}
 80045c4:	08009e80 	.word	0x08009e80
 80045c8:	2000479c 	.word	0x2000479c
 80045cc:	0800a076 	.word	0x0800a076
 80045d0:	08004515 	.word	0x08004515
 80045d4:	0800a083 	.word	0x0800a083
 80045d8:	0800453d 	.word	0x0800453d
 80045dc:	0800a08e 	.word	0x0800a08e
 80045e0:	080044ed 	.word	0x080044ed

080045e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80045e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e8:	2400      	movs	r4, #0
 80045ea:	4b24      	ldr	r3, [pc, #144]	; (800467c <MX_GPIO_Init+0x98>)
 80045ec:	9400      	str	r4, [sp, #0]
 80045ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SONAR_IMPULSE_GPIO_Port, SONAR_IMPULSE_Pin, GPIO_PIN_RESET);
 80045f0:	4f23      	ldr	r7, [pc, #140]	; (8004680 <MX_GPIO_Init+0x9c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80045f2:	4d24      	ldr	r5, [pc, #144]	; (8004684 <MX_GPIO_Init+0xa0>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
 80045fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fc:	f002 0201 	and.w	r2, r2, #1
 8004600:	9200      	str	r2, [sp, #0]
 8004602:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004604:	9401      	str	r4, [sp, #4]
 8004606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004608:	f042 0202 	orr.w	r2, r2, #2
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
 800460e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004610:	f002 0202 	and.w	r2, r2, #2
 8004614:	9201      	str	r2, [sp, #4]
 8004616:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004618:	9402      	str	r4, [sp, #8]
 800461a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461c:	f042 0204 	orr.w	r2, r2, #4
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SONAR_IMPULSE_GPIO_Port, SONAR_IMPULSE_Pin, GPIO_PIN_RESET);
 800462a:	4622      	mov	r2, r4
 800462c:	4638      	mov	r0, r7
 800462e:	2102      	movs	r1, #2
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004630:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SONAR_IMPULSE_GPIO_Port, SONAR_IMPULSE_Pin, GPIO_PIN_RESET);
 8004632:	f7fc fe2f 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8004636:	4622      	mov	r2, r4
 8004638:	4628      	mov	r0, r5
 800463a:	2107      	movs	r1, #7
 800463c:	f7fc fe2a 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SONAR_IMPULSE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004640:	2601      	movs	r6, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SONAR_IMPULSE_Pin;
 8004642:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SONAR_IMPULSE_GPIO_Port, &GPIO_InitStruct);
 8004644:	a903      	add	r1, sp, #12
 8004646:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SONAR_IMPULSE_Pin;
 8004648:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800464a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SONAR_IMPULSE_GPIO_Port, &GPIO_InitStruct);
 8004650:	f7fc fd40 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8004654:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004656:	a903      	add	r1, sp, #12
 8004658:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SONAR_IMPULSE_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800465a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800465c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004660:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004662:	f7fc fd37 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 8004666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 800466a:	a903      	add	r1, sp, #12
 800466c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 800466e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004670:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8004674:	f7fc fd2e 	bl	80010d4 <HAL_GPIO_Init>

}
 8004678:	b009      	add	sp, #36	; 0x24
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	40020000 	.word	0x40020000
 8004684:	40020400 	.word	0x40020400

08004688 <searchCRLF>:
    strcat(result, s2);
    return result;
}


void searchCRLF(){
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 //uint8_t Data[500]; // Tablica przechowujaca wysylana wiadomosc.
	 //uint16_t size = 0; // Rozmiar wysylanej wiadomosci

	if((char)Received == '\r'){
 800468a:	4b4b      	ldr	r3, [pc, #300]	; (80047b8 <searchCRLF+0x130>)
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	4b4b      	ldr	r3, [pc, #300]	; (80047bc <searchCRLF+0x134>)
 8004690:	2a0d      	cmp	r2, #13
    strcat(result, s2);
    return result;
}


void searchCRLF(){
 8004692:	af00      	add	r7, sp, #0
	 //uint8_t Data[500]; // Tablica przechowujaca wysylana wiadomosc.
	 //uint16_t size = 0; // Rozmiar wysylanej wiadomosci

	if((char)Received == '\r'){
 8004694:	d101      	bne.n	800469a <searchCRLF+0x12>
		 isCR = 1;
 8004696:	2201      	movs	r2, #1
 8004698:	e08b      	b.n	80047b2 <searchCRLF+0x12a>
	 } else if ((char)Received == '\n' && isCR==1){
 800469a:	2a0a      	cmp	r2, #10
 800469c:	f040 8088 	bne.w	80047b0 <searchCRLF+0x128>
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	2a01      	cmp	r2, #1
 80046a4:	f040 8084 	bne.w	80047b0 <searchCRLF+0x128>

		 char newBuff[currSize];
 80046a8:	4d45      	ldr	r5, [pc, #276]	; (80047c0 <searchCRLF+0x138>)
		 memcpy(newBuff, buffer, currSize);
 80046aa:	4946      	ldr	r1, [pc, #280]	; (80047c4 <searchCRLF+0x13c>)

	if((char)Received == '\r'){
		 isCR = 1;
	 } else if ((char)Received == '\n' && isCR==1){

		 char newBuff[currSize];
 80046ac:	682a      	ldr	r2, [r5, #0]
 80046ae:	1dd3      	adds	r3, r2, #7
 80046b0:	f023 0307 	bic.w	r3, r3, #7
	 //uint8_t Data[500]; // Tablica przechowujaca wysylana wiadomosc.
	 //uint16_t size = 0; // Rozmiar wysylanej wiadomosci

	if((char)Received == '\r'){
		 isCR = 1;
	 } else if ((char)Received == '\n' && isCR==1){
 80046b4:	466e      	mov	r6, sp

		 char newBuff[currSize];
 80046b6:	ebad 0d03 	sub.w	sp, sp, r3
		 memcpy(newBuff, buffer, currSize);
 80046ba:	4668      	mov	r0, sp
 80046bc:	f000 fef4 	bl	80054a8 <memcpy>

		 if (strstr(newBuff, "$GPRMC") != NULL) {
 80046c0:	4941      	ldr	r1, [pc, #260]	; (80047c8 <searchCRLF+0x140>)
 80046c2:	4668      	mov	r0, sp

	if((char)Received == '\r'){
		 isCR = 1;
	 } else if ((char)Received == '\n' && isCR==1){

		 char newBuff[currSize];
 80046c4:	466c      	mov	r4, sp
		 memcpy(newBuff, buffer, currSize);

		 if (strstr(newBuff, "$GPRMC") != NULL) {
 80046c6:	f000 ffad 	bl	8005624 <strstr>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d06c      	beq.n	80047a8 <searchCRLF+0x120>
		     // contains
			 //size = sprintf(result_u, buffer);
			 //HAL_UART_Transmit(&huart4, result_u, size, 1000);

			 //PARSE TIME
			 if(newBuff[8]!='V'){
 80046ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80046d2:	2b56      	cmp	r3, #86	; 0x56
 80046d4:	d00d      	beq.n	80046f2 <searchCRLF+0x6a>
				 for(int i=0; i<9;i++){
					 gps_time[i] = newBuff[7+i];
 80046d6:	493d      	ldr	r1, [pc, #244]	; (80047cc <searchCRLF+0x144>)
 80046d8:	f10d 0206 	add.w	r2, sp, #6
		     // contains
			 //size = sprintf(result_u, buffer);
			 //HAL_UART_Transmit(&huart4, result_u, size, 1000);

			 //PARSE TIME
			 if(newBuff[8]!='V'){
 80046dc:	2300      	movs	r3, #0
				 for(int i=0; i<9;i++){
					 gps_time[i] = newBuff[7+i];
 80046de:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80046e2:	5458      	strb	r0, [r3, r1]
			 //size = sprintf(result_u, buffer);
			 //HAL_UART_Transmit(&huart4, result_u, size, 1000);

			 //PARSE TIME
			 if(newBuff[8]!='V'){
				 for(int i=0; i<9;i++){
 80046e4:	3301      	adds	r3, #1
 80046e6:	2b09      	cmp	r3, #9
 80046e8:	d1f9      	bne.n	80046de <searchCRLF+0x56>
					 gps_time[i] = newBuff[7+i];
				 }
				 gps_time[9] = '\0';
 80046ea:	4b38      	ldr	r3, [pc, #224]	; (80047cc <searchCRLF+0x144>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	725a      	strb	r2, [r3, #9]
 80046f0:	e003      	b.n	80046fa <searchCRLF+0x72>
			 }
			 else
			 {
				 sprintf(gps_time, "NotValid");
 80046f2:	4937      	ldr	r1, [pc, #220]	; (80047d0 <searchCRLF+0x148>)
 80046f4:	4835      	ldr	r0, [pc, #212]	; (80047cc <searchCRLF+0x144>)
 80046f6:	f000 ff8d 	bl	8005614 <strcpy>
			 }

			 if(newBuff[17]=='A'){ // jeï¿½li nie ma ostrzezenia V
 80046fa:	7c63      	ldrb	r3, [r4, #17]
 80046fc:	2b41      	cmp	r3, #65	; 0x41
 80046fe:	d14b      	bne.n	8004798 <searchCRLF+0x110>
				 //PARSE LATITUDE
				 gps_latitude[0]=newBuff[19];
 8004700:	4b34      	ldr	r3, [pc, #208]	; (80047d4 <searchCRLF+0x14c>)
				 gps_latitude[1]=newBuff[20];
				 gps_latitude[2]='.';
				 gps_latitude[3]=newBuff[21];
 8004702:	7d61      	ldrb	r1, [r4, #21]
 8004704:	70d9      	strb	r1, [r3, #3]
				 gps_latitude[4]=newBuff[22];
 8004706:	7da1      	ldrb	r1, [r4, #22]
 8004708:	7119      	strb	r1, [r3, #4]
				 gps_latitude[5]=39;
				 gps_latitude[6]=newBuff[24];
 800470a:	7e21      	ldrb	r1, [r4, #24]
 800470c:	7199      	strb	r1, [r3, #6]
				 gps_latitude[7]=newBuff[25];
 800470e:	7e61      	ldrb	r1, [r4, #25]
 8004710:	71d9      	strb	r1, [r3, #7]
				 gps_latitude[8]='.';
				 gps_latitude[9]=newBuff[26];
 8004712:	7ea1      	ldrb	r1, [r4, #26]
 8004714:	7259      	strb	r1, [r3, #9]
				 gps_latitude[10]=newBuff[27];
 8004716:	7ee1      	ldrb	r1, [r4, #27]
				 sprintf(gps_time, "NotValid");
			 }

			 if(newBuff[17]=='A'){ // jeï¿½li nie ma ostrzezenia V
				 //PARSE LATITUDE
				 gps_latitude[0]=newBuff[19];
 8004718:	7ce2      	ldrb	r2, [r4, #19]
				 gps_latitude[5]=39;
				 gps_latitude[6]=newBuff[24];
				 gps_latitude[7]=newBuff[25];
				 gps_latitude[8]='.';
				 gps_latitude[9]=newBuff[26];
				 gps_latitude[10]=newBuff[27];
 800471a:	7299      	strb	r1, [r3, #10]
				 gps_latitude[11]=newBuff[28];
 800471c:	7f21      	ldrb	r1, [r4, #28]
				 sprintf(gps_time, "NotValid");
			 }

			 if(newBuff[17]=='A'){ // jeï¿½li nie ma ostrzezenia V
				 //PARSE LATITUDE
				 gps_latitude[0]=newBuff[19];
 800471e:	701a      	strb	r2, [r3, #0]
				 gps_latitude[6]=newBuff[24];
				 gps_latitude[7]=newBuff[25];
				 gps_latitude[8]='.';
				 gps_latitude[9]=newBuff[26];
				 gps_latitude[10]=newBuff[27];
				 gps_latitude[11]=newBuff[28];
 8004720:	72d9      	strb	r1, [r3, #11]
			 }

			 if(newBuff[17]=='A'){ // jeï¿½li nie ma ostrzezenia V
				 //PARSE LATITUDE
				 gps_latitude[0]=newBuff[19];
				 gps_latitude[1]=newBuff[20];
 8004722:	7d22      	ldrb	r2, [r4, #20]
				 gps_latitude[8]='.';
				 gps_latitude[9]=newBuff[26];
				 gps_latitude[10]=newBuff[27];
				 gps_latitude[11]=newBuff[28];
				 gps_latitude[12]=34;
				 gps_latitude[13]=newBuff[30];
 8004724:	7fa1      	ldrb	r1, [r4, #30]
			 }

			 if(newBuff[17]=='A'){ // jeï¿½li nie ma ostrzezenia V
				 //PARSE LATITUDE
				 gps_latitude[0]=newBuff[19];
				 gps_latitude[1]=newBuff[20];
 8004726:	705a      	strb	r2, [r3, #1]
				 gps_latitude[2]='.';
				 gps_latitude[3]=newBuff[21];
				 gps_latitude[4]=newBuff[22];
				 gps_latitude[5]=39;
 8004728:	f04f 0e27 	mov.w	lr, #39	; 0x27

			 if(newBuff[17]=='A'){ // jeï¿½li nie ma ostrzezenia V
				 //PARSE LATITUDE
				 gps_latitude[0]=newBuff[19];
				 gps_latitude[1]=newBuff[20];
				 gps_latitude[2]='.';
 800472c:	222e      	movs	r2, #46	; 0x2e
				 gps_latitude[8]='.';
				 gps_latitude[9]=newBuff[26];
				 gps_latitude[10]=newBuff[27];
				 gps_latitude[11]=newBuff[28];
				 gps_latitude[12]=34;
				 gps_latitude[13]=newBuff[30];
 800472e:	7359      	strb	r1, [r3, #13]
				 gps_latitude[7]=newBuff[25];
				 gps_latitude[8]='.';
				 gps_latitude[9]=newBuff[26];
				 gps_latitude[10]=newBuff[27];
				 gps_latitude[11]=newBuff[28];
				 gps_latitude[12]=34;
 8004730:	2022      	movs	r0, #34	; 0x22
				 gps_latitude[13]=newBuff[30];
				 gps_latitude[14]='\0';
 8004732:	2100      	movs	r1, #0

			 if(newBuff[17]=='A'){ // jeï¿½li nie ma ostrzezenia V
				 //PARSE LATITUDE
				 gps_latitude[0]=newBuff[19];
				 gps_latitude[1]=newBuff[20];
				 gps_latitude[2]='.';
 8004734:	709a      	strb	r2, [r3, #2]
				 gps_latitude[3]=newBuff[21];
				 gps_latitude[4]=newBuff[22];
				 gps_latitude[5]=39;
 8004736:	f883 e005 	strb.w	lr, [r3, #5]
				 gps_latitude[6]=newBuff[24];
				 gps_latitude[7]=newBuff[25];
				 gps_latitude[8]='.';
 800473a:	721a      	strb	r2, [r3, #8]
				 gps_latitude[9]=newBuff[26];
				 gps_latitude[10]=newBuff[27];
				 gps_latitude[11]=newBuff[28];
				 gps_latitude[12]=34;
 800473c:	7318      	strb	r0, [r3, #12]
				 gps_latitude[13]=newBuff[30];
				 gps_latitude[14]='\0';
 800473e:	7399      	strb	r1, [r3, #14]


				 //PARSE LONGITUDE
				 gps_longitude[0]=newBuff[33];
 8004740:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <searchCRLF+0x150>)
 8004742:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
 8004746:	f883 c000 	strb.w	ip, [r3]
				 gps_longitude[1]=newBuff[34];
 800474a:	f894 c022 	ldrb.w	ip, [r4, #34]	; 0x22
 800474e:	f883 c001 	strb.w	ip, [r3, #1]
				 gps_longitude[2]='.';
				 gps_longitude[3]=newBuff[35];
 8004752:	f894 c023 	ldrb.w	ip, [r4, #35]	; 0x23


				 //PARSE LONGITUDE
				 gps_longitude[0]=newBuff[33];
				 gps_longitude[1]=newBuff[34];
				 gps_longitude[2]='.';
 8004756:	709a      	strb	r2, [r3, #2]
				 gps_longitude[3]=newBuff[35];
 8004758:	f883 c003 	strb.w	ip, [r3, #3]
				 gps_longitude[4]=newBuff[36];
 800475c:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
				 gps_longitude[5]=39;
				 gps_longitude[6]=newBuff[38];
				 gps_longitude[7]=newBuff[39];
				 gps_longitude[8]='.';
 8004760:	721a      	strb	r2, [r3, #8]
				 gps_longitude[9]=newBuff[40];
 8004762:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004766:	725a      	strb	r2, [r3, #9]
				 gps_longitude[10]=newBuff[41];
 8004768:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
				 gps_longitude[0]=newBuff[33];
				 gps_longitude[1]=newBuff[34];
				 gps_longitude[2]='.';
				 gps_longitude[3]=newBuff[35];
				 gps_longitude[4]=newBuff[36];
				 gps_longitude[5]=39;
 800476c:	f883 e005 	strb.w	lr, [r3, #5]
				 gps_longitude[6]=newBuff[38];
				 gps_longitude[7]=newBuff[39];
				 gps_longitude[8]='.';
				 gps_longitude[9]=newBuff[40];
				 gps_longitude[10]=newBuff[41];
 8004770:	729a      	strb	r2, [r3, #10]
				 gps_longitude[1]=newBuff[34];
				 gps_longitude[2]='.';
				 gps_longitude[3]=newBuff[35];
				 gps_longitude[4]=newBuff[36];
				 gps_longitude[5]=39;
				 gps_longitude[6]=newBuff[38];
 8004772:	f894 e026 	ldrb.w	lr, [r4, #38]	; 0x26
				 gps_longitude[7]=newBuff[39];
				 gps_longitude[8]='.';
				 gps_longitude[9]=newBuff[40];
				 gps_longitude[10]=newBuff[41];
				 gps_longitude[11]=newBuff[42];
 8004776:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
				 gps_longitude[1]=newBuff[34];
				 gps_longitude[2]='.';
				 gps_longitude[3]=newBuff[35];
				 gps_longitude[4]=newBuff[36];
				 gps_longitude[5]=39;
				 gps_longitude[6]=newBuff[38];
 800477a:	f883 e006 	strb.w	lr, [r3, #6]
				 gps_longitude[7]=newBuff[39];
				 gps_longitude[8]='.';
				 gps_longitude[9]=newBuff[40];
				 gps_longitude[10]=newBuff[41];
				 gps_longitude[11]=newBuff[42];
 800477e:	72da      	strb	r2, [r3, #11]
				 gps_longitude[2]='.';
				 gps_longitude[3]=newBuff[35];
				 gps_longitude[4]=newBuff[36];
				 gps_longitude[5]=39;
				 gps_longitude[6]=newBuff[38];
				 gps_longitude[7]=newBuff[39];
 8004780:	f894 e027 	ldrb.w	lr, [r4, #39]	; 0x27
				 gps_longitude[8]='.';
				 gps_longitude[9]=newBuff[40];
				 gps_longitude[10]=newBuff[41];
				 gps_longitude[11]=newBuff[42];
				 gps_longitude[12]=34;
				 gps_longitude[13]=newBuff[44];
 8004784:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
				 //PARSE LONGITUDE
				 gps_longitude[0]=newBuff[33];
				 gps_longitude[1]=newBuff[34];
				 gps_longitude[2]='.';
				 gps_longitude[3]=newBuff[35];
				 gps_longitude[4]=newBuff[36];
 8004788:	f883 c004 	strb.w	ip, [r3, #4]
				 gps_longitude[5]=39;
				 gps_longitude[6]=newBuff[38];
				 gps_longitude[7]=newBuff[39];
 800478c:	f883 e007 	strb.w	lr, [r3, #7]
				 gps_longitude[8]='.';
				 gps_longitude[9]=newBuff[40];
				 gps_longitude[10]=newBuff[41];
				 gps_longitude[11]=newBuff[42];
				 gps_longitude[12]=34;
 8004790:	7318      	strb	r0, [r3, #12]
				 gps_longitude[13]=newBuff[44];
 8004792:	735a      	strb	r2, [r3, #13]
				 gps_longitude[14]='\0';
 8004794:	7399      	strb	r1, [r3, #14]
 8004796:	e007      	b.n	80047a8 <searchCRLF+0x120>
			 }
			 else
			 { // display buffer if is not valid
				 sprintf(gps_latitude, "NotValid");
 8004798:	490d      	ldr	r1, [pc, #52]	; (80047d0 <searchCRLF+0x148>)
 800479a:	480e      	ldr	r0, [pc, #56]	; (80047d4 <searchCRLF+0x14c>)
 800479c:	f000 ff3a 	bl	8005614 <strcpy>
				 sprintf(gps_longitude, "NotValid");
 80047a0:	490b      	ldr	r1, [pc, #44]	; (80047d0 <searchCRLF+0x148>)
 80047a2:	480d      	ldr	r0, [pc, #52]	; (80047d8 <searchCRLF+0x150>)
 80047a4:	f000 ff36 	bl	8005614 <strcpy>
		 }

		 //size = sprintf(result_u, newBuff);
		 //HAL_UART_Transmit_IT(&huart4, result_u, size);
		 //clear buffer
		 currSize = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	602b      	str	r3, [r5, #0]
 80047ac:	46b5      	mov	sp, r6
	 //uint8_t Data[500]; // Tablica przechowujaca wysylana wiadomosc.
	 //uint16_t size = 0; // Rozmiar wysylanej wiadomosci

	if((char)Received == '\r'){
		 isCR = 1;
	 } else if ((char)Received == '\n' && isCR==1){
 80047ae:	e001      	b.n	80047b4 <searchCRLF+0x12c>
		 //size = sprintf(result_u, newBuff);
		 //HAL_UART_Transmit_IT(&huart4, result_u, size);
		 //clear buffer
		 currSize = 0;
	 } else{
		 isCR=0;
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
	 }
}
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b8:	20004798 	.word	0x20004798
 80047bc:	200047a0 	.word	0x200047a0
 80047c0:	20004a48 	.word	0x20004a48
 80047c4:	200047ec 	.word	0x200047ec
 80047c8:	0800a0a9 	.word	0x0800a0a9
 80047cc:	200047d8 	.word	0x200047d8
 80047d0:	0800a0b0 	.word	0x0800a0b0
 80047d4:	200047a8 	.word	0x200047a8
 80047d8:	200047bc 	.word	0x200047bc

080047dc <GPSInit>:

HAL_StatusTypeDef GPSInit(){
	currSize=0;
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <GPSInit+0x34>)
	isCR =0;

	sprintf(gps_time, "TimInit");
 80047de:	490d      	ldr	r1, [pc, #52]	; (8004814 <GPSInit+0x38>)
 80047e0:	480d      	ldr	r0, [pc, #52]	; (8004818 <GPSInit+0x3c>)
	 } else{
		 isCR=0;
	 }
}

HAL_StatusTypeDef GPSInit(){
 80047e2:	b510      	push	{r4, lr}
	currSize=0;
 80047e4:	2400      	movs	r4, #0
 80047e6:	601c      	str	r4, [r3, #0]
	isCR =0;
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <GPSInit+0x40>)
 80047ea:	601c      	str	r4, [r3, #0]

	sprintf(gps_time, "TimInit");
 80047ec:	f000 ff12 	bl	8005614 <strcpy>
	sprintf(gps_latitude, "LatInit");
 80047f0:	490b      	ldr	r1, [pc, #44]	; (8004820 <GPSInit+0x44>)
 80047f2:	480c      	ldr	r0, [pc, #48]	; (8004824 <GPSInit+0x48>)
 80047f4:	f000 ff0e 	bl	8005614 <strcpy>
	sprintf(gps_longitude, "LonInit");
 80047f8:	490b      	ldr	r1, [pc, #44]	; (8004828 <GPSInit+0x4c>)
 80047fa:	480c      	ldr	r0, [pc, #48]	; (800482c <GPSInit+0x50>)
 80047fc:	f000 ff0a 	bl	8005614 <strcpy>

	HAL_UART_Receive_IT(&huart2, &Received, 1);
 8004800:	2201      	movs	r2, #1
 8004802:	490b      	ldr	r1, [pc, #44]	; (8004830 <GPSInit+0x54>)
 8004804:	480b      	ldr	r0, [pc, #44]	; (8004834 <GPSInit+0x58>)
 8004806:	f7fe fc3c 	bl	8003082 <HAL_UART_Receive_IT>
	printf("GPSLat: %s , GPSLon: %s \n\r", gps_latitude, gps_longitude);
	*/

	return HAL_OK;

}
 800480a:	4620      	mov	r0, r4
 800480c:	bd10      	pop	{r4, pc}
 800480e:	bf00      	nop
 8004810:	20004a48 	.word	0x20004a48
 8004814:	0800a0b9 	.word	0x0800a0b9
 8004818:	200047d8 	.word	0x200047d8
 800481c:	200047a0 	.word	0x200047a0
 8004820:	0800a0c1 	.word	0x0800a0c1
 8004824:	200047a8 	.word	0x200047a8
 8004828:	0800a0c9 	.word	0x0800a0c9
 800482c:	200047bc 	.word	0x200047bc
 8004830:	20004798 	.word	0x20004798
 8004834:	20004c28 	.word	0x20004c28

08004838 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004838:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800483a:	480c      	ldr	r0, [pc, #48]	; (800486c <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <MX_I2C1_Init+0x38>)
 800483e:	f8df e034 	ldr.w	lr, [pc, #52]	; 8004874 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
 8004846:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800484a:	2300      	movs	r3, #0
 800484c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800484e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004850:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004852:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004854:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004856:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004858:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800485a:	f7fc fe1d 	bl	8001498 <HAL_I2C_Init>
 800485e:	b118      	cbz	r0, 8004868 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8004860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
 8004864:	f000 b968 	b.w	8004b38 <Error_Handler>
 8004868:	bd08      	pop	{r3, pc}
 800486a:	bf00      	nop
 800486c:	20004a4c 	.word	0x20004a4c
 8004870:	40005400 	.word	0x40005400
 8004874:	000186a0 	.word	0x000186a0

08004878 <MX_I2C2_Init>:
  }

}
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004878:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800487a:	480c      	ldr	r0, [pc, #48]	; (80048ac <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 100000;
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <MX_I2C2_Init+0x38>)
 800487e:	f8df e034 	ldr.w	lr, [pc, #52]	; 80048b4 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
/* I2C2 init function */
void MX_I2C2_Init(void)
{

  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
 8004886:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800488a:	2300      	movs	r3, #0
 800488c:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800488e:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004890:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004892:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004894:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004896:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004898:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800489a:	f7fc fdfd 	bl	8001498 <HAL_I2C_Init>
 800489e:	b118      	cbz	r0, 80048a8 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 80048a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
 80048a4:	f000 b948 	b.w	8004b38 <Error_Handler>
 80048a8:	bd08      	pop	{r3, pc}
 80048aa:	bf00      	nop
 80048ac:	20004aa0 	.word	0x20004aa0
 80048b0:	40005800 	.word	0x40005800
 80048b4:	000186a0 	.word	0x000186a0

080048b8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80048b8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80048ba:	6803      	ldr	r3, [r0, #0]
 80048bc:	4a26      	ldr	r2, [pc, #152]	; (8004958 <HAL_I2C_MspInit+0xa0>)
 80048be:	4293      	cmp	r3, r2
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80048c0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80048c2:	d120      	bne.n	8004906 <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = MPU6050_SCL_Pin|MPU6050_SDA_Pin;
 80048c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048ca:	2312      	movs	r3, #18
 80048cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ce:	2301      	movs	r3, #1
 80048d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d2:	2303      	movs	r3, #3
 80048d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d6:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = MPU6050_SCL_Pin|MPU6050_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048d8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048da:	4820      	ldr	r0, [pc, #128]	; (800495c <HAL_I2C_MspInit+0xa4>)
    */
    GPIO_InitStruct.Pin = MPU6050_SCL_Pin|MPU6050_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048de:	f7fc fbf9 	bl	80010d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048e2:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <HAL_I2C_MspInit+0xa8>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	9201      	str	r2, [sp, #4]
 80048e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80048ea:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80048ee:	6419      	str	r1, [r3, #64]	; 0x40
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f6:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80048f8:	201f      	movs	r0, #31
 80048fa:	2105      	movs	r1, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048fc:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80048fe:	f7fc fb75 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004902:	201f      	movs	r0, #31
 8004904:	e022      	b.n	800494c <HAL_I2C_MspInit+0x94>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8004906:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_I2C_MspInit+0xac>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d121      	bne.n	8004950 <HAL_I2C_MspInit+0x98>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = BAR_SCL_Pin|BAR_SDA_Pin;
 800490c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004910:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004912:	2312      	movs	r3, #18
 8004914:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004916:	2301      	movs	r3, #1
 8004918:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491a:	2303      	movs	r3, #3
 800491c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491e:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = BAR_SCL_Pin|BAR_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004920:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004922:	480e      	ldr	r0, [pc, #56]	; (800495c <HAL_I2C_MspInit+0xa4>)
    */
    GPIO_InitStruct.Pin = BAR_SCL_Pin|BAR_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004924:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004926:	f7fc fbd5 	bl	80010d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_I2C_MspInit+0xa8>)
 800492c:	2200      	movs	r2, #0
 800492e:	9202      	str	r2, [sp, #8]
 8004930:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004932:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8004936:	6419      	str	r1, [r3, #64]	; 0x40
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8004940:	2021      	movs	r0, #33	; 0x21
 8004942:	2105      	movs	r1, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004944:	9b02      	ldr	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8004946:	f7fc fb51 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800494a:	2021      	movs	r0, #33	; 0x21
 800494c:	f7fc fb82 	bl	8001054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004950:	b009      	add	sp, #36	; 0x24
 8004952:	f85d fb04 	ldr.w	pc, [sp], #4
 8004956:	bf00      	nop
 8004958:	40005400 	.word	0x40005400
 800495c:	40020400 	.word	0x40020400
 8004960:	40023800 	.word	0x40023800
 8004964:	40005800 	.word	0x40005800

08004968 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004968:	b538      	push	{r3, r4, r5, lr}

	if(huart == &huart1)
 800496a:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_UART_RxCpltCallback+0x64>)
 800496c:	4298      	cmp	r0, r3
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800496e:	4604      	mov	r4, r0

	if(huart == &huart1)
 8004970:	d116      	bne.n	80049a0 <HAL_UART_RxCpltCallback+0x38>
	{
		gsm_buffer[gsm_currSize++]=(char)gsm_Received;
 8004972:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <HAL_UART_RxCpltCallback+0x68>)
 8004974:	4c17      	ldr	r4, [pc, #92]	; (80049d4 <HAL_UART_RxCpltCallback+0x6c>)
 8004976:	6813      	ldr	r3, [r2, #0]
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	6011      	str	r1, [r2, #0]
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <HAL_UART_RxCpltCallback+0x70>)
 800497e:	7821      	ldrb	r1, [r4, #0]
 8004980:	54d1      	strb	r1, [r2, r3]
		GSM_Parse();
 8004982:	f7ff fc8d 	bl	80042a0 <GSM_Parse>
		if((char)gsm_Received == '>')
 8004986:	7823      	ldrb	r3, [r4, #0]
 8004988:	2b3e      	cmp	r3, #62	; 0x3e
 800498a:	d105      	bne.n	8004998 <HAL_UART_RxCpltCallback+0x30>
		{
			sending=1;
 800498c:	4b13      	ldr	r3, [pc, #76]	; (80049dc <HAL_UART_RxCpltCallback+0x74>)
			printf("[DBG] > sign read \r\n");
 800498e:	4814      	ldr	r0, [pc, #80]	; (80049e0 <HAL_UART_RxCpltCallback+0x78>)
	{
		gsm_buffer[gsm_currSize++]=(char)gsm_Received;
		GSM_Parse();
		if((char)gsm_Received == '>')
		{
			sending=1;
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
			printf("[DBG] > sign read \r\n");
 8004994:	f000 fe02 	bl	800559c <puts>
		}
		HAL_UART_Receive_IT(&huart1, &gsm_Received, 1);
 8004998:	2201      	movs	r2, #1
 800499a:	490e      	ldr	r1, [pc, #56]	; (80049d4 <HAL_UART_RxCpltCallback+0x6c>)
 800499c:	480b      	ldr	r0, [pc, #44]	; (80049cc <HAL_UART_RxCpltCallback+0x64>)
 800499e:	e00f      	b.n	80049c0 <HAL_UART_RxCpltCallback+0x58>
	}
	else if(huart == &huart2)
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <HAL_UART_RxCpltCallback+0x7c>)
 80049a2:	4298      	cmp	r0, r3
 80049a4:	d110      	bne.n	80049c8 <HAL_UART_RxCpltCallback+0x60>
	{
		buffer[currSize++]=(char)Received;
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <HAL_UART_RxCpltCallback+0x80>)
 80049a8:	4d10      	ldr	r5, [pc, #64]	; (80049ec <HAL_UART_RxCpltCallback+0x84>)
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	6011      	str	r1, [r2, #0]
 80049b0:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <HAL_UART_RxCpltCallback+0x88>)
 80049b2:	7829      	ldrb	r1, [r5, #0]
 80049b4:	54d1      	strb	r1, [r2, r3]
		searchCRLF();
 80049b6:	f7ff fe67 	bl	8004688 <searchCRLF>
		HAL_UART_Receive_IT(&huart2, &Received, 1);
 80049ba:	2201      	movs	r2, #1
 80049bc:	4629      	mov	r1, r5
 80049be:	4620      	mov	r0, r4
	}
}
 80049c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	else if(huart == &huart2)
	{
		buffer[currSize++]=(char)Received;
		searchCRLF();
		HAL_UART_Receive_IT(&huart2, &Received, 1);
 80049c4:	f7fe bb5d 	b.w	8003082 <HAL_UART_Receive_IT>
 80049c8:	bd38      	pop	{r3, r4, r5, pc}
 80049ca:	bf00      	nop
 80049cc:	20004ba8 	.word	0x20004ba8
 80049d0:	20004470 	.word	0x20004470
 80049d4:	20004469 	.word	0x20004469
 80049d8:	200045a4 	.word	0x200045a4
 80049dc:	20004338 	.word	0x20004338
 80049e0:	0800a0d1 	.word	0x0800a0d1
 80049e4:	20004c28 	.word	0x20004c28
 80049e8:	20004a48 	.word	0x20004a48
 80049ec:	20004798 	.word	0x20004798
 80049f0:	200047ec 	.word	0x200047ec

080049f4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049f8:	2300      	movs	r3, #0
 80049fa:	4a26      	ldr	r2, [pc, #152]	; (8004a94 <SystemClock_Config+0xa0>)
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004a00:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004a04:	6411      	str	r1, [r2, #64]	; 0x40
 8004a06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a08:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004a0c:	9201      	str	r2, [sp, #4]
 8004a0e:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a10:	4a21      	ldr	r2, [pc, #132]	; (8004a98 <SystemClock_Config+0xa4>)
 8004a12:	9302      	str	r3, [sp, #8]
 8004a14:	6811      	ldr	r1, [r2, #0]
 8004a16:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004a1a:	6011      	str	r1, [r2, #0]
 8004a1c:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a1e:	930f      	str	r3, [sp, #60]	; 0x3c

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a20:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a24:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004a26:	2308      	movs	r3, #8

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a28:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004a2a:	9310      	str	r3, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a2c:	2201      	movs	r2, #1

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a2e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a30:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004a32:	2350      	movs	r3, #80	; 0x50

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004a34:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 80;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004a36:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a38:	a808      	add	r0, sp, #32

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a3a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004a3c:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a3e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004a40:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a42:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004a44:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a46:	f7fd fbf3 	bl	8002230 <HAL_RCC_OscConfig>
 8004a4a:	b100      	cbz	r0, 8004a4e <SystemClock_Config+0x5a>
 8004a4c:	e7fe      	b.n	8004a4c <SystemClock_Config+0x58>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a52:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a54:	4621      	mov	r1, r4
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a56:	250f      	movs	r5, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a58:	a803      	add	r0, sp, #12

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a5a:	9404      	str	r4, [sp, #16]
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a5c:	9503      	str	r5, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a5e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a60:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a62:	f7fd fdb1 	bl	80025c8 <HAL_RCC_ClockConfig>
 8004a66:	4604      	mov	r4, r0
 8004a68:	b100      	cbz	r0, 8004a6c <SystemClock_Config+0x78>
 8004a6a:	e7fe      	b.n	8004a6a <SystemClock_Config+0x76>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004a6c:	f7fd fe60 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8004a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a74:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a78:	f7fc faf8 	bl	800106c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f7fc fb0b 	bl	8001098 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004a82:	4622      	mov	r2, r4
 8004a84:	4629      	mov	r1, r5
 8004a86:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8a:	f7fc faaf 	bl	8000fec <HAL_NVIC_SetPriority>
}
 8004a8e:	b014      	add	sp, #80	; 0x50
 8004a90:	bd70      	pop	{r4, r5, r6, pc}
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000

08004a9c <main>:
	}
}
/* USER CODE END 0 */

int main(void)
{
 8004a9c:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a9e:	f7fc fa5b 	bl	8000f58 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8004aa2:	f7ff ffa7 	bl	80049f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aa6:	f7ff fd9d 	bl	80045e4 <MX_GPIO_Init>
  MX_UART4_Init();
 8004aaa:	f000 f9b1 	bl	8004e10 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8004aae:	f000 f9e7 	bl	8004e80 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8004ab2:	f7ff fee1 	bl	8004878 <MX_I2C2_Init>
  MX_I2C1_Init();
 8004ab6:	f7ff febf 	bl	8004838 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004aba:	f000 f9c5 	bl	8004e48 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8004abe:	f000 f909 	bl	8004cd4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8004ac2:	f000 f937 	bl	8004d34 <MX_TIM7_Init>

  /* USER CODE BEGIN 2 */
	Status = AccelerometerInit();
 8004ac6:	f7ff fa45 	bl	8003f54 <AccelerometerInit>
	if (Status == HAL_OK) {
 8004aca:	b928      	cbnz	r0, 8004ad8 <main+0x3c>
		HAL_Delay(1000);
 8004acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ad0:	f7fc fa6a 	bl	8000fa8 <HAL_Delay>
		printf("MPU6050 initialization completed\n\r");
 8004ad4:	480f      	ldr	r0, [pc, #60]	; (8004b14 <main+0x78>)
 8004ad6:	e004      	b.n	8004ae2 <main+0x46>
	} else {
		HAL_Delay(1000);
 8004ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004adc:	f7fc fa64 	bl	8000fa8 <HAL_Delay>
		printf("MPU60 50 FAIL\n\r");
 8004ae0:	480d      	ldr	r0, [pc, #52]	; (8004b18 <main+0x7c>)
 8004ae2:	f000 fcf7 	bl	80054d4 <printf>
	}

	Status = GPSInit();
 8004ae6:	f7ff fe79 	bl	80047dc <GPSInit>
	if (Status == HAL_OK) {
 8004aea:	b928      	cbnz	r0, 8004af8 <main+0x5c>
		HAL_Delay(1000);
 8004aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004af0:	f7fc fa5a 	bl	8000fa8 <HAL_Delay>
		printf("GPS initialization completed\n\r");
 8004af4:	4809      	ldr	r0, [pc, #36]	; (8004b1c <main+0x80>)
 8004af6:	e004      	b.n	8004b02 <main+0x66>
	} else {
		HAL_Delay(1000);
 8004af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004afc:	f7fc fa54 	bl	8000fa8 <HAL_Delay>
		printf("GPS FAIL\n\r");
 8004b00:	4807      	ldr	r0, [pc, #28]	; (8004b20 <main+0x84>)
 8004b02:	f000 fce7 	bl	80054d4 <printf>
	}

	GSM_Init();
 8004b06:	f7ff fca9 	bl	800445c <GSM_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004b0a:	f7ff fd31 	bl	8004570 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004b0e:	f7fe fbc1 	bl	8003294 <osKernelStart>
 8004b12:	e7fe      	b.n	8004b12 <main+0x76>
 8004b14:	0800a0e5 	.word	0x0800a0e5
 8004b18:	0800a108 	.word	0x0800a108
 8004b1c:	0800a118 	.word	0x0800a118
 8004b20:	0800a137 	.word	0x0800a137

08004b24 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004b24:	6802      	ldr	r2, [r0, #0]
 8004b26:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004b2c:	f7fc ba2e 	b.w	8000f8c <HAL_IncTick>
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000

08004b38 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8004b38:	e7fe      	b.n	8004b38 <Error_Handler>

08004b3a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b3a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b3c:	2003      	movs	r0, #3
 8004b3e:	f7fc fa43 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004b42:	2200      	movs	r2, #0
 8004b44:	4611      	mov	r1, r2
 8004b46:	f06f 000b 	mvn.w	r0, #11
 8004b4a:	f7fc fa4f 	bl	8000fec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4611      	mov	r1, r2
 8004b52:	f06f 000a 	mvn.w	r0, #10
 8004b56:	f7fc fa49 	bl	8000fec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	f06f 0009 	mvn.w	r0, #9
 8004b62:	f7fc fa43 	bl	8000fec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004b66:	2200      	movs	r2, #0
 8004b68:	4611      	mov	r1, r2
 8004b6a:	f06f 0004 	mvn.w	r0, #4
 8004b6e:	f7fc fa3d 	bl	8000fec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004b72:	2200      	movs	r2, #0
 8004b74:	4611      	mov	r1, r2
 8004b76:	f06f 0003 	mvn.w	r0, #3
 8004b7a:	f7fc fa37 	bl	8000fec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	210f      	movs	r1, #15
 8004b82:	f06f 0001 	mvn.w	r0, #1
 8004b86:	f7fc fa31 	bl	8000fec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	210f      	movs	r1, #15
 8004b8e:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004b96:	f7fc ba29 	b.w	8000fec <HAL_NVIC_SetPriority>
	...

08004b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b9c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004b9e:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ba0:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2019      	movs	r0, #25
 8004ba6:	f7fc fa21 	bl	8000fec <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004baa:	2019      	movs	r0, #25
 8004bac:	f7fc fa52 	bl	8001054 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004bb0:	2500      	movs	r5, #0
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <HAL_InitTick+0x6c>)
 8004bb4:	9502      	str	r5, [sp, #8]
 8004bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004bb8:	4c14      	ldr	r4, [pc, #80]	; (8004c0c <HAL_InitTick+0x70>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004bc8:	a901      	add	r1, sp, #4
 8004bca:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004bcc:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004bce:	f7fd fde5 	bl	800279c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004bd2:	f7fd fdcb 	bl	800276c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_InitTick+0x74>)
 8004bd8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004bda:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004bde:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004be0:	0040      	lsls	r0, r0, #1
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <HAL_InitTick+0x78>)
 8004be4:	fbb0 f0f3 	udiv	r0, r0, r3
 8004be8:	3801      	subs	r0, #1
 8004bea:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004bec:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8004bee:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bf0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004bf2:	f7fd ff07 	bl	8002a04 <HAL_TIM_Base_Init>
 8004bf6:	b918      	cbnz	r0, 8004c00 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7fd fded 	bl	80027d8 <HAL_TIM_Base_Start_IT>
 8004bfe:	e000      	b.n	8004c02 <HAL_InitTick+0x66>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004c00:	2001      	movs	r0, #1
}
 8004c02:	b009      	add	sp, #36	; 0x24
 8004c04:	bd30      	pop	{r4, r5, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	20004af4 	.word	0x20004af4
 8004c10:	40010000 	.word	0x40010000
 8004c14:	000f4240 	.word	0x000f4240

08004c18 <NMI_Handler>:
 8004c18:	4770      	bx	lr

08004c1a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004c1a:	e7fe      	b.n	8004c1a <HardFault_Handler>

08004c1c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004c1c:	e7fe      	b.n	8004c1c <MemManage_Handler>

08004c1e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004c1e:	e7fe      	b.n	8004c1e <BusFault_Handler>

08004c20 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004c20:	e7fe      	b.n	8004c20 <UsageFault_Handler>

08004c22 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004c22:	4770      	bx	lr

08004c24 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8004c24:	f7fe bb5b 	b.w	80032de <osSystickHandler>

08004c28 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8004c2a:	f7fd bde5 	b.w	80027f8 <HAL_TIM_IRQHandler>
 8004c2e:	bf00      	nop
 8004c30:	20004af4 	.word	0x20004af4

08004c34 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <TIM2_IRQHandler+0x8>)
 8004c36:	f7fd bddf 	b.w	80027f8 <HAL_TIM_IRQHandler>
 8004c3a:	bf00      	nop
 8004c3c:	20004b30 	.word	0x20004b30

08004c40 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <I2C1_EV_IRQHandler+0x8>)
 8004c42:	f7fc bf7d 	b.w	8001b40 <HAL_I2C_EV_IRQHandler>
 8004c46:	bf00      	nop
 8004c48:	20004a4c 	.word	0x20004a4c

08004c4c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <I2C2_EV_IRQHandler+0x8>)
 8004c4e:	f7fc bf77 	b.w	8001b40 <HAL_I2C_EV_IRQHandler>
 8004c52:	bf00      	nop
 8004c54:	20004aa0 	.word	0x20004aa0

08004c58 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <USART1_IRQHandler+0x8>)
 8004c5a:	f7fe ba73 	b.w	8003144 <HAL_UART_IRQHandler>
 8004c5e:	bf00      	nop
 8004c60:	20004ba8 	.word	0x20004ba8

08004c64 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c64:	4801      	ldr	r0, [pc, #4]	; (8004c6c <USART2_IRQHandler+0x8>)
 8004c66:	f7fe ba6d 	b.w	8003144 <HAL_UART_IRQHandler>
 8004c6a:	bf00      	nop
 8004c6c:	20004c28 	.word	0x20004c28

08004c70 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <UART4_IRQHandler+0x8>)
 8004c72:	f7fe ba67 	b.w	8003144 <HAL_UART_IRQHandler>
 8004c76:	bf00      	nop
 8004c78:	20004be8 	.word	0x20004be8

08004c7c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <TIM7_IRQHandler+0x8>)
 8004c7e:	f7fd bdbb 	b.w	80027f8 <HAL_TIM_IRQHandler>
 8004c82:	bf00      	nop
 8004c84:	20004b6c 	.word	0x20004b6c

08004c88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c88:	490f      	ldr	r1, [pc, #60]	; (8004cc8 <SystemInit+0x40>)
 8004c8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <SystemInit+0x44>)
 8004c98:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c9a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ca2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004caa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004cae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004cb0:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <SystemInit+0x48>)
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004cbc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004cbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cc2:	608b      	str	r3, [r1, #8]
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000ed00 	.word	0xe000ed00
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	24003010 	.word	0x24003010

08004cd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004cd4:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
 8004cd6:	4815      	ldr	r0, [pc, #84]	; (8004d2c <MX_TIM2_Init+0x58>)
  htim2.Init.Prescaler = tim2_prescaler;
 8004cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cdc:	f04f 0c59 	mov.w	ip, #89	; 0x59
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ce0:	2400      	movs	r4, #0
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004ce2:	b086      	sub	sp, #24
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = tim2_prescaler;
 8004ce4:	e880 1008 	stmia.w	r0, {r3, ip}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = tim2_period;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <MX_TIM2_Init+0x5c>)
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = tim2_prescaler;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cea:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = tim2_period;
 8004cec:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cee:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004cf0:	f7fd fea2 	bl	8002a38 <HAL_TIM_IC_Init>
 8004cf4:	b108      	cbz	r0, 8004cfa <MX_TIM2_Init+0x26>
  {
    Error_Handler();
 8004cf6:	f7ff ff1f 	bl	8004b38 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004cfa:	4669      	mov	r1, sp
 8004cfc:	480b      	ldr	r0, [pc, #44]	; (8004d2c <MX_TIM2_Init+0x58>)
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cfe:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d00:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d02:	f7fd ff9b 	bl	8002c3c <HAL_TIMEx_MasterConfigSynchronization>
 8004d06:	b108      	cbz	r0, 8004d0c <MX_TIM2_Init+0x38>
  {
    Error_Handler();
 8004d08:	f7ff ff16 	bl	8004b38 <Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004d0c:	230a      	movs	r3, #10
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d0e:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004d10:	9302      	str	r3, [sp, #8]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004d12:	a902      	add	r1, sp, #8
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d14:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004d16:	4805      	ldr	r0, [pc, #20]	; (8004d2c <MX_TIM2_Init+0x58>)
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d18:	9303      	str	r3, [sp, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d1a:	9204      	str	r2, [sp, #16]
  sConfigIC.ICFilter = 0;
 8004d1c:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004d1e:	f7fd ff03 	bl	8002b28 <HAL_TIM_IC_ConfigChannel>
 8004d22:	b108      	cbz	r0, 8004d28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004d24:	f7ff ff08 	bl	8004b38 <Error_Handler>
  }

}
 8004d28:	b006      	add	sp, #24
 8004d2a:	bd10      	pop	{r4, pc}
 8004d2c:	20004b30 	.word	0x20004b30
 8004d30:	0098967f 	.word	0x0098967f

08004d34 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004d34:	b507      	push	{r0, r1, r2, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
 8004d36:	4810      	ldr	r0, [pc, #64]	; (8004d78 <MX_TIM7_Init+0x44>)
  htim7.Init.Prescaler = tim7_prescaler;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = tim7_period;
 8004d38:	4910      	ldr	r1, [pc, #64]	; (8004d7c <MX_TIM7_Init+0x48>)
 8004d3a:	2259      	movs	r2, #89	; 0x59
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f04f 0e09 	mov.w	lr, #9
 8004d42:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004d46:	f7fd fe5d 	bl	8002a04 <HAL_TIM_Base_Init>
 8004d4a:	b108      	cbz	r0, 8004d50 <MX_TIM7_Init+0x1c>
  {
    Error_Handler();
 8004d4c:	f7ff fef4 	bl	8004b38 <Error_Handler>
  }

  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8004d50:	2108      	movs	r1, #8
 8004d52:	4809      	ldr	r0, [pc, #36]	; (8004d78 <MX_TIM7_Init+0x44>)
 8004d54:	f7fd fe8a 	bl	8002a6c <HAL_TIM_OnePulse_Init>
 8004d58:	b108      	cbz	r0, 8004d5e <MX_TIM7_Init+0x2a>
  {
    Error_Handler();
 8004d5a:	f7ff feed 	bl	8004b38 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d5e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004d60:	4669      	mov	r1, sp
 8004d62:	4805      	ldr	r0, [pc, #20]	; (8004d78 <MX_TIM7_Init+0x44>)
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d64:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d66:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004d68:	f7fd ff68 	bl	8002c3c <HAL_TIMEx_MasterConfigSynchronization>
 8004d6c:	b108      	cbz	r0, 8004d72 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004d6e:	f7ff fee3 	bl	8004b38 <Error_Handler>
  }

}
 8004d72:	b003      	add	sp, #12
 8004d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d78:	20004b6c 	.word	0x20004b6c
 8004d7c:	40001400 	.word	0x40001400

08004d80 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004d80:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_icHandle->Instance==TIM2)
 8004d82:	6803      	ldr	r3, [r0, #0]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004d88:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_icHandle->Instance==TIM2)
 8004d8a:	d11f      	bne.n	8004dcc <HAL_TIM_IC_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d8c:	2400      	movs	r4, #0
 8004d8e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004d92:	9400      	str	r4, [sp, #0]
 8004d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = SONAR_TIM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(SONAR_TIM_GPIO_Port, &GPIO_InitStruct);
 8004d96:	480e      	ldr	r0, [pc, #56]	; (8004dd0 <HAL_TIM_IC_MspInit+0x50>)
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d98:	f042 0201 	orr.w	r2, r2, #1
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = SONAR_TIM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da0:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	9300      	str	r3, [sp, #0]
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = SONAR_TIM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da8:	2202      	movs	r2, #2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004daa:	9b00      	ldr	r3, [sp, #0]
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = SONAR_TIM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dac:	9202      	str	r2, [sp, #8]
    __HAL_RCC_TIM2_CLK_ENABLE();
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = SONAR_TIM_Pin;
 8004dae:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(SONAR_TIM_GPIO_Port, &GPIO_InitStruct);
 8004db0:	a901      	add	r1, sp, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = SONAR_TIM_Pin;
 8004db2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004db4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004db6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(SONAR_TIM_GPIO_Port, &GPIO_InitStruct);
 8004db8:	f7fc f98c 	bl	80010d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004dbc:	201c      	movs	r0, #28
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	2105      	movs	r1, #5
 8004dc2:	f7fc f913 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004dc6:	201c      	movs	r0, #28
 8004dc8:	f7fc f944 	bl	8001054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004dcc:	b006      	add	sp, #24
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	40020000 	.word	0x40020000

08004dd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004dd4:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM7)
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <HAL_TIM_Base_MspInit+0x38>)
 8004dd8:	6802      	ldr	r2, [r0, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d113      	bne.n	8004e06 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004dde:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 8004de2:	2200      	movs	r2, #0
 8004de4:	9201      	str	r2, [sp, #4]
 8004de6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004de8:	f041 0120 	orr.w	r1, r1, #32
 8004dec:	6419      	str	r1, [r3, #64]	; 0x40
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004df6:	2037      	movs	r0, #55	; 0x37
 8004df8:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004dfa:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004dfc:	f7fc f8f6 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e00:	2037      	movs	r0, #55	; 0x37
 8004e02:	f7fc f927 	bl	8001054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004e06:	b003      	add	sp, #12
 8004e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e0c:	40001400 	.word	0x40001400

08004e10 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004e10:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8004e12:	480b      	ldr	r0, [pc, #44]	; (8004e40 <MX_UART4_Init+0x30>)
  huart4.Init.BaudRate = 115200;
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <MX_UART4_Init+0x34>)
 8004e16:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004e1a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004e1e:	220c      	movs	r2, #12
void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004e20:	2300      	movs	r3, #0
 8004e22:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004e24:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004e26:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004e28:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e2a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e2c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004e2e:	f7fe f87d 	bl	8002f2c <HAL_UART_Init>
 8004e32:	b118      	cbz	r0, 8004e3c <MX_UART4_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
 8004e38:	f7ff be7e 	b.w	8004b38 <Error_Handler>
 8004e3c:	bd08      	pop	{r3, pc}
 8004e3e:	bf00      	nop
 8004e40:	20004be8 	.word	0x20004be8
 8004e44:	40004c00 	.word	0x40004c00

08004e48 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004e48:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8004e4a:	480b      	ldr	r0, [pc, #44]	; (8004e78 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <MX_USART1_UART_Init+0x34>)
 8004e4e:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 8004e52:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e56:	220c      	movs	r2, #12
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e5c:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e5e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e60:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e62:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e64:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e66:	f7fe f861 	bl	8002f2c <HAL_UART_Init>
 8004e6a:	b118      	cbz	r0, 8004e74 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004e6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
 8004e70:	f7ff be62 	b.w	8004b38 <Error_Handler>
 8004e74:	bd08      	pop	{r3, pc}
 8004e76:	bf00      	nop
 8004e78:	20004ba8 	.word	0x20004ba8
 8004e7c:	40011000 	.word	0x40011000

08004e80 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004e80:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8004e82:	480b      	ldr	r0, [pc, #44]	; (8004eb0 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 9600;
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <MX_USART2_UART_Init+0x34>)
 8004e86:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 8004e8a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e8e:	220c      	movs	r2, #12
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e90:	2300      	movs	r3, #0
 8004e92:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e94:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e96:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e98:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e9a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e9e:	f7fe f845 	bl	8002f2c <HAL_UART_Init>
 8004ea2:	b118      	cbz	r0, 8004eac <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004ea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
 8004ea8:	f7ff be46 	b.w	8004b38 <Error_Handler>
 8004eac:	bd08      	pop	{r3, pc}
 8004eae:	bf00      	nop
 8004eb0:	20004c28 	.word	0x20004c28
 8004eb4:	40004400 	.word	0x40004400

08004eb8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004eb8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8004eba:	6803      	ldr	r3, [r0, #0]
 8004ebc:	4a38      	ldr	r2, [pc, #224]	; (8004fa0 <HAL_UART_MspInit+0xe8>)
 8004ebe:	4293      	cmp	r3, r2
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ec0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8004ec2:	d121      	bne.n	8004f08 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004ec4:	4b37      	ldr	r3, [pc, #220]	; (8004fa4 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ec6:	4838      	ldr	r0, [pc, #224]	; (8004fa8 <HAL_UART_MspInit+0xf0>)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004ec8:	2400      	movs	r4, #0
 8004eca:	9400      	str	r4, [sp, #0]
 8004ecc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004ece:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8004ed2:	6419      	str	r1, [r3, #64]	; 0x40
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	9b00      	ldr	r3, [sp, #0]
  
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8004ede:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ee2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eec:	2303      	movs	r3, #3
 8004eee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ef0:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ef6:	f7fc f8ed 	bl	80010d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8004efa:	2034      	movs	r0, #52	; 0x34
 8004efc:	4622      	mov	r2, r4
 8004efe:	2105      	movs	r1, #5
 8004f00:	f7fc f874 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004f04:	2034      	movs	r0, #52	; 0x34
 8004f06:	e047      	b.n	8004f98 <HAL_UART_MspInit+0xe0>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8004f08:	4a28      	ldr	r2, [pc, #160]	; (8004fac <HAL_UART_MspInit+0xf4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d121      	bne.n	8004f52 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f0e:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f10:	4827      	ldr	r0, [pc, #156]	; (8004fb0 <HAL_UART_MspInit+0xf8>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f12:	2400      	movs	r4, #0
 8004f14:	9401      	str	r4, [sp, #4]
 8004f16:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004f18:	f041 0110 	orr.w	r1, r1, #16
 8004f1c:	6459      	str	r1, [r3, #68]	; 0x44
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 8004f28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004f2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f32:	2301      	movs	r3, #1
 8004f34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f36:	2303      	movs	r3, #3
 8004f38:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f3a:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f3c:	2307      	movs	r3, #7
 8004f3e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f40:	f7fc f8c8 	bl	80010d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004f44:	2025      	movs	r0, #37	; 0x25
 8004f46:	4622      	mov	r2, r4
 8004f48:	2105      	movs	r1, #5
 8004f4a:	f7fc f84f 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f4e:	2025      	movs	r0, #37	; 0x25
 8004f50:	e022      	b.n	8004f98 <HAL_UART_MspInit+0xe0>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8004f52:	4a18      	ldr	r2, [pc, #96]	; (8004fb4 <HAL_UART_MspInit+0xfc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d121      	bne.n	8004f9c <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f58:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f5a:	4815      	ldr	r0, [pc, #84]	; (8004fb0 <HAL_UART_MspInit+0xf8>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f5c:	2400      	movs	r4, #0
 8004f5e:	9402      	str	r4, [sp, #8]
 8004f60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f62:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004f66:	6419      	str	r1, [r3, #64]	; 0x40
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8004f72:	230c      	movs	r3, #12
 8004f74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f76:	2302      	movs	r3, #2
 8004f78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f82:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f84:	2307      	movs	r3, #7
 8004f86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f88:	f7fc f8a4 	bl	80010d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004f8c:	2026      	movs	r0, #38	; 0x26
 8004f8e:	4622      	mov	r2, r4
 8004f90:	2105      	movs	r1, #5
 8004f92:	f7fc f82b 	bl	8000fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f96:	2026      	movs	r0, #38	; 0x26
 8004f98:	f7fc f85c 	bl	8001054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004f9c:	b008      	add	sp, #32
 8004f9e:	bd10      	pop	{r4, pc}
 8004fa0:	40004c00 	.word	0x40004c00
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	40020800 	.word	0x40020800
 8004fac:	40011000 	.word	0x40011000
 8004fb0:	40020000 	.word	0x40020000
 8004fb4:	40004400 	.word	0x40004400

08004fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ff0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004fbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fbe:	e003      	b.n	8004fc8 <LoopCopyDataInit>

08004fc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004fc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fc6:	3104      	adds	r1, #4

08004fc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fc8:	480b      	ldr	r0, [pc, #44]	; (8004ff8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004fcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004fd0:	d3f6      	bcc.n	8004fc0 <CopyDataInit>
  ldr  r2, =_sbss
 8004fd2:	4a0b      	ldr	r2, [pc, #44]	; (8005000 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004fd4:	e002      	b.n	8004fdc <LoopFillZerobss>

08004fd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004fd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004fd8:	f842 3b04 	str.w	r3, [r2], #4

08004fdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004fde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004fe0:	d3f9      	bcc.n	8004fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004fe2:	f7ff fe51 	bl	8004c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fe6:	f000 f811 	bl	800500c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fea:	f7ff fd57 	bl	8004a9c <main>
  bx  lr    
 8004fee:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ff0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8004ff4:	0800a374 	.word	0x0800a374
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ff8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ffc:	2000056c 	.word	0x2000056c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005000:	2000056c 	.word	0x2000056c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005004:	20004c6c 	.word	0x20004c6c

08005008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005008:	e7fe      	b.n	8005008 <ADC_IRQHandler>
	...

0800500c <__libc_init_array>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <__libc_init_array+0x3c>)
 8005010:	4c0e      	ldr	r4, [pc, #56]	; (800504c <__libc_init_array+0x40>)
 8005012:	1ae4      	subs	r4, r4, r3
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	2500      	movs	r5, #0
 8005018:	461e      	mov	r6, r3
 800501a:	42a5      	cmp	r5, r4
 800501c:	d004      	beq.n	8005028 <__libc_init_array+0x1c>
 800501e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005022:	4798      	blx	r3
 8005024:	3501      	adds	r5, #1
 8005026:	e7f8      	b.n	800501a <__libc_init_array+0xe>
 8005028:	f004 ff1e 	bl	8009e68 <_init>
 800502c:	4c08      	ldr	r4, [pc, #32]	; (8005050 <__libc_init_array+0x44>)
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <__libc_init_array+0x48>)
 8005030:	1ae4      	subs	r4, r4, r3
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	2500      	movs	r5, #0
 8005036:	461e      	mov	r6, r3
 8005038:	42a5      	cmp	r5, r4
 800503a:	d004      	beq.n	8005046 <__libc_init_array+0x3a>
 800503c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005040:	4798      	blx	r3
 8005042:	3501      	adds	r5, #1
 8005044:	e7f8      	b.n	8005038 <__libc_init_array+0x2c>
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	0800a36c 	.word	0x0800a36c
 800504c:	0800a36c 	.word	0x0800a36c
 8005050:	0800a370 	.word	0x0800a370
 8005054:	0800a36c 	.word	0x0800a36c

08005058 <malloc>:
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <malloc+0xc>)
 800505a:	4601      	mov	r1, r0
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	f000 b803 	b.w	8005068 <_malloc_r>
 8005062:	bf00      	nop
 8005064:	20000508 	.word	0x20000508

08005068 <_malloc_r>:
 8005068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506c:	f101 040b 	add.w	r4, r1, #11
 8005070:	2c16      	cmp	r4, #22
 8005072:	b085      	sub	sp, #20
 8005074:	4681      	mov	r9, r0
 8005076:	d903      	bls.n	8005080 <_malloc_r+0x18>
 8005078:	f034 0407 	bics.w	r4, r4, #7
 800507c:	d501      	bpl.n	8005082 <_malloc_r+0x1a>
 800507e:	e002      	b.n	8005086 <_malloc_r+0x1e>
 8005080:	2410      	movs	r4, #16
 8005082:	428c      	cmp	r4, r1
 8005084:	d203      	bcs.n	800508e <_malloc_r+0x26>
 8005086:	230c      	movs	r3, #12
 8005088:	f8c9 3000 	str.w	r3, [r9]
 800508c:	e1ea      	b.n	8005464 <_malloc_r+0x3fc>
 800508e:	4648      	mov	r0, r9
 8005090:	f000 fa1d 	bl	80054ce <__malloc_lock>
 8005094:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005098:	4d9e      	ldr	r5, [pc, #632]	; (8005314 <_malloc_r+0x2ac>)
 800509a:	d217      	bcs.n	80050cc <_malloc_r+0x64>
 800509c:	f104 0208 	add.w	r2, r4, #8
 80050a0:	442a      	add	r2, r5
 80050a2:	f1a2 0108 	sub.w	r1, r2, #8
 80050a6:	6856      	ldr	r6, [r2, #4]
 80050a8:	428e      	cmp	r6, r1
 80050aa:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80050ae:	d102      	bne.n	80050b6 <_malloc_r+0x4e>
 80050b0:	68d6      	ldr	r6, [r2, #12]
 80050b2:	42b2      	cmp	r2, r6
 80050b4:	d008      	beq.n	80050c8 <_malloc_r+0x60>
 80050b6:	6873      	ldr	r3, [r6, #4]
 80050b8:	68f2      	ldr	r2, [r6, #12]
 80050ba:	68b1      	ldr	r1, [r6, #8]
 80050bc:	f023 0303 	bic.w	r3, r3, #3
 80050c0:	60ca      	str	r2, [r1, #12]
 80050c2:	4433      	add	r3, r6
 80050c4:	6091      	str	r1, [r2, #8]
 80050c6:	e02f      	b.n	8005128 <_malloc_r+0xc0>
 80050c8:	3302      	adds	r3, #2
 80050ca:	e03d      	b.n	8005148 <_malloc_r+0xe0>
 80050cc:	0a63      	lsrs	r3, r4, #9
 80050ce:	d01a      	beq.n	8005106 <_malloc_r+0x9e>
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d802      	bhi.n	80050da <_malloc_r+0x72>
 80050d4:	09a3      	lsrs	r3, r4, #6
 80050d6:	3338      	adds	r3, #56	; 0x38
 80050d8:	e018      	b.n	800510c <_malloc_r+0xa4>
 80050da:	2b14      	cmp	r3, #20
 80050dc:	d801      	bhi.n	80050e2 <_malloc_r+0x7a>
 80050de:	335b      	adds	r3, #91	; 0x5b
 80050e0:	e014      	b.n	800510c <_malloc_r+0xa4>
 80050e2:	2b54      	cmp	r3, #84	; 0x54
 80050e4:	d802      	bhi.n	80050ec <_malloc_r+0x84>
 80050e6:	0b23      	lsrs	r3, r4, #12
 80050e8:	336e      	adds	r3, #110	; 0x6e
 80050ea:	e00f      	b.n	800510c <_malloc_r+0xa4>
 80050ec:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80050f0:	d802      	bhi.n	80050f8 <_malloc_r+0x90>
 80050f2:	0be3      	lsrs	r3, r4, #15
 80050f4:	3377      	adds	r3, #119	; 0x77
 80050f6:	e009      	b.n	800510c <_malloc_r+0xa4>
 80050f8:	f240 5254 	movw	r2, #1364	; 0x554
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d804      	bhi.n	800510a <_malloc_r+0xa2>
 8005100:	0ca3      	lsrs	r3, r4, #18
 8005102:	337c      	adds	r3, #124	; 0x7c
 8005104:	e002      	b.n	800510c <_malloc_r+0xa4>
 8005106:	233f      	movs	r3, #63	; 0x3f
 8005108:	e000      	b.n	800510c <_malloc_r+0xa4>
 800510a:	237e      	movs	r3, #126	; 0x7e
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005112:	f1a2 0008 	sub.w	r0, r2, #8
 8005116:	6856      	ldr	r6, [r2, #4]
 8005118:	e00c      	b.n	8005134 <_malloc_r+0xcc>
 800511a:	2900      	cmp	r1, #0
 800511c:	68f1      	ldr	r1, [r6, #12]
 800511e:	db08      	blt.n	8005132 <_malloc_r+0xca>
 8005120:	68b3      	ldr	r3, [r6, #8]
 8005122:	60d9      	str	r1, [r3, #12]
 8005124:	608b      	str	r3, [r1, #8]
 8005126:	18b3      	adds	r3, r6, r2
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	e1a3      	b.n	800547a <_malloc_r+0x412>
 8005132:	460e      	mov	r6, r1
 8005134:	4286      	cmp	r6, r0
 8005136:	d006      	beq.n	8005146 <_malloc_r+0xde>
 8005138:	6872      	ldr	r2, [r6, #4]
 800513a:	f022 0203 	bic.w	r2, r2, #3
 800513e:	1b11      	subs	r1, r2, r4
 8005140:	290f      	cmp	r1, #15
 8005142:	ddea      	ble.n	800511a <_malloc_r+0xb2>
 8005144:	3b01      	subs	r3, #1
 8005146:	3301      	adds	r3, #1
 8005148:	4a72      	ldr	r2, [pc, #456]	; (8005314 <_malloc_r+0x2ac>)
 800514a:	692e      	ldr	r6, [r5, #16]
 800514c:	f102 0708 	add.w	r7, r2, #8
 8005150:	42be      	cmp	r6, r7
 8005152:	4639      	mov	r1, r7
 8005154:	d079      	beq.n	800524a <_malloc_r+0x1e2>
 8005156:	6870      	ldr	r0, [r6, #4]
 8005158:	f020 0003 	bic.w	r0, r0, #3
 800515c:	ebc4 0e00 	rsb	lr, r4, r0
 8005160:	f1be 0f0f 	cmp.w	lr, #15
 8005164:	dd0d      	ble.n	8005182 <_malloc_r+0x11a>
 8005166:	1933      	adds	r3, r6, r4
 8005168:	f044 0401 	orr.w	r4, r4, #1
 800516c:	6074      	str	r4, [r6, #4]
 800516e:	6153      	str	r3, [r2, #20]
 8005170:	6113      	str	r3, [r2, #16]
 8005172:	f04e 0201 	orr.w	r2, lr, #1
 8005176:	60df      	str	r7, [r3, #12]
 8005178:	609f      	str	r7, [r3, #8]
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	f843 e00e 	str.w	lr, [r3, lr]
 8005180:	e17b      	b.n	800547a <_malloc_r+0x412>
 8005182:	f1be 0f00 	cmp.w	lr, #0
 8005186:	6157      	str	r7, [r2, #20]
 8005188:	6117      	str	r7, [r2, #16]
 800518a:	db05      	blt.n	8005198 <_malloc_r+0x130>
 800518c:	4430      	add	r0, r6
 800518e:	6843      	ldr	r3, [r0, #4]
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6043      	str	r3, [r0, #4]
 8005196:	e170      	b.n	800547a <_malloc_r+0x412>
 8005198:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800519c:	d215      	bcs.n	80051ca <_malloc_r+0x162>
 800519e:	08c0      	lsrs	r0, r0, #3
 80051a0:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80051a4:	2701      	movs	r7, #1
 80051a6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80051aa:	6857      	ldr	r7, [r2, #4]
 80051ac:	3001      	adds	r0, #1
 80051ae:	ea4e 0707 	orr.w	r7, lr, r7
 80051b2:	6057      	str	r7, [r2, #4]
 80051b4:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80051b8:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 80051bc:	f8c6 e008 	str.w	lr, [r6, #8]
 80051c0:	3f08      	subs	r7, #8
 80051c2:	60f7      	str	r7, [r6, #12]
 80051c4:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 80051c8:	e03d      	b.n	8005246 <_malloc_r+0x1de>
 80051ca:	0a42      	lsrs	r2, r0, #9
 80051cc:	2a04      	cmp	r2, #4
 80051ce:	d802      	bhi.n	80051d6 <_malloc_r+0x16e>
 80051d0:	0982      	lsrs	r2, r0, #6
 80051d2:	3238      	adds	r2, #56	; 0x38
 80051d4:	e015      	b.n	8005202 <_malloc_r+0x19a>
 80051d6:	2a14      	cmp	r2, #20
 80051d8:	d801      	bhi.n	80051de <_malloc_r+0x176>
 80051da:	325b      	adds	r2, #91	; 0x5b
 80051dc:	e011      	b.n	8005202 <_malloc_r+0x19a>
 80051de:	2a54      	cmp	r2, #84	; 0x54
 80051e0:	d802      	bhi.n	80051e8 <_malloc_r+0x180>
 80051e2:	0b02      	lsrs	r2, r0, #12
 80051e4:	326e      	adds	r2, #110	; 0x6e
 80051e6:	e00c      	b.n	8005202 <_malloc_r+0x19a>
 80051e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80051ec:	d802      	bhi.n	80051f4 <_malloc_r+0x18c>
 80051ee:	0bc2      	lsrs	r2, r0, #15
 80051f0:	3277      	adds	r2, #119	; 0x77
 80051f2:	e006      	b.n	8005202 <_malloc_r+0x19a>
 80051f4:	f240 5754 	movw	r7, #1364	; 0x554
 80051f8:	42ba      	cmp	r2, r7
 80051fa:	bf9a      	itte	ls
 80051fc:	0c82      	lsrls	r2, r0, #18
 80051fe:	327c      	addls	r2, #124	; 0x7c
 8005200:	227e      	movhi	r2, #126	; 0x7e
 8005202:	1c57      	adds	r7, r2, #1
 8005204:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8005208:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800520c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8005314 <_malloc_r+0x2ac>
 8005210:	45be      	cmp	lr, r7
 8005212:	d10d      	bne.n	8005230 <_malloc_r+0x1c8>
 8005214:	2001      	movs	r0, #1
 8005216:	1092      	asrs	r2, r2, #2
 8005218:	fa00 f202 	lsl.w	r2, r0, r2
 800521c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005220:	4310      	orrs	r0, r2
 8005222:	f8cc 0004 	str.w	r0, [ip, #4]
 8005226:	4672      	mov	r2, lr
 8005228:	e009      	b.n	800523e <_malloc_r+0x1d6>
 800522a:	68bf      	ldr	r7, [r7, #8]
 800522c:	45be      	cmp	lr, r7
 800522e:	d004      	beq.n	800523a <_malloc_r+0x1d2>
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	f022 0203 	bic.w	r2, r2, #3
 8005236:	4290      	cmp	r0, r2
 8005238:	d3f7      	bcc.n	800522a <_malloc_r+0x1c2>
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	46be      	mov	lr, r7
 800523e:	60f2      	str	r2, [r6, #12]
 8005240:	f8c6 e008 	str.w	lr, [r6, #8]
 8005244:	6096      	str	r6, [r2, #8]
 8005246:	f8ce 600c 	str.w	r6, [lr, #12]
 800524a:	2001      	movs	r0, #1
 800524c:	109a      	asrs	r2, r3, #2
 800524e:	fa00 f202 	lsl.w	r2, r0, r2
 8005252:	6868      	ldr	r0, [r5, #4]
 8005254:	4282      	cmp	r2, r0
 8005256:	d85f      	bhi.n	8005318 <_malloc_r+0x2b0>
 8005258:	4202      	tst	r2, r0
 800525a:	d106      	bne.n	800526a <_malloc_r+0x202>
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	0052      	lsls	r2, r2, #1
 8005262:	4202      	tst	r2, r0
 8005264:	f103 0304 	add.w	r3, r3, #4
 8005268:	d0fa      	beq.n	8005260 <_malloc_r+0x1f8>
 800526a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800526e:	46c2      	mov	sl, r8
 8005270:	469c      	mov	ip, r3
 8005272:	f8da 600c 	ldr.w	r6, [sl, #12]
 8005276:	4556      	cmp	r6, sl
 8005278:	d02c      	beq.n	80052d4 <_malloc_r+0x26c>
 800527a:	6870      	ldr	r0, [r6, #4]
 800527c:	68f7      	ldr	r7, [r6, #12]
 800527e:	f020 0003 	bic.w	r0, r0, #3
 8005282:	ebc4 0e00 	rsb	lr, r4, r0
 8005286:	f1be 0f0f 	cmp.w	lr, #15
 800528a:	dd11      	ble.n	80052b0 <_malloc_r+0x248>
 800528c:	1933      	adds	r3, r6, r4
 800528e:	f044 0401 	orr.w	r4, r4, #1
 8005292:	6074      	str	r4, [r6, #4]
 8005294:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8005298:	60d7      	str	r7, [r2, #12]
 800529a:	60ba      	str	r2, [r7, #8]
 800529c:	f04e 0201 	orr.w	r2, lr, #1
 80052a0:	616b      	str	r3, [r5, #20]
 80052a2:	612b      	str	r3, [r5, #16]
 80052a4:	60d9      	str	r1, [r3, #12]
 80052a6:	6099      	str	r1, [r3, #8]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	f843 e00e 	str.w	lr, [r3, lr]
 80052ae:	e00b      	b.n	80052c8 <_malloc_r+0x260>
 80052b0:	f1be 0f00 	cmp.w	lr, #0
 80052b4:	db0c      	blt.n	80052d0 <_malloc_r+0x268>
 80052b6:	1833      	adds	r3, r6, r0
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80052c4:	60df      	str	r7, [r3, #12]
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	4648      	mov	r0, r9
 80052ca:	f000 f901 	bl	80054d0 <__malloc_unlock>
 80052ce:	e0d8      	b.n	8005482 <_malloc_r+0x41a>
 80052d0:	463e      	mov	r6, r7
 80052d2:	e7d0      	b.n	8005276 <_malloc_r+0x20e>
 80052d4:	f10c 0c01 	add.w	ip, ip, #1
 80052d8:	f01c 0f03 	tst.w	ip, #3
 80052dc:	f10a 0a08 	add.w	sl, sl, #8
 80052e0:	d1c7      	bne.n	8005272 <_malloc_r+0x20a>
 80052e2:	0798      	lsls	r0, r3, #30
 80052e4:	d104      	bne.n	80052f0 <_malloc_r+0x288>
 80052e6:	686b      	ldr	r3, [r5, #4]
 80052e8:	ea23 0302 	bic.w	r3, r3, r2
 80052ec:	606b      	str	r3, [r5, #4]
 80052ee:	e005      	b.n	80052fc <_malloc_r+0x294>
 80052f0:	f858 0908 	ldr.w	r0, [r8], #-8
 80052f4:	4580      	cmp	r8, r0
 80052f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80052fa:	d0f2      	beq.n	80052e2 <_malloc_r+0x27a>
 80052fc:	6868      	ldr	r0, [r5, #4]
 80052fe:	0052      	lsls	r2, r2, #1
 8005300:	4282      	cmp	r2, r0
 8005302:	d809      	bhi.n	8005318 <_malloc_r+0x2b0>
 8005304:	b142      	cbz	r2, 8005318 <_malloc_r+0x2b0>
 8005306:	4663      	mov	r3, ip
 8005308:	4202      	tst	r2, r0
 800530a:	d1ae      	bne.n	800526a <_malloc_r+0x202>
 800530c:	3304      	adds	r3, #4
 800530e:	0052      	lsls	r2, r2, #1
 8005310:	e7fa      	b.n	8005308 <_malloc_r+0x2a0>
 8005312:	bf00      	nop
 8005314:	20000008 	.word	0x20000008
 8005318:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800531c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005320:	f026 0603 	bic.w	r6, r6, #3
 8005324:	42b4      	cmp	r4, r6
 8005326:	d803      	bhi.n	8005330 <_malloc_r+0x2c8>
 8005328:	1b33      	subs	r3, r6, r4
 800532a:	2b0f      	cmp	r3, #15
 800532c:	f300 809c 	bgt.w	8005468 <_malloc_r+0x400>
 8005330:	4a56      	ldr	r2, [pc, #344]	; (800548c <_malloc_r+0x424>)
 8005332:	4957      	ldr	r1, [pc, #348]	; (8005490 <_malloc_r+0x428>)
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	6808      	ldr	r0, [r1, #0]
 8005338:	9101      	str	r1, [sp, #4]
 800533a:	f102 0810 	add.w	r8, r2, #16
 800533e:	4a55      	ldr	r2, [pc, #340]	; (8005494 <_malloc_r+0x42c>)
 8005340:	9203      	str	r2, [sp, #12]
 8005342:	3001      	adds	r0, #1
 8005344:	bf18      	it	ne
 8005346:	f102 31ff 	addne.w	r1, r2, #4294967295
 800534a:	44a0      	add	r8, r4
 800534c:	bf1e      	ittt	ne
 800534e:	4488      	addne	r8, r1
 8005350:	4251      	negne	r1, r2
 8005352:	ea01 0808 	andne.w	r8, r1, r8
 8005356:	eb0b 0306 	add.w	r3, fp, r6
 800535a:	4641      	mov	r1, r8
 800535c:	4648      	mov	r0, r9
 800535e:	9302      	str	r3, [sp, #8]
 8005360:	f000 f924 	bl	80055ac <_sbrk_r>
 8005364:	1c42      	adds	r2, r0, #1
 8005366:	4607      	mov	r7, r0
 8005368:	d06f      	beq.n	800544a <_malloc_r+0x3e2>
 800536a:	9b02      	ldr	r3, [sp, #8]
 800536c:	9a03      	ldr	r2, [sp, #12]
 800536e:	4283      	cmp	r3, r0
 8005370:	d901      	bls.n	8005376 <_malloc_r+0x30e>
 8005372:	45ab      	cmp	fp, r5
 8005374:	d169      	bne.n	800544a <_malloc_r+0x3e2>
 8005376:	f8df a128 	ldr.w	sl, [pc, #296]	; 80054a0 <_malloc_r+0x438>
 800537a:	f8df c128 	ldr.w	ip, [pc, #296]	; 80054a4 <_malloc_r+0x43c>
 800537e:	f8da 0000 	ldr.w	r0, [sl]
 8005382:	42bb      	cmp	r3, r7
 8005384:	4440      	add	r0, r8
 8005386:	f8ca 0000 	str.w	r0, [sl]
 800538a:	d108      	bne.n	800539e <_malloc_r+0x336>
 800538c:	ea13 0f0c 	tst.w	r3, ip
 8005390:	d105      	bne.n	800539e <_malloc_r+0x336>
 8005392:	68ab      	ldr	r3, [r5, #8]
 8005394:	4446      	add	r6, r8
 8005396:	f046 0601 	orr.w	r6, r6, #1
 800539a:	605e      	str	r6, [r3, #4]
 800539c:	e049      	b.n	8005432 <_malloc_r+0x3ca>
 800539e:	9901      	ldr	r1, [sp, #4]
 80053a0:	f8d1 e000 	ldr.w	lr, [r1]
 80053a4:	f1be 3fff 	cmp.w	lr, #4294967295
 80053a8:	bf15      	itete	ne
 80053aa:	1afb      	subne	r3, r7, r3
 80053ac:	4b38      	ldreq	r3, [pc, #224]	; (8005490 <_malloc_r+0x428>)
 80053ae:	181b      	addne	r3, r3, r0
 80053b0:	601f      	streq	r7, [r3, #0]
 80053b2:	bf18      	it	ne
 80053b4:	f8ca 3000 	strne.w	r3, [sl]
 80053b8:	f017 0307 	ands.w	r3, r7, #7
 80053bc:	bf1c      	itt	ne
 80053be:	f1c3 0308 	rsbne	r3, r3, #8
 80053c2:	18ff      	addne	r7, r7, r3
 80053c4:	44b8      	add	r8, r7
 80053c6:	441a      	add	r2, r3
 80053c8:	ea08 080c 	and.w	r8, r8, ip
 80053cc:	ebc8 0802 	rsb	r8, r8, r2
 80053d0:	4641      	mov	r1, r8
 80053d2:	4648      	mov	r0, r9
 80053d4:	f000 f8ea 	bl	80055ac <_sbrk_r>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	bf04      	itt	eq
 80053dc:	4638      	moveq	r0, r7
 80053de:	f04f 0800 	moveq.w	r8, #0
 80053e2:	f8da 3000 	ldr.w	r3, [sl]
 80053e6:	60af      	str	r7, [r5, #8]
 80053e8:	1bc2      	subs	r2, r0, r7
 80053ea:	4442      	add	r2, r8
 80053ec:	4443      	add	r3, r8
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	45ab      	cmp	fp, r5
 80053f4:	f8ca 3000 	str.w	r3, [sl]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	d01a      	beq.n	8005432 <_malloc_r+0x3ca>
 80053fc:	2e0f      	cmp	r6, #15
 80053fe:	d802      	bhi.n	8005406 <_malloc_r+0x39e>
 8005400:	2301      	movs	r3, #1
 8005402:	607b      	str	r3, [r7, #4]
 8005404:	e021      	b.n	800544a <_malloc_r+0x3e2>
 8005406:	f8db 3004 	ldr.w	r3, [fp, #4]
 800540a:	3e0c      	subs	r6, #12
 800540c:	f026 0607 	bic.w	r6, r6, #7
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	4333      	orrs	r3, r6
 8005416:	f8cb 3004 	str.w	r3, [fp, #4]
 800541a:	eb0b 0306 	add.w	r3, fp, r6
 800541e:	2205      	movs	r2, #5
 8005420:	2e0f      	cmp	r6, #15
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	609a      	str	r2, [r3, #8]
 8005426:	d904      	bls.n	8005432 <_malloc_r+0x3ca>
 8005428:	f10b 0108 	add.w	r1, fp, #8
 800542c:	4648      	mov	r0, r9
 800542e:	f003 f969 	bl	8008704 <_free_r>
 8005432:	4a19      	ldr	r2, [pc, #100]	; (8005498 <_malloc_r+0x430>)
 8005434:	f8da 3000 	ldr.w	r3, [sl]
 8005438:	6811      	ldr	r1, [r2, #0]
 800543a:	428b      	cmp	r3, r1
 800543c:	bf88      	it	hi
 800543e:	6013      	strhi	r3, [r2, #0]
 8005440:	4a16      	ldr	r2, [pc, #88]	; (800549c <_malloc_r+0x434>)
 8005442:	6811      	ldr	r1, [r2, #0]
 8005444:	428b      	cmp	r3, r1
 8005446:	bf88      	it	hi
 8005448:	6013      	strhi	r3, [r2, #0]
 800544a:	68ab      	ldr	r3, [r5, #8]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	f022 0203 	bic.w	r2, r2, #3
 8005452:	4294      	cmp	r4, r2
 8005454:	eba2 0304 	sub.w	r3, r2, r4
 8005458:	d801      	bhi.n	800545e <_malloc_r+0x3f6>
 800545a:	2b0f      	cmp	r3, #15
 800545c:	dc04      	bgt.n	8005468 <_malloc_r+0x400>
 800545e:	4648      	mov	r0, r9
 8005460:	f000 f836 	bl	80054d0 <__malloc_unlock>
 8005464:	2600      	movs	r6, #0
 8005466:	e00c      	b.n	8005482 <_malloc_r+0x41a>
 8005468:	68ae      	ldr	r6, [r5, #8]
 800546a:	f044 0201 	orr.w	r2, r4, #1
 800546e:	4434      	add	r4, r6
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	6072      	str	r2, [r6, #4]
 8005476:	60ac      	str	r4, [r5, #8]
 8005478:	6063      	str	r3, [r4, #4]
 800547a:	4648      	mov	r0, r9
 800547c:	f000 f828 	bl	80054d0 <__malloc_unlock>
 8005480:	3608      	adds	r6, #8
 8005482:	4630      	mov	r0, r6
 8005484:	b005      	add	sp, #20
 8005486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	bf00      	nop
 800548c:	200042dc 	.word	0x200042dc
 8005490:	20000414 	.word	0x20000414
 8005494:	00000080 	.word	0x00000080
 8005498:	200042d8 	.word	0x200042d8
 800549c:	200042d4 	.word	0x200042d4
 80054a0:	200042e0 	.word	0x200042e0
 80054a4:	0000007f 	.word	0x0000007f

080054a8 <memcpy>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	1e43      	subs	r3, r0, #1
 80054ac:	440a      	add	r2, r1
 80054ae:	4291      	cmp	r1, r2
 80054b0:	d004      	beq.n	80054bc <memcpy+0x14>
 80054b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ba:	e7f8      	b.n	80054ae <memcpy+0x6>
 80054bc:	bd10      	pop	{r4, pc}

080054be <memset>:
 80054be:	4402      	add	r2, r0
 80054c0:	4603      	mov	r3, r0
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d002      	beq.n	80054cc <memset+0xe>
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7fa      	b.n	80054c2 <memset+0x4>
 80054cc:	4770      	bx	lr

080054ce <__malloc_lock>:
 80054ce:	4770      	bx	lr

080054d0 <__malloc_unlock>:
 80054d0:	4770      	bx	lr
	...

080054d4 <printf>:
 80054d4:	b40f      	push	{r0, r1, r2, r3}
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <printf+0x2c>)
 80054d8:	b513      	push	{r0, r1, r4, lr}
 80054da:	681c      	ldr	r4, [r3, #0]
 80054dc:	b124      	cbz	r4, 80054e8 <printf+0x14>
 80054de:	69a3      	ldr	r3, [r4, #24]
 80054e0:	b913      	cbnz	r3, 80054e8 <printf+0x14>
 80054e2:	4620      	mov	r0, r4
 80054e4:	f003 f846 	bl	8008574 <__sinit>
 80054e8:	ab05      	add	r3, sp, #20
 80054ea:	9a04      	ldr	r2, [sp, #16]
 80054ec:	68a1      	ldr	r1, [r4, #8]
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	4620      	mov	r0, r4
 80054f2:	f001 f875 	bl	80065e0 <_vfprintf_r>
 80054f6:	b002      	add	sp, #8
 80054f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054fc:	b004      	add	sp, #16
 80054fe:	4770      	bx	lr
 8005500:	20000508 	.word	0x20000508

08005504 <_puts_r>:
 8005504:	b530      	push	{r4, r5, lr}
 8005506:	4605      	mov	r5, r0
 8005508:	b089      	sub	sp, #36	; 0x24
 800550a:	4608      	mov	r0, r1
 800550c:	460c      	mov	r4, r1
 800550e:	f7fa fe5f 	bl	80001d0 <strlen>
 8005512:	4b1e      	ldr	r3, [pc, #120]	; (800558c <_puts_r+0x88>)
 8005514:	9306      	str	r3, [sp, #24]
 8005516:	2301      	movs	r3, #1
 8005518:	9005      	str	r0, [sp, #20]
 800551a:	9307      	str	r3, [sp, #28]
 800551c:	4418      	add	r0, r3
 800551e:	ab04      	add	r3, sp, #16
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2302      	movs	r3, #2
 8005524:	9404      	str	r4, [sp, #16]
 8005526:	9003      	str	r0, [sp, #12]
 8005528:	9302      	str	r3, [sp, #8]
 800552a:	b125      	cbz	r5, 8005536 <_puts_r+0x32>
 800552c:	69ab      	ldr	r3, [r5, #24]
 800552e:	b913      	cbnz	r3, 8005536 <_puts_r+0x32>
 8005530:	4628      	mov	r0, r5
 8005532:	f003 f81f 	bl	8008574 <__sinit>
 8005536:	69ab      	ldr	r3, [r5, #24]
 8005538:	68ac      	ldr	r4, [r5, #8]
 800553a:	b913      	cbnz	r3, 8005542 <_puts_r+0x3e>
 800553c:	4628      	mov	r0, r5
 800553e:	f003 f819 	bl	8008574 <__sinit>
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <_puts_r+0x8c>)
 8005544:	429c      	cmp	r4, r3
 8005546:	d101      	bne.n	800554c <_puts_r+0x48>
 8005548:	686c      	ldr	r4, [r5, #4]
 800554a:	e008      	b.n	800555e <_puts_r+0x5a>
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <_puts_r+0x90>)
 800554e:	429c      	cmp	r4, r3
 8005550:	d101      	bne.n	8005556 <_puts_r+0x52>
 8005552:	68ac      	ldr	r4, [r5, #8]
 8005554:	e003      	b.n	800555e <_puts_r+0x5a>
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <_puts_r+0x94>)
 8005558:	429c      	cmp	r4, r3
 800555a:	bf08      	it	eq
 800555c:	68ec      	ldreq	r4, [r5, #12]
 800555e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005562:	049a      	lsls	r2, r3, #18
 8005564:	d406      	bmi.n	8005574 <_puts_r+0x70>
 8005566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800556c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	6662      	str	r2, [r4, #100]	; 0x64
 8005574:	aa01      	add	r2, sp, #4
 8005576:	4621      	mov	r1, r4
 8005578:	4628      	mov	r0, r5
 800557a:	f003 f981 	bl	8008880 <__sfvwrite_r>
 800557e:	2800      	cmp	r0, #0
 8005580:	bf14      	ite	ne
 8005582:	f04f 30ff 	movne.w	r0, #4294967295
 8005586:	200a      	moveq	r0, #10
 8005588:	b009      	add	sp, #36	; 0x24
 800558a:	bd30      	pop	{r4, r5, pc}
 800558c:	08009ffd 	.word	0x08009ffd
 8005590:	0800a1dc 	.word	0x0800a1dc
 8005594:	0800a1fc 	.word	0x0800a1fc
 8005598:	0800a21c 	.word	0x0800a21c

0800559c <puts>:
 800559c:	4b02      	ldr	r3, [pc, #8]	; (80055a8 <puts+0xc>)
 800559e:	4601      	mov	r1, r0
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	f7ff bfaf 	b.w	8005504 <_puts_r>
 80055a6:	bf00      	nop
 80055a8:	20000508 	.word	0x20000508

080055ac <_sbrk_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4c06      	ldr	r4, [pc, #24]	; (80055c8 <_sbrk_r+0x1c>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4605      	mov	r5, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	f004 fc48 	bl	8009e4c <_sbrk>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_sbrk_r+0x1a>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_sbrk_r+0x1a>
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20004c68 	.word	0x20004c68

080055cc <sprintf>:
 80055cc:	b40e      	push	{r1, r2, r3}
 80055ce:	b500      	push	{lr}
 80055d0:	b09c      	sub	sp, #112	; 0x70
 80055d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80055d6:	ab1d      	add	r3, sp, #116	; 0x74
 80055d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80055dc:	9002      	str	r0, [sp, #8]
 80055de:	9006      	str	r0, [sp, #24]
 80055e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055e4:	480a      	ldr	r0, [pc, #40]	; (8005610 <sprintf+0x44>)
 80055e6:	9104      	str	r1, [sp, #16]
 80055e8:	9107      	str	r1, [sp, #28]
 80055ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80055ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80055f6:	6800      	ldr	r0, [r0, #0]
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	a902      	add	r1, sp, #8
 80055fc:	f000 f82c 	bl	8005658 <_svfprintf_r>
 8005600:	9b02      	ldr	r3, [sp, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	b01c      	add	sp, #112	; 0x70
 8005608:	f85d eb04 	ldr.w	lr, [sp], #4
 800560c:	b003      	add	sp, #12
 800560e:	4770      	bx	lr
 8005610:	20000508 	.word	0x20000508

08005614 <strcpy>:
 8005614:	4603      	mov	r3, r0
 8005616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800561a:	f803 2b01 	strb.w	r2, [r3], #1
 800561e:	2a00      	cmp	r2, #0
 8005620:	d1f9      	bne.n	8005616 <strcpy+0x2>
 8005622:	4770      	bx	lr

08005624 <strstr>:
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	7803      	ldrb	r3, [r0, #0]
 8005628:	b963      	cbnz	r3, 8005644 <strstr+0x20>
 800562a:	780b      	ldrb	r3, [r1, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf18      	it	ne
 8005630:	2000      	movne	r0, #0
 8005632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005634:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005638:	b162      	cbz	r2, 8005654 <strstr+0x30>
 800563a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800563e:	4297      	cmp	r7, r2
 8005640:	4630      	mov	r0, r6
 8005642:	d0f7      	beq.n	8005634 <strstr+0x10>
 8005644:	4603      	mov	r3, r0
 8005646:	1c46      	adds	r6, r0, #1
 8005648:	7800      	ldrb	r0, [r0, #0]
 800564a:	b110      	cbz	r0, 8005652 <strstr+0x2e>
 800564c:	1e4d      	subs	r5, r1, #1
 800564e:	1e5c      	subs	r4, r3, #1
 8005650:	e7f0      	b.n	8005634 <strstr+0x10>
 8005652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005654:	4618      	mov	r0, r3
 8005656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005658 <_svfprintf_r>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	b0bd      	sub	sp, #244	; 0xf4
 800565e:	468b      	mov	fp, r1
 8005660:	9205      	str	r2, [sp, #20]
 8005662:	461f      	mov	r7, r3
 8005664:	4682      	mov	sl, r0
 8005666:	f003 fa7d 	bl	8008b64 <_localeconv_r>
 800566a:	6803      	ldr	r3, [r0, #0]
 800566c:	930d      	str	r3, [sp, #52]	; 0x34
 800566e:	4618      	mov	r0, r3
 8005670:	f7fa fdae 	bl	80001d0 <strlen>
 8005674:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005678:	9008      	str	r0, [sp, #32]
 800567a:	0619      	lsls	r1, r3, #24
 800567c:	d515      	bpl.n	80056aa <_svfprintf_r+0x52>
 800567e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005682:	b993      	cbnz	r3, 80056aa <_svfprintf_r+0x52>
 8005684:	2140      	movs	r1, #64	; 0x40
 8005686:	4650      	mov	r0, sl
 8005688:	f7ff fcee 	bl	8005068 <_malloc_r>
 800568c:	f8cb 0000 	str.w	r0, [fp]
 8005690:	f8cb 0010 	str.w	r0, [fp, #16]
 8005694:	b930      	cbnz	r0, 80056a4 <_svfprintf_r+0x4c>
 8005696:	230c      	movs	r3, #12
 8005698:	f8ca 3000 	str.w	r3, [sl]
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	f000 bf95 	b.w	80065ce <_svfprintf_r+0xf76>
 80056a4:	2340      	movs	r3, #64	; 0x40
 80056a6:	f8cb 3014 	str.w	r3, [fp, #20]
 80056aa:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8005910 <_svfprintf_r+0x2b8>
 80056ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80056b2:	2300      	movs	r3, #0
 80056b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80056b6:	941f      	str	r4, [sp, #124]	; 0x7c
 80056b8:	9321      	str	r3, [sp, #132]	; 0x84
 80056ba:	9320      	str	r3, [sp, #128]	; 0x80
 80056bc:	9304      	str	r3, [sp, #16]
 80056be:	9311      	str	r3, [sp, #68]	; 0x44
 80056c0:	9310      	str	r3, [sp, #64]	; 0x40
 80056c2:	930a      	str	r3, [sp, #40]	; 0x28
 80056c4:	9d05      	ldr	r5, [sp, #20]
 80056c6:	462b      	mov	r3, r5
 80056c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056cc:	b11a      	cbz	r2, 80056d6 <_svfprintf_r+0x7e>
 80056ce:	2a25      	cmp	r2, #37	; 0x25
 80056d0:	d001      	beq.n	80056d6 <_svfprintf_r+0x7e>
 80056d2:	461d      	mov	r5, r3
 80056d4:	e7f7      	b.n	80056c6 <_svfprintf_r+0x6e>
 80056d6:	9b05      	ldr	r3, [sp, #20]
 80056d8:	1aee      	subs	r6, r5, r3
 80056da:	d017      	beq.n	800570c <_svfprintf_r+0xb4>
 80056dc:	e884 0048 	stmia.w	r4, {r3, r6}
 80056e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e2:	4433      	add	r3, r6
 80056e4:	9321      	str	r3, [sp, #132]	; 0x84
 80056e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056e8:	3301      	adds	r3, #1
 80056ea:	2b07      	cmp	r3, #7
 80056ec:	9320      	str	r3, [sp, #128]	; 0x80
 80056ee:	dc01      	bgt.n	80056f4 <_svfprintf_r+0x9c>
 80056f0:	3408      	adds	r4, #8
 80056f2:	e008      	b.n	8005706 <_svfprintf_r+0xae>
 80056f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80056f6:	4659      	mov	r1, fp
 80056f8:	4650      	mov	r0, sl
 80056fa:	f003 ff7c 	bl	80095f6 <__ssprint_r>
 80056fe:	2800      	cmp	r0, #0
 8005700:	f040 862c 	bne.w	800635c <_svfprintf_r+0xd04>
 8005704:	ac2c      	add	r4, sp, #176	; 0xb0
 8005706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005708:	4433      	add	r3, r6
 800570a:	930a      	str	r3, [sp, #40]	; 0x28
 800570c:	782b      	ldrb	r3, [r5, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 861d 	beq.w	800634e <_svfprintf_r+0xcf6>
 8005714:	2200      	movs	r2, #0
 8005716:	1c6b      	adds	r3, r5, #1
 8005718:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800571c:	4611      	mov	r1, r2
 800571e:	f04f 39ff 	mov.w	r9, #4294967295
 8005722:	9209      	str	r2, [sp, #36]	; 0x24
 8005724:	4615      	mov	r5, r2
 8005726:	200a      	movs	r0, #10
 8005728:	1c5e      	adds	r6, r3, #1
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	9605      	str	r6, [sp, #20]
 800572e:	9302      	str	r3, [sp, #8]
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	3b20      	subs	r3, #32
 8005734:	2b58      	cmp	r3, #88	; 0x58
 8005736:	f200 8263 	bhi.w	8005c00 <_svfprintf_r+0x5a8>
 800573a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800573e:	005c      	.short	0x005c
 8005740:	02610261 	.word	0x02610261
 8005744:	0261006b 	.word	0x0261006b
 8005748:	02610261 	.word	0x02610261
 800574c:	02610261 	.word	0x02610261
 8005750:	006e0261 	.word	0x006e0261
 8005754:	02610059 	.word	0x02610059
 8005758:	007c0079 	.word	0x007c0079
 800575c:	00a30261 	.word	0x00a30261
 8005760:	00a600a6 	.word	0x00a600a6
 8005764:	00a600a6 	.word	0x00a600a6
 8005768:	00a600a6 	.word	0x00a600a6
 800576c:	00a600a6 	.word	0x00a600a6
 8005770:	026100a6 	.word	0x026100a6
 8005774:	02610261 	.word	0x02610261
 8005778:	02610261 	.word	0x02610261
 800577c:	02610261 	.word	0x02610261
 8005780:	02610261 	.word	0x02610261
 8005784:	00d60261 	.word	0x00d60261
 8005788:	0261010b 	.word	0x0261010b
 800578c:	0261010b 	.word	0x0261010b
 8005790:	02610261 	.word	0x02610261
 8005794:	00b90261 	.word	0x00b90261
 8005798:	02610261 	.word	0x02610261
 800579c:	02610152 	.word	0x02610152
 80057a0:	02610261 	.word	0x02610261
 80057a4:	02610261 	.word	0x02610261
 80057a8:	02610199 	.word	0x02610199
 80057ac:	00660261 	.word	0x00660261
 80057b0:	02610261 	.word	0x02610261
 80057b4:	02610261 	.word	0x02610261
 80057b8:	02610261 	.word	0x02610261
 80057bc:	02610261 	.word	0x02610261
 80057c0:	02610261 	.word	0x02610261
 80057c4:	006100cd 	.word	0x006100cd
 80057c8:	010b010b 	.word	0x010b010b
 80057cc:	00bc010b 	.word	0x00bc010b
 80057d0:	02610061 	.word	0x02610061
 80057d4:	00bf0261 	.word	0x00bf0261
 80057d8:	01340261 	.word	0x01340261
 80057dc:	016f0154 	.word	0x016f0154
 80057e0:	026100ca 	.word	0x026100ca
 80057e4:	02610180 	.word	0x02610180
 80057e8:	0261019b 	.word	0x0261019b
 80057ec:	01b30261 	.word	0x01b30261
 80057f0:	2201      	movs	r2, #1
 80057f2:	212b      	movs	r1, #43	; 0x2b
 80057f4:	e002      	b.n	80057fc <_svfprintf_r+0x1a4>
 80057f6:	b909      	cbnz	r1, 80057fc <_svfprintf_r+0x1a4>
 80057f8:	2201      	movs	r2, #1
 80057fa:	2120      	movs	r1, #32
 80057fc:	9b05      	ldr	r3, [sp, #20]
 80057fe:	e793      	b.n	8005728 <_svfprintf_r+0xd0>
 8005800:	2a00      	cmp	r2, #0
 8005802:	d077      	beq.n	80058f4 <_svfprintf_r+0x29c>
 8005804:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005808:	e074      	b.n	80058f4 <_svfprintf_r+0x29c>
 800580a:	b10a      	cbz	r2, 8005810 <_svfprintf_r+0x1b8>
 800580c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005810:	4b41      	ldr	r3, [pc, #260]	; (8005918 <_svfprintf_r+0x2c0>)
 8005812:	e14b      	b.n	8005aac <_svfprintf_r+0x454>
 8005814:	f045 0501 	orr.w	r5, r5, #1
 8005818:	e7f0      	b.n	80057fc <_svfprintf_r+0x1a4>
 800581a:	683e      	ldr	r6, [r7, #0]
 800581c:	9609      	str	r6, [sp, #36]	; 0x24
 800581e:	2e00      	cmp	r6, #0
 8005820:	f107 0304 	add.w	r3, r7, #4
 8005824:	db01      	blt.n	800582a <_svfprintf_r+0x1d2>
 8005826:	461f      	mov	r7, r3
 8005828:	e7e8      	b.n	80057fc <_svfprintf_r+0x1a4>
 800582a:	4276      	negs	r6, r6
 800582c:	9609      	str	r6, [sp, #36]	; 0x24
 800582e:	461f      	mov	r7, r3
 8005830:	f045 0504 	orr.w	r5, r5, #4
 8005834:	e7e2      	b.n	80057fc <_svfprintf_r+0x1a4>
 8005836:	9e05      	ldr	r6, [sp, #20]
 8005838:	9b05      	ldr	r3, [sp, #20]
 800583a:	7836      	ldrb	r6, [r6, #0]
 800583c:	9602      	str	r6, [sp, #8]
 800583e:	2e2a      	cmp	r6, #42	; 0x2a
 8005840:	f103 0301 	add.w	r3, r3, #1
 8005844:	d002      	beq.n	800584c <_svfprintf_r+0x1f4>
 8005846:	f04f 0900 	mov.w	r9, #0
 800584a:	e00a      	b.n	8005862 <_svfprintf_r+0x20a>
 800584c:	f8d7 9000 	ldr.w	r9, [r7]
 8005850:	9305      	str	r3, [sp, #20]
 8005852:	1d3e      	adds	r6, r7, #4
 8005854:	f1b9 0f00 	cmp.w	r9, #0
 8005858:	4637      	mov	r7, r6
 800585a:	dacf      	bge.n	80057fc <_svfprintf_r+0x1a4>
 800585c:	f04f 39ff 	mov.w	r9, #4294967295
 8005860:	e7cc      	b.n	80057fc <_svfprintf_r+0x1a4>
 8005862:	9305      	str	r3, [sp, #20]
 8005864:	9b02      	ldr	r3, [sp, #8]
 8005866:	3b30      	subs	r3, #48	; 0x30
 8005868:	2b09      	cmp	r3, #9
 800586a:	d808      	bhi.n	800587e <_svfprintf_r+0x226>
 800586c:	fb00 3909 	mla	r9, r0, r9, r3
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	461e      	mov	r6, r3
 8005874:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005878:	9302      	str	r3, [sp, #8]
 800587a:	4633      	mov	r3, r6
 800587c:	e7f1      	b.n	8005862 <_svfprintf_r+0x20a>
 800587e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8005882:	e755      	b.n	8005730 <_svfprintf_r+0xd8>
 8005884:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005888:	e7b8      	b.n	80057fc <_svfprintf_r+0x1a4>
 800588a:	2300      	movs	r3, #0
 800588c:	9309      	str	r3, [sp, #36]	; 0x24
 800588e:	9b02      	ldr	r3, [sp, #8]
 8005890:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005892:	3b30      	subs	r3, #48	; 0x30
 8005894:	fb00 3306 	mla	r3, r0, r6, r3
 8005898:	9309      	str	r3, [sp, #36]	; 0x24
 800589a:	9b05      	ldr	r3, [sp, #20]
 800589c:	461e      	mov	r6, r3
 800589e:	f816 3b01 	ldrb.w	r3, [r6], #1
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	9605      	str	r6, [sp, #20]
 80058a8:	3b30      	subs	r3, #48	; 0x30
 80058aa:	2b09      	cmp	r3, #9
 80058ac:	d9ef      	bls.n	800588e <_svfprintf_r+0x236>
 80058ae:	e73f      	b.n	8005730 <_svfprintf_r+0xd8>
 80058b0:	f045 0508 	orr.w	r5, r5, #8
 80058b4:	e7a2      	b.n	80057fc <_svfprintf_r+0x1a4>
 80058b6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80058ba:	e79f      	b.n	80057fc <_svfprintf_r+0x1a4>
 80058bc:	9b05      	ldr	r3, [sp, #20]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b6c      	cmp	r3, #108	; 0x6c
 80058c2:	d103      	bne.n	80058cc <_svfprintf_r+0x274>
 80058c4:	9b05      	ldr	r3, [sp, #20]
 80058c6:	3301      	adds	r3, #1
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	e002      	b.n	80058d2 <_svfprintf_r+0x27a>
 80058cc:	f045 0510 	orr.w	r5, r5, #16
 80058d0:	e794      	b.n	80057fc <_svfprintf_r+0x1a4>
 80058d2:	f045 0520 	orr.w	r5, r5, #32
 80058d6:	e791      	b.n	80057fc <_svfprintf_r+0x1a4>
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	9303      	str	r3, [sp, #12]
 80058dc:	2600      	movs	r6, #0
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80058e4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80058e8:	e199      	b.n	8005c1e <_svfprintf_r+0x5c6>
 80058ea:	b10a      	cbz	r2, 80058f0 <_svfprintf_r+0x298>
 80058ec:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80058f0:	f045 0510 	orr.w	r5, r5, #16
 80058f4:	06aa      	lsls	r2, r5, #26
 80058f6:	d511      	bpl.n	800591c <_svfprintf_r+0x2c4>
 80058f8:	3707      	adds	r7, #7
 80058fa:	f027 0707 	bic.w	r7, r7, #7
 80058fe:	f107 0308 	add.w	r3, r7, #8
 8005902:	9303      	str	r3, [sp, #12]
 8005904:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005908:	e017      	b.n	800593a <_svfprintf_r+0x2e2>
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w
	...
 8005918:	0800a17a 	.word	0x0800a17a
 800591c:	f015 0f10 	tst.w	r5, #16
 8005920:	f107 0304 	add.w	r3, r7, #4
 8005924:	d002      	beq.n	800592c <_svfprintf_r+0x2d4>
 8005926:	9303      	str	r3, [sp, #12]
 8005928:	683e      	ldr	r6, [r7, #0]
 800592a:	e005      	b.n	8005938 <_svfprintf_r+0x2e0>
 800592c:	683e      	ldr	r6, [r7, #0]
 800592e:	9303      	str	r3, [sp, #12]
 8005930:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005934:	bf18      	it	ne
 8005936:	b236      	sxthne	r6, r6
 8005938:	17f7      	asrs	r7, r6, #31
 800593a:	2e00      	cmp	r6, #0
 800593c:	f177 0300 	sbcs.w	r3, r7, #0
 8005940:	f280 80de 	bge.w	8005b00 <_svfprintf_r+0x4a8>
 8005944:	4276      	negs	r6, r6
 8005946:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800594a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800594e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005952:	e0d5      	b.n	8005b00 <_svfprintf_r+0x4a8>
 8005954:	b10a      	cbz	r2, 800595a <_svfprintf_r+0x302>
 8005956:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800595a:	3707      	adds	r7, #7
 800595c:	f027 0707 	bic.w	r7, r7, #7
 8005960:	f107 0308 	add.w	r3, r7, #8
 8005964:	9303      	str	r3, [sp, #12]
 8005966:	ed97 7b00 	vldr	d7, [r7]
 800596a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800596e:	9b06      	ldr	r3, [sp, #24]
 8005970:	9312      	str	r3, [sp, #72]	; 0x48
 8005972:	9b07      	ldr	r3, [sp, #28]
 8005974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005978:	9313      	str	r3, [sp, #76]	; 0x4c
 800597a:	f04f 32ff 	mov.w	r2, #4294967295
 800597e:	4bab      	ldr	r3, [pc, #684]	; (8005c2c <_svfprintf_r+0x5d4>)
 8005980:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005984:	f7fb f8ce 	bl	8000b24 <__aeabi_dcmpun>
 8005988:	2800      	cmp	r0, #0
 800598a:	f040 84f1 	bne.w	8006370 <_svfprintf_r+0xd18>
 800598e:	f04f 32ff 	mov.w	r2, #4294967295
 8005992:	4ba6      	ldr	r3, [pc, #664]	; (8005c2c <_svfprintf_r+0x5d4>)
 8005994:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005998:	f7fb f8a6 	bl	8000ae8 <__aeabi_dcmple>
 800599c:	2800      	cmp	r0, #0
 800599e:	f040 84e7 	bne.w	8006370 <_svfprintf_r+0xd18>
 80059a2:	f000 bdfd 	b.w	80065a0 <_svfprintf_r+0xf48>
 80059a6:	b10a      	cbz	r2, 80059ac <_svfprintf_r+0x354>
 80059a8:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80059ac:	f015 0f20 	tst.w	r5, #32
 80059b0:	f107 0304 	add.w	r3, r7, #4
 80059b4:	d007      	beq.n	80059c6 <_svfprintf_r+0x36e>
 80059b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	17ce      	asrs	r6, r1, #31
 80059bc:	4608      	mov	r0, r1
 80059be:	4631      	mov	r1, r6
 80059c0:	e9c2 0100 	strd	r0, r1, [r2]
 80059c4:	e00b      	b.n	80059de <_svfprintf_r+0x386>
 80059c6:	06e9      	lsls	r1, r5, #27
 80059c8:	d406      	bmi.n	80059d8 <_svfprintf_r+0x380>
 80059ca:	066a      	lsls	r2, r5, #25
 80059cc:	d504      	bpl.n	80059d8 <_svfprintf_r+0x380>
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80059d4:	8011      	strh	r1, [r2, #0]
 80059d6:	e002      	b.n	80059de <_svfprintf_r+0x386>
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059dc:	6011      	str	r1, [r2, #0]
 80059de:	461f      	mov	r7, r3
 80059e0:	e670      	b.n	80056c4 <_svfprintf_r+0x6c>
 80059e2:	f045 0510 	orr.w	r5, r5, #16
 80059e6:	f015 0320 	ands.w	r3, r5, #32
 80059ea:	d009      	beq.n	8005a00 <_svfprintf_r+0x3a8>
 80059ec:	3707      	adds	r7, #7
 80059ee:	f027 0707 	bic.w	r7, r7, #7
 80059f2:	f107 0308 	add.w	r3, r7, #8
 80059f6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80059fa:	9303      	str	r3, [sp, #12]
 80059fc:	2300      	movs	r3, #0
 80059fe:	e07b      	b.n	8005af8 <_svfprintf_r+0x4a0>
 8005a00:	1d3a      	adds	r2, r7, #4
 8005a02:	f015 0110 	ands.w	r1, r5, #16
 8005a06:	9203      	str	r2, [sp, #12]
 8005a08:	d105      	bne.n	8005a16 <_svfprintf_r+0x3be>
 8005a0a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005a0e:	d002      	beq.n	8005a16 <_svfprintf_r+0x3be>
 8005a10:	883e      	ldrh	r6, [r7, #0]
 8005a12:	2700      	movs	r7, #0
 8005a14:	e7f2      	b.n	80059fc <_svfprintf_r+0x3a4>
 8005a16:	683e      	ldr	r6, [r7, #0]
 8005a18:	2700      	movs	r7, #0
 8005a1a:	e06d      	b.n	8005af8 <_svfprintf_r+0x4a0>
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	9303      	str	r3, [sp, #12]
 8005a20:	2330      	movs	r3, #48	; 0x30
 8005a22:	2278      	movs	r2, #120	; 0x78
 8005a24:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005a28:	4b81      	ldr	r3, [pc, #516]	; (8005c30 <_svfprintf_r+0x5d8>)
 8005a2a:	683e      	ldr	r6, [r7, #0]
 8005a2c:	9311      	str	r3, [sp, #68]	; 0x44
 8005a2e:	2700      	movs	r7, #0
 8005a30:	f045 0502 	orr.w	r5, r5, #2
 8005a34:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005a38:	2302      	movs	r3, #2
 8005a3a:	9202      	str	r2, [sp, #8]
 8005a3c:	e05c      	b.n	8005af8 <_svfprintf_r+0x4a0>
 8005a3e:	2600      	movs	r6, #0
 8005a40:	1d3b      	adds	r3, r7, #4
 8005a42:	45b1      	cmp	r9, r6
 8005a44:	9303      	str	r3, [sp, #12]
 8005a46:	f8d7 8000 	ldr.w	r8, [r7]
 8005a4a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005a4e:	db0a      	blt.n	8005a66 <_svfprintf_r+0x40e>
 8005a50:	464a      	mov	r2, r9
 8005a52:	4631      	mov	r1, r6
 8005a54:	4640      	mov	r0, r8
 8005a56:	f7fa fbc3 	bl	80001e0 <memchr>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f000 80ea 	beq.w	8005c34 <_svfprintf_r+0x5dc>
 8005a60:	ebc8 0900 	rsb	r9, r8, r0
 8005a64:	e0e7      	b.n	8005c36 <_svfprintf_r+0x5de>
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7fa fbb2 	bl	80001d0 <strlen>
 8005a6c:	4681      	mov	r9, r0
 8005a6e:	e0e2      	b.n	8005c36 <_svfprintf_r+0x5de>
 8005a70:	f045 0510 	orr.w	r5, r5, #16
 8005a74:	06ae      	lsls	r6, r5, #26
 8005a76:	d508      	bpl.n	8005a8a <_svfprintf_r+0x432>
 8005a78:	3707      	adds	r7, #7
 8005a7a:	f027 0707 	bic.w	r7, r7, #7
 8005a7e:	f107 0308 	add.w	r3, r7, #8
 8005a82:	9303      	str	r3, [sp, #12]
 8005a84:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005a88:	e00a      	b.n	8005aa0 <_svfprintf_r+0x448>
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	f015 0f10 	tst.w	r5, #16
 8005a90:	9303      	str	r3, [sp, #12]
 8005a92:	d103      	bne.n	8005a9c <_svfprintf_r+0x444>
 8005a94:	0668      	lsls	r0, r5, #25
 8005a96:	d501      	bpl.n	8005a9c <_svfprintf_r+0x444>
 8005a98:	883e      	ldrh	r6, [r7, #0]
 8005a9a:	e000      	b.n	8005a9e <_svfprintf_r+0x446>
 8005a9c:	683e      	ldr	r6, [r7, #0]
 8005a9e:	2700      	movs	r7, #0
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e029      	b.n	8005af8 <_svfprintf_r+0x4a0>
 8005aa4:	b10a      	cbz	r2, 8005aaa <_svfprintf_r+0x452>
 8005aa6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005aaa:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <_svfprintf_r+0x5d8>)
 8005aac:	9311      	str	r3, [sp, #68]	; 0x44
 8005aae:	06a9      	lsls	r1, r5, #26
 8005ab0:	d508      	bpl.n	8005ac4 <_svfprintf_r+0x46c>
 8005ab2:	3707      	adds	r7, #7
 8005ab4:	f027 0707 	bic.w	r7, r7, #7
 8005ab8:	f107 0308 	add.w	r3, r7, #8
 8005abc:	9303      	str	r3, [sp, #12]
 8005abe:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005ac2:	e00a      	b.n	8005ada <_svfprintf_r+0x482>
 8005ac4:	1d3b      	adds	r3, r7, #4
 8005ac6:	f015 0f10 	tst.w	r5, #16
 8005aca:	9303      	str	r3, [sp, #12]
 8005acc:	d103      	bne.n	8005ad6 <_svfprintf_r+0x47e>
 8005ace:	066a      	lsls	r2, r5, #25
 8005ad0:	d501      	bpl.n	8005ad6 <_svfprintf_r+0x47e>
 8005ad2:	883e      	ldrh	r6, [r7, #0]
 8005ad4:	e000      	b.n	8005ad8 <_svfprintf_r+0x480>
 8005ad6:	683e      	ldr	r6, [r7, #0]
 8005ad8:	2700      	movs	r7, #0
 8005ada:	07eb      	lsls	r3, r5, #31
 8005adc:	d50b      	bpl.n	8005af6 <_svfprintf_r+0x49e>
 8005ade:	ea56 0307 	orrs.w	r3, r6, r7
 8005ae2:	d008      	beq.n	8005af6 <_svfprintf_r+0x49e>
 8005ae4:	2330      	movs	r3, #48	; 0x30
 8005ae6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005aea:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005aee:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8005af2:	f045 0502 	orr.w	r5, r5, #2
 8005af6:	2302      	movs	r3, #2
 8005af8:	2200      	movs	r2, #0
 8005afa:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005afe:	e000      	b.n	8005b02 <_svfprintf_r+0x4aa>
 8005b00:	2301      	movs	r3, #1
 8005b02:	f1b9 0f00 	cmp.w	r9, #0
 8005b06:	f2c0 855c 	blt.w	80065c2 <_svfprintf_r+0xf6a>
 8005b0a:	ea56 0207 	orrs.w	r2, r6, r7
 8005b0e:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8005b12:	d103      	bne.n	8005b1c <_svfprintf_r+0x4c4>
 8005b14:	f1b9 0f00 	cmp.w	r9, #0
 8005b18:	d05f      	beq.n	8005bda <_svfprintf_r+0x582>
 8005b1a:	e006      	b.n	8005b2a <_svfprintf_r+0x4d2>
 8005b1c:	460d      	mov	r5, r1
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d025      	beq.n	8005b6e <_svfprintf_r+0x516>
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d046      	beq.n	8005bb4 <_svfprintf_r+0x55c>
 8005b26:	4629      	mov	r1, r5
 8005b28:	e007      	b.n	8005b3a <_svfprintf_r+0x4e2>
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d022      	beq.n	8005b76 <_svfprintf_r+0x51e>
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d03d      	beq.n	8005bb0 <_svfprintf_r+0x558>
 8005b34:	4629      	mov	r1, r5
 8005b36:	2600      	movs	r6, #0
 8005b38:	2700      	movs	r7, #0
 8005b3a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005b3e:	08f2      	lsrs	r2, r6, #3
 8005b40:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8005b44:	08f8      	lsrs	r0, r7, #3
 8005b46:	f006 0307 	and.w	r3, r6, #7
 8005b4a:	4607      	mov	r7, r0
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	3330      	adds	r3, #48	; 0x30
 8005b50:	ea56 0207 	orrs.w	r2, r6, r7
 8005b54:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005b58:	d1f1      	bne.n	8005b3e <_svfprintf_r+0x4e6>
 8005b5a:	07e8      	lsls	r0, r5, #31
 8005b5c:	d548      	bpl.n	8005bf0 <_svfprintf_r+0x598>
 8005b5e:	2b30      	cmp	r3, #48	; 0x30
 8005b60:	d046      	beq.n	8005bf0 <_svfprintf_r+0x598>
 8005b62:	2330      	movs	r3, #48	; 0x30
 8005b64:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005b68:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b6c:	e040      	b.n	8005bf0 <_svfprintf_r+0x598>
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	bf08      	it	eq
 8005b72:	2e0a      	cmpeq	r6, #10
 8005b74:	d205      	bcs.n	8005b82 <_svfprintf_r+0x52a>
 8005b76:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005b7a:	3630      	adds	r6, #48	; 0x30
 8005b7c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005b80:	e029      	b.n	8005bd6 <_svfprintf_r+0x57e>
 8005b82:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005b86:	4630      	mov	r0, r6
 8005b88:	4639      	mov	r1, r7
 8005b8a:	220a      	movs	r2, #10
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f7fb f857 	bl	8000c40 <__aeabi_uldivmod>
 8005b92:	3230      	adds	r2, #48	; 0x30
 8005b94:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	f7fb f84e 	bl	8000c40 <__aeabi_uldivmod>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	ea56 0307 	orrs.w	r3, r6, r7
 8005bac:	d1eb      	bne.n	8005b86 <_svfprintf_r+0x52e>
 8005bae:	e012      	b.n	8005bd6 <_svfprintf_r+0x57e>
 8005bb0:	2600      	movs	r6, #0
 8005bb2:	2700      	movs	r7, #0
 8005bb4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005bb8:	f006 030f 	and.w	r3, r6, #15
 8005bbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005bbe:	5cd3      	ldrb	r3, [r2, r3]
 8005bc0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005bc4:	0933      	lsrs	r3, r6, #4
 8005bc6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005bca:	093a      	lsrs	r2, r7, #4
 8005bcc:	461e      	mov	r6, r3
 8005bce:	4617      	mov	r7, r2
 8005bd0:	ea56 0307 	orrs.w	r3, r6, r7
 8005bd4:	d1f0      	bne.n	8005bb8 <_svfprintf_r+0x560>
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	e00a      	b.n	8005bf0 <_svfprintf_r+0x598>
 8005bda:	b93b      	cbnz	r3, 8005bec <_svfprintf_r+0x594>
 8005bdc:	07ea      	lsls	r2, r5, #31
 8005bde:	d505      	bpl.n	8005bec <_svfprintf_r+0x594>
 8005be0:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005be4:	2330      	movs	r3, #48	; 0x30
 8005be6:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005bea:	e001      	b.n	8005bf0 <_svfprintf_r+0x598>
 8005bec:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005bf0:	464e      	mov	r6, r9
 8005bf2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005bf6:	ebc8 0909 	rsb	r9, r8, r9
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	2700      	movs	r7, #0
 8005bfe:	e01b      	b.n	8005c38 <_svfprintf_r+0x5e0>
 8005c00:	b10a      	cbz	r2, 8005c06 <_svfprintf_r+0x5ae>
 8005c02:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005c06:	9b02      	ldr	r3, [sp, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 83a0 	beq.w	800634e <_svfprintf_r+0xcf6>
 8005c0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005c12:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005c16:	2600      	movs	r6, #0
 8005c18:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005c1c:	9703      	str	r7, [sp, #12]
 8005c1e:	f04f 0901 	mov.w	r9, #1
 8005c22:	4637      	mov	r7, r6
 8005c24:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8005c28:	e006      	b.n	8005c38 <_svfprintf_r+0x5e0>
 8005c2a:	bf00      	nop
 8005c2c:	7fefffff 	.word	0x7fefffff
 8005c30:	0800a18b 	.word	0x0800a18b
 8005c34:	4606      	mov	r6, r0
 8005c36:	4637      	mov	r7, r6
 8005c38:	454e      	cmp	r6, r9
 8005c3a:	4633      	mov	r3, r6
 8005c3c:	bfb8      	it	lt
 8005c3e:	464b      	movlt	r3, r9
 8005c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c42:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005c46:	b113      	cbz	r3, 8005c4e <_svfprintf_r+0x5f6>
 8005c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c4e:	f015 0302 	ands.w	r3, r5, #2
 8005c52:	9314      	str	r3, [sp, #80]	; 0x50
 8005c54:	bf1e      	ittt	ne
 8005c56:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8005c58:	3302      	addne	r3, #2
 8005c5a:	930b      	strne	r3, [sp, #44]	; 0x2c
 8005c5c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005c60:	9315      	str	r3, [sp, #84]	; 0x54
 8005c62:	d139      	bne.n	8005cd8 <_svfprintf_r+0x680>
 8005c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	930c      	str	r3, [sp, #48]	; 0x30
 8005c6e:	dd33      	ble.n	8005cd8 <_svfprintf_r+0x680>
 8005c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c72:	2b10      	cmp	r3, #16
 8005c74:	4ba6      	ldr	r3, [pc, #664]	; (8005f10 <_svfprintf_r+0x8b8>)
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	dd18      	ble.n	8005cac <_svfprintf_r+0x654>
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	6063      	str	r3, [r4, #4]
 8005c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c80:	3310      	adds	r3, #16
 8005c82:	9321      	str	r3, [sp, #132]	; 0x84
 8005c84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c86:	3301      	adds	r3, #1
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	9320      	str	r3, [sp, #128]	; 0x80
 8005c8c:	dc01      	bgt.n	8005c92 <_svfprintf_r+0x63a>
 8005c8e:	3408      	adds	r4, #8
 8005c90:	e008      	b.n	8005ca4 <_svfprintf_r+0x64c>
 8005c92:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c94:	4659      	mov	r1, fp
 8005c96:	4650      	mov	r0, sl
 8005c98:	f003 fcad 	bl	80095f6 <__ssprint_r>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f040 835d 	bne.w	800635c <_svfprintf_r+0xd04>
 8005ca2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ca6:	3b10      	subs	r3, #16
 8005ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8005caa:	e7e1      	b.n	8005c70 <_svfprintf_r+0x618>
 8005cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cb4:	4413      	add	r3, r2
 8005cb6:	9321      	str	r3, [sp, #132]	; 0x84
 8005cb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cba:	3301      	adds	r3, #1
 8005cbc:	2b07      	cmp	r3, #7
 8005cbe:	9320      	str	r3, [sp, #128]	; 0x80
 8005cc0:	dc01      	bgt.n	8005cc6 <_svfprintf_r+0x66e>
 8005cc2:	3408      	adds	r4, #8
 8005cc4:	e008      	b.n	8005cd8 <_svfprintf_r+0x680>
 8005cc6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cc8:	4659      	mov	r1, fp
 8005cca:	4650      	mov	r0, sl
 8005ccc:	f003 fc93 	bl	80095f6 <__ssprint_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	f040 8343 	bne.w	800635c <_svfprintf_r+0xd04>
 8005cd6:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cd8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005cdc:	b1bb      	cbz	r3, 8005d0e <_svfprintf_r+0x6b6>
 8005cde:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cea:	3301      	adds	r3, #1
 8005cec:	9321      	str	r3, [sp, #132]	; 0x84
 8005cee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	2b07      	cmp	r3, #7
 8005cf4:	9320      	str	r3, [sp, #128]	; 0x80
 8005cf6:	dc01      	bgt.n	8005cfc <_svfprintf_r+0x6a4>
 8005cf8:	3408      	adds	r4, #8
 8005cfa:	e008      	b.n	8005d0e <_svfprintf_r+0x6b6>
 8005cfc:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cfe:	4659      	mov	r1, fp
 8005d00:	4650      	mov	r0, sl
 8005d02:	f003 fc78 	bl	80095f6 <__ssprint_r>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f040 8328 	bne.w	800635c <_svfprintf_r+0xd04>
 8005d0c:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d10:	b1b3      	cbz	r3, 8005d40 <_svfprintf_r+0x6e8>
 8005d12:	ab18      	add	r3, sp, #96	; 0x60
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	2302      	movs	r3, #2
 8005d18:	6063      	str	r3, [r4, #4]
 8005d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	9321      	str	r3, [sp, #132]	; 0x84
 8005d20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d22:	3301      	adds	r3, #1
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	9320      	str	r3, [sp, #128]	; 0x80
 8005d28:	dc01      	bgt.n	8005d2e <_svfprintf_r+0x6d6>
 8005d2a:	3408      	adds	r4, #8
 8005d2c:	e008      	b.n	8005d40 <_svfprintf_r+0x6e8>
 8005d2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d30:	4659      	mov	r1, fp
 8005d32:	4650      	mov	r0, sl
 8005d34:	f003 fc5f 	bl	80095f6 <__ssprint_r>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	f040 830f 	bne.w	800635c <_svfprintf_r+0xd04>
 8005d3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d42:	2b80      	cmp	r3, #128	; 0x80
 8005d44:	d135      	bne.n	8005db2 <_svfprintf_r+0x75a>
 8005d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd30      	ble.n	8005db2 <_svfprintf_r+0x75a>
 8005d50:	4a70      	ldr	r2, [pc, #448]	; (8005f14 <_svfprintf_r+0x8bc>)
 8005d52:	6022      	str	r2, [r4, #0]
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	dd18      	ble.n	8005d8a <_svfprintf_r+0x732>
 8005d58:	2210      	movs	r2, #16
 8005d5a:	6062      	str	r2, [r4, #4]
 8005d5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d5e:	3210      	adds	r2, #16
 8005d60:	9221      	str	r2, [sp, #132]	; 0x84
 8005d62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d64:	3201      	adds	r2, #1
 8005d66:	2a07      	cmp	r2, #7
 8005d68:	9220      	str	r2, [sp, #128]	; 0x80
 8005d6a:	dc01      	bgt.n	8005d70 <_svfprintf_r+0x718>
 8005d6c:	3408      	adds	r4, #8
 8005d6e:	e00a      	b.n	8005d86 <_svfprintf_r+0x72e>
 8005d70:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d72:	4659      	mov	r1, fp
 8005d74:	4650      	mov	r0, sl
 8005d76:	930c      	str	r3, [sp, #48]	; 0x30
 8005d78:	f003 fc3d 	bl	80095f6 <__ssprint_r>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	f040 82ed 	bne.w	800635c <_svfprintf_r+0xd04>
 8005d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d84:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d86:	3b10      	subs	r3, #16
 8005d88:	e7e2      	b.n	8005d50 <_svfprintf_r+0x6f8>
 8005d8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d8c:	6063      	str	r3, [r4, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	9321      	str	r3, [sp, #132]	; 0x84
 8005d92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d94:	3301      	adds	r3, #1
 8005d96:	2b07      	cmp	r3, #7
 8005d98:	9320      	str	r3, [sp, #128]	; 0x80
 8005d9a:	dc01      	bgt.n	8005da0 <_svfprintf_r+0x748>
 8005d9c:	3408      	adds	r4, #8
 8005d9e:	e008      	b.n	8005db2 <_svfprintf_r+0x75a>
 8005da0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005da2:	4659      	mov	r1, fp
 8005da4:	4650      	mov	r0, sl
 8005da6:	f003 fc26 	bl	80095f6 <__ssprint_r>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	f040 82d6 	bne.w	800635c <_svfprintf_r+0xd04>
 8005db0:	ac2c      	add	r4, sp, #176	; 0xb0
 8005db2:	ebc9 0606 	rsb	r6, r9, r6
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	dd2e      	ble.n	8005e18 <_svfprintf_r+0x7c0>
 8005dba:	4b56      	ldr	r3, [pc, #344]	; (8005f14 <_svfprintf_r+0x8bc>)
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	2e10      	cmp	r6, #16
 8005dc0:	dd16      	ble.n	8005df0 <_svfprintf_r+0x798>
 8005dc2:	2310      	movs	r3, #16
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc8:	3310      	adds	r3, #16
 8005dca:	9321      	str	r3, [sp, #132]	; 0x84
 8005dcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005dce:	3301      	adds	r3, #1
 8005dd0:	2b07      	cmp	r3, #7
 8005dd2:	9320      	str	r3, [sp, #128]	; 0x80
 8005dd4:	dc01      	bgt.n	8005dda <_svfprintf_r+0x782>
 8005dd6:	3408      	adds	r4, #8
 8005dd8:	e008      	b.n	8005dec <_svfprintf_r+0x794>
 8005dda:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ddc:	4659      	mov	r1, fp
 8005dde:	4650      	mov	r0, sl
 8005de0:	f003 fc09 	bl	80095f6 <__ssprint_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f040 82b9 	bne.w	800635c <_svfprintf_r+0xd04>
 8005dea:	ac2c      	add	r4, sp, #176	; 0xb0
 8005dec:	3e10      	subs	r6, #16
 8005dee:	e7e4      	b.n	8005dba <_svfprintf_r+0x762>
 8005df0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005df2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005df4:	6066      	str	r6, [r4, #4]
 8005df6:	3301      	adds	r3, #1
 8005df8:	4406      	add	r6, r0
 8005dfa:	2b07      	cmp	r3, #7
 8005dfc:	9621      	str	r6, [sp, #132]	; 0x84
 8005dfe:	9320      	str	r3, [sp, #128]	; 0x80
 8005e00:	dc01      	bgt.n	8005e06 <_svfprintf_r+0x7ae>
 8005e02:	3408      	adds	r4, #8
 8005e04:	e008      	b.n	8005e18 <_svfprintf_r+0x7c0>
 8005e06:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e08:	4659      	mov	r1, fp
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	f003 fbf3 	bl	80095f6 <__ssprint_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	f040 82a3 	bne.w	800635c <_svfprintf_r+0xd04>
 8005e16:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e18:	05eb      	lsls	r3, r5, #23
 8005e1a:	d414      	bmi.n	8005e46 <_svfprintf_r+0x7ee>
 8005e1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e1e:	e884 0300 	stmia.w	r4, {r8, r9}
 8005e22:	444b      	add	r3, r9
 8005e24:	9321      	str	r3, [sp, #132]	; 0x84
 8005e26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e28:	3301      	adds	r3, #1
 8005e2a:	2b07      	cmp	r3, #7
 8005e2c:	9320      	str	r3, [sp, #128]	; 0x80
 8005e2e:	f340 8244 	ble.w	80062ba <_svfprintf_r+0xc62>
 8005e32:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e34:	4659      	mov	r1, fp
 8005e36:	4650      	mov	r0, sl
 8005e38:	f003 fbdd 	bl	80095f6 <__ssprint_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f040 828d 	bne.w	800635c <_svfprintf_r+0xd04>
 8005e42:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e44:	e23a      	b.n	80062bc <_svfprintf_r+0xc64>
 8005e46:	9b02      	ldr	r3, [sp, #8]
 8005e48:	2b65      	cmp	r3, #101	; 0x65
 8005e4a:	f340 81ad 	ble.w	80061a8 <_svfprintf_r+0xb50>
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2300      	movs	r3, #0
 8005e52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e56:	f7fa fe33 	bl	8000ac0 <__aeabi_dcmpeq>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d05e      	beq.n	8005f1c <_svfprintf_r+0x8c4>
 8005e5e:	4b2e      	ldr	r3, [pc, #184]	; (8005f18 <_svfprintf_r+0x8c0>)
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	2301      	movs	r3, #1
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e68:	3301      	adds	r3, #1
 8005e6a:	9321      	str	r3, [sp, #132]	; 0x84
 8005e6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e6e:	3301      	adds	r3, #1
 8005e70:	2b07      	cmp	r3, #7
 8005e72:	9320      	str	r3, [sp, #128]	; 0x80
 8005e74:	dc01      	bgt.n	8005e7a <_svfprintf_r+0x822>
 8005e76:	3408      	adds	r4, #8
 8005e78:	e008      	b.n	8005e8c <_svfprintf_r+0x834>
 8005e7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	4650      	mov	r0, sl
 8005e80:	f003 fbb9 	bl	80095f6 <__ssprint_r>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f040 8269 	bne.w	800635c <_svfprintf_r+0xd04>
 8005e8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e8e:	9a04      	ldr	r2, [sp, #16]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	db02      	blt.n	8005e9a <_svfprintf_r+0x842>
 8005e94:	07ee      	lsls	r6, r5, #31
 8005e96:	f140 8211 	bpl.w	80062bc <_svfprintf_r+0xc64>
 8005e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	9b08      	ldr	r3, [sp, #32]
 8005ea0:	6063      	str	r3, [r4, #4]
 8005ea2:	9a08      	ldr	r2, [sp, #32]
 8005ea4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ea6:	4413      	add	r3, r2
 8005ea8:	9321      	str	r3, [sp, #132]	; 0x84
 8005eaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005eac:	3301      	adds	r3, #1
 8005eae:	2b07      	cmp	r3, #7
 8005eb0:	9320      	str	r3, [sp, #128]	; 0x80
 8005eb2:	dc01      	bgt.n	8005eb8 <_svfprintf_r+0x860>
 8005eb4:	3408      	adds	r4, #8
 8005eb6:	e008      	b.n	8005eca <_svfprintf_r+0x872>
 8005eb8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005eba:	4659      	mov	r1, fp
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	f003 fb9a 	bl	80095f6 <__ssprint_r>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	f040 824a 	bne.w	800635c <_svfprintf_r+0xd04>
 8005ec8:	ac2c      	add	r4, sp, #176	; 0xb0
 8005eca:	9b04      	ldr	r3, [sp, #16]
 8005ecc:	1e5e      	subs	r6, r3, #1
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	f340 81f4 	ble.w	80062bc <_svfprintf_r+0xc64>
 8005ed4:	4f0f      	ldr	r7, [pc, #60]	; (8005f14 <_svfprintf_r+0x8bc>)
 8005ed6:	f04f 0810 	mov.w	r8, #16
 8005eda:	2e10      	cmp	r6, #16
 8005edc:	f340 8159 	ble.w	8006192 <_svfprintf_r+0xb3a>
 8005ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee2:	3310      	adds	r3, #16
 8005ee4:	9321      	str	r3, [sp, #132]	; 0x84
 8005ee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ee8:	3301      	adds	r3, #1
 8005eea:	2b07      	cmp	r3, #7
 8005eec:	e884 0180 	stmia.w	r4, {r7, r8}
 8005ef0:	9320      	str	r3, [sp, #128]	; 0x80
 8005ef2:	dc01      	bgt.n	8005ef8 <_svfprintf_r+0x8a0>
 8005ef4:	3408      	adds	r4, #8
 8005ef6:	e008      	b.n	8005f0a <_svfprintf_r+0x8b2>
 8005ef8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005efa:	4659      	mov	r1, fp
 8005efc:	4650      	mov	r0, sl
 8005efe:	f003 fb7a 	bl	80095f6 <__ssprint_r>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f040 822a 	bne.w	800635c <_svfprintf_r+0xd04>
 8005f08:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f0a:	3e10      	subs	r6, #16
 8005f0c:	e7e5      	b.n	8005eda <_svfprintf_r+0x882>
 8005f0e:	bf00      	nop
 8005f10:	0800a19e 	.word	0x0800a19e
 8005f14:	0800a15a 	.word	0x0800a15a
 8005f18:	0800a19c 	.word	0x0800a19c
 8005f1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dc7c      	bgt.n	800601c <_svfprintf_r+0x9c4>
 8005f22:	4b9f      	ldr	r3, [pc, #636]	; (80061a0 <_svfprintf_r+0xb48>)
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	2301      	movs	r3, #1
 8005f28:	6063      	str	r3, [r4, #4]
 8005f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	9321      	str	r3, [sp, #132]	; 0x84
 8005f30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f32:	3301      	adds	r3, #1
 8005f34:	2b07      	cmp	r3, #7
 8005f36:	9320      	str	r3, [sp, #128]	; 0x80
 8005f38:	dc01      	bgt.n	8005f3e <_svfprintf_r+0x8e6>
 8005f3a:	3408      	adds	r4, #8
 8005f3c:	e008      	b.n	8005f50 <_svfprintf_r+0x8f8>
 8005f3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f40:	4659      	mov	r1, fp
 8005f42:	4650      	mov	r0, sl
 8005f44:	f003 fb57 	bl	80095f6 <__ssprint_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f040 8207 	bne.w	800635c <_svfprintf_r+0xd04>
 8005f4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f52:	b923      	cbnz	r3, 8005f5e <_svfprintf_r+0x906>
 8005f54:	9b04      	ldr	r3, [sp, #16]
 8005f56:	b913      	cbnz	r3, 8005f5e <_svfprintf_r+0x906>
 8005f58:	07e8      	lsls	r0, r5, #31
 8005f5a:	f140 81af 	bpl.w	80062bc <_svfprintf_r+0xc64>
 8005f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	9b08      	ldr	r3, [sp, #32]
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	9a08      	ldr	r2, [sp, #32]
 8005f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f6a:	4413      	add	r3, r2
 8005f6c:	9321      	str	r3, [sp, #132]	; 0x84
 8005f6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f70:	3301      	adds	r3, #1
 8005f72:	2b07      	cmp	r3, #7
 8005f74:	9320      	str	r3, [sp, #128]	; 0x80
 8005f76:	dc02      	bgt.n	8005f7e <_svfprintf_r+0x926>
 8005f78:	f104 0308 	add.w	r3, r4, #8
 8005f7c:	e008      	b.n	8005f90 <_svfprintf_r+0x938>
 8005f7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f80:	4659      	mov	r1, fp
 8005f82:	4650      	mov	r0, sl
 8005f84:	f003 fb37 	bl	80095f6 <__ssprint_r>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f040 81e7 	bne.w	800635c <_svfprintf_r+0xd04>
 8005f8e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005f90:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005f92:	4276      	negs	r6, r6
 8005f94:	2e00      	cmp	r6, #0
 8005f96:	dd30      	ble.n	8005ffa <_svfprintf_r+0x9a2>
 8005f98:	4f82      	ldr	r7, [pc, #520]	; (80061a4 <_svfprintf_r+0xb4c>)
 8005f9a:	2410      	movs	r4, #16
 8005f9c:	2e10      	cmp	r6, #16
 8005f9e:	dd16      	ble.n	8005fce <_svfprintf_r+0x976>
 8005fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fa2:	601f      	str	r7, [r3, #0]
 8005fa4:	3210      	adds	r2, #16
 8005fa6:	9221      	str	r2, [sp, #132]	; 0x84
 8005fa8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005faa:	605c      	str	r4, [r3, #4]
 8005fac:	3201      	adds	r2, #1
 8005fae:	2a07      	cmp	r2, #7
 8005fb0:	9220      	str	r2, [sp, #128]	; 0x80
 8005fb2:	dc01      	bgt.n	8005fb8 <_svfprintf_r+0x960>
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	e008      	b.n	8005fca <_svfprintf_r+0x972>
 8005fb8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fba:	4659      	mov	r1, fp
 8005fbc:	4650      	mov	r0, sl
 8005fbe:	f003 fb1a 	bl	80095f6 <__ssprint_r>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f040 81ca 	bne.w	800635c <_svfprintf_r+0xd04>
 8005fc8:	ab2c      	add	r3, sp, #176	; 0xb0
 8005fca:	3e10      	subs	r6, #16
 8005fcc:	e7e6      	b.n	8005f9c <_svfprintf_r+0x944>
 8005fce:	4a75      	ldr	r2, [pc, #468]	; (80061a4 <_svfprintf_r+0xb4c>)
 8005fd0:	e883 0044 	stmia.w	r3, {r2, r6}
 8005fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fd6:	4416      	add	r6, r2
 8005fd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fda:	9621      	str	r6, [sp, #132]	; 0x84
 8005fdc:	3201      	adds	r2, #1
 8005fde:	2a07      	cmp	r2, #7
 8005fe0:	9220      	str	r2, [sp, #128]	; 0x80
 8005fe2:	dc01      	bgt.n	8005fe8 <_svfprintf_r+0x990>
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	e008      	b.n	8005ffa <_svfprintf_r+0x9a2>
 8005fe8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fea:	4659      	mov	r1, fp
 8005fec:	4650      	mov	r0, sl
 8005fee:	f003 fb02 	bl	80095f6 <__ssprint_r>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	f040 81b2 	bne.w	800635c <_svfprintf_r+0xd04>
 8005ff8:	ab2c      	add	r3, sp, #176	; 0xb0
 8005ffa:	9a04      	ldr	r2, [sp, #16]
 8005ffc:	605a      	str	r2, [r3, #4]
 8005ffe:	9904      	ldr	r1, [sp, #16]
 8006000:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006002:	f8c3 8000 	str.w	r8, [r3]
 8006006:	440a      	add	r2, r1
 8006008:	9221      	str	r2, [sp, #132]	; 0x84
 800600a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800600c:	3201      	adds	r2, #1
 800600e:	2a07      	cmp	r2, #7
 8006010:	9220      	str	r2, [sp, #128]	; 0x80
 8006012:	f73f af0e 	bgt.w	8005e32 <_svfprintf_r+0x7da>
 8006016:	f103 0408 	add.w	r4, r3, #8
 800601a:	e14f      	b.n	80062bc <_svfprintf_r+0xc64>
 800601c:	9b04      	ldr	r3, [sp, #16]
 800601e:	42bb      	cmp	r3, r7
 8006020:	bfa8      	it	ge
 8006022:	463b      	movge	r3, r7
 8006024:	2b00      	cmp	r3, #0
 8006026:	461e      	mov	r6, r3
 8006028:	dd15      	ble.n	8006056 <_svfprintf_r+0x9fe>
 800602a:	6063      	str	r3, [r4, #4]
 800602c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800602e:	f8c4 8000 	str.w	r8, [r4]
 8006032:	4433      	add	r3, r6
 8006034:	9321      	str	r3, [sp, #132]	; 0x84
 8006036:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006038:	3301      	adds	r3, #1
 800603a:	2b07      	cmp	r3, #7
 800603c:	9320      	str	r3, [sp, #128]	; 0x80
 800603e:	dc01      	bgt.n	8006044 <_svfprintf_r+0x9ec>
 8006040:	3408      	adds	r4, #8
 8006042:	e008      	b.n	8006056 <_svfprintf_r+0x9fe>
 8006044:	aa1f      	add	r2, sp, #124	; 0x7c
 8006046:	4659      	mov	r1, fp
 8006048:	4650      	mov	r0, sl
 800604a:	f003 fad4 	bl	80095f6 <__ssprint_r>
 800604e:	2800      	cmp	r0, #0
 8006050:	f040 8184 	bne.w	800635c <_svfprintf_r+0xd04>
 8006054:	ac2c      	add	r4, sp, #176	; 0xb0
 8006056:	2e00      	cmp	r6, #0
 8006058:	bfac      	ite	ge
 800605a:	1bbe      	subge	r6, r7, r6
 800605c:	463e      	movlt	r6, r7
 800605e:	2e00      	cmp	r6, #0
 8006060:	dd30      	ble.n	80060c4 <_svfprintf_r+0xa6c>
 8006062:	f04f 0910 	mov.w	r9, #16
 8006066:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <_svfprintf_r+0xb4c>)
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	2e10      	cmp	r6, #16
 800606c:	dd16      	ble.n	800609c <_svfprintf_r+0xa44>
 800606e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006070:	f8c4 9004 	str.w	r9, [r4, #4]
 8006074:	3310      	adds	r3, #16
 8006076:	9321      	str	r3, [sp, #132]	; 0x84
 8006078:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800607a:	3301      	adds	r3, #1
 800607c:	2b07      	cmp	r3, #7
 800607e:	9320      	str	r3, [sp, #128]	; 0x80
 8006080:	dc01      	bgt.n	8006086 <_svfprintf_r+0xa2e>
 8006082:	3408      	adds	r4, #8
 8006084:	e008      	b.n	8006098 <_svfprintf_r+0xa40>
 8006086:	aa1f      	add	r2, sp, #124	; 0x7c
 8006088:	4659      	mov	r1, fp
 800608a:	4650      	mov	r0, sl
 800608c:	f003 fab3 	bl	80095f6 <__ssprint_r>
 8006090:	2800      	cmp	r0, #0
 8006092:	f040 8163 	bne.w	800635c <_svfprintf_r+0xd04>
 8006096:	ac2c      	add	r4, sp, #176	; 0xb0
 8006098:	3e10      	subs	r6, #16
 800609a:	e7e4      	b.n	8006066 <_svfprintf_r+0xa0e>
 800609c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800609e:	6066      	str	r6, [r4, #4]
 80060a0:	441e      	add	r6, r3
 80060a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060a4:	9621      	str	r6, [sp, #132]	; 0x84
 80060a6:	3301      	adds	r3, #1
 80060a8:	2b07      	cmp	r3, #7
 80060aa:	9320      	str	r3, [sp, #128]	; 0x80
 80060ac:	dc01      	bgt.n	80060b2 <_svfprintf_r+0xa5a>
 80060ae:	3408      	adds	r4, #8
 80060b0:	e008      	b.n	80060c4 <_svfprintf_r+0xa6c>
 80060b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80060b4:	4659      	mov	r1, fp
 80060b6:	4650      	mov	r0, sl
 80060b8:	f003 fa9d 	bl	80095f6 <__ssprint_r>
 80060bc:	2800      	cmp	r0, #0
 80060be:	f040 814d 	bne.w	800635c <_svfprintf_r+0xd04>
 80060c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80060c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060c6:	9a04      	ldr	r2, [sp, #16]
 80060c8:	4293      	cmp	r3, r2
 80060ca:	4447      	add	r7, r8
 80060cc:	db01      	blt.n	80060d2 <_svfprintf_r+0xa7a>
 80060ce:	07e9      	lsls	r1, r5, #31
 80060d0:	d517      	bpl.n	8006102 <_svfprintf_r+0xaaa>
 80060d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	9b08      	ldr	r3, [sp, #32]
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	9a08      	ldr	r2, [sp, #32]
 80060dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060de:	4413      	add	r3, r2
 80060e0:	9321      	str	r3, [sp, #132]	; 0x84
 80060e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060e4:	3301      	adds	r3, #1
 80060e6:	2b07      	cmp	r3, #7
 80060e8:	9320      	str	r3, [sp, #128]	; 0x80
 80060ea:	dc01      	bgt.n	80060f0 <_svfprintf_r+0xa98>
 80060ec:	3408      	adds	r4, #8
 80060ee:	e008      	b.n	8006102 <_svfprintf_r+0xaaa>
 80060f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80060f2:	4659      	mov	r1, fp
 80060f4:	4650      	mov	r0, sl
 80060f6:	f003 fa7e 	bl	80095f6 <__ssprint_r>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	f040 812e 	bne.w	800635c <_svfprintf_r+0xd04>
 8006100:	ac2c      	add	r4, sp, #176	; 0xb0
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	9a04      	ldr	r2, [sp, #16]
 8006106:	eb08 0603 	add.w	r6, r8, r3
 800610a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800610c:	1bf6      	subs	r6, r6, r7
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	429e      	cmp	r6, r3
 8006112:	bfa8      	it	ge
 8006114:	461e      	movge	r6, r3
 8006116:	2e00      	cmp	r6, #0
 8006118:	dd14      	ble.n	8006144 <_svfprintf_r+0xaec>
 800611a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800611c:	6027      	str	r7, [r4, #0]
 800611e:	4433      	add	r3, r6
 8006120:	9321      	str	r3, [sp, #132]	; 0x84
 8006122:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006124:	6066      	str	r6, [r4, #4]
 8006126:	3301      	adds	r3, #1
 8006128:	2b07      	cmp	r3, #7
 800612a:	9320      	str	r3, [sp, #128]	; 0x80
 800612c:	dc01      	bgt.n	8006132 <_svfprintf_r+0xada>
 800612e:	3408      	adds	r4, #8
 8006130:	e008      	b.n	8006144 <_svfprintf_r+0xaec>
 8006132:	aa1f      	add	r2, sp, #124	; 0x7c
 8006134:	4659      	mov	r1, fp
 8006136:	4650      	mov	r0, sl
 8006138:	f003 fa5d 	bl	80095f6 <__ssprint_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	f040 810d 	bne.w	800635c <_svfprintf_r+0xd04>
 8006142:	ac2c      	add	r4, sp, #176	; 0xb0
 8006144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	2e00      	cmp	r6, #0
 800614a:	eba2 0303 	sub.w	r3, r2, r3
 800614e:	bfac      	ite	ge
 8006150:	1b9e      	subge	r6, r3, r6
 8006152:	461e      	movlt	r6, r3
 8006154:	2e00      	cmp	r6, #0
 8006156:	f340 80b1 	ble.w	80062bc <_svfprintf_r+0xc64>
 800615a:	4f12      	ldr	r7, [pc, #72]	; (80061a4 <_svfprintf_r+0xb4c>)
 800615c:	f04f 0810 	mov.w	r8, #16
 8006160:	2e10      	cmp	r6, #16
 8006162:	dd16      	ble.n	8006192 <_svfprintf_r+0xb3a>
 8006164:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006166:	3310      	adds	r3, #16
 8006168:	9321      	str	r3, [sp, #132]	; 0x84
 800616a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800616c:	3301      	adds	r3, #1
 800616e:	2b07      	cmp	r3, #7
 8006170:	e884 0180 	stmia.w	r4, {r7, r8}
 8006174:	9320      	str	r3, [sp, #128]	; 0x80
 8006176:	dc01      	bgt.n	800617c <_svfprintf_r+0xb24>
 8006178:	3408      	adds	r4, #8
 800617a:	e008      	b.n	800618e <_svfprintf_r+0xb36>
 800617c:	aa1f      	add	r2, sp, #124	; 0x7c
 800617e:	4659      	mov	r1, fp
 8006180:	4650      	mov	r0, sl
 8006182:	f003 fa38 	bl	80095f6 <__ssprint_r>
 8006186:	2800      	cmp	r0, #0
 8006188:	f040 80e8 	bne.w	800635c <_svfprintf_r+0xd04>
 800618c:	ac2c      	add	r4, sp, #176	; 0xb0
 800618e:	3e10      	subs	r6, #16
 8006190:	e7e6      	b.n	8006160 <_svfprintf_r+0xb08>
 8006192:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <_svfprintf_r+0xb4c>)
 8006194:	e884 0048 	stmia.w	r4, {r3, r6}
 8006198:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800619a:	441e      	add	r6, r3
 800619c:	9621      	str	r6, [sp, #132]	; 0x84
 800619e:	e642      	b.n	8005e26 <_svfprintf_r+0x7ce>
 80061a0:	0800a19c 	.word	0x0800a19c
 80061a4:	0800a15a 	.word	0x0800a15a
 80061a8:	9b04      	ldr	r3, [sp, #16]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	dc01      	bgt.n	80061b2 <_svfprintf_r+0xb5a>
 80061ae:	07ea      	lsls	r2, r5, #31
 80061b0:	d573      	bpl.n	800629a <_svfprintf_r+0xc42>
 80061b2:	2301      	movs	r3, #1
 80061b4:	6063      	str	r3, [r4, #4]
 80061b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061b8:	f8c4 8000 	str.w	r8, [r4]
 80061bc:	3301      	adds	r3, #1
 80061be:	9321      	str	r3, [sp, #132]	; 0x84
 80061c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061c2:	3301      	adds	r3, #1
 80061c4:	2b07      	cmp	r3, #7
 80061c6:	9320      	str	r3, [sp, #128]	; 0x80
 80061c8:	dc01      	bgt.n	80061ce <_svfprintf_r+0xb76>
 80061ca:	3408      	adds	r4, #8
 80061cc:	e008      	b.n	80061e0 <_svfprintf_r+0xb88>
 80061ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80061d0:	4659      	mov	r1, fp
 80061d2:	4650      	mov	r0, sl
 80061d4:	f003 fa0f 	bl	80095f6 <__ssprint_r>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f040 80bf 	bne.w	800635c <_svfprintf_r+0xd04>
 80061de:	ac2c      	add	r4, sp, #176	; 0xb0
 80061e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e2:	6023      	str	r3, [r4, #0]
 80061e4:	9b08      	ldr	r3, [sp, #32]
 80061e6:	6063      	str	r3, [r4, #4]
 80061e8:	9a08      	ldr	r2, [sp, #32]
 80061ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ec:	4413      	add	r3, r2
 80061ee:	9321      	str	r3, [sp, #132]	; 0x84
 80061f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061f2:	3301      	adds	r3, #1
 80061f4:	2b07      	cmp	r3, #7
 80061f6:	9320      	str	r3, [sp, #128]	; 0x80
 80061f8:	dc01      	bgt.n	80061fe <_svfprintf_r+0xba6>
 80061fa:	3408      	adds	r4, #8
 80061fc:	e008      	b.n	8006210 <_svfprintf_r+0xbb8>
 80061fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006200:	4659      	mov	r1, fp
 8006202:	4650      	mov	r0, sl
 8006204:	f003 f9f7 	bl	80095f6 <__ssprint_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 80a7 	bne.w	800635c <_svfprintf_r+0xd04>
 800620e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006210:	2300      	movs	r3, #0
 8006212:	2200      	movs	r2, #0
 8006214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006218:	f7fa fc52 	bl	8000ac0 <__aeabi_dcmpeq>
 800621c:	9b04      	ldr	r3, [sp, #16]
 800621e:	1e5e      	subs	r6, r3, #1
 8006220:	b9b8      	cbnz	r0, 8006252 <_svfprintf_r+0xbfa>
 8006222:	f108 0301 	add.w	r3, r8, #1
 8006226:	e884 0048 	stmia.w	r4, {r3, r6}
 800622a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800622c:	9a04      	ldr	r2, [sp, #16]
 800622e:	3b01      	subs	r3, #1
 8006230:	4413      	add	r3, r2
 8006232:	9321      	str	r3, [sp, #132]	; 0x84
 8006234:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006236:	3301      	adds	r3, #1
 8006238:	2b07      	cmp	r3, #7
 800623a:	9320      	str	r3, [sp, #128]	; 0x80
 800623c:	dd34      	ble.n	80062a8 <_svfprintf_r+0xc50>
 800623e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006240:	4659      	mov	r1, fp
 8006242:	4650      	mov	r0, sl
 8006244:	f003 f9d7 	bl	80095f6 <__ssprint_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	f040 8087 	bne.w	800635c <_svfprintf_r+0xd04>
 800624e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006250:	e02b      	b.n	80062aa <_svfprintf_r+0xc52>
 8006252:	2e00      	cmp	r6, #0
 8006254:	dd29      	ble.n	80062aa <_svfprintf_r+0xc52>
 8006256:	4fa7      	ldr	r7, [pc, #668]	; (80064f4 <_svfprintf_r+0xe9c>)
 8006258:	f04f 0810 	mov.w	r8, #16
 800625c:	2e10      	cmp	r6, #16
 800625e:	dd15      	ble.n	800628c <_svfprintf_r+0xc34>
 8006260:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006262:	3310      	adds	r3, #16
 8006264:	9321      	str	r3, [sp, #132]	; 0x84
 8006266:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006268:	3301      	adds	r3, #1
 800626a:	2b07      	cmp	r3, #7
 800626c:	e884 0180 	stmia.w	r4, {r7, r8}
 8006270:	9320      	str	r3, [sp, #128]	; 0x80
 8006272:	dc01      	bgt.n	8006278 <_svfprintf_r+0xc20>
 8006274:	3408      	adds	r4, #8
 8006276:	e007      	b.n	8006288 <_svfprintf_r+0xc30>
 8006278:	aa1f      	add	r2, sp, #124	; 0x7c
 800627a:	4659      	mov	r1, fp
 800627c:	4650      	mov	r0, sl
 800627e:	f003 f9ba 	bl	80095f6 <__ssprint_r>
 8006282:	2800      	cmp	r0, #0
 8006284:	d16a      	bne.n	800635c <_svfprintf_r+0xd04>
 8006286:	ac2c      	add	r4, sp, #176	; 0xb0
 8006288:	3e10      	subs	r6, #16
 800628a:	e7e7      	b.n	800625c <_svfprintf_r+0xc04>
 800628c:	4b99      	ldr	r3, [pc, #612]	; (80064f4 <_svfprintf_r+0xe9c>)
 800628e:	e884 0048 	stmia.w	r4, {r3, r6}
 8006292:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006294:	441e      	add	r6, r3
 8006296:	9621      	str	r6, [sp, #132]	; 0x84
 8006298:	e7cc      	b.n	8006234 <_svfprintf_r+0xbdc>
 800629a:	2301      	movs	r3, #1
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a0:	f8c4 8000 	str.w	r8, [r4]
 80062a4:	3301      	adds	r3, #1
 80062a6:	e7c4      	b.n	8006232 <_svfprintf_r+0xbda>
 80062a8:	3408      	adds	r4, #8
 80062aa:	ab1b      	add	r3, sp, #108	; 0x6c
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062b6:	4413      	add	r3, r2
 80062b8:	e5b4      	b.n	8005e24 <_svfprintf_r+0x7cc>
 80062ba:	3408      	adds	r4, #8
 80062bc:	076b      	lsls	r3, r5, #29
 80062be:	d40b      	bmi.n	80062d8 <_svfprintf_r+0xc80>
 80062c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062c6:	428a      	cmp	r2, r1
 80062c8:	bfac      	ite	ge
 80062ca:	189b      	addge	r3, r3, r2
 80062cc:	185b      	addlt	r3, r3, r1
 80062ce:	930a      	str	r3, [sp, #40]	; 0x28
 80062d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d035      	beq.n	8006342 <_svfprintf_r+0xcea>
 80062d6:	e02e      	b.n	8006336 <_svfprintf_r+0xcde>
 80062d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062dc:	1a9d      	subs	r5, r3, r2
 80062de:	2d00      	cmp	r5, #0
 80062e0:	ddee      	ble.n	80062c0 <_svfprintf_r+0xc68>
 80062e2:	2610      	movs	r6, #16
 80062e4:	4b84      	ldr	r3, [pc, #528]	; (80064f8 <_svfprintf_r+0xea0>)
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	2d10      	cmp	r5, #16
 80062ea:	dd13      	ble.n	8006314 <_svfprintf_r+0xcbc>
 80062ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062ee:	6066      	str	r6, [r4, #4]
 80062f0:	3310      	adds	r3, #16
 80062f2:	9321      	str	r3, [sp, #132]	; 0x84
 80062f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062f6:	3301      	adds	r3, #1
 80062f8:	2b07      	cmp	r3, #7
 80062fa:	9320      	str	r3, [sp, #128]	; 0x80
 80062fc:	dc01      	bgt.n	8006302 <_svfprintf_r+0xcaa>
 80062fe:	3408      	adds	r4, #8
 8006300:	e006      	b.n	8006310 <_svfprintf_r+0xcb8>
 8006302:	aa1f      	add	r2, sp, #124	; 0x7c
 8006304:	4659      	mov	r1, fp
 8006306:	4650      	mov	r0, sl
 8006308:	f003 f975 	bl	80095f6 <__ssprint_r>
 800630c:	bb30      	cbnz	r0, 800635c <_svfprintf_r+0xd04>
 800630e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006310:	3d10      	subs	r5, #16
 8006312:	e7e7      	b.n	80062e4 <_svfprintf_r+0xc8c>
 8006314:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006316:	6065      	str	r5, [r4, #4]
 8006318:	441d      	add	r5, r3
 800631a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800631c:	9521      	str	r5, [sp, #132]	; 0x84
 800631e:	3301      	adds	r3, #1
 8006320:	2b07      	cmp	r3, #7
 8006322:	9320      	str	r3, [sp, #128]	; 0x80
 8006324:	ddcc      	ble.n	80062c0 <_svfprintf_r+0xc68>
 8006326:	aa1f      	add	r2, sp, #124	; 0x7c
 8006328:	4659      	mov	r1, fp
 800632a:	4650      	mov	r0, sl
 800632c:	f003 f963 	bl	80095f6 <__ssprint_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	d0c5      	beq.n	80062c0 <_svfprintf_r+0xc68>
 8006334:	e012      	b.n	800635c <_svfprintf_r+0xd04>
 8006336:	aa1f      	add	r2, sp, #124	; 0x7c
 8006338:	4659      	mov	r1, fp
 800633a:	4650      	mov	r0, sl
 800633c:	f003 f95b 	bl	80095f6 <__ssprint_r>
 8006340:	b960      	cbnz	r0, 800635c <_svfprintf_r+0xd04>
 8006342:	2300      	movs	r3, #0
 8006344:	9320      	str	r3, [sp, #128]	; 0x80
 8006346:	9f03      	ldr	r7, [sp, #12]
 8006348:	ac2c      	add	r4, sp, #176	; 0xb0
 800634a:	f7ff b9bb 	b.w	80056c4 <_svfprintf_r+0x6c>
 800634e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006350:	b123      	cbz	r3, 800635c <_svfprintf_r+0xd04>
 8006352:	aa1f      	add	r2, sp, #124	; 0x7c
 8006354:	4659      	mov	r1, fp
 8006356:	4650      	mov	r0, sl
 8006358:	f003 f94d 	bl	80095f6 <__ssprint_r>
 800635c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006360:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006366:	bf18      	it	ne
 8006368:	f04f 33ff 	movne.w	r3, #4294967295
 800636c:	4618      	mov	r0, r3
 800636e:	e12e      	b.n	80065ce <_svfprintf_r+0xf76>
 8006370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006374:	4610      	mov	r0, r2
 8006376:	4619      	mov	r1, r3
 8006378:	f7fa fbd4 	bl	8000b24 <__aeabi_dcmpun>
 800637c:	b160      	cbz	r0, 8006398 <_svfprintf_r+0xd40>
 800637e:	4b5f      	ldr	r3, [pc, #380]	; (80064fc <_svfprintf_r+0xea4>)
 8006380:	4a5f      	ldr	r2, [pc, #380]	; (8006500 <_svfprintf_r+0xea8>)
 8006382:	9902      	ldr	r1, [sp, #8]
 8006384:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8006388:	2947      	cmp	r1, #71	; 0x47
 800638a:	bfcc      	ite	gt
 800638c:	4690      	movgt	r8, r2
 800638e:	4698      	movle	r8, r3
 8006390:	f04f 0903 	mov.w	r9, #3
 8006394:	2600      	movs	r6, #0
 8006396:	e44e      	b.n	8005c36 <_svfprintf_r+0x5de>
 8006398:	f1b9 3fff 	cmp.w	r9, #4294967295
 800639c:	d00a      	beq.n	80063b4 <_svfprintf_r+0xd5c>
 800639e:	9b02      	ldr	r3, [sp, #8]
 80063a0:	f023 0320 	bic.w	r3, r3, #32
 80063a4:	2b47      	cmp	r3, #71	; 0x47
 80063a6:	d107      	bne.n	80063b8 <_svfprintf_r+0xd60>
 80063a8:	f1b9 0f00 	cmp.w	r9, #0
 80063ac:	bf08      	it	eq
 80063ae:	f04f 0901 	moveq.w	r9, #1
 80063b2:	e001      	b.n	80063b8 <_svfprintf_r+0xd60>
 80063b4:	f04f 0906 	mov.w	r9, #6
 80063b8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80063bc:	930c      	str	r3, [sp, #48]	; 0x30
 80063be:	9b07      	ldr	r3, [sp, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da07      	bge.n	80063d4 <_svfprintf_r+0xd7c>
 80063c4:	9b06      	ldr	r3, [sp, #24]
 80063c6:	930e      	str	r3, [sp, #56]	; 0x38
 80063c8:	9b07      	ldr	r3, [sp, #28]
 80063ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d0:	232d      	movs	r3, #45	; 0x2d
 80063d2:	e004      	b.n	80063de <_svfprintf_r+0xd86>
 80063d4:	ed9d 7b06 	vldr	d7, [sp, #24]
 80063d8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80063dc:	2300      	movs	r3, #0
 80063de:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e0:	9b02      	ldr	r3, [sp, #8]
 80063e2:	f023 0720 	bic.w	r7, r3, #32
 80063e6:	2f46      	cmp	r7, #70	; 0x46
 80063e8:	d004      	beq.n	80063f4 <_svfprintf_r+0xd9c>
 80063ea:	2f45      	cmp	r7, #69	; 0x45
 80063ec:	d105      	bne.n	80063fa <_svfprintf_r+0xda2>
 80063ee:	f109 0601 	add.w	r6, r9, #1
 80063f2:	e003      	b.n	80063fc <_svfprintf_r+0xda4>
 80063f4:	464e      	mov	r6, r9
 80063f6:	2103      	movs	r1, #3
 80063f8:	e001      	b.n	80063fe <_svfprintf_r+0xda6>
 80063fa:	464e      	mov	r6, r9
 80063fc:	2102      	movs	r1, #2
 80063fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	ab1a      	add	r3, sp, #104	; 0x68
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4632      	mov	r2, r6
 8006408:	ab19      	add	r3, sp, #100	; 0x64
 800640a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800640e:	4650      	mov	r0, sl
 8006410:	f001 fa16 	bl	8007840 <_dtoa_r>
 8006414:	2f47      	cmp	r7, #71	; 0x47
 8006416:	4680      	mov	r8, r0
 8006418:	d102      	bne.n	8006420 <_svfprintf_r+0xdc8>
 800641a:	07eb      	lsls	r3, r5, #31
 800641c:	f140 80cd 	bpl.w	80065ba <_svfprintf_r+0xf62>
 8006420:	eb08 0306 	add.w	r3, r8, r6
 8006424:	2f46      	cmp	r7, #70	; 0x46
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	d111      	bne.n	800644e <_svfprintf_r+0xdf6>
 800642a:	f898 3000 	ldrb.w	r3, [r8]
 800642e:	2b30      	cmp	r3, #48	; 0x30
 8006430:	d109      	bne.n	8006446 <_svfprintf_r+0xdee>
 8006432:	2200      	movs	r2, #0
 8006434:	2300      	movs	r3, #0
 8006436:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800643a:	f7fa fb41 	bl	8000ac0 <__aeabi_dcmpeq>
 800643e:	b910      	cbnz	r0, 8006446 <_svfprintf_r+0xdee>
 8006440:	f1c6 0601 	rsb	r6, r6, #1
 8006444:	9619      	str	r6, [sp, #100]	; 0x64
 8006446:	9a04      	ldr	r2, [sp, #16]
 8006448:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800644a:	441a      	add	r2, r3
 800644c:	9204      	str	r2, [sp, #16]
 800644e:	2200      	movs	r2, #0
 8006450:	2300      	movs	r3, #0
 8006452:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006456:	f7fa fb33 	bl	8000ac0 <__aeabi_dcmpeq>
 800645a:	b908      	cbnz	r0, 8006460 <_svfprintf_r+0xe08>
 800645c:	2230      	movs	r2, #48	; 0x30
 800645e:	e002      	b.n	8006466 <_svfprintf_r+0xe0e>
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	931d      	str	r3, [sp, #116]	; 0x74
 8006464:	e007      	b.n	8006476 <_svfprintf_r+0xe1e>
 8006466:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006468:	9904      	ldr	r1, [sp, #16]
 800646a:	4299      	cmp	r1, r3
 800646c:	d903      	bls.n	8006476 <_svfprintf_r+0xe1e>
 800646e:	1c59      	adds	r1, r3, #1
 8006470:	911d      	str	r1, [sp, #116]	; 0x74
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	e7f7      	b.n	8006466 <_svfprintf_r+0xe0e>
 8006476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006478:	2f47      	cmp	r7, #71	; 0x47
 800647a:	ebc8 0303 	rsb	r3, r8, r3
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	d108      	bne.n	8006494 <_svfprintf_r+0xe3c>
 8006482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006484:	1cdf      	adds	r7, r3, #3
 8006486:	db01      	blt.n	800648c <_svfprintf_r+0xe34>
 8006488:	4599      	cmp	r9, r3
 800648a:	da68      	bge.n	800655e <_svfprintf_r+0xf06>
 800648c:	9b02      	ldr	r3, [sp, #8]
 800648e:	3b02      	subs	r3, #2
 8006490:	9302      	str	r3, [sp, #8]
 8006492:	e002      	b.n	800649a <_svfprintf_r+0xe42>
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	2b65      	cmp	r3, #101	; 0x65
 8006498:	dc4a      	bgt.n	8006530 <_svfprintf_r+0xed8>
 800649a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800649c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80064a0:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 80064a4:	3b01      	subs	r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	9319      	str	r3, [sp, #100]	; 0x64
 80064aa:	bfba      	itte	lt
 80064ac:	425b      	neglt	r3, r3
 80064ae:	222d      	movlt	r2, #45	; 0x2d
 80064b0:	222b      	movge	r2, #43	; 0x2b
 80064b2:	2b09      	cmp	r3, #9
 80064b4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80064b8:	dd24      	ble.n	8006504 <_svfprintf_r+0xeac>
 80064ba:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80064be:	200a      	movs	r0, #10
 80064c0:	fb93 f1f0 	sdiv	r1, r3, r0
 80064c4:	fb00 3311 	mls	r3, r0, r1, r3
 80064c8:	3330      	adds	r3, #48	; 0x30
 80064ca:	2909      	cmp	r1, #9
 80064cc:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80064d0:	460b      	mov	r3, r1
 80064d2:	dcf5      	bgt.n	80064c0 <_svfprintf_r+0xe68>
 80064d4:	3330      	adds	r3, #48	; 0x30
 80064d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064da:	1e51      	subs	r1, r2, #1
 80064dc:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80064e0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80064e4:	4281      	cmp	r1, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	d213      	bcs.n	8006512 <_svfprintf_r+0xeba>
 80064ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ee:	f803 2b01 	strb.w	r2, [r3], #1
 80064f2:	e7f7      	b.n	80064e4 <_svfprintf_r+0xe8c>
 80064f4:	0800a15a 	.word	0x0800a15a
 80064f8:	0800a19e 	.word	0x0800a19e
 80064fc:	0800a172 	.word	0x0800a172
 8006500:	0800a176 	.word	0x0800a176
 8006504:	2230      	movs	r2, #48	; 0x30
 8006506:	4413      	add	r3, r2
 8006508:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800650c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8006510:	aa1c      	add	r2, sp, #112	; 0x70
 8006512:	ab1b      	add	r3, sp, #108	; 0x6c
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	9a04      	ldr	r2, [sp, #16]
 8006518:	9310      	str	r3, [sp, #64]	; 0x40
 800651a:	2a01      	cmp	r2, #1
 800651c:	eb03 0902 	add.w	r9, r3, r2
 8006520:	dc02      	bgt.n	8006528 <_svfprintf_r+0xed0>
 8006522:	f015 0701 	ands.w	r7, r5, #1
 8006526:	d032      	beq.n	800658e <_svfprintf_r+0xf36>
 8006528:	9b08      	ldr	r3, [sp, #32]
 800652a:	2700      	movs	r7, #0
 800652c:	4499      	add	r9, r3
 800652e:	e02e      	b.n	800658e <_svfprintf_r+0xf36>
 8006530:	9b02      	ldr	r3, [sp, #8]
 8006532:	2b66      	cmp	r3, #102	; 0x66
 8006534:	d113      	bne.n	800655e <_svfprintf_r+0xf06>
 8006536:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006538:	2b00      	cmp	r3, #0
 800653a:	dd07      	ble.n	800654c <_svfprintf_r+0xef4>
 800653c:	f1b9 0f00 	cmp.w	r9, #0
 8006540:	d101      	bne.n	8006546 <_svfprintf_r+0xeee>
 8006542:	07ee      	lsls	r6, r5, #31
 8006544:	d521      	bpl.n	800658a <_svfprintf_r+0xf32>
 8006546:	9a08      	ldr	r2, [sp, #32]
 8006548:	4413      	add	r3, r2
 800654a:	e006      	b.n	800655a <_svfprintf_r+0xf02>
 800654c:	f1b9 0f00 	cmp.w	r9, #0
 8006550:	d101      	bne.n	8006556 <_svfprintf_r+0xefe>
 8006552:	07ed      	lsls	r5, r5, #31
 8006554:	d514      	bpl.n	8006580 <_svfprintf_r+0xf28>
 8006556:	9b08      	ldr	r3, [sp, #32]
 8006558:	3301      	adds	r3, #1
 800655a:	444b      	add	r3, r9
 800655c:	e015      	b.n	800658a <_svfprintf_r+0xf32>
 800655e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006560:	9a04      	ldr	r2, [sp, #16]
 8006562:	4293      	cmp	r3, r2
 8006564:	db03      	blt.n	800656e <_svfprintf_r+0xf16>
 8006566:	07e8      	lsls	r0, r5, #31
 8006568:	d50d      	bpl.n	8006586 <_svfprintf_r+0xf2e>
 800656a:	9a08      	ldr	r2, [sp, #32]
 800656c:	e006      	b.n	800657c <_svfprintf_r+0xf24>
 800656e:	9a04      	ldr	r2, [sp, #16]
 8006570:	9908      	ldr	r1, [sp, #32]
 8006572:	2b00      	cmp	r3, #0
 8006574:	440a      	add	r2, r1
 8006576:	dc05      	bgt.n	8006584 <_svfprintf_r+0xf2c>
 8006578:	f1c3 0301 	rsb	r3, r3, #1
 800657c:	4413      	add	r3, r2
 800657e:	e002      	b.n	8006586 <_svfprintf_r+0xf2e>
 8006580:	2301      	movs	r3, #1
 8006582:	e002      	b.n	800658a <_svfprintf_r+0xf32>
 8006584:	4613      	mov	r3, r2
 8006586:	2267      	movs	r2, #103	; 0x67
 8006588:	9202      	str	r2, [sp, #8]
 800658a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800658c:	4699      	mov	r9, r3
 800658e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006590:	b113      	cbz	r3, 8006598 <_svfprintf_r+0xf40>
 8006592:	232d      	movs	r3, #45	; 0x2d
 8006594:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006598:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800659a:	2600      	movs	r6, #0
 800659c:	f7ff bb4c 	b.w	8005c38 <_svfprintf_r+0x5e0>
 80065a0:	2200      	movs	r2, #0
 80065a2:	2300      	movs	r3, #0
 80065a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065a8:	f7fa fa94 	bl	8000ad4 <__aeabi_dcmplt>
 80065ac:	b110      	cbz	r0, 80065b4 <_svfprintf_r+0xf5c>
 80065ae:	232d      	movs	r3, #45	; 0x2d
 80065b0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <_svfprintf_r+0xf7c>)
 80065b6:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <_svfprintf_r+0xf80>)
 80065b8:	e6e3      	b.n	8006382 <_svfprintf_r+0xd2a>
 80065ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065bc:	1a1b      	subs	r3, r3, r0
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	e75f      	b.n	8006482 <_svfprintf_r+0xe2a>
 80065c2:	ea56 0207 	orrs.w	r2, r6, r7
 80065c6:	f47f aaaa 	bne.w	8005b1e <_svfprintf_r+0x4c6>
 80065ca:	f7ff baaf 	b.w	8005b2c <_svfprintf_r+0x4d4>
 80065ce:	b03d      	add	sp, #244	; 0xf4
 80065d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d4:	0800a16a 	.word	0x0800a16a
 80065d8:	0800a16e 	.word	0x0800a16e
 80065dc:	00000000 	.word	0x00000000

080065e0 <_vfprintf_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	b0bd      	sub	sp, #244	; 0xf4
 80065e6:	468b      	mov	fp, r1
 80065e8:	9205      	str	r2, [sp, #20]
 80065ea:	461c      	mov	r4, r3
 80065ec:	461f      	mov	r7, r3
 80065ee:	4682      	mov	sl, r0
 80065f0:	f002 fab8 	bl	8008b64 <_localeconv_r>
 80065f4:	6803      	ldr	r3, [r0, #0]
 80065f6:	930d      	str	r3, [sp, #52]	; 0x34
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7f9 fde9 	bl	80001d0 <strlen>
 80065fe:	9008      	str	r0, [sp, #32]
 8006600:	f1ba 0f00 	cmp.w	sl, #0
 8006604:	d005      	beq.n	8006612 <_vfprintf_r+0x32>
 8006606:	f8da 3018 	ldr.w	r3, [sl, #24]
 800660a:	b913      	cbnz	r3, 8006612 <_vfprintf_r+0x32>
 800660c:	4650      	mov	r0, sl
 800660e:	f001 ffb1 	bl	8008574 <__sinit>
 8006612:	4b9d      	ldr	r3, [pc, #628]	; (8006888 <_vfprintf_r+0x2a8>)
 8006614:	459b      	cmp	fp, r3
 8006616:	d102      	bne.n	800661e <_vfprintf_r+0x3e>
 8006618:	f8da b004 	ldr.w	fp, [sl, #4]
 800661c:	e00a      	b.n	8006634 <_vfprintf_r+0x54>
 800661e:	4b9b      	ldr	r3, [pc, #620]	; (800688c <_vfprintf_r+0x2ac>)
 8006620:	459b      	cmp	fp, r3
 8006622:	d102      	bne.n	800662a <_vfprintf_r+0x4a>
 8006624:	f8da b008 	ldr.w	fp, [sl, #8]
 8006628:	e004      	b.n	8006634 <_vfprintf_r+0x54>
 800662a:	4b99      	ldr	r3, [pc, #612]	; (8006890 <_vfprintf_r+0x2b0>)
 800662c:	459b      	cmp	fp, r3
 800662e:	bf08      	it	eq
 8006630:	f8da b00c 	ldreq.w	fp, [sl, #12]
 8006634:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8006638:	0498      	lsls	r0, r3, #18
 800663a:	d409      	bmi.n	8006650 <_vfprintf_r+0x70>
 800663c:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8006640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006648:	f8ab 300c 	strh.w	r3, [fp, #12]
 800664c:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 8006650:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006654:	0719      	lsls	r1, r3, #28
 8006656:	d509      	bpl.n	800666c <_vfprintf_r+0x8c>
 8006658:	f8db 3010 	ldr.w	r3, [fp, #16]
 800665c:	b133      	cbz	r3, 800666c <_vfprintf_r+0x8c>
 800665e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006662:	f003 031a 	and.w	r3, r3, #26
 8006666:	2b0a      	cmp	r3, #10
 8006668:	d116      	bne.n	8006698 <_vfprintf_r+0xb8>
 800666a:	e009      	b.n	8006680 <_vfprintf_r+0xa0>
 800666c:	4659      	mov	r1, fp
 800666e:	4650      	mov	r0, sl
 8006670:	f000 ffe6 	bl	8007640 <__swsetup_r>
 8006674:	2800      	cmp	r0, #0
 8006676:	d0f2      	beq.n	800665e <_vfprintf_r+0x7e>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	f000 bfa3 	b.w	80075c6 <_vfprintf_r+0xfe6>
 8006680:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8006684:	2b00      	cmp	r3, #0
 8006686:	db07      	blt.n	8006698 <_vfprintf_r+0xb8>
 8006688:	4623      	mov	r3, r4
 800668a:	9a05      	ldr	r2, [sp, #20]
 800668c:	4659      	mov	r1, fp
 800668e:	4650      	mov	r0, sl
 8006690:	f000 ffa0 	bl	80075d4 <__sbprintf>
 8006694:	f000 bf97 	b.w	80075c6 <_vfprintf_r+0xfe6>
 8006698:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8006880 <_vfprintf_r+0x2a0>
 800669c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80066a0:	2300      	movs	r3, #0
 80066a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80066a4:	941f      	str	r4, [sp, #124]	; 0x7c
 80066a6:	9321      	str	r3, [sp, #132]	; 0x84
 80066a8:	9320      	str	r3, [sp, #128]	; 0x80
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	9311      	str	r3, [sp, #68]	; 0x44
 80066ae:	9310      	str	r3, [sp, #64]	; 0x40
 80066b0:	930a      	str	r3, [sp, #40]	; 0x28
 80066b2:	9d05      	ldr	r5, [sp, #20]
 80066b4:	462b      	mov	r3, r5
 80066b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ba:	b11a      	cbz	r2, 80066c4 <_vfprintf_r+0xe4>
 80066bc:	2a25      	cmp	r2, #37	; 0x25
 80066be:	d001      	beq.n	80066c4 <_vfprintf_r+0xe4>
 80066c0:	461d      	mov	r5, r3
 80066c2:	e7f7      	b.n	80066b4 <_vfprintf_r+0xd4>
 80066c4:	9b05      	ldr	r3, [sp, #20]
 80066c6:	1aee      	subs	r6, r5, r3
 80066c8:	d017      	beq.n	80066fa <_vfprintf_r+0x11a>
 80066ca:	e884 0048 	stmia.w	r4, {r3, r6}
 80066ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066d0:	4433      	add	r3, r6
 80066d2:	9321      	str	r3, [sp, #132]	; 0x84
 80066d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066d6:	3301      	adds	r3, #1
 80066d8:	2b07      	cmp	r3, #7
 80066da:	9320      	str	r3, [sp, #128]	; 0x80
 80066dc:	dc01      	bgt.n	80066e2 <_vfprintf_r+0x102>
 80066de:	3408      	adds	r4, #8
 80066e0:	e008      	b.n	80066f4 <_vfprintf_r+0x114>
 80066e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80066e4:	4659      	mov	r1, fp
 80066e6:	4650      	mov	r0, sl
 80066e8:	f003 f804 	bl	80096f4 <__sprint_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	f040 8633 	bne.w	8007358 <_vfprintf_r+0xd78>
 80066f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80066f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f6:	4433      	add	r3, r6
 80066f8:	930a      	str	r3, [sp, #40]	; 0x28
 80066fa:	782b      	ldrb	r3, [r5, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8624 	beq.w	800734a <_vfprintf_r+0xd6a>
 8006702:	2200      	movs	r2, #0
 8006704:	1c6b      	adds	r3, r5, #1
 8006706:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800670a:	4611      	mov	r1, r2
 800670c:	f04f 39ff 	mov.w	r9, #4294967295
 8006710:	9209      	str	r2, [sp, #36]	; 0x24
 8006712:	4615      	mov	r5, r2
 8006714:	200a      	movs	r0, #10
 8006716:	1c5e      	adds	r6, r3, #1
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	9605      	str	r6, [sp, #20]
 800671c:	9302      	str	r3, [sp, #8]
 800671e:	9b02      	ldr	r3, [sp, #8]
 8006720:	3b20      	subs	r3, #32
 8006722:	2b58      	cmp	r3, #88	; 0x58
 8006724:	f200 826a 	bhi.w	8006bfc <_vfprintf_r+0x61c>
 8006728:	e8df f013 	tbh	[pc, r3, lsl #1]
 800672c:	0268005c 	.word	0x0268005c
 8006730:	006c0268 	.word	0x006c0268
 8006734:	02680268 	.word	0x02680268
 8006738:	02680268 	.word	0x02680268
 800673c:	02680268 	.word	0x02680268
 8006740:	0059006f 	.word	0x0059006f
 8006744:	007a0268 	.word	0x007a0268
 8006748:	0268007d 	.word	0x0268007d
 800674c:	00b600a4 	.word	0x00b600a4
 8006750:	00b600b6 	.word	0x00b600b6
 8006754:	00b600b6 	.word	0x00b600b6
 8006758:	00b600b6 	.word	0x00b600b6
 800675c:	00b600b6 	.word	0x00b600b6
 8006760:	02680268 	.word	0x02680268
 8006764:	02680268 	.word	0x02680268
 8006768:	02680268 	.word	0x02680268
 800676c:	02680268 	.word	0x02680268
 8006770:	02680268 	.word	0x02680268
 8006774:	011200e6 	.word	0x011200e6
 8006778:	01120268 	.word	0x01120268
 800677c:	02680268 	.word	0x02680268
 8006780:	02680268 	.word	0x02680268
 8006784:	026800c9 	.word	0x026800c9
 8006788:	01590268 	.word	0x01590268
 800678c:	02680268 	.word	0x02680268
 8006790:	02680268 	.word	0x02680268
 8006794:	01a00268 	.word	0x01a00268
 8006798:	02680268 	.word	0x02680268
 800679c:	02680067 	.word	0x02680067
 80067a0:	02680268 	.word	0x02680268
 80067a4:	02680268 	.word	0x02680268
 80067a8:	02680268 	.word	0x02680268
 80067ac:	02680268 	.word	0x02680268
 80067b0:	00dd0268 	.word	0x00dd0268
 80067b4:	01120061 	.word	0x01120061
 80067b8:	01120112 	.word	0x01120112
 80067bc:	006100cc 	.word	0x006100cc
 80067c0:	02680268 	.word	0x02680268
 80067c4:	026800cf 	.word	0x026800cf
 80067c8:	015b013b 	.word	0x015b013b
 80067cc:	00da0176 	.word	0x00da0176
 80067d0:	01870268 	.word	0x01870268
 80067d4:	01a20268 	.word	0x01a20268
 80067d8:	02680268 	.word	0x02680268
 80067dc:	01ba      	.short	0x01ba
 80067de:	2201      	movs	r2, #1
 80067e0:	212b      	movs	r1, #43	; 0x2b
 80067e2:	e002      	b.n	80067ea <_vfprintf_r+0x20a>
 80067e4:	b909      	cbnz	r1, 80067ea <_vfprintf_r+0x20a>
 80067e6:	2201      	movs	r2, #1
 80067e8:	2120      	movs	r1, #32
 80067ea:	9b05      	ldr	r3, [sp, #20]
 80067ec:	e793      	b.n	8006716 <_vfprintf_r+0x136>
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	f000 8087 	beq.w	8006902 <_vfprintf_r+0x322>
 80067f4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80067f8:	e083      	b.n	8006902 <_vfprintf_r+0x322>
 80067fa:	b10a      	cbz	r2, 8006800 <_vfprintf_r+0x220>
 80067fc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006800:	4b24      	ldr	r3, [pc, #144]	; (8006894 <_vfprintf_r+0x2b4>)
 8006802:	e151      	b.n	8006aa8 <_vfprintf_r+0x4c8>
 8006804:	f045 0501 	orr.w	r5, r5, #1
 8006808:	e7ef      	b.n	80067ea <_vfprintf_r+0x20a>
 800680a:	683e      	ldr	r6, [r7, #0]
 800680c:	9609      	str	r6, [sp, #36]	; 0x24
 800680e:	2e00      	cmp	r6, #0
 8006810:	f107 0304 	add.w	r3, r7, #4
 8006814:	db01      	blt.n	800681a <_vfprintf_r+0x23a>
 8006816:	461f      	mov	r7, r3
 8006818:	e7e7      	b.n	80067ea <_vfprintf_r+0x20a>
 800681a:	4276      	negs	r6, r6
 800681c:	9609      	str	r6, [sp, #36]	; 0x24
 800681e:	461f      	mov	r7, r3
 8006820:	f045 0504 	orr.w	r5, r5, #4
 8006824:	e7e1      	b.n	80067ea <_vfprintf_r+0x20a>
 8006826:	9e05      	ldr	r6, [sp, #20]
 8006828:	9b05      	ldr	r3, [sp, #20]
 800682a:	7836      	ldrb	r6, [r6, #0]
 800682c:	9602      	str	r6, [sp, #8]
 800682e:	2e2a      	cmp	r6, #42	; 0x2a
 8006830:	f103 0301 	add.w	r3, r3, #1
 8006834:	d002      	beq.n	800683c <_vfprintf_r+0x25c>
 8006836:	f04f 0900 	mov.w	r9, #0
 800683a:	e00a      	b.n	8006852 <_vfprintf_r+0x272>
 800683c:	f8d7 9000 	ldr.w	r9, [r7]
 8006840:	9305      	str	r3, [sp, #20]
 8006842:	1d3e      	adds	r6, r7, #4
 8006844:	f1b9 0f00 	cmp.w	r9, #0
 8006848:	4637      	mov	r7, r6
 800684a:	dace      	bge.n	80067ea <_vfprintf_r+0x20a>
 800684c:	f04f 39ff 	mov.w	r9, #4294967295
 8006850:	e7cb      	b.n	80067ea <_vfprintf_r+0x20a>
 8006852:	9305      	str	r3, [sp, #20]
 8006854:	9b02      	ldr	r3, [sp, #8]
 8006856:	3b30      	subs	r3, #48	; 0x30
 8006858:	2b09      	cmp	r3, #9
 800685a:	d808      	bhi.n	800686e <_vfprintf_r+0x28e>
 800685c:	fb00 3909 	mla	r9, r0, r9, r3
 8006860:	9b05      	ldr	r3, [sp, #20]
 8006862:	461e      	mov	r6, r3
 8006864:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006868:	9302      	str	r3, [sp, #8]
 800686a:	4633      	mov	r3, r6
 800686c:	e7f1      	b.n	8006852 <_vfprintf_r+0x272>
 800686e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8006872:	e754      	b.n	800671e <_vfprintf_r+0x13e>
 8006874:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8006878:	e7b7      	b.n	80067ea <_vfprintf_r+0x20a>
 800687a:	bf00      	nop
 800687c:	f3af 8000 	nop.w
	...
 8006888:	0800a1dc 	.word	0x0800a1dc
 800688c:	0800a1fc 	.word	0x0800a1fc
 8006890:	0800a21c 	.word	0x0800a21c
 8006894:	0800a17a 	.word	0x0800a17a
 8006898:	2300      	movs	r3, #0
 800689a:	9309      	str	r3, [sp, #36]	; 0x24
 800689c:	9b02      	ldr	r3, [sp, #8]
 800689e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80068a0:	3b30      	subs	r3, #48	; 0x30
 80068a2:	fb00 3306 	mla	r3, r0, r6, r3
 80068a6:	9309      	str	r3, [sp, #36]	; 0x24
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	461e      	mov	r6, r3
 80068ac:	f816 3b01 	ldrb.w	r3, [r6], #1
 80068b0:	9302      	str	r3, [sp, #8]
 80068b2:	9b02      	ldr	r3, [sp, #8]
 80068b4:	9605      	str	r6, [sp, #20]
 80068b6:	3b30      	subs	r3, #48	; 0x30
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	d9ef      	bls.n	800689c <_vfprintf_r+0x2bc>
 80068bc:	e72f      	b.n	800671e <_vfprintf_r+0x13e>
 80068be:	f045 0508 	orr.w	r5, r5, #8
 80068c2:	e792      	b.n	80067ea <_vfprintf_r+0x20a>
 80068c4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80068c8:	e78f      	b.n	80067ea <_vfprintf_r+0x20a>
 80068ca:	9b05      	ldr	r3, [sp, #20]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b6c      	cmp	r3, #108	; 0x6c
 80068d0:	d103      	bne.n	80068da <_vfprintf_r+0x2fa>
 80068d2:	9b05      	ldr	r3, [sp, #20]
 80068d4:	3301      	adds	r3, #1
 80068d6:	9305      	str	r3, [sp, #20]
 80068d8:	e002      	b.n	80068e0 <_vfprintf_r+0x300>
 80068da:	f045 0510 	orr.w	r5, r5, #16
 80068de:	e784      	b.n	80067ea <_vfprintf_r+0x20a>
 80068e0:	f045 0520 	orr.w	r5, r5, #32
 80068e4:	e781      	b.n	80067ea <_vfprintf_r+0x20a>
 80068e6:	1d3b      	adds	r3, r7, #4
 80068e8:	9303      	str	r3, [sp, #12]
 80068ea:	2600      	movs	r6, #0
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80068f2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80068f6:	e190      	b.n	8006c1a <_vfprintf_r+0x63a>
 80068f8:	b10a      	cbz	r2, 80068fe <_vfprintf_r+0x31e>
 80068fa:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80068fe:	f045 0510 	orr.w	r5, r5, #16
 8006902:	06aa      	lsls	r2, r5, #26
 8006904:	d508      	bpl.n	8006918 <_vfprintf_r+0x338>
 8006906:	3707      	adds	r7, #7
 8006908:	f027 0707 	bic.w	r7, r7, #7
 800690c:	f107 0308 	add.w	r3, r7, #8
 8006910:	9303      	str	r3, [sp, #12]
 8006912:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006916:	e00e      	b.n	8006936 <_vfprintf_r+0x356>
 8006918:	f015 0f10 	tst.w	r5, #16
 800691c:	f107 0304 	add.w	r3, r7, #4
 8006920:	d002      	beq.n	8006928 <_vfprintf_r+0x348>
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	683e      	ldr	r6, [r7, #0]
 8006926:	e005      	b.n	8006934 <_vfprintf_r+0x354>
 8006928:	683e      	ldr	r6, [r7, #0]
 800692a:	9303      	str	r3, [sp, #12]
 800692c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006930:	bf18      	it	ne
 8006932:	b236      	sxthne	r6, r6
 8006934:	17f7      	asrs	r7, r6, #31
 8006936:	2e00      	cmp	r6, #0
 8006938:	f177 0300 	sbcs.w	r3, r7, #0
 800693c:	f280 80de 	bge.w	8006afc <_vfprintf_r+0x51c>
 8006940:	4276      	negs	r6, r6
 8006942:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006946:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800694a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800694e:	e0d5      	b.n	8006afc <_vfprintf_r+0x51c>
 8006950:	b10a      	cbz	r2, 8006956 <_vfprintf_r+0x376>
 8006952:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006956:	3707      	adds	r7, #7
 8006958:	f027 0707 	bic.w	r7, r7, #7
 800695c:	f107 0308 	add.w	r3, r7, #8
 8006960:	9303      	str	r3, [sp, #12]
 8006962:	ed97 7b00 	vldr	d7, [r7]
 8006966:	ed8d 7b06 	vstr	d7, [sp, #24]
 800696a:	9b06      	ldr	r3, [sp, #24]
 800696c:	9312      	str	r3, [sp, #72]	; 0x48
 800696e:	9b07      	ldr	r3, [sp, #28]
 8006970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006974:	9313      	str	r3, [sp, #76]	; 0x4c
 8006976:	f04f 32ff 	mov.w	r2, #4294967295
 800697a:	4bab      	ldr	r3, [pc, #684]	; (8006c28 <_vfprintf_r+0x648>)
 800697c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006980:	f7fa f8d0 	bl	8000b24 <__aeabi_dcmpun>
 8006984:	2800      	cmp	r0, #0
 8006986:	f040 84ee 	bne.w	8007366 <_vfprintf_r+0xd86>
 800698a:	f04f 32ff 	mov.w	r2, #4294967295
 800698e:	4ba6      	ldr	r3, [pc, #664]	; (8006c28 <_vfprintf_r+0x648>)
 8006990:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006994:	f7fa f8a8 	bl	8000ae8 <__aeabi_dcmple>
 8006998:	2800      	cmp	r0, #0
 800699a:	f040 84e4 	bne.w	8007366 <_vfprintf_r+0xd86>
 800699e:	f000 bdfb 	b.w	8007598 <_vfprintf_r+0xfb8>
 80069a2:	b10a      	cbz	r2, 80069a8 <_vfprintf_r+0x3c8>
 80069a4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80069a8:	f015 0f20 	tst.w	r5, #32
 80069ac:	f107 0304 	add.w	r3, r7, #4
 80069b0:	d007      	beq.n	80069c2 <_vfprintf_r+0x3e2>
 80069b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	17ce      	asrs	r6, r1, #31
 80069b8:	4608      	mov	r0, r1
 80069ba:	4631      	mov	r1, r6
 80069bc:	e9c2 0100 	strd	r0, r1, [r2]
 80069c0:	e00b      	b.n	80069da <_vfprintf_r+0x3fa>
 80069c2:	06e9      	lsls	r1, r5, #27
 80069c4:	d406      	bmi.n	80069d4 <_vfprintf_r+0x3f4>
 80069c6:	066a      	lsls	r2, r5, #25
 80069c8:	d504      	bpl.n	80069d4 <_vfprintf_r+0x3f4>
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80069d0:	8011      	strh	r1, [r2, #0]
 80069d2:	e002      	b.n	80069da <_vfprintf_r+0x3fa>
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069d8:	6011      	str	r1, [r2, #0]
 80069da:	461f      	mov	r7, r3
 80069dc:	e669      	b.n	80066b2 <_vfprintf_r+0xd2>
 80069de:	f045 0510 	orr.w	r5, r5, #16
 80069e2:	f015 0320 	ands.w	r3, r5, #32
 80069e6:	d009      	beq.n	80069fc <_vfprintf_r+0x41c>
 80069e8:	3707      	adds	r7, #7
 80069ea:	f027 0707 	bic.w	r7, r7, #7
 80069ee:	f107 0308 	add.w	r3, r7, #8
 80069f2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80069f6:	9303      	str	r3, [sp, #12]
 80069f8:	2300      	movs	r3, #0
 80069fa:	e07b      	b.n	8006af4 <_vfprintf_r+0x514>
 80069fc:	1d3a      	adds	r2, r7, #4
 80069fe:	f015 0110 	ands.w	r1, r5, #16
 8006a02:	9203      	str	r2, [sp, #12]
 8006a04:	d105      	bne.n	8006a12 <_vfprintf_r+0x432>
 8006a06:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8006a0a:	d002      	beq.n	8006a12 <_vfprintf_r+0x432>
 8006a0c:	883e      	ldrh	r6, [r7, #0]
 8006a0e:	2700      	movs	r7, #0
 8006a10:	e7f2      	b.n	80069f8 <_vfprintf_r+0x418>
 8006a12:	683e      	ldr	r6, [r7, #0]
 8006a14:	2700      	movs	r7, #0
 8006a16:	e06d      	b.n	8006af4 <_vfprintf_r+0x514>
 8006a18:	1d3b      	adds	r3, r7, #4
 8006a1a:	9303      	str	r3, [sp, #12]
 8006a1c:	2330      	movs	r3, #48	; 0x30
 8006a1e:	2278      	movs	r2, #120	; 0x78
 8006a20:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006a24:	4b81      	ldr	r3, [pc, #516]	; (8006c2c <_vfprintf_r+0x64c>)
 8006a26:	683e      	ldr	r6, [r7, #0]
 8006a28:	9311      	str	r3, [sp, #68]	; 0x44
 8006a2a:	2700      	movs	r7, #0
 8006a2c:	f045 0502 	orr.w	r5, r5, #2
 8006a30:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8006a34:	2302      	movs	r3, #2
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	e05c      	b.n	8006af4 <_vfprintf_r+0x514>
 8006a3a:	2600      	movs	r6, #0
 8006a3c:	1d3b      	adds	r3, r7, #4
 8006a3e:	45b1      	cmp	r9, r6
 8006a40:	9303      	str	r3, [sp, #12]
 8006a42:	f8d7 8000 	ldr.w	r8, [r7]
 8006a46:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006a4a:	db0a      	blt.n	8006a62 <_vfprintf_r+0x482>
 8006a4c:	464a      	mov	r2, r9
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4640      	mov	r0, r8
 8006a52:	f7f9 fbc5 	bl	80001e0 <memchr>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f000 80ea 	beq.w	8006c30 <_vfprintf_r+0x650>
 8006a5c:	ebc8 0900 	rsb	r9, r8, r0
 8006a60:	e0e7      	b.n	8006c32 <_vfprintf_r+0x652>
 8006a62:	4640      	mov	r0, r8
 8006a64:	f7f9 fbb4 	bl	80001d0 <strlen>
 8006a68:	4681      	mov	r9, r0
 8006a6a:	e0e2      	b.n	8006c32 <_vfprintf_r+0x652>
 8006a6c:	f045 0510 	orr.w	r5, r5, #16
 8006a70:	06ae      	lsls	r6, r5, #26
 8006a72:	d508      	bpl.n	8006a86 <_vfprintf_r+0x4a6>
 8006a74:	3707      	adds	r7, #7
 8006a76:	f027 0707 	bic.w	r7, r7, #7
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006a84:	e00a      	b.n	8006a9c <_vfprintf_r+0x4bc>
 8006a86:	1d3b      	adds	r3, r7, #4
 8006a88:	f015 0f10 	tst.w	r5, #16
 8006a8c:	9303      	str	r3, [sp, #12]
 8006a8e:	d103      	bne.n	8006a98 <_vfprintf_r+0x4b8>
 8006a90:	0668      	lsls	r0, r5, #25
 8006a92:	d501      	bpl.n	8006a98 <_vfprintf_r+0x4b8>
 8006a94:	883e      	ldrh	r6, [r7, #0]
 8006a96:	e000      	b.n	8006a9a <_vfprintf_r+0x4ba>
 8006a98:	683e      	ldr	r6, [r7, #0]
 8006a9a:	2700      	movs	r7, #0
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e029      	b.n	8006af4 <_vfprintf_r+0x514>
 8006aa0:	b10a      	cbz	r2, 8006aa6 <_vfprintf_r+0x4c6>
 8006aa2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006aa6:	4b61      	ldr	r3, [pc, #388]	; (8006c2c <_vfprintf_r+0x64c>)
 8006aa8:	9311      	str	r3, [sp, #68]	; 0x44
 8006aaa:	06a9      	lsls	r1, r5, #26
 8006aac:	d508      	bpl.n	8006ac0 <_vfprintf_r+0x4e0>
 8006aae:	3707      	adds	r7, #7
 8006ab0:	f027 0707 	bic.w	r7, r7, #7
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006abe:	e00a      	b.n	8006ad6 <_vfprintf_r+0x4f6>
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	f015 0f10 	tst.w	r5, #16
 8006ac6:	9303      	str	r3, [sp, #12]
 8006ac8:	d103      	bne.n	8006ad2 <_vfprintf_r+0x4f2>
 8006aca:	066a      	lsls	r2, r5, #25
 8006acc:	d501      	bpl.n	8006ad2 <_vfprintf_r+0x4f2>
 8006ace:	883e      	ldrh	r6, [r7, #0]
 8006ad0:	e000      	b.n	8006ad4 <_vfprintf_r+0x4f4>
 8006ad2:	683e      	ldr	r6, [r7, #0]
 8006ad4:	2700      	movs	r7, #0
 8006ad6:	07eb      	lsls	r3, r5, #31
 8006ad8:	d50b      	bpl.n	8006af2 <_vfprintf_r+0x512>
 8006ada:	ea56 0307 	orrs.w	r3, r6, r7
 8006ade:	d008      	beq.n	8006af2 <_vfprintf_r+0x512>
 8006ae0:	2330      	movs	r3, #48	; 0x30
 8006ae2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006ae6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006aea:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8006aee:	f045 0502 	orr.w	r5, r5, #2
 8006af2:	2302      	movs	r3, #2
 8006af4:	2200      	movs	r2, #0
 8006af6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006afa:	e000      	b.n	8006afe <_vfprintf_r+0x51e>
 8006afc:	2301      	movs	r3, #1
 8006afe:	f1b9 0f00 	cmp.w	r9, #0
 8006b02:	f2c0 855a 	blt.w	80075ba <_vfprintf_r+0xfda>
 8006b06:	ea56 0207 	orrs.w	r2, r6, r7
 8006b0a:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8006b0e:	d103      	bne.n	8006b18 <_vfprintf_r+0x538>
 8006b10:	f1b9 0f00 	cmp.w	r9, #0
 8006b14:	d05f      	beq.n	8006bd6 <_vfprintf_r+0x5f6>
 8006b16:	e006      	b.n	8006b26 <_vfprintf_r+0x546>
 8006b18:	460d      	mov	r5, r1
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d025      	beq.n	8006b6a <_vfprintf_r+0x58a>
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d046      	beq.n	8006bb0 <_vfprintf_r+0x5d0>
 8006b22:	4629      	mov	r1, r5
 8006b24:	e007      	b.n	8006b36 <_vfprintf_r+0x556>
 8006b26:	460d      	mov	r5, r1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d022      	beq.n	8006b72 <_vfprintf_r+0x592>
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d03d      	beq.n	8006bac <_vfprintf_r+0x5cc>
 8006b30:	4629      	mov	r1, r5
 8006b32:	2600      	movs	r6, #0
 8006b34:	2700      	movs	r7, #0
 8006b36:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006b3a:	08f2      	lsrs	r2, r6, #3
 8006b3c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8006b40:	08f8      	lsrs	r0, r7, #3
 8006b42:	f006 0307 	and.w	r3, r6, #7
 8006b46:	4607      	mov	r7, r0
 8006b48:	4616      	mov	r6, r2
 8006b4a:	3330      	adds	r3, #48	; 0x30
 8006b4c:	ea56 0207 	orrs.w	r2, r6, r7
 8006b50:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8006b54:	d1f1      	bne.n	8006b3a <_vfprintf_r+0x55a>
 8006b56:	07e8      	lsls	r0, r5, #31
 8006b58:	d548      	bpl.n	8006bec <_vfprintf_r+0x60c>
 8006b5a:	2b30      	cmp	r3, #48	; 0x30
 8006b5c:	d046      	beq.n	8006bec <_vfprintf_r+0x60c>
 8006b5e:	2330      	movs	r3, #48	; 0x30
 8006b60:	f808 3c01 	strb.w	r3, [r8, #-1]
 8006b64:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b68:	e040      	b.n	8006bec <_vfprintf_r+0x60c>
 8006b6a:	2f00      	cmp	r7, #0
 8006b6c:	bf08      	it	eq
 8006b6e:	2e0a      	cmpeq	r6, #10
 8006b70:	d205      	bcs.n	8006b7e <_vfprintf_r+0x59e>
 8006b72:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006b76:	3630      	adds	r6, #48	; 0x30
 8006b78:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8006b7c:	e029      	b.n	8006bd2 <_vfprintf_r+0x5f2>
 8006b7e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006b82:	4630      	mov	r0, r6
 8006b84:	4639      	mov	r1, r7
 8006b86:	220a      	movs	r2, #10
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f7fa f859 	bl	8000c40 <__aeabi_uldivmod>
 8006b8e:	3230      	adds	r2, #48	; 0x30
 8006b90:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8006b94:	2300      	movs	r3, #0
 8006b96:	4630      	mov	r0, r6
 8006b98:	4639      	mov	r1, r7
 8006b9a:	220a      	movs	r2, #10
 8006b9c:	f7fa f850 	bl	8000c40 <__aeabi_uldivmod>
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	460f      	mov	r7, r1
 8006ba4:	ea56 0307 	orrs.w	r3, r6, r7
 8006ba8:	d1eb      	bne.n	8006b82 <_vfprintf_r+0x5a2>
 8006baa:	e012      	b.n	8006bd2 <_vfprintf_r+0x5f2>
 8006bac:	2600      	movs	r6, #0
 8006bae:	2700      	movs	r7, #0
 8006bb0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006bb4:	f006 030f 	and.w	r3, r6, #15
 8006bb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006bba:	5cd3      	ldrb	r3, [r2, r3]
 8006bbc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8006bc0:	0933      	lsrs	r3, r6, #4
 8006bc2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006bc6:	093a      	lsrs	r2, r7, #4
 8006bc8:	461e      	mov	r6, r3
 8006bca:	4617      	mov	r7, r2
 8006bcc:	ea56 0307 	orrs.w	r3, r6, r7
 8006bd0:	d1f0      	bne.n	8006bb4 <_vfprintf_r+0x5d4>
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	e00a      	b.n	8006bec <_vfprintf_r+0x60c>
 8006bd6:	b93b      	cbnz	r3, 8006be8 <_vfprintf_r+0x608>
 8006bd8:	07ea      	lsls	r2, r5, #31
 8006bda:	d505      	bpl.n	8006be8 <_vfprintf_r+0x608>
 8006bdc:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006be0:	2330      	movs	r3, #48	; 0x30
 8006be2:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8006be6:	e001      	b.n	8006bec <_vfprintf_r+0x60c>
 8006be8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006bec:	464e      	mov	r6, r9
 8006bee:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006bf2:	ebc8 0909 	rsb	r9, r8, r9
 8006bf6:	460d      	mov	r5, r1
 8006bf8:	2700      	movs	r7, #0
 8006bfa:	e01b      	b.n	8006c34 <_vfprintf_r+0x654>
 8006bfc:	b10a      	cbz	r2, 8006c02 <_vfprintf_r+0x622>
 8006bfe:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006c02:	9b02      	ldr	r3, [sp, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 83a0 	beq.w	800734a <_vfprintf_r+0xd6a>
 8006c0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006c0e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8006c12:	2600      	movs	r6, #0
 8006c14:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006c18:	9703      	str	r7, [sp, #12]
 8006c1a:	f04f 0901 	mov.w	r9, #1
 8006c1e:	4637      	mov	r7, r6
 8006c20:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8006c24:	e006      	b.n	8006c34 <_vfprintf_r+0x654>
 8006c26:	bf00      	nop
 8006c28:	7fefffff 	.word	0x7fefffff
 8006c2c:	0800a18b 	.word	0x0800a18b
 8006c30:	4606      	mov	r6, r0
 8006c32:	4637      	mov	r7, r6
 8006c34:	454e      	cmp	r6, r9
 8006c36:	4633      	mov	r3, r6
 8006c38:	bfb8      	it	lt
 8006c3a:	464b      	movlt	r3, r9
 8006c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c3e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8006c42:	b113      	cbz	r3, 8006c4a <_vfprintf_r+0x66a>
 8006c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c46:	3301      	adds	r3, #1
 8006c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c4a:	f015 0302 	ands.w	r3, r5, #2
 8006c4e:	9314      	str	r3, [sp, #80]	; 0x50
 8006c50:	bf1e      	ittt	ne
 8006c52:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8006c54:	3302      	addne	r3, #2
 8006c56:	930b      	strne	r3, [sp, #44]	; 0x2c
 8006c58:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8006c5c:	9315      	str	r3, [sp, #84]	; 0x54
 8006c5e:	d139      	bne.n	8006cd4 <_vfprintf_r+0x6f4>
 8006c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	930c      	str	r3, [sp, #48]	; 0x30
 8006c6a:	dd33      	ble.n	8006cd4 <_vfprintf_r+0x6f4>
 8006c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	4ba6      	ldr	r3, [pc, #664]	; (8006f0c <_vfprintf_r+0x92c>)
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	dd18      	ble.n	8006ca8 <_vfprintf_r+0x6c8>
 8006c76:	2310      	movs	r3, #16
 8006c78:	6063      	str	r3, [r4, #4]
 8006c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c7c:	3310      	adds	r3, #16
 8006c7e:	9321      	str	r3, [sp, #132]	; 0x84
 8006c80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c82:	3301      	adds	r3, #1
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	9320      	str	r3, [sp, #128]	; 0x80
 8006c88:	dc01      	bgt.n	8006c8e <_vfprintf_r+0x6ae>
 8006c8a:	3408      	adds	r4, #8
 8006c8c:	e008      	b.n	8006ca0 <_vfprintf_r+0x6c0>
 8006c8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c90:	4659      	mov	r1, fp
 8006c92:	4650      	mov	r0, sl
 8006c94:	f002 fd2e 	bl	80096f4 <__sprint_r>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f040 835d 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006c9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ca2:	3b10      	subs	r3, #16
 8006ca4:	930c      	str	r3, [sp, #48]	; 0x30
 8006ca6:	e7e1      	b.n	8006c6c <_vfprintf_r+0x68c>
 8006ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006caa:	6063      	str	r3, [r4, #4]
 8006cac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cb0:	4413      	add	r3, r2
 8006cb2:	9321      	str	r3, [sp, #132]	; 0x84
 8006cb4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	2b07      	cmp	r3, #7
 8006cba:	9320      	str	r3, [sp, #128]	; 0x80
 8006cbc:	dc01      	bgt.n	8006cc2 <_vfprintf_r+0x6e2>
 8006cbe:	3408      	adds	r4, #8
 8006cc0:	e008      	b.n	8006cd4 <_vfprintf_r+0x6f4>
 8006cc2:	aa1f      	add	r2, sp, #124	; 0x7c
 8006cc4:	4659      	mov	r1, fp
 8006cc6:	4650      	mov	r0, sl
 8006cc8:	f002 fd14 	bl	80096f4 <__sprint_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	f040 8343 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006cd2:	ac2c      	add	r4, sp, #176	; 0xb0
 8006cd4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8006cd8:	b1bb      	cbz	r3, 8006d0a <_vfprintf_r+0x72a>
 8006cda:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	6063      	str	r3, [r4, #4]
 8006ce4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	9321      	str	r3, [sp, #132]	; 0x84
 8006cea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006cec:	3301      	adds	r3, #1
 8006cee:	2b07      	cmp	r3, #7
 8006cf0:	9320      	str	r3, [sp, #128]	; 0x80
 8006cf2:	dc01      	bgt.n	8006cf8 <_vfprintf_r+0x718>
 8006cf4:	3408      	adds	r4, #8
 8006cf6:	e008      	b.n	8006d0a <_vfprintf_r+0x72a>
 8006cf8:	aa1f      	add	r2, sp, #124	; 0x7c
 8006cfa:	4659      	mov	r1, fp
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	f002 fcf9 	bl	80096f4 <__sprint_r>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f040 8328 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006d08:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d0c:	b1b3      	cbz	r3, 8006d3c <_vfprintf_r+0x75c>
 8006d0e:	ab18      	add	r3, sp, #96	; 0x60
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	2302      	movs	r3, #2
 8006d14:	6063      	str	r3, [r4, #4]
 8006d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d18:	3302      	adds	r3, #2
 8006d1a:	9321      	str	r3, [sp, #132]	; 0x84
 8006d1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d1e:	3301      	adds	r3, #1
 8006d20:	2b07      	cmp	r3, #7
 8006d22:	9320      	str	r3, [sp, #128]	; 0x80
 8006d24:	dc01      	bgt.n	8006d2a <_vfprintf_r+0x74a>
 8006d26:	3408      	adds	r4, #8
 8006d28:	e008      	b.n	8006d3c <_vfprintf_r+0x75c>
 8006d2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d2c:	4659      	mov	r1, fp
 8006d2e:	4650      	mov	r0, sl
 8006d30:	f002 fce0 	bl	80096f4 <__sprint_r>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f040 830f 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006d3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d135      	bne.n	8006dae <_vfprintf_r+0x7ce>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d46:	1a9b      	subs	r3, r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dd30      	ble.n	8006dae <_vfprintf_r+0x7ce>
 8006d4c:	4a70      	ldr	r2, [pc, #448]	; (8006f10 <_vfprintf_r+0x930>)
 8006d4e:	6022      	str	r2, [r4, #0]
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	dd18      	ble.n	8006d86 <_vfprintf_r+0x7a6>
 8006d54:	2210      	movs	r2, #16
 8006d56:	6062      	str	r2, [r4, #4]
 8006d58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d5a:	3210      	adds	r2, #16
 8006d5c:	9221      	str	r2, [sp, #132]	; 0x84
 8006d5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d60:	3201      	adds	r2, #1
 8006d62:	2a07      	cmp	r2, #7
 8006d64:	9220      	str	r2, [sp, #128]	; 0x80
 8006d66:	dc01      	bgt.n	8006d6c <_vfprintf_r+0x78c>
 8006d68:	3408      	adds	r4, #8
 8006d6a:	e00a      	b.n	8006d82 <_vfprintf_r+0x7a2>
 8006d6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d6e:	4659      	mov	r1, fp
 8006d70:	4650      	mov	r0, sl
 8006d72:	930c      	str	r3, [sp, #48]	; 0x30
 8006d74:	f002 fcbe 	bl	80096f4 <__sprint_r>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f040 82ed 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d80:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d82:	3b10      	subs	r3, #16
 8006d84:	e7e2      	b.n	8006d4c <_vfprintf_r+0x76c>
 8006d86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d88:	6063      	str	r3, [r4, #4]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	9321      	str	r3, [sp, #132]	; 0x84
 8006d8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d90:	3301      	adds	r3, #1
 8006d92:	2b07      	cmp	r3, #7
 8006d94:	9320      	str	r3, [sp, #128]	; 0x80
 8006d96:	dc01      	bgt.n	8006d9c <_vfprintf_r+0x7bc>
 8006d98:	3408      	adds	r4, #8
 8006d9a:	e008      	b.n	8006dae <_vfprintf_r+0x7ce>
 8006d9c:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d9e:	4659      	mov	r1, fp
 8006da0:	4650      	mov	r0, sl
 8006da2:	f002 fca7 	bl	80096f4 <__sprint_r>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f040 82d6 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006dac:	ac2c      	add	r4, sp, #176	; 0xb0
 8006dae:	ebc9 0606 	rsb	r6, r9, r6
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	dd2e      	ble.n	8006e14 <_vfprintf_r+0x834>
 8006db6:	4b56      	ldr	r3, [pc, #344]	; (8006f10 <_vfprintf_r+0x930>)
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	2e10      	cmp	r6, #16
 8006dbc:	dd16      	ble.n	8006dec <_vfprintf_r+0x80c>
 8006dbe:	2310      	movs	r3, #16
 8006dc0:	6063      	str	r3, [r4, #4]
 8006dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc4:	3310      	adds	r3, #16
 8006dc6:	9321      	str	r3, [sp, #132]	; 0x84
 8006dc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006dca:	3301      	adds	r3, #1
 8006dcc:	2b07      	cmp	r3, #7
 8006dce:	9320      	str	r3, [sp, #128]	; 0x80
 8006dd0:	dc01      	bgt.n	8006dd6 <_vfprintf_r+0x7f6>
 8006dd2:	3408      	adds	r4, #8
 8006dd4:	e008      	b.n	8006de8 <_vfprintf_r+0x808>
 8006dd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8006dd8:	4659      	mov	r1, fp
 8006dda:	4650      	mov	r0, sl
 8006ddc:	f002 fc8a 	bl	80096f4 <__sprint_r>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f040 82b9 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006de6:	ac2c      	add	r4, sp, #176	; 0xb0
 8006de8:	3e10      	subs	r6, #16
 8006dea:	e7e4      	b.n	8006db6 <_vfprintf_r+0x7d6>
 8006dec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006dee:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006df0:	6066      	str	r6, [r4, #4]
 8006df2:	3301      	adds	r3, #1
 8006df4:	4406      	add	r6, r0
 8006df6:	2b07      	cmp	r3, #7
 8006df8:	9621      	str	r6, [sp, #132]	; 0x84
 8006dfa:	9320      	str	r3, [sp, #128]	; 0x80
 8006dfc:	dc01      	bgt.n	8006e02 <_vfprintf_r+0x822>
 8006dfe:	3408      	adds	r4, #8
 8006e00:	e008      	b.n	8006e14 <_vfprintf_r+0x834>
 8006e02:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e04:	4659      	mov	r1, fp
 8006e06:	4650      	mov	r0, sl
 8006e08:	f002 fc74 	bl	80096f4 <__sprint_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f040 82a3 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006e12:	ac2c      	add	r4, sp, #176	; 0xb0
 8006e14:	05eb      	lsls	r3, r5, #23
 8006e16:	d414      	bmi.n	8006e42 <_vfprintf_r+0x862>
 8006e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e1a:	e884 0300 	stmia.w	r4, {r8, r9}
 8006e1e:	444b      	add	r3, r9
 8006e20:	9321      	str	r3, [sp, #132]	; 0x84
 8006e22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006e24:	3301      	adds	r3, #1
 8006e26:	2b07      	cmp	r3, #7
 8006e28:	9320      	str	r3, [sp, #128]	; 0x80
 8006e2a:	f340 8244 	ble.w	80072b6 <_vfprintf_r+0xcd6>
 8006e2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e30:	4659      	mov	r1, fp
 8006e32:	4650      	mov	r0, sl
 8006e34:	f002 fc5e 	bl	80096f4 <__sprint_r>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f040 828d 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006e3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006e40:	e23a      	b.n	80072b8 <_vfprintf_r+0xcd8>
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	2b65      	cmp	r3, #101	; 0x65
 8006e46:	f340 81ad 	ble.w	80071a4 <_vfprintf_r+0xbc4>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e52:	f7f9 fe35 	bl	8000ac0 <__aeabi_dcmpeq>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d05e      	beq.n	8006f18 <_vfprintf_r+0x938>
 8006e5a:	4b2e      	ldr	r3, [pc, #184]	; (8006f14 <_vfprintf_r+0x934>)
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	2301      	movs	r3, #1
 8006e60:	6063      	str	r3, [r4, #4]
 8006e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e64:	3301      	adds	r3, #1
 8006e66:	9321      	str	r3, [sp, #132]	; 0x84
 8006e68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	2b07      	cmp	r3, #7
 8006e6e:	9320      	str	r3, [sp, #128]	; 0x80
 8006e70:	dc01      	bgt.n	8006e76 <_vfprintf_r+0x896>
 8006e72:	3408      	adds	r4, #8
 8006e74:	e008      	b.n	8006e88 <_vfprintf_r+0x8a8>
 8006e76:	aa1f      	add	r2, sp, #124	; 0x7c
 8006e78:	4659      	mov	r1, fp
 8006e7a:	4650      	mov	r0, sl
 8006e7c:	f002 fc3a 	bl	80096f4 <__sprint_r>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	f040 8269 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006e86:	ac2c      	add	r4, sp, #176	; 0xb0
 8006e88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e8a:	9a04      	ldr	r2, [sp, #16]
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	db02      	blt.n	8006e96 <_vfprintf_r+0x8b6>
 8006e90:	07ef      	lsls	r7, r5, #31
 8006e92:	f140 8211 	bpl.w	80072b8 <_vfprintf_r+0xcd8>
 8006e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	9b08      	ldr	r3, [sp, #32]
 8006e9c:	6063      	str	r3, [r4, #4]
 8006e9e:	9a08      	ldr	r2, [sp, #32]
 8006ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ea2:	4413      	add	r3, r2
 8006ea4:	9321      	str	r3, [sp, #132]	; 0x84
 8006ea6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	2b07      	cmp	r3, #7
 8006eac:	9320      	str	r3, [sp, #128]	; 0x80
 8006eae:	dc01      	bgt.n	8006eb4 <_vfprintf_r+0x8d4>
 8006eb0:	3408      	adds	r4, #8
 8006eb2:	e008      	b.n	8006ec6 <_vfprintf_r+0x8e6>
 8006eb4:	aa1f      	add	r2, sp, #124	; 0x7c
 8006eb6:	4659      	mov	r1, fp
 8006eb8:	4650      	mov	r0, sl
 8006eba:	f002 fc1b 	bl	80096f4 <__sprint_r>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f040 824a 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006ec4:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ec6:	9b04      	ldr	r3, [sp, #16]
 8006ec8:	1e5e      	subs	r6, r3, #1
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	f340 81f4 	ble.w	80072b8 <_vfprintf_r+0xcd8>
 8006ed0:	4f0f      	ldr	r7, [pc, #60]	; (8006f10 <_vfprintf_r+0x930>)
 8006ed2:	f04f 0810 	mov.w	r8, #16
 8006ed6:	2e10      	cmp	r6, #16
 8006ed8:	f340 8159 	ble.w	800718e <_vfprintf_r+0xbae>
 8006edc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ede:	3310      	adds	r3, #16
 8006ee0:	9321      	str	r3, [sp, #132]	; 0x84
 8006ee2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	2b07      	cmp	r3, #7
 8006ee8:	e884 0180 	stmia.w	r4, {r7, r8}
 8006eec:	9320      	str	r3, [sp, #128]	; 0x80
 8006eee:	dc01      	bgt.n	8006ef4 <_vfprintf_r+0x914>
 8006ef0:	3408      	adds	r4, #8
 8006ef2:	e008      	b.n	8006f06 <_vfprintf_r+0x926>
 8006ef4:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ef6:	4659      	mov	r1, fp
 8006ef8:	4650      	mov	r0, sl
 8006efa:	f002 fbfb 	bl	80096f4 <__sprint_r>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	f040 822a 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006f04:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f06:	3e10      	subs	r6, #16
 8006f08:	e7e5      	b.n	8006ed6 <_vfprintf_r+0x8f6>
 8006f0a:	bf00      	nop
 8006f0c:	0800a1ae 	.word	0x0800a1ae
 8006f10:	0800a1be 	.word	0x0800a1be
 8006f14:	0800a19c 	.word	0x0800a19c
 8006f18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dc7c      	bgt.n	8007018 <_vfprintf_r+0xa38>
 8006f1e:	4b9f      	ldr	r3, [pc, #636]	; (800719c <_vfprintf_r+0xbbc>)
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	2301      	movs	r3, #1
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f28:	3301      	adds	r3, #1
 8006f2a:	9321      	str	r3, [sp, #132]	; 0x84
 8006f2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f2e:	3301      	adds	r3, #1
 8006f30:	2b07      	cmp	r3, #7
 8006f32:	9320      	str	r3, [sp, #128]	; 0x80
 8006f34:	dc01      	bgt.n	8006f3a <_vfprintf_r+0x95a>
 8006f36:	3408      	adds	r4, #8
 8006f38:	e008      	b.n	8006f4c <_vfprintf_r+0x96c>
 8006f3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	4650      	mov	r0, sl
 8006f40:	f002 fbd8 	bl	80096f4 <__sprint_r>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f040 8207 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006f4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f4e:	b923      	cbnz	r3, 8006f5a <_vfprintf_r+0x97a>
 8006f50:	9b04      	ldr	r3, [sp, #16]
 8006f52:	b913      	cbnz	r3, 8006f5a <_vfprintf_r+0x97a>
 8006f54:	07ee      	lsls	r6, r5, #31
 8006f56:	f140 81af 	bpl.w	80072b8 <_vfprintf_r+0xcd8>
 8006f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	9b08      	ldr	r3, [sp, #32]
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	9a08      	ldr	r2, [sp, #32]
 8006f64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f66:	4413      	add	r3, r2
 8006f68:	9321      	str	r3, [sp, #132]	; 0x84
 8006f6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	2b07      	cmp	r3, #7
 8006f70:	9320      	str	r3, [sp, #128]	; 0x80
 8006f72:	dc02      	bgt.n	8006f7a <_vfprintf_r+0x99a>
 8006f74:	f104 0308 	add.w	r3, r4, #8
 8006f78:	e008      	b.n	8006f8c <_vfprintf_r+0x9ac>
 8006f7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	4650      	mov	r0, sl
 8006f80:	f002 fbb8 	bl	80096f4 <__sprint_r>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f040 81e7 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006f8a:	ab2c      	add	r3, sp, #176	; 0xb0
 8006f8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f8e:	4276      	negs	r6, r6
 8006f90:	2e00      	cmp	r6, #0
 8006f92:	dd30      	ble.n	8006ff6 <_vfprintf_r+0xa16>
 8006f94:	4f82      	ldr	r7, [pc, #520]	; (80071a0 <_vfprintf_r+0xbc0>)
 8006f96:	2410      	movs	r4, #16
 8006f98:	2e10      	cmp	r6, #16
 8006f9a:	dd16      	ble.n	8006fca <_vfprintf_r+0x9ea>
 8006f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f9e:	601f      	str	r7, [r3, #0]
 8006fa0:	3210      	adds	r2, #16
 8006fa2:	9221      	str	r2, [sp, #132]	; 0x84
 8006fa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006fa6:	605c      	str	r4, [r3, #4]
 8006fa8:	3201      	adds	r2, #1
 8006faa:	2a07      	cmp	r2, #7
 8006fac:	9220      	str	r2, [sp, #128]	; 0x80
 8006fae:	dc01      	bgt.n	8006fb4 <_vfprintf_r+0x9d4>
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	e008      	b.n	8006fc6 <_vfprintf_r+0x9e6>
 8006fb4:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	4650      	mov	r0, sl
 8006fba:	f002 fb9b 	bl	80096f4 <__sprint_r>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	f040 81ca 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006fc4:	ab2c      	add	r3, sp, #176	; 0xb0
 8006fc6:	3e10      	subs	r6, #16
 8006fc8:	e7e6      	b.n	8006f98 <_vfprintf_r+0x9b8>
 8006fca:	4a75      	ldr	r2, [pc, #468]	; (80071a0 <_vfprintf_r+0xbc0>)
 8006fcc:	e883 0044 	stmia.w	r3, {r2, r6}
 8006fd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fd2:	4416      	add	r6, r2
 8006fd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006fd6:	9621      	str	r6, [sp, #132]	; 0x84
 8006fd8:	3201      	adds	r2, #1
 8006fda:	2a07      	cmp	r2, #7
 8006fdc:	9220      	str	r2, [sp, #128]	; 0x80
 8006fde:	dc01      	bgt.n	8006fe4 <_vfprintf_r+0xa04>
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	e008      	b.n	8006ff6 <_vfprintf_r+0xa16>
 8006fe4:	aa1f      	add	r2, sp, #124	; 0x7c
 8006fe6:	4659      	mov	r1, fp
 8006fe8:	4650      	mov	r0, sl
 8006fea:	f002 fb83 	bl	80096f4 <__sprint_r>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f040 81b2 	bne.w	8007358 <_vfprintf_r+0xd78>
 8006ff4:	ab2c      	add	r3, sp, #176	; 0xb0
 8006ff6:	9a04      	ldr	r2, [sp, #16]
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	9904      	ldr	r1, [sp, #16]
 8006ffc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ffe:	f8c3 8000 	str.w	r8, [r3]
 8007002:	440a      	add	r2, r1
 8007004:	9221      	str	r2, [sp, #132]	; 0x84
 8007006:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007008:	3201      	adds	r2, #1
 800700a:	2a07      	cmp	r2, #7
 800700c:	9220      	str	r2, [sp, #128]	; 0x80
 800700e:	f73f af0e 	bgt.w	8006e2e <_vfprintf_r+0x84e>
 8007012:	f103 0408 	add.w	r4, r3, #8
 8007016:	e14f      	b.n	80072b8 <_vfprintf_r+0xcd8>
 8007018:	9b04      	ldr	r3, [sp, #16]
 800701a:	42bb      	cmp	r3, r7
 800701c:	bfa8      	it	ge
 800701e:	463b      	movge	r3, r7
 8007020:	2b00      	cmp	r3, #0
 8007022:	461e      	mov	r6, r3
 8007024:	dd15      	ble.n	8007052 <_vfprintf_r+0xa72>
 8007026:	6063      	str	r3, [r4, #4]
 8007028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800702a:	f8c4 8000 	str.w	r8, [r4]
 800702e:	4433      	add	r3, r6
 8007030:	9321      	str	r3, [sp, #132]	; 0x84
 8007032:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007034:	3301      	adds	r3, #1
 8007036:	2b07      	cmp	r3, #7
 8007038:	9320      	str	r3, [sp, #128]	; 0x80
 800703a:	dc01      	bgt.n	8007040 <_vfprintf_r+0xa60>
 800703c:	3408      	adds	r4, #8
 800703e:	e008      	b.n	8007052 <_vfprintf_r+0xa72>
 8007040:	aa1f      	add	r2, sp, #124	; 0x7c
 8007042:	4659      	mov	r1, fp
 8007044:	4650      	mov	r0, sl
 8007046:	f002 fb55 	bl	80096f4 <__sprint_r>
 800704a:	2800      	cmp	r0, #0
 800704c:	f040 8184 	bne.w	8007358 <_vfprintf_r+0xd78>
 8007050:	ac2c      	add	r4, sp, #176	; 0xb0
 8007052:	2e00      	cmp	r6, #0
 8007054:	bfac      	ite	ge
 8007056:	1bbe      	subge	r6, r7, r6
 8007058:	463e      	movlt	r6, r7
 800705a:	2e00      	cmp	r6, #0
 800705c:	dd30      	ble.n	80070c0 <_vfprintf_r+0xae0>
 800705e:	f04f 0910 	mov.w	r9, #16
 8007062:	4b4f      	ldr	r3, [pc, #316]	; (80071a0 <_vfprintf_r+0xbc0>)
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	2e10      	cmp	r6, #16
 8007068:	dd16      	ble.n	8007098 <_vfprintf_r+0xab8>
 800706a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706c:	f8c4 9004 	str.w	r9, [r4, #4]
 8007070:	3310      	adds	r3, #16
 8007072:	9321      	str	r3, [sp, #132]	; 0x84
 8007074:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007076:	3301      	adds	r3, #1
 8007078:	2b07      	cmp	r3, #7
 800707a:	9320      	str	r3, [sp, #128]	; 0x80
 800707c:	dc01      	bgt.n	8007082 <_vfprintf_r+0xaa2>
 800707e:	3408      	adds	r4, #8
 8007080:	e008      	b.n	8007094 <_vfprintf_r+0xab4>
 8007082:	aa1f      	add	r2, sp, #124	; 0x7c
 8007084:	4659      	mov	r1, fp
 8007086:	4650      	mov	r0, sl
 8007088:	f002 fb34 	bl	80096f4 <__sprint_r>
 800708c:	2800      	cmp	r0, #0
 800708e:	f040 8163 	bne.w	8007358 <_vfprintf_r+0xd78>
 8007092:	ac2c      	add	r4, sp, #176	; 0xb0
 8007094:	3e10      	subs	r6, #16
 8007096:	e7e4      	b.n	8007062 <_vfprintf_r+0xa82>
 8007098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800709a:	6066      	str	r6, [r4, #4]
 800709c:	441e      	add	r6, r3
 800709e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070a0:	9621      	str	r6, [sp, #132]	; 0x84
 80070a2:	3301      	adds	r3, #1
 80070a4:	2b07      	cmp	r3, #7
 80070a6:	9320      	str	r3, [sp, #128]	; 0x80
 80070a8:	dc01      	bgt.n	80070ae <_vfprintf_r+0xace>
 80070aa:	3408      	adds	r4, #8
 80070ac:	e008      	b.n	80070c0 <_vfprintf_r+0xae0>
 80070ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80070b0:	4659      	mov	r1, fp
 80070b2:	4650      	mov	r0, sl
 80070b4:	f002 fb1e 	bl	80096f4 <__sprint_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f040 814d 	bne.w	8007358 <_vfprintf_r+0xd78>
 80070be:	ac2c      	add	r4, sp, #176	; 0xb0
 80070c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070c2:	9a04      	ldr	r2, [sp, #16]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	4447      	add	r7, r8
 80070c8:	db01      	blt.n	80070ce <_vfprintf_r+0xaee>
 80070ca:	07e8      	lsls	r0, r5, #31
 80070cc:	d517      	bpl.n	80070fe <_vfprintf_r+0xb1e>
 80070ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	9b08      	ldr	r3, [sp, #32]
 80070d4:	6063      	str	r3, [r4, #4]
 80070d6:	9a08      	ldr	r2, [sp, #32]
 80070d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070da:	4413      	add	r3, r2
 80070dc:	9321      	str	r3, [sp, #132]	; 0x84
 80070de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070e0:	3301      	adds	r3, #1
 80070e2:	2b07      	cmp	r3, #7
 80070e4:	9320      	str	r3, [sp, #128]	; 0x80
 80070e6:	dc01      	bgt.n	80070ec <_vfprintf_r+0xb0c>
 80070e8:	3408      	adds	r4, #8
 80070ea:	e008      	b.n	80070fe <_vfprintf_r+0xb1e>
 80070ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80070ee:	4659      	mov	r1, fp
 80070f0:	4650      	mov	r0, sl
 80070f2:	f002 faff 	bl	80096f4 <__sprint_r>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f040 812e 	bne.w	8007358 <_vfprintf_r+0xd78>
 80070fc:	ac2c      	add	r4, sp, #176	; 0xb0
 80070fe:	9b04      	ldr	r3, [sp, #16]
 8007100:	9a04      	ldr	r2, [sp, #16]
 8007102:	eb08 0603 	add.w	r6, r8, r3
 8007106:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007108:	1bf6      	subs	r6, r6, r7
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	429e      	cmp	r6, r3
 800710e:	bfa8      	it	ge
 8007110:	461e      	movge	r6, r3
 8007112:	2e00      	cmp	r6, #0
 8007114:	dd14      	ble.n	8007140 <_vfprintf_r+0xb60>
 8007116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007118:	6027      	str	r7, [r4, #0]
 800711a:	4433      	add	r3, r6
 800711c:	9321      	str	r3, [sp, #132]	; 0x84
 800711e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007120:	6066      	str	r6, [r4, #4]
 8007122:	3301      	adds	r3, #1
 8007124:	2b07      	cmp	r3, #7
 8007126:	9320      	str	r3, [sp, #128]	; 0x80
 8007128:	dc01      	bgt.n	800712e <_vfprintf_r+0xb4e>
 800712a:	3408      	adds	r4, #8
 800712c:	e008      	b.n	8007140 <_vfprintf_r+0xb60>
 800712e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007130:	4659      	mov	r1, fp
 8007132:	4650      	mov	r0, sl
 8007134:	f002 fade 	bl	80096f4 <__sprint_r>
 8007138:	2800      	cmp	r0, #0
 800713a:	f040 810d 	bne.w	8007358 <_vfprintf_r+0xd78>
 800713e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007140:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007142:	9a04      	ldr	r2, [sp, #16]
 8007144:	2e00      	cmp	r6, #0
 8007146:	eba2 0303 	sub.w	r3, r2, r3
 800714a:	bfac      	ite	ge
 800714c:	1b9e      	subge	r6, r3, r6
 800714e:	461e      	movlt	r6, r3
 8007150:	2e00      	cmp	r6, #0
 8007152:	f340 80b1 	ble.w	80072b8 <_vfprintf_r+0xcd8>
 8007156:	4f12      	ldr	r7, [pc, #72]	; (80071a0 <_vfprintf_r+0xbc0>)
 8007158:	f04f 0810 	mov.w	r8, #16
 800715c:	2e10      	cmp	r6, #16
 800715e:	dd16      	ble.n	800718e <_vfprintf_r+0xbae>
 8007160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007162:	3310      	adds	r3, #16
 8007164:	9321      	str	r3, [sp, #132]	; 0x84
 8007166:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007168:	3301      	adds	r3, #1
 800716a:	2b07      	cmp	r3, #7
 800716c:	e884 0180 	stmia.w	r4, {r7, r8}
 8007170:	9320      	str	r3, [sp, #128]	; 0x80
 8007172:	dc01      	bgt.n	8007178 <_vfprintf_r+0xb98>
 8007174:	3408      	adds	r4, #8
 8007176:	e008      	b.n	800718a <_vfprintf_r+0xbaa>
 8007178:	aa1f      	add	r2, sp, #124	; 0x7c
 800717a:	4659      	mov	r1, fp
 800717c:	4650      	mov	r0, sl
 800717e:	f002 fab9 	bl	80096f4 <__sprint_r>
 8007182:	2800      	cmp	r0, #0
 8007184:	f040 80e8 	bne.w	8007358 <_vfprintf_r+0xd78>
 8007188:	ac2c      	add	r4, sp, #176	; 0xb0
 800718a:	3e10      	subs	r6, #16
 800718c:	e7e6      	b.n	800715c <_vfprintf_r+0xb7c>
 800718e:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <_vfprintf_r+0xbc0>)
 8007190:	e884 0048 	stmia.w	r4, {r3, r6}
 8007194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007196:	441e      	add	r6, r3
 8007198:	9621      	str	r6, [sp, #132]	; 0x84
 800719a:	e642      	b.n	8006e22 <_vfprintf_r+0x842>
 800719c:	0800a19c 	.word	0x0800a19c
 80071a0:	0800a1be 	.word	0x0800a1be
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	dc01      	bgt.n	80071ae <_vfprintf_r+0xbce>
 80071aa:	07e9      	lsls	r1, r5, #31
 80071ac:	d573      	bpl.n	8007296 <_vfprintf_r+0xcb6>
 80071ae:	2301      	movs	r3, #1
 80071b0:	6063      	str	r3, [r4, #4]
 80071b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071b4:	f8c4 8000 	str.w	r8, [r4]
 80071b8:	3301      	adds	r3, #1
 80071ba:	9321      	str	r3, [sp, #132]	; 0x84
 80071bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071be:	3301      	adds	r3, #1
 80071c0:	2b07      	cmp	r3, #7
 80071c2:	9320      	str	r3, [sp, #128]	; 0x80
 80071c4:	dc01      	bgt.n	80071ca <_vfprintf_r+0xbea>
 80071c6:	3408      	adds	r4, #8
 80071c8:	e008      	b.n	80071dc <_vfprintf_r+0xbfc>
 80071ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80071cc:	4659      	mov	r1, fp
 80071ce:	4650      	mov	r0, sl
 80071d0:	f002 fa90 	bl	80096f4 <__sprint_r>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f040 80bf 	bne.w	8007358 <_vfprintf_r+0xd78>
 80071da:	ac2c      	add	r4, sp, #176	; 0xb0
 80071dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	9b08      	ldr	r3, [sp, #32]
 80071e2:	6063      	str	r3, [r4, #4]
 80071e4:	9a08      	ldr	r2, [sp, #32]
 80071e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e8:	4413      	add	r3, r2
 80071ea:	9321      	str	r3, [sp, #132]	; 0x84
 80071ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071ee:	3301      	adds	r3, #1
 80071f0:	2b07      	cmp	r3, #7
 80071f2:	9320      	str	r3, [sp, #128]	; 0x80
 80071f4:	dc01      	bgt.n	80071fa <_vfprintf_r+0xc1a>
 80071f6:	3408      	adds	r4, #8
 80071f8:	e008      	b.n	800720c <_vfprintf_r+0xc2c>
 80071fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80071fc:	4659      	mov	r1, fp
 80071fe:	4650      	mov	r0, sl
 8007200:	f002 fa78 	bl	80096f4 <__sprint_r>
 8007204:	2800      	cmp	r0, #0
 8007206:	f040 80a7 	bne.w	8007358 <_vfprintf_r+0xd78>
 800720a:	ac2c      	add	r4, sp, #176	; 0xb0
 800720c:	2300      	movs	r3, #0
 800720e:	2200      	movs	r2, #0
 8007210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007214:	f7f9 fc54 	bl	8000ac0 <__aeabi_dcmpeq>
 8007218:	9b04      	ldr	r3, [sp, #16]
 800721a:	1e5e      	subs	r6, r3, #1
 800721c:	b9b8      	cbnz	r0, 800724e <_vfprintf_r+0xc6e>
 800721e:	f108 0301 	add.w	r3, r8, #1
 8007222:	e884 0048 	stmia.w	r4, {r3, r6}
 8007226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007228:	9a04      	ldr	r2, [sp, #16]
 800722a:	3b01      	subs	r3, #1
 800722c:	4413      	add	r3, r2
 800722e:	9321      	str	r3, [sp, #132]	; 0x84
 8007230:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007232:	3301      	adds	r3, #1
 8007234:	2b07      	cmp	r3, #7
 8007236:	9320      	str	r3, [sp, #128]	; 0x80
 8007238:	dd34      	ble.n	80072a4 <_vfprintf_r+0xcc4>
 800723a:	aa1f      	add	r2, sp, #124	; 0x7c
 800723c:	4659      	mov	r1, fp
 800723e:	4650      	mov	r0, sl
 8007240:	f002 fa58 	bl	80096f4 <__sprint_r>
 8007244:	2800      	cmp	r0, #0
 8007246:	f040 8087 	bne.w	8007358 <_vfprintf_r+0xd78>
 800724a:	ac2c      	add	r4, sp, #176	; 0xb0
 800724c:	e02b      	b.n	80072a6 <_vfprintf_r+0xcc6>
 800724e:	2e00      	cmp	r6, #0
 8007250:	dd29      	ble.n	80072a6 <_vfprintf_r+0xcc6>
 8007252:	4fa6      	ldr	r7, [pc, #664]	; (80074ec <_vfprintf_r+0xf0c>)
 8007254:	f04f 0810 	mov.w	r8, #16
 8007258:	2e10      	cmp	r6, #16
 800725a:	dd15      	ble.n	8007288 <_vfprintf_r+0xca8>
 800725c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800725e:	3310      	adds	r3, #16
 8007260:	9321      	str	r3, [sp, #132]	; 0x84
 8007262:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007264:	3301      	adds	r3, #1
 8007266:	2b07      	cmp	r3, #7
 8007268:	e884 0180 	stmia.w	r4, {r7, r8}
 800726c:	9320      	str	r3, [sp, #128]	; 0x80
 800726e:	dc01      	bgt.n	8007274 <_vfprintf_r+0xc94>
 8007270:	3408      	adds	r4, #8
 8007272:	e007      	b.n	8007284 <_vfprintf_r+0xca4>
 8007274:	aa1f      	add	r2, sp, #124	; 0x7c
 8007276:	4659      	mov	r1, fp
 8007278:	4650      	mov	r0, sl
 800727a:	f002 fa3b 	bl	80096f4 <__sprint_r>
 800727e:	2800      	cmp	r0, #0
 8007280:	d16a      	bne.n	8007358 <_vfprintf_r+0xd78>
 8007282:	ac2c      	add	r4, sp, #176	; 0xb0
 8007284:	3e10      	subs	r6, #16
 8007286:	e7e7      	b.n	8007258 <_vfprintf_r+0xc78>
 8007288:	4b98      	ldr	r3, [pc, #608]	; (80074ec <_vfprintf_r+0xf0c>)
 800728a:	e884 0048 	stmia.w	r4, {r3, r6}
 800728e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007290:	441e      	add	r6, r3
 8007292:	9621      	str	r6, [sp, #132]	; 0x84
 8007294:	e7cc      	b.n	8007230 <_vfprintf_r+0xc50>
 8007296:	2301      	movs	r3, #1
 8007298:	6063      	str	r3, [r4, #4]
 800729a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800729c:	f8c4 8000 	str.w	r8, [r4]
 80072a0:	3301      	adds	r3, #1
 80072a2:	e7c4      	b.n	800722e <_vfprintf_r+0xc4e>
 80072a4:	3408      	adds	r4, #8
 80072a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072ac:	6063      	str	r3, [r4, #4]
 80072ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072b2:	4413      	add	r3, r2
 80072b4:	e5b4      	b.n	8006e20 <_vfprintf_r+0x840>
 80072b6:	3408      	adds	r4, #8
 80072b8:	076a      	lsls	r2, r5, #29
 80072ba:	d40b      	bmi.n	80072d4 <_vfprintf_r+0xcf4>
 80072bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072c2:	428a      	cmp	r2, r1
 80072c4:	bfac      	ite	ge
 80072c6:	189b      	addge	r3, r3, r2
 80072c8:	185b      	addlt	r3, r3, r1
 80072ca:	930a      	str	r3, [sp, #40]	; 0x28
 80072cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d035      	beq.n	800733e <_vfprintf_r+0xd5e>
 80072d2:	e02e      	b.n	8007332 <_vfprintf_r+0xd52>
 80072d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072d8:	1a9d      	subs	r5, r3, r2
 80072da:	2d00      	cmp	r5, #0
 80072dc:	ddee      	ble.n	80072bc <_vfprintf_r+0xcdc>
 80072de:	2610      	movs	r6, #16
 80072e0:	4b83      	ldr	r3, [pc, #524]	; (80074f0 <_vfprintf_r+0xf10>)
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	2d10      	cmp	r5, #16
 80072e6:	dd13      	ble.n	8007310 <_vfprintf_r+0xd30>
 80072e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072ea:	6066      	str	r6, [r4, #4]
 80072ec:	3310      	adds	r3, #16
 80072ee:	9321      	str	r3, [sp, #132]	; 0x84
 80072f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072f2:	3301      	adds	r3, #1
 80072f4:	2b07      	cmp	r3, #7
 80072f6:	9320      	str	r3, [sp, #128]	; 0x80
 80072f8:	dc01      	bgt.n	80072fe <_vfprintf_r+0xd1e>
 80072fa:	3408      	adds	r4, #8
 80072fc:	e006      	b.n	800730c <_vfprintf_r+0xd2c>
 80072fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8007300:	4659      	mov	r1, fp
 8007302:	4650      	mov	r0, sl
 8007304:	f002 f9f6 	bl	80096f4 <__sprint_r>
 8007308:	bb30      	cbnz	r0, 8007358 <_vfprintf_r+0xd78>
 800730a:	ac2c      	add	r4, sp, #176	; 0xb0
 800730c:	3d10      	subs	r5, #16
 800730e:	e7e7      	b.n	80072e0 <_vfprintf_r+0xd00>
 8007310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007312:	6065      	str	r5, [r4, #4]
 8007314:	441d      	add	r5, r3
 8007316:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007318:	9521      	str	r5, [sp, #132]	; 0x84
 800731a:	3301      	adds	r3, #1
 800731c:	2b07      	cmp	r3, #7
 800731e:	9320      	str	r3, [sp, #128]	; 0x80
 8007320:	ddcc      	ble.n	80072bc <_vfprintf_r+0xcdc>
 8007322:	aa1f      	add	r2, sp, #124	; 0x7c
 8007324:	4659      	mov	r1, fp
 8007326:	4650      	mov	r0, sl
 8007328:	f002 f9e4 	bl	80096f4 <__sprint_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	d0c5      	beq.n	80072bc <_vfprintf_r+0xcdc>
 8007330:	e012      	b.n	8007358 <_vfprintf_r+0xd78>
 8007332:	aa1f      	add	r2, sp, #124	; 0x7c
 8007334:	4659      	mov	r1, fp
 8007336:	4650      	mov	r0, sl
 8007338:	f002 f9dc 	bl	80096f4 <__sprint_r>
 800733c:	b960      	cbnz	r0, 8007358 <_vfprintf_r+0xd78>
 800733e:	2300      	movs	r3, #0
 8007340:	9320      	str	r3, [sp, #128]	; 0x80
 8007342:	9f03      	ldr	r7, [sp, #12]
 8007344:	ac2c      	add	r4, sp, #176	; 0xb0
 8007346:	f7ff b9b4 	b.w	80066b2 <_vfprintf_r+0xd2>
 800734a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800734c:	b123      	cbz	r3, 8007358 <_vfprintf_r+0xd78>
 800734e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007350:	4659      	mov	r1, fp
 8007352:	4650      	mov	r0, sl
 8007354:	f002 f9ce 	bl	80096f4 <__sprint_r>
 8007358:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800735c:	065b      	lsls	r3, r3, #25
 800735e:	f53f a98b 	bmi.w	8006678 <_vfprintf_r+0x98>
 8007362:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007364:	e12f      	b.n	80075c6 <_vfprintf_r+0xfe6>
 8007366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800736a:	4610      	mov	r0, r2
 800736c:	4619      	mov	r1, r3
 800736e:	f7f9 fbd9 	bl	8000b24 <__aeabi_dcmpun>
 8007372:	b160      	cbz	r0, 800738e <_vfprintf_r+0xdae>
 8007374:	4b5f      	ldr	r3, [pc, #380]	; (80074f4 <_vfprintf_r+0xf14>)
 8007376:	4a60      	ldr	r2, [pc, #384]	; (80074f8 <_vfprintf_r+0xf18>)
 8007378:	9902      	ldr	r1, [sp, #8]
 800737a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800737e:	2947      	cmp	r1, #71	; 0x47
 8007380:	bfcc      	ite	gt
 8007382:	4690      	movgt	r8, r2
 8007384:	4698      	movle	r8, r3
 8007386:	f04f 0903 	mov.w	r9, #3
 800738a:	2600      	movs	r6, #0
 800738c:	e451      	b.n	8006c32 <_vfprintf_r+0x652>
 800738e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007392:	d00a      	beq.n	80073aa <_vfprintf_r+0xdca>
 8007394:	9b02      	ldr	r3, [sp, #8]
 8007396:	f023 0320 	bic.w	r3, r3, #32
 800739a:	2b47      	cmp	r3, #71	; 0x47
 800739c:	d107      	bne.n	80073ae <_vfprintf_r+0xdce>
 800739e:	f1b9 0f00 	cmp.w	r9, #0
 80073a2:	bf08      	it	eq
 80073a4:	f04f 0901 	moveq.w	r9, #1
 80073a8:	e001      	b.n	80073ae <_vfprintf_r+0xdce>
 80073aa:	f04f 0906 	mov.w	r9, #6
 80073ae:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80073b2:	930c      	str	r3, [sp, #48]	; 0x30
 80073b4:	9b07      	ldr	r3, [sp, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da07      	bge.n	80073ca <_vfprintf_r+0xdea>
 80073ba:	9b06      	ldr	r3, [sp, #24]
 80073bc:	930e      	str	r3, [sp, #56]	; 0x38
 80073be:	9b07      	ldr	r3, [sp, #28]
 80073c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c6:	232d      	movs	r3, #45	; 0x2d
 80073c8:	e004      	b.n	80073d4 <_vfprintf_r+0xdf4>
 80073ca:	ed9d 7b06 	vldr	d7, [sp, #24]
 80073ce:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80073d2:	2300      	movs	r3, #0
 80073d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80073d6:	9b02      	ldr	r3, [sp, #8]
 80073d8:	f023 0720 	bic.w	r7, r3, #32
 80073dc:	2f46      	cmp	r7, #70	; 0x46
 80073de:	d004      	beq.n	80073ea <_vfprintf_r+0xe0a>
 80073e0:	2f45      	cmp	r7, #69	; 0x45
 80073e2:	d105      	bne.n	80073f0 <_vfprintf_r+0xe10>
 80073e4:	f109 0601 	add.w	r6, r9, #1
 80073e8:	e003      	b.n	80073f2 <_vfprintf_r+0xe12>
 80073ea:	464e      	mov	r6, r9
 80073ec:	2103      	movs	r1, #3
 80073ee:	e001      	b.n	80073f4 <_vfprintf_r+0xe14>
 80073f0:	464e      	mov	r6, r9
 80073f2:	2102      	movs	r1, #2
 80073f4:	ab1d      	add	r3, sp, #116	; 0x74
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	ab1a      	add	r3, sp, #104	; 0x68
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	4632      	mov	r2, r6
 80073fe:	ab19      	add	r3, sp, #100	; 0x64
 8007400:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8007404:	4650      	mov	r0, sl
 8007406:	f000 fa1b 	bl	8007840 <_dtoa_r>
 800740a:	2f47      	cmp	r7, #71	; 0x47
 800740c:	4680      	mov	r8, r0
 800740e:	d102      	bne.n	8007416 <_vfprintf_r+0xe36>
 8007410:	07eb      	lsls	r3, r5, #31
 8007412:	f140 80ce 	bpl.w	80075b2 <_vfprintf_r+0xfd2>
 8007416:	eb08 0306 	add.w	r3, r8, r6
 800741a:	2f46      	cmp	r7, #70	; 0x46
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	d111      	bne.n	8007444 <_vfprintf_r+0xe64>
 8007420:	f898 3000 	ldrb.w	r3, [r8]
 8007424:	2b30      	cmp	r3, #48	; 0x30
 8007426:	d109      	bne.n	800743c <_vfprintf_r+0xe5c>
 8007428:	2200      	movs	r2, #0
 800742a:	2300      	movs	r3, #0
 800742c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007430:	f7f9 fb46 	bl	8000ac0 <__aeabi_dcmpeq>
 8007434:	b910      	cbnz	r0, 800743c <_vfprintf_r+0xe5c>
 8007436:	f1c6 0601 	rsb	r6, r6, #1
 800743a:	9619      	str	r6, [sp, #100]	; 0x64
 800743c:	9a04      	ldr	r2, [sp, #16]
 800743e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007440:	441a      	add	r2, r3
 8007442:	9204      	str	r2, [sp, #16]
 8007444:	2200      	movs	r2, #0
 8007446:	2300      	movs	r3, #0
 8007448:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800744c:	f7f9 fb38 	bl	8000ac0 <__aeabi_dcmpeq>
 8007450:	b908      	cbnz	r0, 8007456 <_vfprintf_r+0xe76>
 8007452:	2230      	movs	r2, #48	; 0x30
 8007454:	e002      	b.n	800745c <_vfprintf_r+0xe7c>
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	931d      	str	r3, [sp, #116]	; 0x74
 800745a:	e007      	b.n	800746c <_vfprintf_r+0xe8c>
 800745c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800745e:	9904      	ldr	r1, [sp, #16]
 8007460:	4299      	cmp	r1, r3
 8007462:	d903      	bls.n	800746c <_vfprintf_r+0xe8c>
 8007464:	1c59      	adds	r1, r3, #1
 8007466:	911d      	str	r1, [sp, #116]	; 0x74
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	e7f7      	b.n	800745c <_vfprintf_r+0xe7c>
 800746c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800746e:	2f47      	cmp	r7, #71	; 0x47
 8007470:	ebc8 0303 	rsb	r3, r8, r3
 8007474:	9304      	str	r3, [sp, #16]
 8007476:	d108      	bne.n	800748a <_vfprintf_r+0xeaa>
 8007478:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800747a:	1cdf      	adds	r7, r3, #3
 800747c:	db01      	blt.n	8007482 <_vfprintf_r+0xea2>
 800747e:	4599      	cmp	r9, r3
 8007480:	da69      	bge.n	8007556 <_vfprintf_r+0xf76>
 8007482:	9b02      	ldr	r3, [sp, #8]
 8007484:	3b02      	subs	r3, #2
 8007486:	9302      	str	r3, [sp, #8]
 8007488:	e002      	b.n	8007490 <_vfprintf_r+0xeb0>
 800748a:	9b02      	ldr	r3, [sp, #8]
 800748c:	2b65      	cmp	r3, #101	; 0x65
 800748e:	dc4b      	bgt.n	8007528 <_vfprintf_r+0xf48>
 8007490:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007492:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8007496:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800749a:	3b01      	subs	r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	9319      	str	r3, [sp, #100]	; 0x64
 80074a0:	bfba      	itte	lt
 80074a2:	425b      	neglt	r3, r3
 80074a4:	222d      	movlt	r2, #45	; 0x2d
 80074a6:	222b      	movge	r2, #43	; 0x2b
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80074ae:	dd25      	ble.n	80074fc <_vfprintf_r+0xf1c>
 80074b0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80074b4:	200a      	movs	r0, #10
 80074b6:	fb93 f1f0 	sdiv	r1, r3, r0
 80074ba:	fb00 3311 	mls	r3, r0, r1, r3
 80074be:	3330      	adds	r3, #48	; 0x30
 80074c0:	2909      	cmp	r1, #9
 80074c2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80074c6:	460b      	mov	r3, r1
 80074c8:	dcf5      	bgt.n	80074b6 <_vfprintf_r+0xed6>
 80074ca:	3330      	adds	r3, #48	; 0x30
 80074cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074d0:	1e51      	subs	r1, r2, #1
 80074d2:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80074d6:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80074da:	4281      	cmp	r1, r0
 80074dc:	461a      	mov	r2, r3
 80074de:	d214      	bcs.n	800750a <_vfprintf_r+0xf2a>
 80074e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074e4:	f803 2b01 	strb.w	r2, [r3], #1
 80074e8:	e7f7      	b.n	80074da <_vfprintf_r+0xefa>
 80074ea:	bf00      	nop
 80074ec:	0800a1be 	.word	0x0800a1be
 80074f0:	0800a1ae 	.word	0x0800a1ae
 80074f4:	0800a172 	.word	0x0800a172
 80074f8:	0800a176 	.word	0x0800a176
 80074fc:	2230      	movs	r2, #48	; 0x30
 80074fe:	4413      	add	r3, r2
 8007500:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8007504:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8007508:	aa1c      	add	r2, sp, #112	; 0x70
 800750a:	ab1b      	add	r3, sp, #108	; 0x6c
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	9a04      	ldr	r2, [sp, #16]
 8007510:	9310      	str	r3, [sp, #64]	; 0x40
 8007512:	2a01      	cmp	r2, #1
 8007514:	eb03 0902 	add.w	r9, r3, r2
 8007518:	dc02      	bgt.n	8007520 <_vfprintf_r+0xf40>
 800751a:	f015 0701 	ands.w	r7, r5, #1
 800751e:	d032      	beq.n	8007586 <_vfprintf_r+0xfa6>
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	2700      	movs	r7, #0
 8007524:	4499      	add	r9, r3
 8007526:	e02e      	b.n	8007586 <_vfprintf_r+0xfa6>
 8007528:	9b02      	ldr	r3, [sp, #8]
 800752a:	2b66      	cmp	r3, #102	; 0x66
 800752c:	d113      	bne.n	8007556 <_vfprintf_r+0xf76>
 800752e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007530:	2b00      	cmp	r3, #0
 8007532:	dd07      	ble.n	8007544 <_vfprintf_r+0xf64>
 8007534:	f1b9 0f00 	cmp.w	r9, #0
 8007538:	d101      	bne.n	800753e <_vfprintf_r+0xf5e>
 800753a:	07ee      	lsls	r6, r5, #31
 800753c:	d521      	bpl.n	8007582 <_vfprintf_r+0xfa2>
 800753e:	9a08      	ldr	r2, [sp, #32]
 8007540:	4413      	add	r3, r2
 8007542:	e006      	b.n	8007552 <_vfprintf_r+0xf72>
 8007544:	f1b9 0f00 	cmp.w	r9, #0
 8007548:	d101      	bne.n	800754e <_vfprintf_r+0xf6e>
 800754a:	07ed      	lsls	r5, r5, #31
 800754c:	d514      	bpl.n	8007578 <_vfprintf_r+0xf98>
 800754e:	9b08      	ldr	r3, [sp, #32]
 8007550:	3301      	adds	r3, #1
 8007552:	444b      	add	r3, r9
 8007554:	e015      	b.n	8007582 <_vfprintf_r+0xfa2>
 8007556:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007558:	9a04      	ldr	r2, [sp, #16]
 800755a:	4293      	cmp	r3, r2
 800755c:	db03      	blt.n	8007566 <_vfprintf_r+0xf86>
 800755e:	07e8      	lsls	r0, r5, #31
 8007560:	d50d      	bpl.n	800757e <_vfprintf_r+0xf9e>
 8007562:	9a08      	ldr	r2, [sp, #32]
 8007564:	e006      	b.n	8007574 <_vfprintf_r+0xf94>
 8007566:	9a04      	ldr	r2, [sp, #16]
 8007568:	9908      	ldr	r1, [sp, #32]
 800756a:	2b00      	cmp	r3, #0
 800756c:	440a      	add	r2, r1
 800756e:	dc05      	bgt.n	800757c <_vfprintf_r+0xf9c>
 8007570:	f1c3 0301 	rsb	r3, r3, #1
 8007574:	4413      	add	r3, r2
 8007576:	e002      	b.n	800757e <_vfprintf_r+0xf9e>
 8007578:	2301      	movs	r3, #1
 800757a:	e002      	b.n	8007582 <_vfprintf_r+0xfa2>
 800757c:	4613      	mov	r3, r2
 800757e:	2267      	movs	r2, #103	; 0x67
 8007580:	9202      	str	r2, [sp, #8]
 8007582:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007584:	4699      	mov	r9, r3
 8007586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007588:	b113      	cbz	r3, 8007590 <_vfprintf_r+0xfb0>
 800758a:	232d      	movs	r3, #45	; 0x2d
 800758c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8007590:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007592:	2600      	movs	r6, #0
 8007594:	f7ff bb4e 	b.w	8006c34 <_vfprintf_r+0x654>
 8007598:	2200      	movs	r2, #0
 800759a:	2300      	movs	r3, #0
 800759c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075a0:	f7f9 fa98 	bl	8000ad4 <__aeabi_dcmplt>
 80075a4:	b110      	cbz	r0, 80075ac <_vfprintf_r+0xfcc>
 80075a6:	232d      	movs	r3, #45	; 0x2d
 80075a8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80075ac:	4b07      	ldr	r3, [pc, #28]	; (80075cc <_vfprintf_r+0xfec>)
 80075ae:	4a08      	ldr	r2, [pc, #32]	; (80075d0 <_vfprintf_r+0xff0>)
 80075b0:	e6e2      	b.n	8007378 <_vfprintf_r+0xd98>
 80075b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075b4:	1a1b      	subs	r3, r3, r0
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	e75e      	b.n	8007478 <_vfprintf_r+0xe98>
 80075ba:	ea56 0207 	orrs.w	r2, r6, r7
 80075be:	f47f aaac 	bne.w	8006b1a <_vfprintf_r+0x53a>
 80075c2:	f7ff bab1 	b.w	8006b28 <_vfprintf_r+0x548>
 80075c6:	b03d      	add	sp, #244	; 0xf4
 80075c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075cc:	0800a16a 	.word	0x0800a16a
 80075d0:	0800a16e 	.word	0x0800a16e

080075d4 <__sbprintf>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	460c      	mov	r4, r1
 80075d8:	8989      	ldrh	r1, [r1, #12]
 80075da:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80075de:	f021 0102 	bic.w	r1, r1, #2
 80075e2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80075e6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80075e8:	9119      	str	r1, [sp, #100]	; 0x64
 80075ea:	89e1      	ldrh	r1, [r4, #14]
 80075ec:	f8ad 100e 	strh.w	r1, [sp, #14]
 80075f0:	6a21      	ldr	r1, [r4, #32]
 80075f2:	9108      	str	r1, [sp, #32]
 80075f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80075f6:	910a      	str	r1, [sp, #40]	; 0x28
 80075f8:	a91a      	add	r1, sp, #104	; 0x68
 80075fa:	9100      	str	r1, [sp, #0]
 80075fc:	9104      	str	r1, [sp, #16]
 80075fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007602:	9102      	str	r1, [sp, #8]
 8007604:	9105      	str	r1, [sp, #20]
 8007606:	2100      	movs	r1, #0
 8007608:	9106      	str	r1, [sp, #24]
 800760a:	4669      	mov	r1, sp
 800760c:	4606      	mov	r6, r0
 800760e:	f7fe ffe7 	bl	80065e0 <_vfprintf_r>
 8007612:	1e05      	subs	r5, r0, #0
 8007614:	db07      	blt.n	8007626 <__sbprintf+0x52>
 8007616:	4669      	mov	r1, sp
 8007618:	4630      	mov	r0, r6
 800761a:	f000 ff41 	bl	80084a0 <_fflush_r>
 800761e:	2800      	cmp	r0, #0
 8007620:	bf18      	it	ne
 8007622:	f04f 35ff 	movne.w	r5, #4294967295
 8007626:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800762a:	065b      	lsls	r3, r3, #25
 800762c:	bf48      	it	mi
 800762e:	89a3      	ldrhmi	r3, [r4, #12]
 8007630:	4628      	mov	r0, r5
 8007632:	bf44      	itt	mi
 8007634:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8007638:	81a3      	strhmi	r3, [r4, #12]
 800763a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800763e:	bd70      	pop	{r4, r5, r6, pc}

08007640 <__swsetup_r>:
 8007640:	4b32      	ldr	r3, [pc, #200]	; (800770c <__swsetup_r+0xcc>)
 8007642:	b570      	push	{r4, r5, r6, lr}
 8007644:	681d      	ldr	r5, [r3, #0]
 8007646:	4606      	mov	r6, r0
 8007648:	460c      	mov	r4, r1
 800764a:	b125      	cbz	r5, 8007656 <__swsetup_r+0x16>
 800764c:	69ab      	ldr	r3, [r5, #24]
 800764e:	b913      	cbnz	r3, 8007656 <__swsetup_r+0x16>
 8007650:	4628      	mov	r0, r5
 8007652:	f000 ff8f 	bl	8008574 <__sinit>
 8007656:	4b2e      	ldr	r3, [pc, #184]	; (8007710 <__swsetup_r+0xd0>)
 8007658:	429c      	cmp	r4, r3
 800765a:	d101      	bne.n	8007660 <__swsetup_r+0x20>
 800765c:	686c      	ldr	r4, [r5, #4]
 800765e:	e008      	b.n	8007672 <__swsetup_r+0x32>
 8007660:	4b2c      	ldr	r3, [pc, #176]	; (8007714 <__swsetup_r+0xd4>)
 8007662:	429c      	cmp	r4, r3
 8007664:	d101      	bne.n	800766a <__swsetup_r+0x2a>
 8007666:	68ac      	ldr	r4, [r5, #8]
 8007668:	e003      	b.n	8007672 <__swsetup_r+0x32>
 800766a:	4b2b      	ldr	r3, [pc, #172]	; (8007718 <__swsetup_r+0xd8>)
 800766c:	429c      	cmp	r4, r3
 800766e:	bf08      	it	eq
 8007670:	68ec      	ldreq	r4, [r5, #12]
 8007672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007676:	b29a      	uxth	r2, r3
 8007678:	0715      	lsls	r5, r2, #28
 800767a:	d41d      	bmi.n	80076b8 <__swsetup_r+0x78>
 800767c:	06d0      	lsls	r0, r2, #27
 800767e:	d402      	bmi.n	8007686 <__swsetup_r+0x46>
 8007680:	2209      	movs	r2, #9
 8007682:	6032      	str	r2, [r6, #0]
 8007684:	e03a      	b.n	80076fc <__swsetup_r+0xbc>
 8007686:	0751      	lsls	r1, r2, #29
 8007688:	d512      	bpl.n	80076b0 <__swsetup_r+0x70>
 800768a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800768c:	b141      	cbz	r1, 80076a0 <__swsetup_r+0x60>
 800768e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007692:	4299      	cmp	r1, r3
 8007694:	d002      	beq.n	800769c <__swsetup_r+0x5c>
 8007696:	4630      	mov	r0, r6
 8007698:	f001 f834 	bl	8008704 <_free_r>
 800769c:	2300      	movs	r3, #0
 800769e:	6363      	str	r3, [r4, #52]	; 0x34
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	2300      	movs	r3, #0
 80076aa:	6063      	str	r3, [r4, #4]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f043 0308 	orr.w	r3, r3, #8
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	b94b      	cbnz	r3, 80076d0 <__swsetup_r+0x90>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c6:	d003      	beq.n	80076d0 <__swsetup_r+0x90>
 80076c8:	4621      	mov	r1, r4
 80076ca:	4630      	mov	r0, r6
 80076cc:	f001 fa7a 	bl	8008bc4 <__smakebuf_r>
 80076d0:	89a2      	ldrh	r2, [r4, #12]
 80076d2:	f012 0301 	ands.w	r3, r2, #1
 80076d6:	d005      	beq.n	80076e4 <__swsetup_r+0xa4>
 80076d8:	2300      	movs	r3, #0
 80076da:	60a3      	str	r3, [r4, #8]
 80076dc:	6963      	ldr	r3, [r4, #20]
 80076de:	425b      	negs	r3, r3
 80076e0:	61a3      	str	r3, [r4, #24]
 80076e2:	e003      	b.n	80076ec <__swsetup_r+0xac>
 80076e4:	0792      	lsls	r2, r2, #30
 80076e6:	bf58      	it	pl
 80076e8:	6963      	ldrpl	r3, [r4, #20]
 80076ea:	60a3      	str	r3, [r4, #8]
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	b95b      	cbnz	r3, 8007708 <__swsetup_r+0xc8>
 80076f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f4:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80076f8:	b280      	uxth	r0, r0
 80076fa:	b130      	cbz	r0, 800770a <__swsetup_r+0xca>
 80076fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007700:	81a3      	strh	r3, [r4, #12]
 8007702:	f04f 30ff 	mov.w	r0, #4294967295
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	2000      	movs	r0, #0
 800770a:	bd70      	pop	{r4, r5, r6, pc}
 800770c:	20000508 	.word	0x20000508
 8007710:	0800a1dc 	.word	0x0800a1dc
 8007714:	0800a1fc 	.word	0x0800a1fc
 8007718:	0800a21c 	.word	0x0800a21c

0800771c <quorem>:
 800771c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007720:	6903      	ldr	r3, [r0, #16]
 8007722:	690c      	ldr	r4, [r1, #16]
 8007724:	429c      	cmp	r4, r3
 8007726:	4680      	mov	r8, r0
 8007728:	f300 8083 	bgt.w	8007832 <quorem+0x116>
 800772c:	3c01      	subs	r4, #1
 800772e:	f101 0714 	add.w	r7, r1, #20
 8007732:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007736:	f100 0614 	add.w	r6, r0, #20
 800773a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800773e:	eb06 030e 	add.w	r3, r6, lr
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	3501      	adds	r5, #1
 8007746:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800774a:	fbb3 f5f5 	udiv	r5, r3, r5
 800774e:	eb07 090e 	add.w	r9, r7, lr
 8007752:	2d00      	cmp	r5, #0
 8007754:	d039      	beq.n	80077ca <quorem+0xae>
 8007756:	f04f 0a00 	mov.w	sl, #0
 800775a:	4638      	mov	r0, r7
 800775c:	46b4      	mov	ip, r6
 800775e:	46d3      	mov	fp, sl
 8007760:	f850 2b04 	ldr.w	r2, [r0], #4
 8007764:	b293      	uxth	r3, r2
 8007766:	fb05 a303 	mla	r3, r5, r3, sl
 800776a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800776e:	b29b      	uxth	r3, r3
 8007770:	ebc3 030b 	rsb	r3, r3, fp
 8007774:	0c12      	lsrs	r2, r2, #16
 8007776:	f8bc b000 	ldrh.w	fp, [ip]
 800777a:	fb05 a202 	mla	r2, r5, r2, sl
 800777e:	fa13 f38b 	uxtah	r3, r3, fp
 8007782:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007786:	fa1f fb82 	uxth.w	fp, r2
 800778a:	f8dc 2000 	ldr.w	r2, [ip]
 800778e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007796:	b29b      	uxth	r3, r3
 8007798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800779c:	4581      	cmp	r9, r0
 800779e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80077a2:	f84c 3b04 	str.w	r3, [ip], #4
 80077a6:	d2db      	bcs.n	8007760 <quorem+0x44>
 80077a8:	f856 300e 	ldr.w	r3, [r6, lr]
 80077ac:	b96b      	cbnz	r3, 80077ca <quorem+0xae>
 80077ae:	9b01      	ldr	r3, [sp, #4]
 80077b0:	3b04      	subs	r3, #4
 80077b2:	429e      	cmp	r6, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	d302      	bcc.n	80077be <quorem+0xa2>
 80077b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80077bc:	e005      	b.n	80077ca <quorem+0xae>
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	3b04      	subs	r3, #4
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	d1f8      	bne.n	80077b8 <quorem+0x9c>
 80077c6:	3c01      	subs	r4, #1
 80077c8:	e7f3      	b.n	80077b2 <quorem+0x96>
 80077ca:	4640      	mov	r0, r8
 80077cc:	f001 fc5f 	bl	800908e <__mcmp>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	db2c      	blt.n	800782e <quorem+0x112>
 80077d4:	3501      	adds	r5, #1
 80077d6:	4630      	mov	r0, r6
 80077d8:	f04f 0e00 	mov.w	lr, #0
 80077dc:	f857 1b04 	ldr.w	r1, [r7], #4
 80077e0:	f8d0 c000 	ldr.w	ip, [r0]
 80077e4:	b28a      	uxth	r2, r1
 80077e6:	ebc2 030e 	rsb	r3, r2, lr
 80077ea:	0c09      	lsrs	r1, r1, #16
 80077ec:	fa13 f38c 	uxtah	r3, r3, ip
 80077f0:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 80077f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077fe:	45b9      	cmp	r9, r7
 8007800:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007804:	f840 3b04 	str.w	r3, [r0], #4
 8007808:	d2e8      	bcs.n	80077dc <quorem+0xc0>
 800780a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800780e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007812:	b962      	cbnz	r2, 800782e <quorem+0x112>
 8007814:	3b04      	subs	r3, #4
 8007816:	429e      	cmp	r6, r3
 8007818:	461a      	mov	r2, r3
 800781a:	d302      	bcc.n	8007822 <quorem+0x106>
 800781c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007820:	e005      	b.n	800782e <quorem+0x112>
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	3b04      	subs	r3, #4
 8007826:	2a00      	cmp	r2, #0
 8007828:	d1f8      	bne.n	800781c <quorem+0x100>
 800782a:	3c01      	subs	r4, #1
 800782c:	e7f3      	b.n	8007816 <quorem+0xfa>
 800782e:	4628      	mov	r0, r5
 8007830:	e000      	b.n	8007834 <quorem+0x118>
 8007832:	2000      	movs	r0, #0
 8007834:	b003      	add	sp, #12
 8007836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783a:	0000      	movs	r0, r0
 800783c:	0000      	movs	r0, r0
	...

08007840 <_dtoa_r>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	ec59 8b10 	vmov	r8, r9, d0
 8007848:	b097      	sub	sp, #92	; 0x5c
 800784a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800784c:	9106      	str	r1, [sp, #24]
 800784e:	4682      	mov	sl, r0
 8007850:	9209      	str	r2, [sp, #36]	; 0x24
 8007852:	9310      	str	r3, [sp, #64]	; 0x40
 8007854:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8007856:	e9cd 8900 	strd	r8, r9, [sp]
 800785a:	b945      	cbnz	r5, 800786e <_dtoa_r+0x2e>
 800785c:	2010      	movs	r0, #16
 800785e:	f7fd fbfb 	bl	8005058 <malloc>
 8007862:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8007866:	6045      	str	r5, [r0, #4]
 8007868:	6085      	str	r5, [r0, #8]
 800786a:	6005      	str	r5, [r0, #0]
 800786c:	60c5      	str	r5, [r0, #12]
 800786e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8007872:	6819      	ldr	r1, [r3, #0]
 8007874:	b159      	cbz	r1, 800788e <_dtoa_r+0x4e>
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	604a      	str	r2, [r1, #4]
 800787a:	2301      	movs	r3, #1
 800787c:	4093      	lsls	r3, r2
 800787e:	608b      	str	r3, [r1, #8]
 8007880:	4650      	mov	r0, sl
 8007882:	f001 fa2b 	bl	8008cdc <_Bfree>
 8007886:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	4a9f      	ldr	r2, [pc, #636]	; (8007b10 <_dtoa_r+0x2d0>)
 8007892:	2b00      	cmp	r3, #0
 8007894:	bfbf      	itttt	lt
 8007896:	2301      	movlt	r3, #1
 8007898:	6023      	strlt	r3, [r4, #0]
 800789a:	9b01      	ldrlt	r3, [sp, #4]
 800789c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078a0:	bfb8      	it	lt
 80078a2:	9301      	strlt	r3, [sp, #4]
 80078a4:	9f01      	ldr	r7, [sp, #4]
 80078a6:	bfa4      	itt	ge
 80078a8:	2300      	movge	r3, #0
 80078aa:	6023      	strge	r3, [r4, #0]
 80078ac:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 80078b0:	0d1b      	lsrs	r3, r3, #20
 80078b2:	051b      	lsls	r3, r3, #20
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d11d      	bne.n	80078f4 <_dtoa_r+0xb4>
 80078b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	9b00      	ldr	r3, [sp, #0]
 80078c2:	b943      	cbnz	r3, 80078d6 <_dtoa_r+0x96>
 80078c4:	4a93      	ldr	r2, [pc, #588]	; (8007b14 <_dtoa_r+0x2d4>)
 80078c6:	4b94      	ldr	r3, [pc, #592]	; (8007b18 <_dtoa_r+0x2d8>)
 80078c8:	f3c7 0013 	ubfx	r0, r7, #0, #20
 80078cc:	2800      	cmp	r0, #0
 80078ce:	bf14      	ite	ne
 80078d0:	4618      	movne	r0, r3
 80078d2:	4610      	moveq	r0, r2
 80078d4:	e000      	b.n	80078d8 <_dtoa_r+0x98>
 80078d6:	4890      	ldr	r0, [pc, #576]	; (8007b18 <_dtoa_r+0x2d8>)
 80078d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 854a 	beq.w	8008374 <_dtoa_r+0xb34>
 80078e0:	78c3      	ldrb	r3, [r0, #3]
 80078e2:	b113      	cbz	r3, 80078ea <_dtoa_r+0xaa>
 80078e4:	f100 0308 	add.w	r3, r0, #8
 80078e8:	e000      	b.n	80078ec <_dtoa_r+0xac>
 80078ea:	1cc3      	adds	r3, r0, #3
 80078ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	f000 bd40 	b.w	8008374 <_dtoa_r+0xb34>
 80078f4:	e9dd 4500 	ldrd	r4, r5, [sp]
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	f7f9 f8de 	bl	8000ac0 <__aeabi_dcmpeq>
 8007904:	4680      	mov	r8, r0
 8007906:	b158      	cbz	r0, 8007920 <_dtoa_r+0xe0>
 8007908:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800790a:	2301      	movs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8522 	beq.w	800835a <_dtoa_r+0xb1a>
 8007916:	4881      	ldr	r0, [pc, #516]	; (8007b1c <_dtoa_r+0x2dc>)
 8007918:	6018      	str	r0, [r3, #0]
 800791a:	3801      	subs	r0, #1
 800791c:	f000 bd2a 	b.w	8008374 <_dtoa_r+0xb34>
 8007920:	aa14      	add	r2, sp, #80	; 0x50
 8007922:	a915      	add	r1, sp, #84	; 0x54
 8007924:	ec45 4b10 	vmov	d0, r4, r5
 8007928:	4650      	mov	r0, sl
 800792a:	f001 fc2b 	bl	8009184 <__d2b>
 800792e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007932:	9002      	str	r0, [sp, #8]
 8007934:	b15e      	cbz	r6, 800794e <_dtoa_r+0x10e>
 8007936:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800793a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800793e:	4620      	mov	r0, r4
 8007940:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007944:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8007948:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800794c:	e01d      	b.n	800798a <_dtoa_r+0x14a>
 800794e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007950:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007952:	441e      	add	r6, r3
 8007954:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8007958:	2b20      	cmp	r3, #32
 800795a:	dd0a      	ble.n	8007972 <_dtoa_r+0x132>
 800795c:	9a00      	ldr	r2, [sp, #0]
 800795e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8007962:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007966:	fa22 f000 	lsr.w	r0, r2, r0
 800796a:	fa07 f303 	lsl.w	r3, r7, r3
 800796e:	4318      	orrs	r0, r3
 8007970:	e004      	b.n	800797c <_dtoa_r+0x13c>
 8007972:	f1c3 0020 	rsb	r0, r3, #32
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	fa03 f000 	lsl.w	r0, r3, r0
 800797c:	f7f8 fdc2 	bl	8000504 <__aeabi_ui2d>
 8007980:	2301      	movs	r3, #1
 8007982:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007986:	3e01      	subs	r6, #1
 8007988:	9311      	str	r3, [sp, #68]	; 0x44
 800798a:	2200      	movs	r2, #0
 800798c:	4b64      	ldr	r3, [pc, #400]	; (8007b20 <_dtoa_r+0x2e0>)
 800798e:	f7f8 fc7b 	bl	8000288 <__aeabi_dsub>
 8007992:	a359      	add	r3, pc, #356	; (adr r3, 8007af8 <_dtoa_r+0x2b8>)
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f7f8 fe2a 	bl	80005f0 <__aeabi_dmul>
 800799c:	a358      	add	r3, pc, #352	; (adr r3, 8007b00 <_dtoa_r+0x2c0>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fc73 	bl	800028c <__adddf3>
 80079a6:	4604      	mov	r4, r0
 80079a8:	4630      	mov	r0, r6
 80079aa:	460d      	mov	r5, r1
 80079ac:	f7f8 fdba 	bl	8000524 <__aeabi_i2d>
 80079b0:	a355      	add	r3, pc, #340	; (adr r3, 8007b08 <_dtoa_r+0x2c8>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f7f8 fe1b 	bl	80005f0 <__aeabi_dmul>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	4620      	mov	r0, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f8 fc63 	bl	800028c <__adddf3>
 80079c6:	4604      	mov	r4, r0
 80079c8:	460d      	mov	r5, r1
 80079ca:	f7f9 f8c1 	bl	8000b50 <__aeabi_d2iz>
 80079ce:	2200      	movs	r2, #0
 80079d0:	4683      	mov	fp, r0
 80079d2:	2300      	movs	r3, #0
 80079d4:	4620      	mov	r0, r4
 80079d6:	4629      	mov	r1, r5
 80079d8:	f7f9 f87c 	bl	8000ad4 <__aeabi_dcmplt>
 80079dc:	b158      	cbz	r0, 80079f6 <_dtoa_r+0x1b6>
 80079de:	4658      	mov	r0, fp
 80079e0:	f7f8 fda0 	bl	8000524 <__aeabi_i2d>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f9 f868 	bl	8000ac0 <__aeabi_dcmpeq>
 80079f0:	b908      	cbnz	r0, 80079f6 <_dtoa_r+0x1b6>
 80079f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079f6:	f1bb 0f16 	cmp.w	fp, #22
 80079fa:	d80d      	bhi.n	8007a18 <_dtoa_r+0x1d8>
 80079fc:	4949      	ldr	r1, [pc, #292]	; (8007b24 <_dtoa_r+0x2e4>)
 80079fe:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a0a:	f7f9 f881 	bl	8000b10 <__aeabi_dcmpgt>
 8007a0e:	b130      	cbz	r0, 8007a1e <_dtoa_r+0x1de>
 8007a10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a14:	2300      	movs	r3, #0
 8007a16:	e000      	b.n	8007a1a <_dtoa_r+0x1da>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a1c:	e000      	b.n	8007a20 <_dtoa_r+0x1e0>
 8007a1e:	900d      	str	r0, [sp, #52]	; 0x34
 8007a20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a22:	1b9e      	subs	r6, r3, r6
 8007a24:	1e73      	subs	r3, r6, #1
 8007a26:	9305      	str	r3, [sp, #20]
 8007a28:	bf43      	ittte	mi
 8007a2a:	f1c3 0900 	rsbmi	r9, r3, #0
 8007a2e:	2300      	movmi	r3, #0
 8007a30:	9305      	strmi	r3, [sp, #20]
 8007a32:	f04f 0900 	movpl.w	r9, #0
 8007a36:	f1bb 0f00 	cmp.w	fp, #0
 8007a3a:	db07      	blt.n	8007a4c <_dtoa_r+0x20c>
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8007a42:	445b      	add	r3, fp
 8007a44:	9305      	str	r3, [sp, #20]
 8007a46:	2300      	movs	r3, #0
 8007a48:	9307      	str	r3, [sp, #28]
 8007a4a:	e006      	b.n	8007a5a <_dtoa_r+0x21a>
 8007a4c:	f1cb 0300 	rsb	r3, fp, #0
 8007a50:	9307      	str	r3, [sp, #28]
 8007a52:	2300      	movs	r3, #0
 8007a54:	ebcb 0909 	rsb	r9, fp, r9
 8007a58:	930c      	str	r3, [sp, #48]	; 0x30
 8007a5a:	9b06      	ldr	r3, [sp, #24]
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d827      	bhi.n	8007ab0 <_dtoa_r+0x270>
 8007a60:	2b05      	cmp	r3, #5
 8007a62:	bfc4      	itt	gt
 8007a64:	3b04      	subgt	r3, #4
 8007a66:	9306      	strgt	r3, [sp, #24]
 8007a68:	9b06      	ldr	r3, [sp, #24]
 8007a6a:	f1a3 0302 	sub.w	r3, r3, #2
 8007a6e:	bfcc      	ite	gt
 8007a70:	2500      	movgt	r5, #0
 8007a72:	2501      	movle	r5, #1
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d820      	bhi.n	8007aba <_dtoa_r+0x27a>
 8007a78:	e8df f003 	tbb	[pc, r3]
 8007a7c:	04020e06 	.word	0x04020e06
 8007a80:	2301      	movs	r3, #1
 8007a82:	e002      	b.n	8007a8a <_dtoa_r+0x24a>
 8007a84:	2301      	movs	r3, #1
 8007a86:	e008      	b.n	8007a9a <_dtoa_r+0x25a>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	9308      	str	r3, [sp, #32]
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd1c      	ble.n	8007acc <_dtoa_r+0x28c>
 8007a92:	9303      	str	r3, [sp, #12]
 8007a94:	4698      	mov	r8, r3
 8007a96:	e01e      	b.n	8007ad6 <_dtoa_r+0x296>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9308      	str	r3, [sp, #32]
 8007a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9e:	445b      	add	r3, fp
 8007aa0:	f103 0801 	add.w	r8, r3, #1
 8007aa4:	9303      	str	r3, [sp, #12]
 8007aa6:	4643      	mov	r3, r8
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bfb8      	it	lt
 8007aac:	2301      	movlt	r3, #1
 8007aae:	e012      	b.n	8007ad6 <_dtoa_r+0x296>
 8007ab0:	2501      	movs	r5, #1
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9306      	str	r3, [sp, #24]
 8007ab6:	9508      	str	r5, [sp, #32]
 8007ab8:	e001      	b.n	8007abe <_dtoa_r+0x27e>
 8007aba:	2301      	movs	r3, #1
 8007abc:	9308      	str	r3, [sp, #32]
 8007abe:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac2:	9303      	str	r3, [sp, #12]
 8007ac4:	4698      	mov	r8, r3
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2312      	movs	r3, #18
 8007aca:	e003      	b.n	8007ad4 <_dtoa_r+0x294>
 8007acc:	2301      	movs	r3, #1
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	4698      	mov	r8, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8007ada:	2200      	movs	r2, #0
 8007adc:	6062      	str	r2, [r4, #4]
 8007ade:	2104      	movs	r1, #4
 8007ae0:	f101 0214 	add.w	r2, r1, #20
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d81f      	bhi.n	8007b28 <_dtoa_r+0x2e8>
 8007ae8:	6862      	ldr	r2, [r4, #4]
 8007aea:	3201      	adds	r2, #1
 8007aec:	6062      	str	r2, [r4, #4]
 8007aee:	0049      	lsls	r1, r1, #1
 8007af0:	e7f6      	b.n	8007ae0 <_dtoa_r+0x2a0>
 8007af2:	bf00      	nop
 8007af4:	f3af 8000 	nop.w
 8007af8:	636f4361 	.word	0x636f4361
 8007afc:	3fd287a7 	.word	0x3fd287a7
 8007b00:	8b60c8b3 	.word	0x8b60c8b3
 8007b04:	3fc68a28 	.word	0x3fc68a28
 8007b08:	509f79fb 	.word	0x509f79fb
 8007b0c:	3fd34413 	.word	0x3fd34413
 8007b10:	7ff00000 	.word	0x7ff00000
 8007b14:	0800a1ce 	.word	0x0800a1ce
 8007b18:	0800a1d7 	.word	0x0800a1d7
 8007b1c:	0800a19d 	.word	0x0800a19d
 8007b20:	3ff80000 	.word	0x3ff80000
 8007b24:	0800a248 	.word	0x0800a248
 8007b28:	6861      	ldr	r1, [r4, #4]
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	f001 f8a1 	bl	8008c72 <_Balloc>
 8007b30:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8007b34:	6020      	str	r0, [r4, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	f1b8 0f0e 	cmp.w	r8, #14
 8007b3e:	f200 815d 	bhi.w	8007dfc <_dtoa_r+0x5bc>
 8007b42:	2d00      	cmp	r5, #0
 8007b44:	f000 815a 	beq.w	8007dfc <_dtoa_r+0x5bc>
 8007b48:	ed9d 7b00 	vldr	d7, [sp]
 8007b4c:	f1bb 0f00 	cmp.w	fp, #0
 8007b50:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007b54:	dd31      	ble.n	8007bba <_dtoa_r+0x37a>
 8007b56:	4aa0      	ldr	r2, [pc, #640]	; (8007dd8 <_dtoa_r+0x598>)
 8007b58:	f00b 030f 	and.w	r3, fp, #15
 8007b5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b60:	ed93 7b00 	vldr	d7, [r3]
 8007b64:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007b68:	06e2      	lsls	r2, r4, #27
 8007b6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007b6e:	d50c      	bpl.n	8007b8a <_dtoa_r+0x34a>
 8007b70:	4b9a      	ldr	r3, [pc, #616]	; (8007ddc <_dtoa_r+0x59c>)
 8007b72:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b7a:	f7f8 fe63 	bl	8000844 <__aeabi_ddiv>
 8007b7e:	f004 040f 	and.w	r4, r4, #15
 8007b82:	e9cd 0100 	strd	r0, r1, [sp]
 8007b86:	2603      	movs	r6, #3
 8007b88:	e000      	b.n	8007b8c <_dtoa_r+0x34c>
 8007b8a:	2602      	movs	r6, #2
 8007b8c:	4d93      	ldr	r5, [pc, #588]	; (8007ddc <_dtoa_r+0x59c>)
 8007b8e:	b16c      	cbz	r4, 8007bac <_dtoa_r+0x36c>
 8007b90:	07e3      	lsls	r3, r4, #31
 8007b92:	d508      	bpl.n	8007ba6 <_dtoa_r+0x366>
 8007b94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b9c:	f7f8 fd28 	bl	80005f0 <__aeabi_dmul>
 8007ba0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ba4:	3601      	adds	r6, #1
 8007ba6:	1064      	asrs	r4, r4, #1
 8007ba8:	3508      	adds	r5, #8
 8007baa:	e7f0      	b.n	8007b8e <_dtoa_r+0x34e>
 8007bac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb4:	f7f8 fe46 	bl	8000844 <__aeabi_ddiv>
 8007bb8:	e020      	b.n	8007bfc <_dtoa_r+0x3bc>
 8007bba:	f1cb 0400 	rsb	r4, fp, #0
 8007bbe:	b304      	cbz	r4, 8007c02 <_dtoa_r+0x3c2>
 8007bc0:	4b85      	ldr	r3, [pc, #532]	; (8007dd8 <_dtoa_r+0x598>)
 8007bc2:	4d86      	ldr	r5, [pc, #536]	; (8007ddc <_dtoa_r+0x59c>)
 8007bc4:	f004 020f 	and.w	r2, r4, #15
 8007bc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007bd4:	f7f8 fd0c 	bl	80005f0 <__aeabi_dmul>
 8007bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8007bdc:	1124      	asrs	r4, r4, #4
 8007bde:	2300      	movs	r3, #0
 8007be0:	2602      	movs	r6, #2
 8007be2:	b154      	cbz	r4, 8007bfa <_dtoa_r+0x3ba>
 8007be4:	07e7      	lsls	r7, r4, #31
 8007be6:	d505      	bpl.n	8007bf4 <_dtoa_r+0x3b4>
 8007be8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bec:	f7f8 fd00 	bl	80005f0 <__aeabi_dmul>
 8007bf0:	3601      	adds	r6, #1
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	1064      	asrs	r4, r4, #1
 8007bf6:	3508      	adds	r5, #8
 8007bf8:	e7f3      	b.n	8007be2 <_dtoa_r+0x3a2>
 8007bfa:	b11b      	cbz	r3, 8007c04 <_dtoa_r+0x3c4>
 8007bfc:	e9cd 0100 	strd	r0, r1, [sp]
 8007c00:	e000      	b.n	8007c04 <_dtoa_r+0x3c4>
 8007c02:	2602      	movs	r6, #2
 8007c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c06:	b1eb      	cbz	r3, 8007c44 <_dtoa_r+0x404>
 8007c08:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4b74      	ldr	r3, [pc, #464]	; (8007de0 <_dtoa_r+0x5a0>)
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 ff5e 	bl	8000ad4 <__aeabi_dcmplt>
 8007c18:	b1a0      	cbz	r0, 8007c44 <_dtoa_r+0x404>
 8007c1a:	f1b8 0f00 	cmp.w	r8, #0
 8007c1e:	d011      	beq.n	8007c44 <_dtoa_r+0x404>
 8007c20:	9b03      	ldr	r3, [sp, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f340 80e6 	ble.w	8007df4 <_dtoa_r+0x5b4>
 8007c28:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007c2c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c2e:	2200      	movs	r2, #0
 8007c30:	4b6c      	ldr	r3, [pc, #432]	; (8007de4 <_dtoa_r+0x5a4>)
 8007c32:	4620      	mov	r0, r4
 8007c34:	4629      	mov	r1, r5
 8007c36:	f7f8 fcdb 	bl	80005f0 <__aeabi_dmul>
 8007c3a:	3601      	adds	r6, #1
 8007c3c:	e9cd 0100 	strd	r0, r1, [sp]
 8007c40:	9f03      	ldr	r7, [sp, #12]
 8007c42:	e002      	b.n	8007c4a <_dtoa_r+0x40a>
 8007c44:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007c48:	4647      	mov	r7, r8
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7f8 fc6a 	bl	8000524 <__aeabi_i2d>
 8007c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c54:	f7f8 fccc 	bl	80005f0 <__aeabi_dmul>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4b63      	ldr	r3, [pc, #396]	; (8007de8 <_dtoa_r+0x5a8>)
 8007c5c:	f7f8 fb16 	bl	800028c <__adddf3>
 8007c60:	4604      	mov	r4, r0
 8007c62:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007c66:	b9cf      	cbnz	r7, 8007c9c <_dtoa_r+0x45c>
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4b60      	ldr	r3, [pc, #384]	; (8007dec <_dtoa_r+0x5ac>)
 8007c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c70:	f7f8 fb0a 	bl	8000288 <__aeabi_dsub>
 8007c74:	4622      	mov	r2, r4
 8007c76:	462b      	mov	r3, r5
 8007c78:	e9cd 0100 	strd	r0, r1, [sp]
 8007c7c:	f7f8 ff48 	bl	8000b10 <__aeabi_dcmpgt>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f040 8241 	bne.w	8008108 <_dtoa_r+0x8c8>
 8007c86:	4622      	mov	r2, r4
 8007c88:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c90:	f7f8 ff20 	bl	8000ad4 <__aeabi_dcmplt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f040 822e 	bne.w	80080f6 <_dtoa_r+0x8b6>
 8007c9a:	e0ab      	b.n	8007df4 <_dtoa_r+0x5b4>
 8007c9c:	9a08      	ldr	r2, [sp, #32]
 8007c9e:	4b4e      	ldr	r3, [pc, #312]	; (8007dd8 <_dtoa_r+0x598>)
 8007ca0:	1e79      	subs	r1, r7, #1
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d04a      	beq.n	8007d3c <_dtoa_r+0x4fc>
 8007ca6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	2000      	movs	r0, #0
 8007cb0:	494f      	ldr	r1, [pc, #316]	; (8007df0 <_dtoa_r+0x5b0>)
 8007cb2:	f7f8 fdc7 	bl	8000844 <__aeabi_ddiv>
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	f7f8 fae5 	bl	8000288 <__aeabi_dsub>
 8007cbe:	9c04      	ldr	r4, [sp, #16]
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460e      	mov	r6, r1
 8007cc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cc8:	f7f8 ff42 	bl	8000b50 <__aeabi_d2iz>
 8007ccc:	9012      	str	r0, [sp, #72]	; 0x48
 8007cce:	f7f8 fc29 	bl	8000524 <__aeabi_i2d>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cda:	f7f8 fad5 	bl	8000288 <__aeabi_dsub>
 8007cde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ce0:	3330      	adds	r3, #48	; 0x30
 8007ce2:	f804 3b01 	strb.w	r3, [r4], #1
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	4633      	mov	r3, r6
 8007cea:	e9cd 0100 	strd	r0, r1, [sp]
 8007cee:	f7f8 fef1 	bl	8000ad4 <__aeabi_dcmplt>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f040 8321 	bne.w	800833a <_dtoa_r+0xafa>
 8007cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	4938      	ldr	r1, [pc, #224]	; (8007de0 <_dtoa_r+0x5a0>)
 8007d00:	f7f8 fac2 	bl	8000288 <__aeabi_dsub>
 8007d04:	462a      	mov	r2, r5
 8007d06:	4633      	mov	r3, r6
 8007d08:	f7f8 fee4 	bl	8000ad4 <__aeabi_dcmplt>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	f040 80d2 	bne.w	8007eb6 <_dtoa_r+0x676>
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	1ae3      	subs	r3, r4, r3
 8007d16:	42bb      	cmp	r3, r7
 8007d18:	da6c      	bge.n	8007df4 <_dtoa_r+0x5b4>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <_dtoa_r+0x5a4>)
 8007d1e:	4628      	mov	r0, r5
 8007d20:	4631      	mov	r1, r6
 8007d22:	f7f8 fc65 	bl	80005f0 <__aeabi_dmul>
 8007d26:	2200      	movs	r2, #0
 8007d28:	4605      	mov	r5, r0
 8007d2a:	460e      	mov	r6, r1
 8007d2c:	4b2d      	ldr	r3, [pc, #180]	; (8007de4 <_dtoa_r+0x5a4>)
 8007d2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d32:	f7f8 fc5d 	bl	80005f0 <__aeabi_dmul>
 8007d36:	e9cd 0100 	strd	r0, r1, [sp]
 8007d3a:	e7c3      	b.n	8007cc4 <_dtoa_r+0x484>
 8007d3c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007d40:	4622      	mov	r2, r4
 8007d42:	462b      	mov	r3, r5
 8007d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d48:	f7f8 fc52 	bl	80005f0 <__aeabi_dmul>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007d52:	19dc      	adds	r4, r3, r7
 8007d54:	461d      	mov	r5, r3
 8007d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d5a:	f7f8 fef9 	bl	8000b50 <__aeabi_d2iz>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	f7f8 fbe0 	bl	8000524 <__aeabi_i2d>
 8007d64:	3630      	adds	r6, #48	; 0x30
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d6e:	f7f8 fa8b 	bl	8000288 <__aeabi_dsub>
 8007d72:	f805 6b01 	strb.w	r6, [r5], #1
 8007d76:	42ac      	cmp	r4, r5
 8007d78:	e9cd 0100 	strd	r0, r1, [sp]
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	d123      	bne.n	8007dca <_dtoa_r+0x58a>
 8007d82:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <_dtoa_r+0x5b0>)
 8007d84:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007d88:	f7f8 fa80 	bl	800028c <__adddf3>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d94:	f7f8 febc 	bl	8000b10 <__aeabi_dcmpgt>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	f040 808c 	bne.w	8007eb6 <_dtoa_r+0x676>
 8007d9e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007da2:	2000      	movs	r0, #0
 8007da4:	4912      	ldr	r1, [pc, #72]	; (8007df0 <_dtoa_r+0x5b0>)
 8007da6:	f7f8 fa6f 	bl	8000288 <__aeabi_dsub>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db2:	f7f8 fe8f 	bl	8000ad4 <__aeabi_dcmplt>
 8007db6:	b1e8      	cbz	r0, 8007df4 <_dtoa_r+0x5b4>
 8007db8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8007dbc:	2b30      	cmp	r3, #48	; 0x30
 8007dbe:	f104 32ff 	add.w	r2, r4, #4294967295
 8007dc2:	f040 82ba 	bne.w	800833a <_dtoa_r+0xafa>
 8007dc6:	4614      	mov	r4, r2
 8007dc8:	e7f6      	b.n	8007db8 <_dtoa_r+0x578>
 8007dca:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <_dtoa_r+0x5a4>)
 8007dcc:	f7f8 fc10 	bl	80005f0 <__aeabi_dmul>
 8007dd0:	e9cd 0100 	strd	r0, r1, [sp]
 8007dd4:	e7bf      	b.n	8007d56 <_dtoa_r+0x516>
 8007dd6:	bf00      	nop
 8007dd8:	0800a248 	.word	0x0800a248
 8007ddc:	0800a310 	.word	0x0800a310
 8007de0:	3ff00000 	.word	0x3ff00000
 8007de4:	40240000 	.word	0x40240000
 8007de8:	401c0000 	.word	0x401c0000
 8007dec:	40140000 	.word	0x40140000
 8007df0:	3fe00000 	.word	0x3fe00000
 8007df4:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8007df8:	e88d 0018 	stmia.w	sp, {r3, r4}
 8007dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	db7c      	blt.n	8007efc <_dtoa_r+0x6bc>
 8007e02:	f1bb 0f0e 	cmp.w	fp, #14
 8007e06:	dc79      	bgt.n	8007efc <_dtoa_r+0x6bc>
 8007e08:	4b8f      	ldr	r3, [pc, #572]	; (8008048 <_dtoa_r+0x808>)
 8007e0a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e0e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da14      	bge.n	8007e42 <_dtoa_r+0x602>
 8007e18:	f1b8 0f00 	cmp.w	r8, #0
 8007e1c:	dc11      	bgt.n	8007e42 <_dtoa_r+0x602>
 8007e1e:	f040 816c 	bne.w	80080fa <_dtoa_r+0x8ba>
 8007e22:	2200      	movs	r2, #0
 8007e24:	4b89      	ldr	r3, [pc, #548]	; (800804c <_dtoa_r+0x80c>)
 8007e26:	4630      	mov	r0, r6
 8007e28:	4639      	mov	r1, r7
 8007e2a:	f7f8 fbe1 	bl	80005f0 <__aeabi_dmul>
 8007e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e32:	f7f8 fe63 	bl	8000afc <__aeabi_dcmpge>
 8007e36:	4645      	mov	r5, r8
 8007e38:	4646      	mov	r6, r8
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f040 815f 	bne.w	80080fe <_dtoa_r+0x8be>
 8007e40:	e166      	b.n	8008110 <_dtoa_r+0x8d0>
 8007e42:	9c04      	ldr	r4, [sp, #16]
 8007e44:	4632      	mov	r2, r6
 8007e46:	463b      	mov	r3, r7
 8007e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e4c:	f7f8 fcfa 	bl	8000844 <__aeabi_ddiv>
 8007e50:	f7f8 fe7e 	bl	8000b50 <__aeabi_d2iz>
 8007e54:	4605      	mov	r5, r0
 8007e56:	f7f8 fb65 	bl	8000524 <__aeabi_i2d>
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	f7f8 fbc7 	bl	80005f0 <__aeabi_dmul>
 8007e62:	460b      	mov	r3, r1
 8007e64:	4602      	mov	r2, r0
 8007e66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e6a:	f7f8 fa0d 	bl	8000288 <__aeabi_dsub>
 8007e6e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8007e72:	f804 eb01 	strb.w	lr, [r4], #1
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	ebc3 0e04 	rsb	lr, r3, r4
 8007e7c:	45f0      	cmp	r8, lr
 8007e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8007e82:	d12e      	bne.n	8007ee2 <_dtoa_r+0x6a2>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	f7f8 fa00 	bl	800028c <__adddf3>
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	4689      	mov	r9, r1
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4630      	mov	r0, r6
 8007e96:	4639      	mov	r1, r7
 8007e98:	f7f8 fe1c 	bl	8000ad4 <__aeabi_dcmplt>
 8007e9c:	b978      	cbnz	r0, 8007ebe <_dtoa_r+0x67e>
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	f7f8 fe0b 	bl	8000ac0 <__aeabi_dcmpeq>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f000 8247 	beq.w	800833e <_dtoa_r+0xafe>
 8007eb0:	07e9      	lsls	r1, r5, #31
 8007eb2:	d404      	bmi.n	8007ebe <_dtoa_r+0x67e>
 8007eb4:	e243      	b.n	800833e <_dtoa_r+0xafe>
 8007eb6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007eba:	e000      	b.n	8007ebe <_dtoa_r+0x67e>
 8007ebc:	461c      	mov	r4, r3
 8007ebe:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8007ec2:	2a39      	cmp	r2, #57	; 0x39
 8007ec4:	f104 33ff 	add.w	r3, r4, #4294967295
 8007ec8:	d107      	bne.n	8007eda <_dtoa_r+0x69a>
 8007eca:	9a04      	ldr	r2, [sp, #16]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d1f5      	bne.n	8007ebc <_dtoa_r+0x67c>
 8007ed0:	9904      	ldr	r1, [sp, #16]
 8007ed2:	2230      	movs	r2, #48	; 0x30
 8007ed4:	f10b 0b01 	add.w	fp, fp, #1
 8007ed8:	700a      	strb	r2, [r1, #0]
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	3201      	adds	r2, #1
 8007ede:	701a      	strb	r2, [r3, #0]
 8007ee0:	e22d      	b.n	800833e <_dtoa_r+0xafe>
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4b5a      	ldr	r3, [pc, #360]	; (8008050 <_dtoa_r+0x810>)
 8007ee6:	f7f8 fb83 	bl	80005f0 <__aeabi_dmul>
 8007eea:	2200      	movs	r2, #0
 8007eec:	2300      	movs	r3, #0
 8007eee:	e9cd 0100 	strd	r0, r1, [sp]
 8007ef2:	f7f8 fde5 	bl	8000ac0 <__aeabi_dcmpeq>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d0a4      	beq.n	8007e44 <_dtoa_r+0x604>
 8007efa:	e220      	b.n	800833e <_dtoa_r+0xafe>
 8007efc:	9a08      	ldr	r2, [sp, #32]
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	d02d      	beq.n	8007f5e <_dtoa_r+0x71e>
 8007f02:	9a06      	ldr	r2, [sp, #24]
 8007f04:	2a01      	cmp	r2, #1
 8007f06:	dc0a      	bgt.n	8007f1e <_dtoa_r+0x6de>
 8007f08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f0a:	b112      	cbz	r2, 8007f12 <_dtoa_r+0x6d2>
 8007f0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f10:	e002      	b.n	8007f18 <_dtoa_r+0x6d8>
 8007f12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f14:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f18:	9d07      	ldr	r5, [sp, #28]
 8007f1a:	464c      	mov	r4, r9
 8007f1c:	e015      	b.n	8007f4a <_dtoa_r+0x70a>
 8007f1e:	9b07      	ldr	r3, [sp, #28]
 8007f20:	f108 35ff 	add.w	r5, r8, #4294967295
 8007f24:	42ab      	cmp	r3, r5
 8007f26:	bfbf      	itttt	lt
 8007f28:	9b07      	ldrlt	r3, [sp, #28]
 8007f2a:	9507      	strlt	r5, [sp, #28]
 8007f2c:	1aea      	sublt	r2, r5, r3
 8007f2e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007f30:	bfb7      	itett	lt
 8007f32:	189b      	addlt	r3, r3, r2
 8007f34:	1b5d      	subge	r5, r3, r5
 8007f36:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007f38:	2500      	movlt	r5, #0
 8007f3a:	f1b8 0f00 	cmp.w	r8, #0
 8007f3e:	bfb9      	ittee	lt
 8007f40:	ebc8 0409 	rsblt	r4, r8, r9
 8007f44:	2300      	movlt	r3, #0
 8007f46:	464c      	movge	r4, r9
 8007f48:	4643      	movge	r3, r8
 8007f4a:	9a05      	ldr	r2, [sp, #20]
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	441a      	add	r2, r3
 8007f50:	4650      	mov	r0, sl
 8007f52:	4499      	add	r9, r3
 8007f54:	9205      	str	r2, [sp, #20]
 8007f56:	f000 ff60 	bl	8008e1a <__i2b>
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	e002      	b.n	8007f64 <_dtoa_r+0x724>
 8007f5e:	9d07      	ldr	r5, [sp, #28]
 8007f60:	9e08      	ldr	r6, [sp, #32]
 8007f62:	464c      	mov	r4, r9
 8007f64:	b15c      	cbz	r4, 8007f7e <_dtoa_r+0x73e>
 8007f66:	9b05      	ldr	r3, [sp, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	dd08      	ble.n	8007f7e <_dtoa_r+0x73e>
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	9a05      	ldr	r2, [sp, #20]
 8007f70:	bfa8      	it	ge
 8007f72:	4623      	movge	r3, r4
 8007f74:	ebc3 0909 	rsb	r9, r3, r9
 8007f78:	1ae4      	subs	r4, r4, r3
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	9b07      	ldr	r3, [sp, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	dd1d      	ble.n	8007fc0 <_dtoa_r+0x780>
 8007f84:	9b08      	ldr	r3, [sp, #32]
 8007f86:	b1ab      	cbz	r3, 8007fb4 <_dtoa_r+0x774>
 8007f88:	b185      	cbz	r5, 8007fac <_dtoa_r+0x76c>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	462a      	mov	r2, r5
 8007f8e:	4650      	mov	r0, sl
 8007f90:	f000 ffde 	bl	8008f50 <__pow5mult>
 8007f94:	9a02      	ldr	r2, [sp, #8]
 8007f96:	4601      	mov	r1, r0
 8007f98:	4606      	mov	r6, r0
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	f000 ff46 	bl	8008e2c <__multiply>
 8007fa0:	9902      	ldr	r1, [sp, #8]
 8007fa2:	4607      	mov	r7, r0
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	f000 fe99 	bl	8008cdc <_Bfree>
 8007faa:	9702      	str	r7, [sp, #8]
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	1b5a      	subs	r2, r3, r5
 8007fb0:	d006      	beq.n	8007fc0 <_dtoa_r+0x780>
 8007fb2:	e000      	b.n	8007fb6 <_dtoa_r+0x776>
 8007fb4:	9a07      	ldr	r2, [sp, #28]
 8007fb6:	9902      	ldr	r1, [sp, #8]
 8007fb8:	4650      	mov	r0, sl
 8007fba:	f000 ffc9 	bl	8008f50 <__pow5mult>
 8007fbe:	9002      	str	r0, [sp, #8]
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	f000 ff29 	bl	8008e1a <__i2b>
 8007fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fca:	4605      	mov	r5, r0
 8007fcc:	b35b      	cbz	r3, 8008026 <_dtoa_r+0x7e6>
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4601      	mov	r1, r0
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	f000 ffbc 	bl	8008f50 <__pow5mult>
 8007fd8:	9b06      	ldr	r3, [sp, #24]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	4605      	mov	r5, r0
 8007fde:	dc18      	bgt.n	8008012 <_dtoa_r+0x7d2>
 8007fe0:	9b00      	ldr	r3, [sp, #0]
 8007fe2:	b983      	cbnz	r3, 8008006 <_dtoa_r+0x7c6>
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fea:	b973      	cbnz	r3, 800800a <_dtoa_r+0x7ca>
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007ff2:	0d3f      	lsrs	r7, r7, #20
 8007ff4:	053f      	lsls	r7, r7, #20
 8007ff6:	b14f      	cbz	r7, 800800c <_dtoa_r+0x7cc>
 8007ff8:	9b05      	ldr	r3, [sp, #20]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f109 0901 	add.w	r9, r9, #1
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	2701      	movs	r7, #1
 8008004:	e002      	b.n	800800c <_dtoa_r+0x7cc>
 8008006:	2700      	movs	r7, #0
 8008008:	e000      	b.n	800800c <_dtoa_r+0x7cc>
 800800a:	9f00      	ldr	r7, [sp, #0]
 800800c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800e:	b173      	cbz	r3, 800802e <_dtoa_r+0x7ee>
 8008010:	e000      	b.n	8008014 <_dtoa_r+0x7d4>
 8008012:	2700      	movs	r7, #0
 8008014:	692b      	ldr	r3, [r5, #16]
 8008016:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800801a:	6918      	ldr	r0, [r3, #16]
 800801c:	f000 feb0 	bl	8008d80 <__hi0bits>
 8008020:	f1c0 0020 	rsb	r0, r0, #32
 8008024:	e004      	b.n	8008030 <_dtoa_r+0x7f0>
 8008026:	9b06      	ldr	r3, [sp, #24]
 8008028:	2b01      	cmp	r3, #1
 800802a:	ddd9      	ble.n	8007fe0 <_dtoa_r+0x7a0>
 800802c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800802e:	2001      	movs	r0, #1
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	4418      	add	r0, r3
 8008034:	f010 001f 	ands.w	r0, r0, #31
 8008038:	d00e      	beq.n	8008058 <_dtoa_r+0x818>
 800803a:	f1c0 0320 	rsb	r3, r0, #32
 800803e:	2b04      	cmp	r3, #4
 8008040:	dd08      	ble.n	8008054 <_dtoa_r+0x814>
 8008042:	f1c0 001c 	rsb	r0, r0, #28
 8008046:	e008      	b.n	800805a <_dtoa_r+0x81a>
 8008048:	0800a248 	.word	0x0800a248
 800804c:	40140000 	.word	0x40140000
 8008050:	40240000 	.word	0x40240000
 8008054:	d006      	beq.n	8008064 <_dtoa_r+0x824>
 8008056:	4618      	mov	r0, r3
 8008058:	301c      	adds	r0, #28
 800805a:	9b05      	ldr	r3, [sp, #20]
 800805c:	4403      	add	r3, r0
 800805e:	4481      	add	r9, r0
 8008060:	4404      	add	r4, r0
 8008062:	9305      	str	r3, [sp, #20]
 8008064:	f1b9 0f00 	cmp.w	r9, #0
 8008068:	dd05      	ble.n	8008076 <_dtoa_r+0x836>
 800806a:	464a      	mov	r2, r9
 800806c:	9902      	ldr	r1, [sp, #8]
 800806e:	4650      	mov	r0, sl
 8008070:	f000 ffbc 	bl	8008fec <__lshift>
 8008074:	9002      	str	r0, [sp, #8]
 8008076:	9b05      	ldr	r3, [sp, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dd05      	ble.n	8008088 <_dtoa_r+0x848>
 800807c:	4629      	mov	r1, r5
 800807e:	461a      	mov	r2, r3
 8008080:	4650      	mov	r0, sl
 8008082:	f000 ffb3 	bl	8008fec <__lshift>
 8008086:	4605      	mov	r5, r0
 8008088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800808a:	b1eb      	cbz	r3, 80080c8 <_dtoa_r+0x888>
 800808c:	4629      	mov	r1, r5
 800808e:	9802      	ldr	r0, [sp, #8]
 8008090:	f000 fffd 	bl	800908e <__mcmp>
 8008094:	2800      	cmp	r0, #0
 8008096:	da17      	bge.n	80080c8 <_dtoa_r+0x888>
 8008098:	2300      	movs	r3, #0
 800809a:	220a      	movs	r2, #10
 800809c:	9902      	ldr	r1, [sp, #8]
 800809e:	4650      	mov	r0, sl
 80080a0:	f000 fe33 	bl	8008d0a <__multadd>
 80080a4:	9b08      	ldr	r3, [sp, #32]
 80080a6:	9002      	str	r0, [sp, #8]
 80080a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 8158 	beq.w	8008362 <_dtoa_r+0xb22>
 80080b2:	2300      	movs	r3, #0
 80080b4:	4631      	mov	r1, r6
 80080b6:	220a      	movs	r2, #10
 80080b8:	4650      	mov	r0, sl
 80080ba:	f000 fe26 	bl	8008d0a <__multadd>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	4606      	mov	r6, r0
 80080c4:	dc37      	bgt.n	8008136 <_dtoa_r+0x8f6>
 80080c6:	e033      	b.n	8008130 <_dtoa_r+0x8f0>
 80080c8:	f1b8 0f00 	cmp.w	r8, #0
 80080cc:	dc2a      	bgt.n	8008124 <_dtoa_r+0x8e4>
 80080ce:	9b06      	ldr	r3, [sp, #24]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	dd27      	ble.n	8008124 <_dtoa_r+0x8e4>
 80080d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	b983      	cbnz	r3, 80080fe <_dtoa_r+0x8be>
 80080dc:	4629      	mov	r1, r5
 80080de:	2205      	movs	r2, #5
 80080e0:	4650      	mov	r0, sl
 80080e2:	f000 fe12 	bl	8008d0a <__multadd>
 80080e6:	4601      	mov	r1, r0
 80080e8:	4605      	mov	r5, r0
 80080ea:	9802      	ldr	r0, [sp, #8]
 80080ec:	f000 ffcf 	bl	800908e <__mcmp>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	dc0d      	bgt.n	8008110 <_dtoa_r+0x8d0>
 80080f4:	e003      	b.n	80080fe <_dtoa_r+0x8be>
 80080f6:	463d      	mov	r5, r7
 80080f8:	e000      	b.n	80080fc <_dtoa_r+0x8bc>
 80080fa:	2500      	movs	r5, #0
 80080fc:	462e      	mov	r6, r5
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	9c04      	ldr	r4, [sp, #16]
 8008102:	ea6f 0b03 	mvn.w	fp, r3
 8008106:	e00a      	b.n	800811e <_dtoa_r+0x8de>
 8008108:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800810c:	463d      	mov	r5, r7
 800810e:	463e      	mov	r6, r7
 8008110:	9b04      	ldr	r3, [sp, #16]
 8008112:	9a04      	ldr	r2, [sp, #16]
 8008114:	1c5c      	adds	r4, r3, #1
 8008116:	2331      	movs	r3, #49	; 0x31
 8008118:	7013      	strb	r3, [r2, #0]
 800811a:	f10b 0b01 	add.w	fp, fp, #1
 800811e:	46b0      	mov	r8, r6
 8008120:	2600      	movs	r6, #0
 8008122:	e0f7      	b.n	8008314 <_dtoa_r+0xad4>
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	f8cd 800c 	str.w	r8, [sp, #12]
 800812a:	b923      	cbnz	r3, 8008136 <_dtoa_r+0x8f6>
 800812c:	9c04      	ldr	r4, [sp, #16]
 800812e:	e0b1      	b.n	8008294 <_dtoa_r+0xa54>
 8008130:	9b06      	ldr	r3, [sp, #24]
 8008132:	2b02      	cmp	r3, #2
 8008134:	dcd0      	bgt.n	80080d8 <_dtoa_r+0x898>
 8008136:	2c00      	cmp	r4, #0
 8008138:	dd05      	ble.n	8008146 <_dtoa_r+0x906>
 800813a:	4631      	mov	r1, r6
 800813c:	4622      	mov	r2, r4
 800813e:	4650      	mov	r0, sl
 8008140:	f000 ff54 	bl	8008fec <__lshift>
 8008144:	4606      	mov	r6, r0
 8008146:	b19f      	cbz	r7, 8008170 <_dtoa_r+0x930>
 8008148:	6871      	ldr	r1, [r6, #4]
 800814a:	4650      	mov	r0, sl
 800814c:	f000 fd91 	bl	8008c72 <_Balloc>
 8008150:	6932      	ldr	r2, [r6, #16]
 8008152:	3202      	adds	r2, #2
 8008154:	4604      	mov	r4, r0
 8008156:	0092      	lsls	r2, r2, #2
 8008158:	f106 010c 	add.w	r1, r6, #12
 800815c:	300c      	adds	r0, #12
 800815e:	f7fd f9a3 	bl	80054a8 <memcpy>
 8008162:	2201      	movs	r2, #1
 8008164:	4621      	mov	r1, r4
 8008166:	4650      	mov	r0, sl
 8008168:	f000 ff40 	bl	8008fec <__lshift>
 800816c:	4680      	mov	r8, r0
 800816e:	e000      	b.n	8008172 <_dtoa_r+0x932>
 8008170:	46b0      	mov	r8, r6
 8008172:	9b00      	ldr	r3, [sp, #0]
 8008174:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	4629      	mov	r1, r5
 8008180:	9802      	ldr	r0, [sp, #8]
 8008182:	f7ff facb 	bl	800771c <quorem>
 8008186:	4631      	mov	r1, r6
 8008188:	4604      	mov	r4, r0
 800818a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800818e:	9802      	ldr	r0, [sp, #8]
 8008190:	f000 ff7d 	bl	800908e <__mcmp>
 8008194:	4642      	mov	r2, r8
 8008196:	9000      	str	r0, [sp, #0]
 8008198:	4629      	mov	r1, r5
 800819a:	4650      	mov	r0, sl
 800819c:	f000 ff93 	bl	80090c6 <__mdiff>
 80081a0:	68c3      	ldr	r3, [r0, #12]
 80081a2:	4602      	mov	r2, r0
 80081a4:	b93b      	cbnz	r3, 80081b6 <_dtoa_r+0x976>
 80081a6:	4601      	mov	r1, r0
 80081a8:	9007      	str	r0, [sp, #28]
 80081aa:	9802      	ldr	r0, [sp, #8]
 80081ac:	f000 ff6f 	bl	800908e <__mcmp>
 80081b0:	9a07      	ldr	r2, [sp, #28]
 80081b2:	4603      	mov	r3, r0
 80081b4:	e000      	b.n	80081b8 <_dtoa_r+0x978>
 80081b6:	2301      	movs	r3, #1
 80081b8:	4611      	mov	r1, r2
 80081ba:	4650      	mov	r0, sl
 80081bc:	9307      	str	r3, [sp, #28]
 80081be:	f000 fd8d 	bl	8008cdc <_Bfree>
 80081c2:	9b07      	ldr	r3, [sp, #28]
 80081c4:	b94b      	cbnz	r3, 80081da <_dtoa_r+0x99a>
 80081c6:	9a06      	ldr	r2, [sp, #24]
 80081c8:	b93a      	cbnz	r2, 80081da <_dtoa_r+0x99a>
 80081ca:	9a05      	ldr	r2, [sp, #20]
 80081cc:	b92a      	cbnz	r2, 80081da <_dtoa_r+0x99a>
 80081ce:	2f39      	cmp	r7, #57	; 0x39
 80081d0:	d028      	beq.n	8008224 <_dtoa_r+0x9e4>
 80081d2:	9b00      	ldr	r3, [sp, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dc1a      	bgt.n	800820e <_dtoa_r+0x9ce>
 80081d8:	e01b      	b.n	8008212 <_dtoa_r+0x9d2>
 80081da:	9a00      	ldr	r2, [sp, #0]
 80081dc:	2a00      	cmp	r2, #0
 80081de:	db04      	blt.n	80081ea <_dtoa_r+0x9aa>
 80081e0:	d11a      	bne.n	8008218 <_dtoa_r+0x9d8>
 80081e2:	9a06      	ldr	r2, [sp, #24]
 80081e4:	b9c2      	cbnz	r2, 8008218 <_dtoa_r+0x9d8>
 80081e6:	9a05      	ldr	r2, [sp, #20]
 80081e8:	b9b2      	cbnz	r2, 8008218 <_dtoa_r+0x9d8>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dd11      	ble.n	8008212 <_dtoa_r+0x9d2>
 80081ee:	2201      	movs	r2, #1
 80081f0:	9902      	ldr	r1, [sp, #8]
 80081f2:	4650      	mov	r0, sl
 80081f4:	f000 fefa 	bl	8008fec <__lshift>
 80081f8:	4629      	mov	r1, r5
 80081fa:	9002      	str	r0, [sp, #8]
 80081fc:	f000 ff47 	bl	800908e <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	dc02      	bgt.n	800820a <_dtoa_r+0x9ca>
 8008204:	d105      	bne.n	8008212 <_dtoa_r+0x9d2>
 8008206:	07fa      	lsls	r2, r7, #31
 8008208:	d503      	bpl.n	8008212 <_dtoa_r+0x9d2>
 800820a:	2f39      	cmp	r7, #57	; 0x39
 800820c:	d00a      	beq.n	8008224 <_dtoa_r+0x9e4>
 800820e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8008212:	f109 0401 	add.w	r4, r9, #1
 8008216:	e00c      	b.n	8008232 <_dtoa_r+0x9f2>
 8008218:	2b00      	cmp	r3, #0
 800821a:	f109 0401 	add.w	r4, r9, #1
 800821e:	dd0b      	ble.n	8008238 <_dtoa_r+0x9f8>
 8008220:	2f39      	cmp	r7, #57	; 0x39
 8008222:	d105      	bne.n	8008230 <_dtoa_r+0x9f0>
 8008224:	2339      	movs	r3, #57	; 0x39
 8008226:	f889 3000 	strb.w	r3, [r9]
 800822a:	f109 0901 	add.w	r9, r9, #1
 800822e:	e054      	b.n	80082da <_dtoa_r+0xa9a>
 8008230:	3701      	adds	r7, #1
 8008232:	f889 7000 	strb.w	r7, [r9]
 8008236:	e06d      	b.n	8008314 <_dtoa_r+0xad4>
 8008238:	9b04      	ldr	r3, [sp, #16]
 800823a:	9a03      	ldr	r2, [sp, #12]
 800823c:	f804 7c01 	strb.w	r7, [r4, #-1]
 8008240:	1ae3      	subs	r3, r4, r3
 8008242:	4293      	cmp	r3, r2
 8008244:	46a1      	mov	r9, r4
 8008246:	d03a      	beq.n	80082be <_dtoa_r+0xa7e>
 8008248:	2300      	movs	r3, #0
 800824a:	220a      	movs	r2, #10
 800824c:	9902      	ldr	r1, [sp, #8]
 800824e:	4650      	mov	r0, sl
 8008250:	f000 fd5b 	bl	8008d0a <__multadd>
 8008254:	4546      	cmp	r6, r8
 8008256:	9002      	str	r0, [sp, #8]
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	f04f 020a 	mov.w	r2, #10
 8008260:	4631      	mov	r1, r6
 8008262:	4650      	mov	r0, sl
 8008264:	d104      	bne.n	8008270 <_dtoa_r+0xa30>
 8008266:	f000 fd50 	bl	8008d0a <__multadd>
 800826a:	4606      	mov	r6, r0
 800826c:	4680      	mov	r8, r0
 800826e:	e786      	b.n	800817e <_dtoa_r+0x93e>
 8008270:	f000 fd4b 	bl	8008d0a <__multadd>
 8008274:	4641      	mov	r1, r8
 8008276:	4606      	mov	r6, r0
 8008278:	2300      	movs	r3, #0
 800827a:	220a      	movs	r2, #10
 800827c:	4650      	mov	r0, sl
 800827e:	f000 fd44 	bl	8008d0a <__multadd>
 8008282:	4680      	mov	r8, r0
 8008284:	e77b      	b.n	800817e <_dtoa_r+0x93e>
 8008286:	2300      	movs	r3, #0
 8008288:	220a      	movs	r2, #10
 800828a:	9902      	ldr	r1, [sp, #8]
 800828c:	4650      	mov	r0, sl
 800828e:	f000 fd3c 	bl	8008d0a <__multadd>
 8008292:	9002      	str	r0, [sp, #8]
 8008294:	4629      	mov	r1, r5
 8008296:	9802      	ldr	r0, [sp, #8]
 8008298:	f7ff fa40 	bl	800771c <quorem>
 800829c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80082a0:	f804 7b01 	strb.w	r7, [r4], #1
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	9a03      	ldr	r2, [sp, #12]
 80082a8:	1ae3      	subs	r3, r4, r3
 80082aa:	4293      	cmp	r3, r2
 80082ac:	dbeb      	blt.n	8008286 <_dtoa_r+0xa46>
 80082ae:	9b04      	ldr	r3, [sp, #16]
 80082b0:	2a01      	cmp	r2, #1
 80082b2:	bfac      	ite	ge
 80082b4:	189b      	addge	r3, r3, r2
 80082b6:	3301      	addlt	r3, #1
 80082b8:	46b0      	mov	r8, r6
 80082ba:	4699      	mov	r9, r3
 80082bc:	2600      	movs	r6, #0
 80082be:	2201      	movs	r2, #1
 80082c0:	9902      	ldr	r1, [sp, #8]
 80082c2:	4650      	mov	r0, sl
 80082c4:	f000 fe92 	bl	8008fec <__lshift>
 80082c8:	4629      	mov	r1, r5
 80082ca:	9002      	str	r0, [sp, #8]
 80082cc:	f000 fedf 	bl	800908e <__mcmp>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	dc02      	bgt.n	80082da <_dtoa_r+0xa9a>
 80082d4:	d115      	bne.n	8008302 <_dtoa_r+0xac2>
 80082d6:	07fb      	lsls	r3, r7, #31
 80082d8:	d513      	bpl.n	8008302 <_dtoa_r+0xac2>
 80082da:	464c      	mov	r4, r9
 80082dc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80082e0:	2b39      	cmp	r3, #57	; 0x39
 80082e2:	f104 32ff 	add.w	r2, r4, #4294967295
 80082e6:	d109      	bne.n	80082fc <_dtoa_r+0xabc>
 80082e8:	9b04      	ldr	r3, [sp, #16]
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d104      	bne.n	80082f8 <_dtoa_r+0xab8>
 80082ee:	f10b 0b01 	add.w	fp, fp, #1
 80082f2:	2331      	movs	r3, #49	; 0x31
 80082f4:	9a04      	ldr	r2, [sp, #16]
 80082f6:	e002      	b.n	80082fe <_dtoa_r+0xabe>
 80082f8:	4614      	mov	r4, r2
 80082fa:	e7ef      	b.n	80082dc <_dtoa_r+0xa9c>
 80082fc:	3301      	adds	r3, #1
 80082fe:	7013      	strb	r3, [r2, #0]
 8008300:	e008      	b.n	8008314 <_dtoa_r+0xad4>
 8008302:	464c      	mov	r4, r9
 8008304:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008308:	2b30      	cmp	r3, #48	; 0x30
 800830a:	f104 32ff 	add.w	r2, r4, #4294967295
 800830e:	d101      	bne.n	8008314 <_dtoa_r+0xad4>
 8008310:	4614      	mov	r4, r2
 8008312:	e7f7      	b.n	8008304 <_dtoa_r+0xac4>
 8008314:	4629      	mov	r1, r5
 8008316:	4650      	mov	r0, sl
 8008318:	f000 fce0 	bl	8008cdc <_Bfree>
 800831c:	f1b8 0f00 	cmp.w	r8, #0
 8008320:	d00d      	beq.n	800833e <_dtoa_r+0xafe>
 8008322:	b12e      	cbz	r6, 8008330 <_dtoa_r+0xaf0>
 8008324:	4546      	cmp	r6, r8
 8008326:	d003      	beq.n	8008330 <_dtoa_r+0xaf0>
 8008328:	4631      	mov	r1, r6
 800832a:	4650      	mov	r0, sl
 800832c:	f000 fcd6 	bl	8008cdc <_Bfree>
 8008330:	4641      	mov	r1, r8
 8008332:	4650      	mov	r0, sl
 8008334:	f000 fcd2 	bl	8008cdc <_Bfree>
 8008338:	e001      	b.n	800833e <_dtoa_r+0xafe>
 800833a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800833e:	9902      	ldr	r1, [sp, #8]
 8008340:	4650      	mov	r0, sl
 8008342:	f000 fccb 	bl	8008cdc <_Bfree>
 8008346:	2300      	movs	r3, #0
 8008348:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800834a:	7023      	strb	r3, [r4, #0]
 800834c:	f10b 0301 	add.w	r3, fp, #1
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008354:	b11b      	cbz	r3, 800835e <_dtoa_r+0xb1e>
 8008356:	601c      	str	r4, [r3, #0]
 8008358:	e001      	b.n	800835e <_dtoa_r+0xb1e>
 800835a:	4808      	ldr	r0, [pc, #32]	; (800837c <_dtoa_r+0xb3c>)
 800835c:	e00a      	b.n	8008374 <_dtoa_r+0xb34>
 800835e:	9804      	ldr	r0, [sp, #16]
 8008360:	e008      	b.n	8008374 <_dtoa_r+0xb34>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f73f aee1 	bgt.w	800812c <_dtoa_r+0x8ec>
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	2b02      	cmp	r3, #2
 800836e:	f77f aedd 	ble.w	800812c <_dtoa_r+0x8ec>
 8008372:	e6b1      	b.n	80080d8 <_dtoa_r+0x898>
 8008374:	b017      	add	sp, #92	; 0x5c
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	bf00      	nop
 800837c:	0800a19c 	.word	0x0800a19c

08008380 <__sflush_r>:
 8008380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008384:	b293      	uxth	r3, r2
 8008386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838a:	4605      	mov	r5, r0
 800838c:	0718      	lsls	r0, r3, #28
 800838e:	460c      	mov	r4, r1
 8008390:	d460      	bmi.n	8008454 <__sflush_r+0xd4>
 8008392:	684b      	ldr	r3, [r1, #4]
 8008394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008398:	2b00      	cmp	r3, #0
 800839a:	818a      	strh	r2, [r1, #12]
 800839c:	dc02      	bgt.n	80083a4 <__sflush_r+0x24>
 800839e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dd17      	ble.n	80083d4 <__sflush_r+0x54>
 80083a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a6:	b1ae      	cbz	r6, 80083d4 <__sflush_r+0x54>
 80083a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80083ac:	2300      	movs	r3, #0
 80083ae:	b292      	uxth	r2, r2
 80083b0:	682f      	ldr	r7, [r5, #0]
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	b10a      	cbz	r2, 80083ba <__sflush_r+0x3a>
 80083b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083b8:	e015      	b.n	80083e6 <__sflush_r+0x66>
 80083ba:	6a21      	ldr	r1, [r4, #32]
 80083bc:	2301      	movs	r3, #1
 80083be:	4628      	mov	r0, r5
 80083c0:	47b0      	blx	r6
 80083c2:	1c41      	adds	r1, r0, #1
 80083c4:	d10f      	bne.n	80083e6 <__sflush_r+0x66>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	b16b      	cbz	r3, 80083e6 <__sflush_r+0x66>
 80083ca:	2b1d      	cmp	r3, #29
 80083cc:	d001      	beq.n	80083d2 <__sflush_r+0x52>
 80083ce:	2b16      	cmp	r3, #22
 80083d0:	d103      	bne.n	80083da <__sflush_r+0x5a>
 80083d2:	602f      	str	r7, [r5, #0]
 80083d4:	2000      	movs	r0, #0
 80083d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e0:	81a3      	strh	r3, [r4, #12]
 80083e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	075a      	lsls	r2, r3, #29
 80083ea:	d505      	bpl.n	80083f8 <__sflush_r+0x78>
 80083ec:	6863      	ldr	r3, [r4, #4]
 80083ee:	1ac0      	subs	r0, r0, r3
 80083f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083f2:	b10b      	cbz	r3, 80083f8 <__sflush_r+0x78>
 80083f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083f6:	1ac0      	subs	r0, r0, r3
 80083f8:	2300      	movs	r3, #0
 80083fa:	4602      	mov	r2, r0
 80083fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083fe:	6a21      	ldr	r1, [r4, #32]
 8008400:	4628      	mov	r0, r5
 8008402:	47b0      	blx	r6
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	d106      	bne.n	8008418 <__sflush_r+0x98>
 800840a:	6829      	ldr	r1, [r5, #0]
 800840c:	291d      	cmp	r1, #29
 800840e:	d83e      	bhi.n	800848e <__sflush_r+0x10e>
 8008410:	4a22      	ldr	r2, [pc, #136]	; (800849c <__sflush_r+0x11c>)
 8008412:	40ca      	lsrs	r2, r1
 8008414:	07d6      	lsls	r6, r2, #31
 8008416:	d53a      	bpl.n	800848e <__sflush_r+0x10e>
 8008418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800841c:	b21b      	sxth	r3, r3
 800841e:	2200      	movs	r2, #0
 8008420:	6062      	str	r2, [r4, #4]
 8008422:	04d9      	lsls	r1, r3, #19
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	81a3      	strh	r3, [r4, #12]
 8008428:	6022      	str	r2, [r4, #0]
 800842a:	d504      	bpl.n	8008436 <__sflush_r+0xb6>
 800842c:	1c42      	adds	r2, r0, #1
 800842e:	d101      	bne.n	8008434 <__sflush_r+0xb4>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b903      	cbnz	r3, 8008436 <__sflush_r+0xb6>
 8008434:	6560      	str	r0, [r4, #84]	; 0x54
 8008436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008438:	602f      	str	r7, [r5, #0]
 800843a:	2900      	cmp	r1, #0
 800843c:	d0ca      	beq.n	80083d4 <__sflush_r+0x54>
 800843e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008442:	4299      	cmp	r1, r3
 8008444:	d002      	beq.n	800844c <__sflush_r+0xcc>
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f95c 	bl	8008704 <_free_r>
 800844c:	2000      	movs	r0, #0
 800844e:	6360      	str	r0, [r4, #52]	; 0x34
 8008450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008454:	690f      	ldr	r7, [r1, #16]
 8008456:	2f00      	cmp	r7, #0
 8008458:	d0bc      	beq.n	80083d4 <__sflush_r+0x54>
 800845a:	079b      	lsls	r3, r3, #30
 800845c:	680e      	ldr	r6, [r1, #0]
 800845e:	bf08      	it	eq
 8008460:	694b      	ldreq	r3, [r1, #20]
 8008462:	600f      	str	r7, [r1, #0]
 8008464:	bf18      	it	ne
 8008466:	2300      	movne	r3, #0
 8008468:	ebc7 0806 	rsb	r8, r7, r6
 800846c:	608b      	str	r3, [r1, #8]
 800846e:	e002      	b.n	8008476 <__sflush_r+0xf6>
 8008470:	4407      	add	r7, r0
 8008472:	ebc0 0808 	rsb	r8, r0, r8
 8008476:	f1b8 0f00 	cmp.w	r8, #0
 800847a:	ddab      	ble.n	80083d4 <__sflush_r+0x54>
 800847c:	4643      	mov	r3, r8
 800847e:	463a      	mov	r2, r7
 8008480:	6a21      	ldr	r1, [r4, #32]
 8008482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008484:	4628      	mov	r0, r5
 8008486:	47b0      	blx	r6
 8008488:	2800      	cmp	r0, #0
 800848a:	dcf1      	bgt.n	8008470 <__sflush_r+0xf0>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800849c:	20400001 	.word	0x20400001

080084a0 <_fflush_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	690b      	ldr	r3, [r1, #16]
 80084a4:	4605      	mov	r5, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	b1db      	cbz	r3, 80084e2 <_fflush_r+0x42>
 80084aa:	b118      	cbz	r0, 80084b4 <_fflush_r+0x14>
 80084ac:	6983      	ldr	r3, [r0, #24]
 80084ae:	b90b      	cbnz	r3, 80084b4 <_fflush_r+0x14>
 80084b0:	f000 f860 	bl	8008574 <__sinit>
 80084b4:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <_fflush_r+0x48>)
 80084b6:	429c      	cmp	r4, r3
 80084b8:	d101      	bne.n	80084be <_fflush_r+0x1e>
 80084ba:	686c      	ldr	r4, [r5, #4]
 80084bc:	e008      	b.n	80084d0 <_fflush_r+0x30>
 80084be:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <_fflush_r+0x4c>)
 80084c0:	429c      	cmp	r4, r3
 80084c2:	d101      	bne.n	80084c8 <_fflush_r+0x28>
 80084c4:	68ac      	ldr	r4, [r5, #8]
 80084c6:	e003      	b.n	80084d0 <_fflush_r+0x30>
 80084c8:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <_fflush_r+0x50>)
 80084ca:	429c      	cmp	r4, r3
 80084cc:	bf08      	it	eq
 80084ce:	68ec      	ldreq	r4, [r5, #12]
 80084d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d4:	b12b      	cbz	r3, 80084e2 <_fflush_r+0x42>
 80084d6:	4621      	mov	r1, r4
 80084d8:	4628      	mov	r0, r5
 80084da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084de:	f7ff bf4f 	b.w	8008380 <__sflush_r>
 80084e2:	2000      	movs	r0, #0
 80084e4:	bd38      	pop	{r3, r4, r5, pc}
 80084e6:	bf00      	nop
 80084e8:	0800a1dc 	.word	0x0800a1dc
 80084ec:	0800a1fc 	.word	0x0800a1fc
 80084f0:	0800a21c 	.word	0x0800a21c

080084f4 <_cleanup_r>:
 80084f4:	4901      	ldr	r1, [pc, #4]	; (80084fc <_cleanup_r+0x8>)
 80084f6:	f000 bb0d 	b.w	8008b14 <_fwalk_reent>
 80084fa:	bf00      	nop
 80084fc:	080097f9 	.word	0x080097f9

08008500 <std.isra.0>:
 8008500:	2300      	movs	r3, #0
 8008502:	b510      	push	{r4, lr}
 8008504:	4604      	mov	r4, r0
 8008506:	6003      	str	r3, [r0, #0]
 8008508:	6043      	str	r3, [r0, #4]
 800850a:	6083      	str	r3, [r0, #8]
 800850c:	8181      	strh	r1, [r0, #12]
 800850e:	6643      	str	r3, [r0, #100]	; 0x64
 8008510:	81c2      	strh	r2, [r0, #14]
 8008512:	6103      	str	r3, [r0, #16]
 8008514:	6143      	str	r3, [r0, #20]
 8008516:	6183      	str	r3, [r0, #24]
 8008518:	4619      	mov	r1, r3
 800851a:	2208      	movs	r2, #8
 800851c:	305c      	adds	r0, #92	; 0x5c
 800851e:	f7fc ffce 	bl	80054be <memset>
 8008522:	4b05      	ldr	r3, [pc, #20]	; (8008538 <std.isra.0+0x38>)
 8008524:	6263      	str	r3, [r4, #36]	; 0x24
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <std.isra.0+0x3c>)
 8008528:	62a3      	str	r3, [r4, #40]	; 0x28
 800852a:	4b05      	ldr	r3, [pc, #20]	; (8008540 <std.isra.0+0x40>)
 800852c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <std.isra.0+0x44>)
 8008530:	6224      	str	r4, [r4, #32]
 8008532:	6323      	str	r3, [r4, #48]	; 0x30
 8008534:	bd10      	pop	{r4, pc}
 8008536:	bf00      	nop
 8008538:	08009571 	.word	0x08009571
 800853c:	08009593 	.word	0x08009593
 8008540:	080095cb 	.word	0x080095cb
 8008544:	080095ef 	.word	0x080095ef

08008548 <__sfmoreglue>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	2368      	movs	r3, #104	; 0x68
 800854c:	1e4d      	subs	r5, r1, #1
 800854e:	435d      	muls	r5, r3
 8008550:	460e      	mov	r6, r1
 8008552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008556:	f7fc fd87 	bl	8005068 <_malloc_r>
 800855a:	4604      	mov	r4, r0
 800855c:	b140      	cbz	r0, 8008570 <__sfmoreglue+0x28>
 800855e:	2100      	movs	r1, #0
 8008560:	e880 0042 	stmia.w	r0, {r1, r6}
 8008564:	300c      	adds	r0, #12
 8008566:	60a0      	str	r0, [r4, #8]
 8008568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800856c:	f7fc ffa7 	bl	80054be <memset>
 8008570:	4620      	mov	r0, r4
 8008572:	bd70      	pop	{r4, r5, r6, pc}

08008574 <__sinit>:
 8008574:	6983      	ldr	r3, [r0, #24]
 8008576:	b510      	push	{r4, lr}
 8008578:	4604      	mov	r4, r0
 800857a:	bb4b      	cbnz	r3, 80085d0 <__sinit+0x5c>
 800857c:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8008580:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8008584:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8008588:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <__sinit+0x60>)
 800858a:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <__sinit+0x64>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6282      	str	r2, [r0, #40]	; 0x28
 8008590:	4298      	cmp	r0, r3
 8008592:	bf04      	itt	eq
 8008594:	2301      	moveq	r3, #1
 8008596:	6183      	streq	r3, [r0, #24]
 8008598:	f000 f820 	bl	80085dc <__sfp>
 800859c:	6060      	str	r0, [r4, #4]
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 f81c 	bl	80085dc <__sfp>
 80085a4:	60a0      	str	r0, [r4, #8]
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 f818 	bl	80085dc <__sfp>
 80085ac:	2200      	movs	r2, #0
 80085ae:	60e0      	str	r0, [r4, #12]
 80085b0:	2104      	movs	r1, #4
 80085b2:	6860      	ldr	r0, [r4, #4]
 80085b4:	f7ff ffa4 	bl	8008500 <std.isra.0>
 80085b8:	2201      	movs	r2, #1
 80085ba:	2109      	movs	r1, #9
 80085bc:	68a0      	ldr	r0, [r4, #8]
 80085be:	f7ff ff9f 	bl	8008500 <std.isra.0>
 80085c2:	2202      	movs	r2, #2
 80085c4:	2112      	movs	r1, #18
 80085c6:	68e0      	ldr	r0, [r4, #12]
 80085c8:	f7ff ff9a 	bl	8008500 <std.isra.0>
 80085cc:	2301      	movs	r3, #1
 80085ce:	61a3      	str	r3, [r4, #24]
 80085d0:	bd10      	pop	{r4, pc}
 80085d2:	bf00      	nop
 80085d4:	0800a23c 	.word	0x0800a23c
 80085d8:	080084f5 	.word	0x080084f5

080085dc <__sfp>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	4b1c      	ldr	r3, [pc, #112]	; (8008650 <__sfp+0x74>)
 80085e0:	681e      	ldr	r6, [r3, #0]
 80085e2:	69b3      	ldr	r3, [r6, #24]
 80085e4:	4607      	mov	r7, r0
 80085e6:	b913      	cbnz	r3, 80085ee <__sfp+0x12>
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff ffc3 	bl	8008574 <__sinit>
 80085ee:	36d8      	adds	r6, #216	; 0xd8
 80085f0:	68b4      	ldr	r4, [r6, #8]
 80085f2:	6873      	ldr	r3, [r6, #4]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	d404      	bmi.n	8008602 <__sfp+0x26>
 80085f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085fc:	b17d      	cbz	r5, 800861e <__sfp+0x42>
 80085fe:	3468      	adds	r4, #104	; 0x68
 8008600:	e7f8      	b.n	80085f4 <__sfp+0x18>
 8008602:	6833      	ldr	r3, [r6, #0]
 8008604:	b10b      	cbz	r3, 800860a <__sfp+0x2e>
 8008606:	6836      	ldr	r6, [r6, #0]
 8008608:	e7f2      	b.n	80085f0 <__sfp+0x14>
 800860a:	2104      	movs	r1, #4
 800860c:	4638      	mov	r0, r7
 800860e:	f7ff ff9b 	bl	8008548 <__sfmoreglue>
 8008612:	6030      	str	r0, [r6, #0]
 8008614:	2800      	cmp	r0, #0
 8008616:	d1f6      	bne.n	8008606 <__sfp+0x2a>
 8008618:	230c      	movs	r3, #12
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800861e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008622:	81e3      	strh	r3, [r4, #14]
 8008624:	2301      	movs	r3, #1
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	6665      	str	r5, [r4, #100]	; 0x64
 800862a:	6025      	str	r5, [r4, #0]
 800862c:	60a5      	str	r5, [r4, #8]
 800862e:	6065      	str	r5, [r4, #4]
 8008630:	6125      	str	r5, [r4, #16]
 8008632:	6165      	str	r5, [r4, #20]
 8008634:	61a5      	str	r5, [r4, #24]
 8008636:	2208      	movs	r2, #8
 8008638:	4629      	mov	r1, r5
 800863a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800863e:	f7fc ff3e 	bl	80054be <memset>
 8008642:	6365      	str	r5, [r4, #52]	; 0x34
 8008644:	63a5      	str	r5, [r4, #56]	; 0x38
 8008646:	64a5      	str	r5, [r4, #72]	; 0x48
 8008648:	64e5      	str	r5, [r4, #76]	; 0x4c
 800864a:	4620      	mov	r0, r4
 800864c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864e:	bf00      	nop
 8008650:	0800a23c 	.word	0x0800a23c

08008654 <__sfp_lock_acquire>:
 8008654:	4770      	bx	lr

08008656 <__sfp_lock_release>:
 8008656:	4770      	bx	lr

08008658 <_malloc_trim_r>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4f25      	ldr	r7, [pc, #148]	; (80086f4 <_malloc_trim_r+0x9c>)
 800865e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008700 <_malloc_trim_r+0xa8>
 8008662:	4689      	mov	r9, r1
 8008664:	4606      	mov	r6, r0
 8008666:	f7fc ff32 	bl	80054ce <__malloc_lock>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	685d      	ldr	r5, [r3, #4]
 800866e:	f1a8 0411 	sub.w	r4, r8, #17
 8008672:	f025 0503 	bic.w	r5, r5, #3
 8008676:	442c      	add	r4, r5
 8008678:	ebc9 0404 	rsb	r4, r9, r4
 800867c:	fbb4 f4f8 	udiv	r4, r4, r8
 8008680:	3c01      	subs	r4, #1
 8008682:	fb08 f404 	mul.w	r4, r8, r4
 8008686:	4544      	cmp	r4, r8
 8008688:	da05      	bge.n	8008696 <_malloc_trim_r+0x3e>
 800868a:	4630      	mov	r0, r6
 800868c:	f7fc ff20 	bl	80054d0 <__malloc_unlock>
 8008690:	2000      	movs	r0, #0
 8008692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008696:	2100      	movs	r1, #0
 8008698:	4630      	mov	r0, r6
 800869a:	f7fc ff87 	bl	80055ac <_sbrk_r>
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	442b      	add	r3, r5
 80086a2:	4298      	cmp	r0, r3
 80086a4:	d1f1      	bne.n	800868a <_malloc_trim_r+0x32>
 80086a6:	4261      	negs	r1, r4
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7fc ff7f 	bl	80055ac <_sbrk_r>
 80086ae:	3001      	adds	r0, #1
 80086b0:	d110      	bne.n	80086d4 <_malloc_trim_r+0x7c>
 80086b2:	2100      	movs	r1, #0
 80086b4:	4630      	mov	r0, r6
 80086b6:	f7fc ff79 	bl	80055ac <_sbrk_r>
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	1a83      	subs	r3, r0, r2
 80086be:	2b0f      	cmp	r3, #15
 80086c0:	dde3      	ble.n	800868a <_malloc_trim_r+0x32>
 80086c2:	490d      	ldr	r1, [pc, #52]	; (80086f8 <_malloc_trim_r+0xa0>)
 80086c4:	6809      	ldr	r1, [r1, #0]
 80086c6:	1a40      	subs	r0, r0, r1
 80086c8:	490c      	ldr	r1, [pc, #48]	; (80086fc <_malloc_trim_r+0xa4>)
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	6008      	str	r0, [r1, #0]
 80086d0:	6053      	str	r3, [r2, #4]
 80086d2:	e7da      	b.n	800868a <_malloc_trim_r+0x32>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <_malloc_trim_r+0xa4>)
 80086d8:	1b2d      	subs	r5, r5, r4
 80086da:	f045 0501 	orr.w	r5, r5, #1
 80086de:	605d      	str	r5, [r3, #4]
 80086e0:	6813      	ldr	r3, [r2, #0]
 80086e2:	4630      	mov	r0, r6
 80086e4:	1b1c      	subs	r4, r3, r4
 80086e6:	6014      	str	r4, [r2, #0]
 80086e8:	f7fc fef2 	bl	80054d0 <__malloc_unlock>
 80086ec:	2001      	movs	r0, #1
 80086ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f2:	bf00      	nop
 80086f4:	20000008 	.word	0x20000008
 80086f8:	20000414 	.word	0x20000414
 80086fc:	200042e0 	.word	0x200042e0
 8008700:	00000080 	.word	0x00000080

08008704 <_free_r>:
 8008704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008708:	4604      	mov	r4, r0
 800870a:	4688      	mov	r8, r1
 800870c:	2900      	cmp	r1, #0
 800870e:	f000 80ad 	beq.w	800886c <_free_r+0x168>
 8008712:	f7fc fedc 	bl	80054ce <__malloc_lock>
 8008716:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800871a:	4d55      	ldr	r5, [pc, #340]	; (8008870 <_free_r+0x16c>)
 800871c:	f022 0001 	bic.w	r0, r2, #1
 8008720:	f1a8 0308 	sub.w	r3, r8, #8
 8008724:	181f      	adds	r7, r3, r0
 8008726:	68a9      	ldr	r1, [r5, #8]
 8008728:	687e      	ldr	r6, [r7, #4]
 800872a:	428f      	cmp	r7, r1
 800872c:	f026 0603 	bic.w	r6, r6, #3
 8008730:	f002 0201 	and.w	r2, r2, #1
 8008734:	d11b      	bne.n	800876e <_free_r+0x6a>
 8008736:	4430      	add	r0, r6
 8008738:	b93a      	cbnz	r2, 800874a <_free_r+0x46>
 800873a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	4410      	add	r0, r2
 8008742:	6899      	ldr	r1, [r3, #8]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	60ca      	str	r2, [r1, #12]
 8008748:	6091      	str	r1, [r2, #8]
 800874a:	f040 0201 	orr.w	r2, r0, #1
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	60ab      	str	r3, [r5, #8]
 8008752:	4b48      	ldr	r3, [pc, #288]	; (8008874 <_free_r+0x170>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4298      	cmp	r0, r3
 8008758:	d304      	bcc.n	8008764 <_free_r+0x60>
 800875a:	4b47      	ldr	r3, [pc, #284]	; (8008878 <_free_r+0x174>)
 800875c:	4620      	mov	r0, r4
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	f7ff ff7a 	bl	8008658 <_malloc_trim_r>
 8008764:	4620      	mov	r0, r4
 8008766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800876a:	f7fc beb1 	b.w	80054d0 <__malloc_unlock>
 800876e:	607e      	str	r6, [r7, #4]
 8008770:	b97a      	cbnz	r2, 8008792 <_free_r+0x8e>
 8008772:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008776:	1a5b      	subs	r3, r3, r1
 8008778:	4408      	add	r0, r1
 800877a:	6899      	ldr	r1, [r3, #8]
 800877c:	f105 0e08 	add.w	lr, r5, #8
 8008780:	4571      	cmp	r1, lr
 8008782:	d008      	beq.n	8008796 <_free_r+0x92>
 8008784:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008788:	f8c1 e00c 	str.w	lr, [r1, #12]
 800878c:	f8ce 1008 	str.w	r1, [lr, #8]
 8008790:	e002      	b.n	8008798 <_free_r+0x94>
 8008792:	2200      	movs	r2, #0
 8008794:	e000      	b.n	8008798 <_free_r+0x94>
 8008796:	2201      	movs	r2, #1
 8008798:	19b9      	adds	r1, r7, r6
 800879a:	6849      	ldr	r1, [r1, #4]
 800879c:	07c9      	lsls	r1, r1, #31
 800879e:	d40e      	bmi.n	80087be <_free_r+0xba>
 80087a0:	4430      	add	r0, r6
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	b942      	cbnz	r2, 80087b8 <_free_r+0xb4>
 80087a6:	4e35      	ldr	r6, [pc, #212]	; (800887c <_free_r+0x178>)
 80087a8:	42b1      	cmp	r1, r6
 80087aa:	d105      	bne.n	80087b8 <_free_r+0xb4>
 80087ac:	616b      	str	r3, [r5, #20]
 80087ae:	612b      	str	r3, [r5, #16]
 80087b0:	2201      	movs	r2, #1
 80087b2:	60d9      	str	r1, [r3, #12]
 80087b4:	6099      	str	r1, [r3, #8]
 80087b6:	e002      	b.n	80087be <_free_r+0xba>
 80087b8:	68fe      	ldr	r6, [r7, #12]
 80087ba:	60ce      	str	r6, [r1, #12]
 80087bc:	60b1      	str	r1, [r6, #8]
 80087be:	f040 0101 	orr.w	r1, r0, #1
 80087c2:	6059      	str	r1, [r3, #4]
 80087c4:	5018      	str	r0, [r3, r0]
 80087c6:	2a00      	cmp	r2, #0
 80087c8:	d1cc      	bne.n	8008764 <_free_r+0x60>
 80087ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80087ce:	d212      	bcs.n	80087f6 <_free_r+0xf2>
 80087d0:	08c0      	lsrs	r0, r0, #3
 80087d2:	1081      	asrs	r1, r0, #2
 80087d4:	2201      	movs	r2, #1
 80087d6:	fa02 f101 	lsl.w	r1, r2, r1
 80087da:	686a      	ldr	r2, [r5, #4]
 80087dc:	3001      	adds	r0, #1
 80087de:	430a      	orrs	r2, r1
 80087e0:	606a      	str	r2, [r5, #4]
 80087e2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80087e6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80087ea:	6099      	str	r1, [r3, #8]
 80087ec:	3a08      	subs	r2, #8
 80087ee:	60da      	str	r2, [r3, #12]
 80087f0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80087f4:	e038      	b.n	8008868 <_free_r+0x164>
 80087f6:	0a42      	lsrs	r2, r0, #9
 80087f8:	2a04      	cmp	r2, #4
 80087fa:	d802      	bhi.n	8008802 <_free_r+0xfe>
 80087fc:	0982      	lsrs	r2, r0, #6
 80087fe:	3238      	adds	r2, #56	; 0x38
 8008800:	e015      	b.n	800882e <_free_r+0x12a>
 8008802:	2a14      	cmp	r2, #20
 8008804:	d801      	bhi.n	800880a <_free_r+0x106>
 8008806:	325b      	adds	r2, #91	; 0x5b
 8008808:	e011      	b.n	800882e <_free_r+0x12a>
 800880a:	2a54      	cmp	r2, #84	; 0x54
 800880c:	d802      	bhi.n	8008814 <_free_r+0x110>
 800880e:	0b02      	lsrs	r2, r0, #12
 8008810:	326e      	adds	r2, #110	; 0x6e
 8008812:	e00c      	b.n	800882e <_free_r+0x12a>
 8008814:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008818:	d802      	bhi.n	8008820 <_free_r+0x11c>
 800881a:	0bc2      	lsrs	r2, r0, #15
 800881c:	3277      	adds	r2, #119	; 0x77
 800881e:	e006      	b.n	800882e <_free_r+0x12a>
 8008820:	f240 5154 	movw	r1, #1364	; 0x554
 8008824:	428a      	cmp	r2, r1
 8008826:	bf9a      	itte	ls
 8008828:	0c82      	lsrls	r2, r0, #18
 800882a:	327c      	addls	r2, #124	; 0x7c
 800882c:	227e      	movhi	r2, #126	; 0x7e
 800882e:	1c51      	adds	r1, r2, #1
 8008830:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008834:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8008838:	4f0d      	ldr	r7, [pc, #52]	; (8008870 <_free_r+0x16c>)
 800883a:	428e      	cmp	r6, r1
 800883c:	d10b      	bne.n	8008856 <_free_r+0x152>
 800883e:	2101      	movs	r1, #1
 8008840:	1092      	asrs	r2, r2, #2
 8008842:	fa01 f202 	lsl.w	r2, r1, r2
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	4311      	orrs	r1, r2
 800884a:	6079      	str	r1, [r7, #4]
 800884c:	4631      	mov	r1, r6
 800884e:	e008      	b.n	8008862 <_free_r+0x15e>
 8008850:	6889      	ldr	r1, [r1, #8]
 8008852:	428e      	cmp	r6, r1
 8008854:	d004      	beq.n	8008860 <_free_r+0x15c>
 8008856:	684a      	ldr	r2, [r1, #4]
 8008858:	f022 0203 	bic.w	r2, r2, #3
 800885c:	4290      	cmp	r0, r2
 800885e:	d3f7      	bcc.n	8008850 <_free_r+0x14c>
 8008860:	68ce      	ldr	r6, [r1, #12]
 8008862:	60de      	str	r6, [r3, #12]
 8008864:	6099      	str	r1, [r3, #8]
 8008866:	60b3      	str	r3, [r6, #8]
 8008868:	60cb      	str	r3, [r1, #12]
 800886a:	e77b      	b.n	8008764 <_free_r+0x60>
 800886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008870:	20000008 	.word	0x20000008
 8008874:	20000410 	.word	0x20000410
 8008878:	200042dc 	.word	0x200042dc
 800887c:	20000010 	.word	0x20000010

08008880 <__sfvwrite_r>:
 8008880:	6893      	ldr	r3, [r2, #8]
 8008882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008886:	4606      	mov	r6, r0
 8008888:	460c      	mov	r4, r1
 800888a:	4690      	mov	r8, r2
 800888c:	b90b      	cbnz	r3, 8008892 <__sfvwrite_r+0x12>
 800888e:	2000      	movs	r0, #0
 8008890:	e13b      	b.n	8008b0a <__sfvwrite_r+0x28a>
 8008892:	898b      	ldrh	r3, [r1, #12]
 8008894:	0718      	lsls	r0, r3, #28
 8008896:	d50f      	bpl.n	80088b8 <__sfvwrite_r+0x38>
 8008898:	690b      	ldr	r3, [r1, #16]
 800889a:	b16b      	cbz	r3, 80088b8 <__sfvwrite_r+0x38>
 800889c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 80088a0:	f8d8 b000 	ldr.w	fp, [r8]
 80088a4:	f009 0502 	and.w	r5, r9, #2
 80088a8:	b2ad      	uxth	r5, r5
 80088aa:	b355      	cbz	r5, 8008902 <__sfvwrite_r+0x82>
 80088ac:	f04f 0900 	mov.w	r9, #0
 80088b0:	464f      	mov	r7, r9
 80088b2:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8008b10 <__sfvwrite_r+0x290>
 80088b6:	e01b      	b.n	80088f0 <__sfvwrite_r+0x70>
 80088b8:	4621      	mov	r1, r4
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7fe fec0 	bl	8007640 <__swsetup_r>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d0eb      	beq.n	800889c <__sfvwrite_r+0x1c>
 80088c4:	e11f      	b.n	8008b06 <__sfvwrite_r+0x286>
 80088c6:	4557      	cmp	r7, sl
 80088c8:	463b      	mov	r3, r7
 80088ca:	464a      	mov	r2, r9
 80088cc:	bf28      	it	cs
 80088ce:	4653      	movcs	r3, sl
 80088d0:	6a21      	ldr	r1, [r4, #32]
 80088d2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80088d4:	4630      	mov	r0, r6
 80088d6:	47a8      	blx	r5
 80088d8:	2800      	cmp	r0, #0
 80088da:	f340 8110 	ble.w	8008afe <__sfvwrite_r+0x27e>
 80088de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088e2:	4481      	add	r9, r0
 80088e4:	1a3f      	subs	r7, r7, r0
 80088e6:	1a18      	subs	r0, r3, r0
 80088e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d0ce      	beq.n	800888e <__sfvwrite_r+0xe>
 80088f0:	2f00      	cmp	r7, #0
 80088f2:	d1e8      	bne.n	80088c6 <__sfvwrite_r+0x46>
 80088f4:	f8db 9000 	ldr.w	r9, [fp]
 80088f8:	f8db 7004 	ldr.w	r7, [fp, #4]
 80088fc:	f10b 0b08 	add.w	fp, fp, #8
 8008900:	e7f6      	b.n	80088f0 <__sfvwrite_r+0x70>
 8008902:	f019 0901 	ands.w	r9, r9, #1
 8008906:	d003      	beq.n	8008910 <__sfvwrite_r+0x90>
 8008908:	9500      	str	r5, [sp, #0]
 800890a:	46a9      	mov	r9, r5
 800890c:	46aa      	mov	sl, r5
 800890e:	e0bd      	b.n	8008a8c <__sfvwrite_r+0x20c>
 8008910:	464f      	mov	r7, r9
 8008912:	b937      	cbnz	r7, 8008922 <__sfvwrite_r+0xa2>
 8008914:	f8db 9000 	ldr.w	r9, [fp]
 8008918:	f8db 7004 	ldr.w	r7, [fp, #4]
 800891c:	f10b 0b08 	add.w	fp, fp, #8
 8008920:	e7f7      	b.n	8008912 <__sfvwrite_r+0x92>
 8008922:	89a2      	ldrh	r2, [r4, #12]
 8008924:	68a5      	ldr	r5, [r4, #8]
 8008926:	0591      	lsls	r1, r2, #22
 8008928:	d552      	bpl.n	80089d0 <__sfvwrite_r+0x150>
 800892a:	42af      	cmp	r7, r5
 800892c:	d342      	bcc.n	80089b4 <__sfvwrite_r+0x134>
 800892e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008932:	d03d      	beq.n	80089b0 <__sfvwrite_r+0x130>
 8008934:	6921      	ldr	r1, [r4, #16]
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	1a5b      	subs	r3, r3, r1
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	6963      	ldr	r3, [r4, #20]
 800893e:	2002      	movs	r0, #2
 8008940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008944:	fb93 faf0 	sdiv	sl, r3, r0
 8008948:	9b00      	ldr	r3, [sp, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	443b      	add	r3, r7
 800894e:	459a      	cmp	sl, r3
 8008950:	bf38      	it	cc
 8008952:	469a      	movcc	sl, r3
 8008954:	0553      	lsls	r3, r2, #21
 8008956:	d510      	bpl.n	800897a <__sfvwrite_r+0xfa>
 8008958:	4651      	mov	r1, sl
 800895a:	4630      	mov	r0, r6
 800895c:	f7fc fb84 	bl	8005068 <_malloc_r>
 8008960:	4605      	mov	r5, r0
 8008962:	b1c0      	cbz	r0, 8008996 <__sfvwrite_r+0x116>
 8008964:	9a00      	ldr	r2, [sp, #0]
 8008966:	6921      	ldr	r1, [r4, #16]
 8008968:	f7fc fd9e 	bl	80054a8 <memcpy>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	e010      	b.n	800899c <__sfvwrite_r+0x11c>
 800897a:	4652      	mov	r2, sl
 800897c:	4630      	mov	r0, r6
 800897e:	f000 fc4f 	bl	8009220 <_realloc_r>
 8008982:	4605      	mov	r5, r0
 8008984:	b950      	cbnz	r0, 800899c <__sfvwrite_r+0x11c>
 8008986:	6921      	ldr	r1, [r4, #16]
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff febb 	bl	8008704 <_free_r>
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	230c      	movs	r3, #12
 8008998:	6033      	str	r3, [r6, #0]
 800899a:	e0b0      	b.n	8008afe <__sfvwrite_r+0x27e>
 800899c:	9b00      	ldr	r3, [sp, #0]
 800899e:	6125      	str	r5, [r4, #16]
 80089a0:	441d      	add	r5, r3
 80089a2:	ebc3 030a 	rsb	r3, r3, sl
 80089a6:	6025      	str	r5, [r4, #0]
 80089a8:	f8c4 a014 	str.w	sl, [r4, #20]
 80089ac:	463d      	mov	r5, r7
 80089ae:	60a3      	str	r3, [r4, #8]
 80089b0:	42af      	cmp	r7, r5
 80089b2:	d200      	bcs.n	80089b6 <__sfvwrite_r+0x136>
 80089b4:	463d      	mov	r5, r7
 80089b6:	462a      	mov	r2, r5
 80089b8:	4649      	mov	r1, r9
 80089ba:	6820      	ldr	r0, [r4, #0]
 80089bc:	f000 f93e 	bl	8008c3c <memmove>
 80089c0:	68a3      	ldr	r3, [r4, #8]
 80089c2:	1b5b      	subs	r3, r3, r5
 80089c4:	60a3      	str	r3, [r4, #8]
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	441d      	add	r5, r3
 80089ca:	6025      	str	r5, [r4, #0]
 80089cc:	463d      	mov	r5, r7
 80089ce:	e029      	b.n	8008a24 <__sfvwrite_r+0x1a4>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	4298      	cmp	r0, r3
 80089d6:	d802      	bhi.n	80089de <__sfvwrite_r+0x15e>
 80089d8:	6962      	ldr	r2, [r4, #20]
 80089da:	4297      	cmp	r7, r2
 80089dc:	d213      	bcs.n	8008a06 <__sfvwrite_r+0x186>
 80089de:	42bd      	cmp	r5, r7
 80089e0:	bf28      	it	cs
 80089e2:	463d      	movcs	r5, r7
 80089e4:	462a      	mov	r2, r5
 80089e6:	4649      	mov	r1, r9
 80089e8:	f000 f928 	bl	8008c3c <memmove>
 80089ec:	68a3      	ldr	r3, [r4, #8]
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	1b5b      	subs	r3, r3, r5
 80089f2:	442a      	add	r2, r5
 80089f4:	60a3      	str	r3, [r4, #8]
 80089f6:	6022      	str	r2, [r4, #0]
 80089f8:	b9a3      	cbnz	r3, 8008a24 <__sfvwrite_r+0x1a4>
 80089fa:	4621      	mov	r1, r4
 80089fc:	4630      	mov	r0, r6
 80089fe:	f7ff fd4f 	bl	80084a0 <_fflush_r>
 8008a02:	b178      	cbz	r0, 8008a24 <__sfvwrite_r+0x1a4>
 8008a04:	e07b      	b.n	8008afe <__sfvwrite_r+0x27e>
 8008a06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008a0a:	42bb      	cmp	r3, r7
 8008a0c:	bf28      	it	cs
 8008a0e:	463b      	movcs	r3, r7
 8008a10:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008a12:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a16:	6a21      	ldr	r1, [r4, #32]
 8008a18:	4353      	muls	r3, r2
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	464a      	mov	r2, r9
 8008a1e:	47a8      	blx	r5
 8008a20:	1e05      	subs	r5, r0, #0
 8008a22:	dd6c      	ble.n	8008afe <__sfvwrite_r+0x27e>
 8008a24:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a28:	44a9      	add	r9, r5
 8008a2a:	1b7f      	subs	r7, r7, r5
 8008a2c:	1b5d      	subs	r5, r3, r5
 8008a2e:	f8c8 5008 	str.w	r5, [r8, #8]
 8008a32:	2d00      	cmp	r5, #0
 8008a34:	f47f af6d 	bne.w	8008912 <__sfvwrite_r+0x92>
 8008a38:	e729      	b.n	800888e <__sfvwrite_r+0xe>
 8008a3a:	9b00      	ldr	r3, [sp, #0]
 8008a3c:	b383      	cbz	r3, 8008aa0 <__sfvwrite_r+0x220>
 8008a3e:	6820      	ldr	r0, [r4, #0]
 8008a40:	6921      	ldr	r1, [r4, #16]
 8008a42:	6962      	ldr	r2, [r4, #20]
 8008a44:	4555      	cmp	r5, sl
 8008a46:	462b      	mov	r3, r5
 8008a48:	bf28      	it	cs
 8008a4a:	4653      	movcs	r3, sl
 8008a4c:	4288      	cmp	r0, r1
 8008a4e:	d936      	bls.n	8008abe <__sfvwrite_r+0x23e>
 8008a50:	68a7      	ldr	r7, [r4, #8]
 8008a52:	4417      	add	r7, r2
 8008a54:	42bb      	cmp	r3, r7
 8008a56:	dd32      	ble.n	8008abe <__sfvwrite_r+0x23e>
 8008a58:	4649      	mov	r1, r9
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	f000 f8ee 	bl	8008c3c <memmove>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	443b      	add	r3, r7
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	4621      	mov	r1, r4
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7ff fd19 	bl	80084a0 <_fflush_r>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d145      	bne.n	8008afe <__sfvwrite_r+0x27e>
 8008a72:	1bed      	subs	r5, r5, r7
 8008a74:	d03c      	beq.n	8008af0 <__sfvwrite_r+0x270>
 8008a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a7a:	44b9      	add	r9, r7
 8008a7c:	ebc7 0a0a 	rsb	sl, r7, sl
 8008a80:	1bdf      	subs	r7, r3, r7
 8008a82:	f8c8 7008 	str.w	r7, [r8, #8]
 8008a86:	2f00      	cmp	r7, #0
 8008a88:	f43f af01 	beq.w	800888e <__sfvwrite_r+0xe>
 8008a8c:	f1ba 0f00 	cmp.w	sl, #0
 8008a90:	d1d3      	bne.n	8008a3a <__sfvwrite_r+0x1ba>
 8008a92:	2300      	movs	r3, #0
 8008a94:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	f10b 0b08 	add.w	fp, fp, #8
 8008a9e:	e7f5      	b.n	8008a8c <__sfvwrite_r+0x20c>
 8008aa0:	4652      	mov	r2, sl
 8008aa2:	210a      	movs	r1, #10
 8008aa4:	4648      	mov	r0, r9
 8008aa6:	f7f7 fb9b 	bl	80001e0 <memchr>
 8008aaa:	b118      	cbz	r0, 8008ab4 <__sfvwrite_r+0x234>
 8008aac:	3001      	adds	r0, #1
 8008aae:	ebc9 0500 	rsb	r5, r9, r0
 8008ab2:	e001      	b.n	8008ab8 <__sfvwrite_r+0x238>
 8008ab4:	f10a 0501 	add.w	r5, sl, #1
 8008ab8:	2301      	movs	r3, #1
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	e7bf      	b.n	8008a3e <__sfvwrite_r+0x1be>
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	db08      	blt.n	8008ad4 <__sfvwrite_r+0x254>
 8008ac2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8008ac4:	6a21      	ldr	r1, [r4, #32]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	4630      	mov	r0, r6
 8008aca:	464a      	mov	r2, r9
 8008acc:	47b8      	blx	r7
 8008ace:	1e07      	subs	r7, r0, #0
 8008ad0:	dccf      	bgt.n	8008a72 <__sfvwrite_r+0x1f2>
 8008ad2:	e014      	b.n	8008afe <__sfvwrite_r+0x27e>
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	f000 f8af 	bl	8008c3c <memmove>
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	68a2      	ldr	r2, [r4, #8]
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	60a2      	str	r2, [r4, #8]
 8008ae6:	6822      	ldr	r2, [r4, #0]
 8008ae8:	441a      	add	r2, r3
 8008aea:	6022      	str	r2, [r4, #0]
 8008aec:	461f      	mov	r7, r3
 8008aee:	e7c0      	b.n	8008a72 <__sfvwrite_r+0x1f2>
 8008af0:	4621      	mov	r1, r4
 8008af2:	4630      	mov	r0, r6
 8008af4:	f7ff fcd4 	bl	80084a0 <_fflush_r>
 8008af8:	b908      	cbnz	r0, 8008afe <__sfvwrite_r+0x27e>
 8008afa:	9500      	str	r5, [sp, #0]
 8008afc:	e7bb      	b.n	8008a76 <__sfvwrite_r+0x1f6>
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	b003      	add	sp, #12
 8008b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b10:	7ffffc00 	.word	0x7ffffc00

08008b14 <_fwalk_reent>:
 8008b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b18:	4680      	mov	r8, r0
 8008b1a:	4689      	mov	r9, r1
 8008b1c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8008b20:	2600      	movs	r6, #0
 8008b22:	b194      	cbz	r4, 8008b4a <_fwalk_reent+0x36>
 8008b24:	68a5      	ldr	r5, [r4, #8]
 8008b26:	6867      	ldr	r7, [r4, #4]
 8008b28:	3f01      	subs	r7, #1
 8008b2a:	d40c      	bmi.n	8008b46 <_fwalk_reent+0x32>
 8008b2c:	89ab      	ldrh	r3, [r5, #12]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d907      	bls.n	8008b42 <_fwalk_reent+0x2e>
 8008b32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b36:	3301      	adds	r3, #1
 8008b38:	d003      	beq.n	8008b42 <_fwalk_reent+0x2e>
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	47c8      	blx	r9
 8008b40:	4306      	orrs	r6, r0
 8008b42:	3568      	adds	r5, #104	; 0x68
 8008b44:	e7f0      	b.n	8008b28 <_fwalk_reent+0x14>
 8008b46:	6824      	ldr	r4, [r4, #0]
 8008b48:	e7eb      	b.n	8008b22 <_fwalk_reent+0xe>
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008b50 <__locale_charset>:
 8008b50:	4800      	ldr	r0, [pc, #0]	; (8008b54 <__locale_charset+0x4>)
 8008b52:	4770      	bx	lr
 8008b54:	20000544 	.word	0x20000544

08008b58 <__locale_mb_cur_max>:
 8008b58:	4b01      	ldr	r3, [pc, #4]	; (8008b60 <__locale_mb_cur_max+0x8>)
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	20000564 	.word	0x20000564

08008b64 <_localeconv_r>:
 8008b64:	4800      	ldr	r0, [pc, #0]	; (8008b68 <_localeconv_r+0x4>)
 8008b66:	4770      	bx	lr
 8008b68:	2000050c 	.word	0x2000050c

08008b6c <__swhatbuf_r>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	460e      	mov	r6, r1
 8008b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b74:	2900      	cmp	r1, #0
 8008b76:	b090      	sub	sp, #64	; 0x40
 8008b78:	4614      	mov	r4, r2
 8008b7a:	461d      	mov	r5, r3
 8008b7c:	da0a      	bge.n	8008b94 <__swhatbuf_r+0x28>
 8008b7e:	89b3      	ldrh	r3, [r6, #12]
 8008b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b84:	2200      	movs	r2, #0
 8008b86:	b298      	uxth	r0, r3
 8008b88:	602a      	str	r2, [r5, #0]
 8008b8a:	b1b0      	cbz	r0, 8008bba <__swhatbuf_r+0x4e>
 8008b8c:	2340      	movs	r3, #64	; 0x40
 8008b8e:	6023      	str	r3, [r4, #0]
 8008b90:	4610      	mov	r0, r2
 8008b92:	e015      	b.n	8008bc0 <__swhatbuf_r+0x54>
 8008b94:	aa01      	add	r2, sp, #4
 8008b96:	f000 fed1 	bl	800993c <_fstat_r>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	dbef      	blt.n	8008b7e <__swhatbuf_r+0x12>
 8008b9e:	9a02      	ldr	r2, [sp, #8]
 8008ba0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ba4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ba8:	425a      	negs	r2, r3
 8008baa:	415a      	adcs	r2, r3
 8008bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008bb6:	6023      	str	r3, [r4, #0]
 8008bb8:	e002      	b.n	8008bc0 <__swhatbuf_r+0x54>
 8008bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	b010      	add	sp, #64	; 0x40
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}

08008bc4 <__smakebuf_r>:
 8008bc4:	898b      	ldrh	r3, [r1, #12]
 8008bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bc8:	079e      	lsls	r6, r3, #30
 8008bca:	4605      	mov	r5, r0
 8008bcc:	460c      	mov	r4, r1
 8008bce:	d410      	bmi.n	8008bf2 <__smakebuf_r+0x2e>
 8008bd0:	ab01      	add	r3, sp, #4
 8008bd2:	466a      	mov	r2, sp
 8008bd4:	f7ff ffca 	bl	8008b6c <__swhatbuf_r>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	4606      	mov	r6, r0
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f7fc fa43 	bl	8005068 <_malloc_r>
 8008be2:	b968      	cbnz	r0, 8008c00 <__smakebuf_r+0x3c>
 8008be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be8:	059a      	lsls	r2, r3, #22
 8008bea:	d422      	bmi.n	8008c32 <__smakebuf_r+0x6e>
 8008bec:	f043 0302 	orr.w	r3, r3, #2
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	6163      	str	r3, [r4, #20]
 8008bfe:	e018      	b.n	8008c32 <__smakebuf_r+0x6e>
 8008c00:	4b0d      	ldr	r3, [pc, #52]	; (8008c38 <__smakebuf_r+0x74>)
 8008c02:	62ab      	str	r3, [r5, #40]	; 0x28
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	6020      	str	r0, [r4, #0]
 8008c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	9b00      	ldr	r3, [sp, #0]
 8008c10:	6163      	str	r3, [r4, #20]
 8008c12:	9b01      	ldr	r3, [sp, #4]
 8008c14:	6120      	str	r0, [r4, #16]
 8008c16:	b14b      	cbz	r3, 8008c2c <__smakebuf_r+0x68>
 8008c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f000 fe9f 	bl	8009960 <_isatty_r>
 8008c22:	b118      	cbz	r0, 8008c2c <__smakebuf_r+0x68>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	89a0      	ldrh	r0, [r4, #12]
 8008c2e:	4330      	orrs	r0, r6
 8008c30:	81a0      	strh	r0, [r4, #12]
 8008c32:	b002      	add	sp, #8
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	bf00      	nop
 8008c38:	080084f5 	.word	0x080084f5

08008c3c <memmove>:
 8008c3c:	4288      	cmp	r0, r1
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	eb01 0302 	add.w	r3, r1, r2
 8008c44:	d801      	bhi.n	8008c4a <memmove+0xe>
 8008c46:	1e42      	subs	r2, r0, #1
 8008c48:	e00b      	b.n	8008c62 <memmove+0x26>
 8008c4a:	4298      	cmp	r0, r3
 8008c4c:	d2fb      	bcs.n	8008c46 <memmove+0xa>
 8008c4e:	1881      	adds	r1, r0, r2
 8008c50:	1ad2      	subs	r2, r2, r3
 8008c52:	42d3      	cmn	r3, r2
 8008c54:	d004      	beq.n	8008c60 <memmove+0x24>
 8008c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c5a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c5e:	e7f8      	b.n	8008c52 <memmove+0x16>
 8008c60:	bd10      	pop	{r4, pc}
 8008c62:	4299      	cmp	r1, r3
 8008c64:	d004      	beq.n	8008c70 <memmove+0x34>
 8008c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c6a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008c6e:	e7f8      	b.n	8008c62 <memmove+0x26>
 8008c70:	bd10      	pop	{r4, pc}

08008c72 <_Balloc>:
 8008c72:	b570      	push	{r4, r5, r6, lr}
 8008c74:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c76:	4604      	mov	r4, r0
 8008c78:	460e      	mov	r6, r1
 8008c7a:	b93d      	cbnz	r5, 8008c8c <_Balloc+0x1a>
 8008c7c:	2010      	movs	r0, #16
 8008c7e:	f7fc f9eb 	bl	8005058 <malloc>
 8008c82:	6260      	str	r0, [r4, #36]	; 0x24
 8008c84:	6045      	str	r5, [r0, #4]
 8008c86:	6085      	str	r5, [r0, #8]
 8008c88:	6005      	str	r5, [r0, #0]
 8008c8a:	60c5      	str	r5, [r0, #12]
 8008c8c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008c8e:	68eb      	ldr	r3, [r5, #12]
 8008c90:	b143      	cbz	r3, 8008ca4 <_Balloc+0x32>
 8008c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008c9a:	b178      	cbz	r0, 8008cbc <_Balloc+0x4a>
 8008c9c:	6802      	ldr	r2, [r0, #0]
 8008c9e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008ca2:	e017      	b.n	8008cd4 <_Balloc+0x62>
 8008ca4:	2221      	movs	r2, #33	; 0x21
 8008ca6:	2104      	movs	r1, #4
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fd67 	bl	800977c <_calloc_r>
 8008cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb0:	60e8      	str	r0, [r5, #12]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1ec      	bne.n	8008c92 <_Balloc+0x20>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	fa01 f506 	lsl.w	r5, r1, r6
 8008cc2:	1d6a      	adds	r2, r5, #5
 8008cc4:	0092      	lsls	r2, r2, #2
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 fd58 	bl	800977c <_calloc_r>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d0f3      	beq.n	8008cb8 <_Balloc+0x46>
 8008cd0:	6046      	str	r6, [r0, #4]
 8008cd2:	6085      	str	r5, [r0, #8]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6103      	str	r3, [r0, #16]
 8008cd8:	60c3      	str	r3, [r0, #12]
 8008cda:	bd70      	pop	{r4, r5, r6, pc}

08008cdc <_Bfree>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	460d      	mov	r5, r1
 8008ce4:	b93c      	cbnz	r4, 8008cf6 <_Bfree+0x1a>
 8008ce6:	2010      	movs	r0, #16
 8008ce8:	f7fc f9b6 	bl	8005058 <malloc>
 8008cec:	6270      	str	r0, [r6, #36]	; 0x24
 8008cee:	6044      	str	r4, [r0, #4]
 8008cf0:	6084      	str	r4, [r0, #8]
 8008cf2:	6004      	str	r4, [r0, #0]
 8008cf4:	60c4      	str	r4, [r0, #12]
 8008cf6:	b13d      	cbz	r5, 8008d08 <_Bfree+0x2c>
 8008cf8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008cfa:	686a      	ldr	r2, [r5, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d02:	6029      	str	r1, [r5, #0]
 8008d04:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008d08:	bd70      	pop	{r4, r5, r6, pc}

08008d0a <__multadd>:
 8008d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	690d      	ldr	r5, [r1, #16]
 8008d10:	461f      	mov	r7, r3
 8008d12:	4606      	mov	r6, r0
 8008d14:	460c      	mov	r4, r1
 8008d16:	f101 0e14 	add.w	lr, r1, #20
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8de 0000 	ldr.w	r0, [lr]
 8008d20:	b281      	uxth	r1, r0
 8008d22:	fb02 7101 	mla	r1, r2, r1, r7
 8008d26:	0c0f      	lsrs	r7, r1, #16
 8008d28:	0c00      	lsrs	r0, r0, #16
 8008d2a:	fb02 7000 	mla	r0, r2, r0, r7
 8008d2e:	b289      	uxth	r1, r1
 8008d30:	3301      	adds	r3, #1
 8008d32:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008d36:	429d      	cmp	r5, r3
 8008d38:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008d3c:	f84e 1b04 	str.w	r1, [lr], #4
 8008d40:	dcec      	bgt.n	8008d1c <__multadd+0x12>
 8008d42:	b1d7      	cbz	r7, 8008d7a <__multadd+0x70>
 8008d44:	68a3      	ldr	r3, [r4, #8]
 8008d46:	429d      	cmp	r5, r3
 8008d48:	db12      	blt.n	8008d70 <__multadd+0x66>
 8008d4a:	6861      	ldr	r1, [r4, #4]
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	3101      	adds	r1, #1
 8008d50:	f7ff ff8f 	bl	8008c72 <_Balloc>
 8008d54:	6922      	ldr	r2, [r4, #16]
 8008d56:	3202      	adds	r2, #2
 8008d58:	f104 010c 	add.w	r1, r4, #12
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	0092      	lsls	r2, r2, #2
 8008d60:	300c      	adds	r0, #12
 8008d62:	f7fc fba1 	bl	80054a8 <memcpy>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff ffb7 	bl	8008cdc <_Bfree>
 8008d6e:	4644      	mov	r4, r8
 8008d70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d74:	3501      	adds	r5, #1
 8008d76:	615f      	str	r7, [r3, #20]
 8008d78:	6125      	str	r5, [r4, #16]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d80 <__hi0bits>:
 8008d80:	0c03      	lsrs	r3, r0, #16
 8008d82:	041b      	lsls	r3, r3, #16
 8008d84:	b913      	cbnz	r3, 8008d8c <__hi0bits+0xc>
 8008d86:	0400      	lsls	r0, r0, #16
 8008d88:	2310      	movs	r3, #16
 8008d8a:	e000      	b.n	8008d8e <__hi0bits+0xe>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d92:	bf04      	itt	eq
 8008d94:	0200      	lsleq	r0, r0, #8
 8008d96:	3308      	addeq	r3, #8
 8008d98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d9c:	bf04      	itt	eq
 8008d9e:	0100      	lsleq	r0, r0, #4
 8008da0:	3304      	addeq	r3, #4
 8008da2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008da6:	bf04      	itt	eq
 8008da8:	0080      	lsleq	r0, r0, #2
 8008daa:	3302      	addeq	r3, #2
 8008dac:	2800      	cmp	r0, #0
 8008dae:	db03      	blt.n	8008db8 <__hi0bits+0x38>
 8008db0:	0042      	lsls	r2, r0, #1
 8008db2:	d503      	bpl.n	8008dbc <__hi0bits+0x3c>
 8008db4:	1c58      	adds	r0, r3, #1
 8008db6:	4770      	bx	lr
 8008db8:	4618      	mov	r0, r3
 8008dba:	4770      	bx	lr
 8008dbc:	2020      	movs	r0, #32
 8008dbe:	4770      	bx	lr

08008dc0 <__lo0bits>:
 8008dc0:	6803      	ldr	r3, [r0, #0]
 8008dc2:	f013 0207 	ands.w	r2, r3, #7
 8008dc6:	d00b      	beq.n	8008de0 <__lo0bits+0x20>
 8008dc8:	07d9      	lsls	r1, r3, #31
 8008dca:	d422      	bmi.n	8008e12 <__lo0bits+0x52>
 8008dcc:	079a      	lsls	r2, r3, #30
 8008dce:	bf4b      	itete	mi
 8008dd0:	085b      	lsrmi	r3, r3, #1
 8008dd2:	089b      	lsrpl	r3, r3, #2
 8008dd4:	6003      	strmi	r3, [r0, #0]
 8008dd6:	6003      	strpl	r3, [r0, #0]
 8008dd8:	bf4c      	ite	mi
 8008dda:	2001      	movmi	r0, #1
 8008ddc:	2002      	movpl	r0, #2
 8008dde:	4770      	bx	lr
 8008de0:	b299      	uxth	r1, r3
 8008de2:	b909      	cbnz	r1, 8008de8 <__lo0bits+0x28>
 8008de4:	0c1b      	lsrs	r3, r3, #16
 8008de6:	2210      	movs	r2, #16
 8008de8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008dec:	bf04      	itt	eq
 8008dee:	0a1b      	lsreq	r3, r3, #8
 8008df0:	3208      	addeq	r2, #8
 8008df2:	0719      	lsls	r1, r3, #28
 8008df4:	bf04      	itt	eq
 8008df6:	091b      	lsreq	r3, r3, #4
 8008df8:	3204      	addeq	r2, #4
 8008dfa:	0799      	lsls	r1, r3, #30
 8008dfc:	bf04      	itt	eq
 8008dfe:	089b      	lsreq	r3, r3, #2
 8008e00:	3202      	addeq	r2, #2
 8008e02:	07d9      	lsls	r1, r3, #31
 8008e04:	d402      	bmi.n	8008e0c <__lo0bits+0x4c>
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	d005      	beq.n	8008e16 <__lo0bits+0x56>
 8008e0a:	3201      	adds	r2, #1
 8008e0c:	6003      	str	r3, [r0, #0]
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4770      	bx	lr
 8008e12:	2000      	movs	r0, #0
 8008e14:	4770      	bx	lr
 8008e16:	2020      	movs	r0, #32
 8008e18:	4770      	bx	lr

08008e1a <__i2b>:
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	2101      	movs	r1, #1
 8008e20:	f7ff ff27 	bl	8008c72 <_Balloc>
 8008e24:	2201      	movs	r2, #1
 8008e26:	6144      	str	r4, [r0, #20]
 8008e28:	6102      	str	r2, [r0, #16]
 8008e2a:	bd10      	pop	{r4, pc}

08008e2c <__multiply>:
 8008e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	4614      	mov	r4, r2
 8008e32:	690a      	ldr	r2, [r1, #16]
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	bfb8      	it	lt
 8008e3a:	460b      	movlt	r3, r1
 8008e3c:	4688      	mov	r8, r1
 8008e3e:	bfbc      	itt	lt
 8008e40:	46a0      	movlt	r8, r4
 8008e42:	461c      	movlt	r4, r3
 8008e44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e54:	eb07 0609 	add.w	r6, r7, r9
 8008e58:	429e      	cmp	r6, r3
 8008e5a:	bfc8      	it	gt
 8008e5c:	3101      	addgt	r1, #1
 8008e5e:	f7ff ff08 	bl	8008c72 <_Balloc>
 8008e62:	f100 0514 	add.w	r5, r0, #20
 8008e66:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8008e6a:	462b      	mov	r3, r5
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4563      	cmp	r3, ip
 8008e70:	d202      	bcs.n	8008e78 <__multiply+0x4c>
 8008e72:	f843 2b04 	str.w	r2, [r3], #4
 8008e76:	e7fa      	b.n	8008e6e <__multiply+0x42>
 8008e78:	f104 0214 	add.w	r2, r4, #20
 8008e7c:	f108 0114 	add.w	r1, r8, #20
 8008e80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008e84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	9b00      	ldr	r3, [sp, #0]
 8008e8c:	9201      	str	r2, [sp, #4]
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d957      	bls.n	8008f42 <__multiply+0x116>
 8008e92:	f8b2 b000 	ldrh.w	fp, [r2]
 8008e96:	f1bb 0f00 	cmp.w	fp, #0
 8008e9a:	d023      	beq.n	8008ee4 <__multiply+0xb8>
 8008e9c:	4689      	mov	r9, r1
 8008e9e:	46ae      	mov	lr, r5
 8008ea0:	f04f 0800 	mov.w	r8, #0
 8008ea4:	f859 4b04 	ldr.w	r4, [r9], #4
 8008ea8:	f8be a000 	ldrh.w	sl, [lr]
 8008eac:	b2a3      	uxth	r3, r4
 8008eae:	fb0b a303 	mla	r3, fp, r3, sl
 8008eb2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008eb6:	f8de 4000 	ldr.w	r4, [lr]
 8008eba:	4443      	add	r3, r8
 8008ebc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ec0:	fb0b 840a 	mla	r4, fp, sl, r8
 8008ec4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008ec8:	46f2      	mov	sl, lr
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ed0:	454f      	cmp	r7, r9
 8008ed2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ed6:	f84a 3b04 	str.w	r3, [sl], #4
 8008eda:	d901      	bls.n	8008ee0 <__multiply+0xb4>
 8008edc:	46d6      	mov	lr, sl
 8008ede:	e7e1      	b.n	8008ea4 <__multiply+0x78>
 8008ee0:	f8ce 8004 	str.w	r8, [lr, #4]
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008eea:	3204      	adds	r2, #4
 8008eec:	f1ba 0f00 	cmp.w	sl, #0
 8008ef0:	d021      	beq.n	8008f36 <__multiply+0x10a>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	462c      	mov	r4, r5
 8008ef6:	4689      	mov	r9, r1
 8008ef8:	f04f 0800 	mov.w	r8, #0
 8008efc:	f8b9 e000 	ldrh.w	lr, [r9]
 8008f00:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8008f04:	fb0a be0e 	mla	lr, sl, lr, fp
 8008f08:	44f0      	add	r8, lr
 8008f0a:	46a3      	mov	fp, r4
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008f12:	f84b 3b04 	str.w	r3, [fp], #4
 8008f16:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f1a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8008f1e:	0c1b      	lsrs	r3, r3, #16
 8008f20:	fb0a e303 	mla	r3, sl, r3, lr
 8008f24:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8008f28:	454f      	cmp	r7, r9
 8008f2a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8008f2e:	d901      	bls.n	8008f34 <__multiply+0x108>
 8008f30:	465c      	mov	r4, fp
 8008f32:	e7e3      	b.n	8008efc <__multiply+0xd0>
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	3504      	adds	r5, #4
 8008f38:	e7a7      	b.n	8008e8a <__multiply+0x5e>
 8008f3a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8008f3e:	b913      	cbnz	r3, 8008f46 <__multiply+0x11a>
 8008f40:	3e01      	subs	r6, #1
 8008f42:	2e00      	cmp	r6, #0
 8008f44:	dcf9      	bgt.n	8008f3a <__multiply+0x10e>
 8008f46:	6106      	str	r6, [r0, #16]
 8008f48:	b003      	add	sp, #12
 8008f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008f50 <__pow5mult>:
 8008f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f54:	4615      	mov	r5, r2
 8008f56:	f012 0203 	ands.w	r2, r2, #3
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	460f      	mov	r7, r1
 8008f5e:	d007      	beq.n	8008f70 <__pow5mult+0x20>
 8008f60:	3a01      	subs	r2, #1
 8008f62:	4c21      	ldr	r4, [pc, #132]	; (8008fe8 <__pow5mult+0x98>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f6a:	f7ff fece 	bl	8008d0a <__multadd>
 8008f6e:	4607      	mov	r7, r0
 8008f70:	10ad      	asrs	r5, r5, #2
 8008f72:	d036      	beq.n	8008fe2 <__pow5mult+0x92>
 8008f74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f76:	b93c      	cbnz	r4, 8008f88 <__pow5mult+0x38>
 8008f78:	2010      	movs	r0, #16
 8008f7a:	f7fc f86d 	bl	8005058 <malloc>
 8008f7e:	6270      	str	r0, [r6, #36]	; 0x24
 8008f80:	6044      	str	r4, [r0, #4]
 8008f82:	6084      	str	r4, [r0, #8]
 8008f84:	6004      	str	r4, [r0, #0]
 8008f86:	60c4      	str	r4, [r0, #12]
 8008f88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f90:	b94c      	cbnz	r4, 8008fa6 <__pow5mult+0x56>
 8008f92:	f240 2171 	movw	r1, #625	; 0x271
 8008f96:	4630      	mov	r0, r6
 8008f98:	f7ff ff3f 	bl	8008e1a <__i2b>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	6003      	str	r3, [r0, #0]
 8008fa6:	f04f 0800 	mov.w	r8, #0
 8008faa:	07eb      	lsls	r3, r5, #31
 8008fac:	d50a      	bpl.n	8008fc4 <__pow5mult+0x74>
 8008fae:	4639      	mov	r1, r7
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7ff ff3a 	bl	8008e2c <__multiply>
 8008fb8:	4639      	mov	r1, r7
 8008fba:	4681      	mov	r9, r0
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f7ff fe8d 	bl	8008cdc <_Bfree>
 8008fc2:	464f      	mov	r7, r9
 8008fc4:	106d      	asrs	r5, r5, #1
 8008fc6:	d00c      	beq.n	8008fe2 <__pow5mult+0x92>
 8008fc8:	6820      	ldr	r0, [r4, #0]
 8008fca:	b108      	cbz	r0, 8008fd0 <__pow5mult+0x80>
 8008fcc:	4604      	mov	r4, r0
 8008fce:	e7ec      	b.n	8008faa <__pow5mult+0x5a>
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7ff ff29 	bl	8008e2c <__multiply>
 8008fda:	6020      	str	r0, [r4, #0]
 8008fdc:	f8c0 8000 	str.w	r8, [r0]
 8008fe0:	e7f4      	b.n	8008fcc <__pow5mult+0x7c>
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe8:	0800a338 	.word	0x0800a338

08008fec <__lshift>:
 8008fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ff6:	6926      	ldr	r6, [r4, #16]
 8008ff8:	6849      	ldr	r1, [r1, #4]
 8008ffa:	68a3      	ldr	r3, [r4, #8]
 8008ffc:	4456      	add	r6, sl
 8008ffe:	4607      	mov	r7, r0
 8009000:	4691      	mov	r9, r2
 8009002:	1c75      	adds	r5, r6, #1
 8009004:	42ab      	cmp	r3, r5
 8009006:	da02      	bge.n	800900e <__lshift+0x22>
 8009008:	3101      	adds	r1, #1
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	e7fa      	b.n	8009004 <__lshift+0x18>
 800900e:	4638      	mov	r0, r7
 8009010:	f7ff fe2f 	bl	8008c72 <_Balloc>
 8009014:	2300      	movs	r3, #0
 8009016:	4680      	mov	r8, r0
 8009018:	f100 0114 	add.w	r1, r0, #20
 800901c:	461a      	mov	r2, r3
 800901e:	4553      	cmp	r3, sl
 8009020:	da03      	bge.n	800902a <__lshift+0x3e>
 8009022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009026:	3301      	adds	r3, #1
 8009028:	e7f9      	b.n	800901e <__lshift+0x32>
 800902a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800902e:	6920      	ldr	r0, [r4, #16]
 8009030:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009034:	f019 091f 	ands.w	r9, r9, #31
 8009038:	f104 0114 	add.w	r1, r4, #20
 800903c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009040:	d014      	beq.n	800906c <__lshift+0x80>
 8009042:	f1c9 0c20 	rsb	ip, r9, #32
 8009046:	2200      	movs	r2, #0
 8009048:	6808      	ldr	r0, [r1, #0]
 800904a:	fa00 f009 	lsl.w	r0, r0, r9
 800904e:	4302      	orrs	r2, r0
 8009050:	469a      	mov	sl, r3
 8009052:	f843 2b04 	str.w	r2, [r3], #4
 8009056:	f851 2b04 	ldr.w	r2, [r1], #4
 800905a:	458e      	cmp	lr, r1
 800905c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009060:	d8f2      	bhi.n	8009048 <__lshift+0x5c>
 8009062:	f8ca 2004 	str.w	r2, [sl, #4]
 8009066:	b142      	cbz	r2, 800907a <__lshift+0x8e>
 8009068:	1cb5      	adds	r5, r6, #2
 800906a:	e006      	b.n	800907a <__lshift+0x8e>
 800906c:	3b04      	subs	r3, #4
 800906e:	f851 2b04 	ldr.w	r2, [r1], #4
 8009072:	f843 2f04 	str.w	r2, [r3, #4]!
 8009076:	458e      	cmp	lr, r1
 8009078:	d8f9      	bhi.n	800906e <__lshift+0x82>
 800907a:	3d01      	subs	r5, #1
 800907c:	4638      	mov	r0, r7
 800907e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009082:	4621      	mov	r1, r4
 8009084:	f7ff fe2a 	bl	8008cdc <_Bfree>
 8009088:	4640      	mov	r0, r8
 800908a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800908e <__mcmp>:
 800908e:	6903      	ldr	r3, [r0, #16]
 8009090:	690a      	ldr	r2, [r1, #16]
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	b510      	push	{r4, lr}
 8009096:	d111      	bne.n	80090bc <__mcmp+0x2e>
 8009098:	0092      	lsls	r2, r2, #2
 800909a:	3014      	adds	r0, #20
 800909c:	3114      	adds	r1, #20
 800909e:	1883      	adds	r3, r0, r2
 80090a0:	440a      	add	r2, r1
 80090a2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80090a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80090aa:	428c      	cmp	r4, r1
 80090ac:	d002      	beq.n	80090b4 <__mcmp+0x26>
 80090ae:	d307      	bcc.n	80090c0 <__mcmp+0x32>
 80090b0:	2001      	movs	r0, #1
 80090b2:	bd10      	pop	{r4, pc}
 80090b4:	4298      	cmp	r0, r3
 80090b6:	d3f4      	bcc.n	80090a2 <__mcmp+0x14>
 80090b8:	2000      	movs	r0, #0
 80090ba:	bd10      	pop	{r4, pc}
 80090bc:	4618      	mov	r0, r3
 80090be:	bd10      	pop	{r4, pc}
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295
 80090c4:	bd10      	pop	{r4, pc}

080090c6 <__mdiff>:
 80090c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ca:	460c      	mov	r4, r1
 80090cc:	4607      	mov	r7, r0
 80090ce:	4611      	mov	r1, r2
 80090d0:	4620      	mov	r0, r4
 80090d2:	4615      	mov	r5, r2
 80090d4:	f7ff ffdb 	bl	800908e <__mcmp>
 80090d8:	1e06      	subs	r6, r0, #0
 80090da:	d108      	bne.n	80090ee <__mdiff+0x28>
 80090dc:	4631      	mov	r1, r6
 80090de:	4638      	mov	r0, r7
 80090e0:	f7ff fdc7 	bl	8008c72 <_Balloc>
 80090e4:	2301      	movs	r3, #1
 80090e6:	6103      	str	r3, [r0, #16]
 80090e8:	6146      	str	r6, [r0, #20]
 80090ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ee:	bfbc      	itt	lt
 80090f0:	4623      	movlt	r3, r4
 80090f2:	462c      	movlt	r4, r5
 80090f4:	4638      	mov	r0, r7
 80090f6:	6861      	ldr	r1, [r4, #4]
 80090f8:	bfba      	itte	lt
 80090fa:	461d      	movlt	r5, r3
 80090fc:	2601      	movlt	r6, #1
 80090fe:	2600      	movge	r6, #0
 8009100:	f7ff fdb7 	bl	8008c72 <_Balloc>
 8009104:	692b      	ldr	r3, [r5, #16]
 8009106:	60c6      	str	r6, [r0, #12]
 8009108:	6926      	ldr	r6, [r4, #16]
 800910a:	f105 0914 	add.w	r9, r5, #20
 800910e:	3414      	adds	r4, #20
 8009110:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8009114:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009118:	f100 0514 	add.w	r5, r0, #20
 800911c:	f04f 0c00 	mov.w	ip, #0
 8009120:	f854 3b04 	ldr.w	r3, [r4], #4
 8009124:	f859 2b04 	ldr.w	r2, [r9], #4
 8009128:	fa1c f183 	uxtah	r1, ip, r3
 800912c:	fa1f fe82 	uxth.w	lr, r2
 8009130:	0c12      	lsrs	r2, r2, #16
 8009132:	ebce 0101 	rsb	r1, lr, r1
 8009136:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800913a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800913e:	b289      	uxth	r1, r1
 8009140:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009144:	45c8      	cmp	r8, r9
 8009146:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800914a:	46a6      	mov	lr, r4
 800914c:	f845 3b04 	str.w	r3, [r5], #4
 8009150:	d8e6      	bhi.n	8009120 <__mdiff+0x5a>
 8009152:	45be      	cmp	lr, r7
 8009154:	d20e      	bcs.n	8009174 <__mdiff+0xae>
 8009156:	f85e 1b04 	ldr.w	r1, [lr], #4
 800915a:	fa1c f281 	uxtah	r2, ip, r1
 800915e:	1413      	asrs	r3, r2, #16
 8009160:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8009164:	b292      	uxth	r2, r2
 8009166:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800916a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800916e:	f845 2b04 	str.w	r2, [r5], #4
 8009172:	e7ee      	b.n	8009152 <__mdiff+0x8c>
 8009174:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009178:	b90b      	cbnz	r3, 800917e <__mdiff+0xb8>
 800917a:	3e01      	subs	r6, #1
 800917c:	e7fa      	b.n	8009174 <__mdiff+0xae>
 800917e:	6106      	str	r6, [r0, #16]
 8009180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009184 <__d2b>:
 8009184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009188:	460e      	mov	r6, r1
 800918a:	2101      	movs	r1, #1
 800918c:	ec59 8b10 	vmov	r8, r9, d0
 8009190:	4615      	mov	r5, r2
 8009192:	f7ff fd6e 	bl	8008c72 <_Balloc>
 8009196:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800919a:	4607      	mov	r7, r0
 800919c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091a0:	b10c      	cbz	r4, 80091a6 <__d2b+0x22>
 80091a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	f1b8 0f00 	cmp.w	r8, #0
 80091ac:	d019      	beq.n	80091e2 <__d2b+0x5e>
 80091ae:	a802      	add	r0, sp, #8
 80091b0:	f840 8d08 	str.w	r8, [r0, #-8]!
 80091b4:	f7ff fe04 	bl	8008dc0 <__lo0bits>
 80091b8:	9b00      	ldr	r3, [sp, #0]
 80091ba:	b148      	cbz	r0, 80091d0 <__d2b+0x4c>
 80091bc:	9a01      	ldr	r2, [sp, #4]
 80091be:	f1c0 0120 	rsb	r1, r0, #32
 80091c2:	fa02 f101 	lsl.w	r1, r2, r1
 80091c6:	430b      	orrs	r3, r1
 80091c8:	40c2      	lsrs	r2, r0
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	9201      	str	r2, [sp, #4]
 80091ce:	e000      	b.n	80091d2 <__d2b+0x4e>
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	9b01      	ldr	r3, [sp, #4]
 80091d4:	61bb      	str	r3, [r7, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	bf14      	ite	ne
 80091da:	2102      	movne	r1, #2
 80091dc:	2101      	moveq	r1, #1
 80091de:	6139      	str	r1, [r7, #16]
 80091e0:	e007      	b.n	80091f2 <__d2b+0x6e>
 80091e2:	a801      	add	r0, sp, #4
 80091e4:	f7ff fdec 	bl	8008dc0 <__lo0bits>
 80091e8:	9b01      	ldr	r3, [sp, #4]
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	2101      	movs	r1, #1
 80091ee:	6139      	str	r1, [r7, #16]
 80091f0:	3020      	adds	r0, #32
 80091f2:	b134      	cbz	r4, 8009202 <__d2b+0x7e>
 80091f4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80091f8:	4404      	add	r4, r0
 80091fa:	6034      	str	r4, [r6, #0]
 80091fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009200:	e009      	b.n	8009216 <__d2b+0x92>
 8009202:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009206:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800920a:	6030      	str	r0, [r6, #0]
 800920c:	6918      	ldr	r0, [r3, #16]
 800920e:	f7ff fdb7 	bl	8008d80 <__hi0bits>
 8009212:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009216:	6028      	str	r0, [r5, #0]
 8009218:	4638      	mov	r0, r7
 800921a:	b003      	add	sp, #12
 800921c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009220 <_realloc_r>:
 8009220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	4681      	mov	r9, r0
 8009226:	460c      	mov	r4, r1
 8009228:	b929      	cbnz	r1, 8009236 <_realloc_r+0x16>
 800922a:	4611      	mov	r1, r2
 800922c:	b003      	add	sp, #12
 800922e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009232:	f7fb bf19 	b.w	8005068 <_malloc_r>
 8009236:	9201      	str	r2, [sp, #4]
 8009238:	f7fc f949 	bl	80054ce <__malloc_lock>
 800923c:	9a01      	ldr	r2, [sp, #4]
 800923e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8009242:	f102 080b 	add.w	r8, r2, #11
 8009246:	f1b8 0f16 	cmp.w	r8, #22
 800924a:	f1a4 0b08 	sub.w	fp, r4, #8
 800924e:	f02e 0503 	bic.w	r5, lr, #3
 8009252:	d903      	bls.n	800925c <_realloc_r+0x3c>
 8009254:	f038 0807 	bics.w	r8, r8, #7
 8009258:	d502      	bpl.n	8009260 <_realloc_r+0x40>
 800925a:	e003      	b.n	8009264 <_realloc_r+0x44>
 800925c:	f04f 0810 	mov.w	r8, #16
 8009260:	4590      	cmp	r8, r2
 8009262:	d204      	bcs.n	800926e <_realloc_r+0x4e>
 8009264:	230c      	movs	r3, #12
 8009266:	f8c9 3000 	str.w	r3, [r9]
 800926a:	2000      	movs	r0, #0
 800926c:	e17d      	b.n	800956a <_realloc_r+0x34a>
 800926e:	45a8      	cmp	r8, r5
 8009270:	f340 8150 	ble.w	8009514 <_realloc_r+0x2f4>
 8009274:	4ba6      	ldr	r3, [pc, #664]	; (8009510 <_realloc_r+0x2f0>)
 8009276:	6898      	ldr	r0, [r3, #8]
 8009278:	eb0b 0105 	add.w	r1, fp, r5
 800927c:	4281      	cmp	r1, r0
 800927e:	684f      	ldr	r7, [r1, #4]
 8009280:	d005      	beq.n	800928e <_realloc_r+0x6e>
 8009282:	f027 0601 	bic.w	r6, r7, #1
 8009286:	440e      	add	r6, r1
 8009288:	6876      	ldr	r6, [r6, #4]
 800928a:	07f6      	lsls	r6, r6, #31
 800928c:	d426      	bmi.n	80092dc <_realloc_r+0xbc>
 800928e:	f027 0a03 	bic.w	sl, r7, #3
 8009292:	4281      	cmp	r1, r0
 8009294:	eb05 070a 	add.w	r7, r5, sl
 8009298:	d118      	bne.n	80092cc <_realloc_r+0xac>
 800929a:	f108 0610 	add.w	r6, r8, #16
 800929e:	42b7      	cmp	r7, r6
 80092a0:	db1f      	blt.n	80092e2 <_realloc_r+0xc2>
 80092a2:	eb0b 0008 	add.w	r0, fp, r8
 80092a6:	ebc8 0707 	rsb	r7, r8, r7
 80092aa:	f047 0701 	orr.w	r7, r7, #1
 80092ae:	6098      	str	r0, [r3, #8]
 80092b0:	6047      	str	r7, [r0, #4]
 80092b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	ea43 0308 	orr.w	r3, r3, r8
 80092be:	4648      	mov	r0, r9
 80092c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80092c4:	f7fc f904 	bl	80054d0 <__malloc_unlock>
 80092c8:	4620      	mov	r0, r4
 80092ca:	e14e      	b.n	800956a <_realloc_r+0x34a>
 80092cc:	45b8      	cmp	r8, r7
 80092ce:	dc08      	bgt.n	80092e2 <_realloc_r+0xc2>
 80092d0:	68cb      	ldr	r3, [r1, #12]
 80092d2:	688a      	ldr	r2, [r1, #8]
 80092d4:	463d      	mov	r5, r7
 80092d6:	60d3      	str	r3, [r2, #12]
 80092d8:	609a      	str	r2, [r3, #8]
 80092da:	e11b      	b.n	8009514 <_realloc_r+0x2f4>
 80092dc:	f04f 0a00 	mov.w	sl, #0
 80092e0:	4651      	mov	r1, sl
 80092e2:	f01e 0f01 	tst.w	lr, #1
 80092e6:	f040 80c3 	bne.w	8009470 <_realloc_r+0x250>
 80092ea:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80092ee:	ebc7 070b 	rsb	r7, r7, fp
 80092f2:	687e      	ldr	r6, [r7, #4]
 80092f4:	f026 0603 	bic.w	r6, r6, #3
 80092f8:	442e      	add	r6, r5
 80092fa:	2900      	cmp	r1, #0
 80092fc:	f000 8083 	beq.w	8009406 <_realloc_r+0x1e6>
 8009300:	4281      	cmp	r1, r0
 8009302:	44b2      	add	sl, r6
 8009304:	d147      	bne.n	8009396 <_realloc_r+0x176>
 8009306:	f108 0110 	add.w	r1, r8, #16
 800930a:	458a      	cmp	sl, r1
 800930c:	db7b      	blt.n	8009406 <_realloc_r+0x1e6>
 800930e:	463e      	mov	r6, r7
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8009316:	60ca      	str	r2, [r1, #12]
 8009318:	6091      	str	r1, [r2, #8]
 800931a:	1f2a      	subs	r2, r5, #4
 800931c:	2a24      	cmp	r2, #36	; 0x24
 800931e:	d825      	bhi.n	800936c <_realloc_r+0x14c>
 8009320:	2a13      	cmp	r2, #19
 8009322:	d91b      	bls.n	800935c <_realloc_r+0x13c>
 8009324:	6821      	ldr	r1, [r4, #0]
 8009326:	60b9      	str	r1, [r7, #8]
 8009328:	6861      	ldr	r1, [r4, #4]
 800932a:	60f9      	str	r1, [r7, #12]
 800932c:	2a1b      	cmp	r2, #27
 800932e:	d803      	bhi.n	8009338 <_realloc_r+0x118>
 8009330:	f107 0210 	add.w	r2, r7, #16
 8009334:	3408      	adds	r4, #8
 8009336:	e012      	b.n	800935e <_realloc_r+0x13e>
 8009338:	68a1      	ldr	r1, [r4, #8]
 800933a:	6139      	str	r1, [r7, #16]
 800933c:	68e1      	ldr	r1, [r4, #12]
 800933e:	6179      	str	r1, [r7, #20]
 8009340:	2a24      	cmp	r2, #36	; 0x24
 8009342:	bf01      	itttt	eq
 8009344:	6922      	ldreq	r2, [r4, #16]
 8009346:	61ba      	streq	r2, [r7, #24]
 8009348:	6961      	ldreq	r1, [r4, #20]
 800934a:	61f9      	streq	r1, [r7, #28]
 800934c:	bf19      	ittee	ne
 800934e:	f107 0218 	addne.w	r2, r7, #24
 8009352:	3410      	addne	r4, #16
 8009354:	f107 0220 	addeq.w	r2, r7, #32
 8009358:	3418      	addeq	r4, #24
 800935a:	e000      	b.n	800935e <_realloc_r+0x13e>
 800935c:	4632      	mov	r2, r6
 800935e:	6821      	ldr	r1, [r4, #0]
 8009360:	6011      	str	r1, [r2, #0]
 8009362:	6861      	ldr	r1, [r4, #4]
 8009364:	6051      	str	r1, [r2, #4]
 8009366:	68a1      	ldr	r1, [r4, #8]
 8009368:	6091      	str	r1, [r2, #8]
 800936a:	e005      	b.n	8009378 <_realloc_r+0x158>
 800936c:	4621      	mov	r1, r4
 800936e:	4630      	mov	r0, r6
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	f7ff fc63 	bl	8008c3c <memmove>
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	eb07 0208 	add.w	r2, r7, r8
 800937c:	ebc8 0a0a 	rsb	sl, r8, sl
 8009380:	609a      	str	r2, [r3, #8]
 8009382:	f04a 0301 	orr.w	r3, sl, #1
 8009386:	6053      	str	r3, [r2, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	ea43 0308 	orr.w	r3, r3, r8
 8009392:	607b      	str	r3, [r7, #4]
 8009394:	e0b6      	b.n	8009504 <_realloc_r+0x2e4>
 8009396:	45d0      	cmp	r8, sl
 8009398:	dc35      	bgt.n	8009406 <_realloc_r+0x1e6>
 800939a:	68cb      	ldr	r3, [r1, #12]
 800939c:	688a      	ldr	r2, [r1, #8]
 800939e:	4638      	mov	r0, r7
 80093a0:	60d3      	str	r3, [r2, #12]
 80093a2:	609a      	str	r2, [r3, #8]
 80093a4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	60d3      	str	r3, [r2, #12]
 80093ac:	609a      	str	r2, [r3, #8]
 80093ae:	1f2a      	subs	r2, r5, #4
 80093b0:	2a24      	cmp	r2, #36	; 0x24
 80093b2:	d823      	bhi.n	80093fc <_realloc_r+0x1dc>
 80093b4:	2a13      	cmp	r2, #19
 80093b6:	d91a      	bls.n	80093ee <_realloc_r+0x1ce>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	60bb      	str	r3, [r7, #8]
 80093bc:	6863      	ldr	r3, [r4, #4]
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	2a1b      	cmp	r2, #27
 80093c2:	d803      	bhi.n	80093cc <_realloc_r+0x1ac>
 80093c4:	f107 0010 	add.w	r0, r7, #16
 80093c8:	3408      	adds	r4, #8
 80093ca:	e010      	b.n	80093ee <_realloc_r+0x1ce>
 80093cc:	68a3      	ldr	r3, [r4, #8]
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	68e3      	ldr	r3, [r4, #12]
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	2a24      	cmp	r2, #36	; 0x24
 80093d6:	bf01      	itttt	eq
 80093d8:	6923      	ldreq	r3, [r4, #16]
 80093da:	61bb      	streq	r3, [r7, #24]
 80093dc:	6963      	ldreq	r3, [r4, #20]
 80093de:	61fb      	streq	r3, [r7, #28]
 80093e0:	bf19      	ittee	ne
 80093e2:	f107 0018 	addne.w	r0, r7, #24
 80093e6:	3410      	addne	r4, #16
 80093e8:	f107 0020 	addeq.w	r0, r7, #32
 80093ec:	3418      	addeq	r4, #24
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	6003      	str	r3, [r0, #0]
 80093f2:	6863      	ldr	r3, [r4, #4]
 80093f4:	6043      	str	r3, [r0, #4]
 80093f6:	68a3      	ldr	r3, [r4, #8]
 80093f8:	6083      	str	r3, [r0, #8]
 80093fa:	e002      	b.n	8009402 <_realloc_r+0x1e2>
 80093fc:	4621      	mov	r1, r4
 80093fe:	f7ff fc1d 	bl	8008c3c <memmove>
 8009402:	4655      	mov	r5, sl
 8009404:	e02e      	b.n	8009464 <_realloc_r+0x244>
 8009406:	45b0      	cmp	r8, r6
 8009408:	dc32      	bgt.n	8009470 <_realloc_r+0x250>
 800940a:	4638      	mov	r0, r7
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009412:	60d3      	str	r3, [r2, #12]
 8009414:	609a      	str	r2, [r3, #8]
 8009416:	1f2a      	subs	r2, r5, #4
 8009418:	2a24      	cmp	r2, #36	; 0x24
 800941a:	d825      	bhi.n	8009468 <_realloc_r+0x248>
 800941c:	2a13      	cmp	r2, #19
 800941e:	d91a      	bls.n	8009456 <_realloc_r+0x236>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	60bb      	str	r3, [r7, #8]
 8009424:	6863      	ldr	r3, [r4, #4]
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	2a1b      	cmp	r2, #27
 800942a:	d803      	bhi.n	8009434 <_realloc_r+0x214>
 800942c:	f107 0010 	add.w	r0, r7, #16
 8009430:	3408      	adds	r4, #8
 8009432:	e010      	b.n	8009456 <_realloc_r+0x236>
 8009434:	68a3      	ldr	r3, [r4, #8]
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	68e3      	ldr	r3, [r4, #12]
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	2a24      	cmp	r2, #36	; 0x24
 800943e:	bf01      	itttt	eq
 8009440:	6923      	ldreq	r3, [r4, #16]
 8009442:	61bb      	streq	r3, [r7, #24]
 8009444:	6963      	ldreq	r3, [r4, #20]
 8009446:	61fb      	streq	r3, [r7, #28]
 8009448:	bf19      	ittee	ne
 800944a:	f107 0018 	addne.w	r0, r7, #24
 800944e:	3410      	addne	r4, #16
 8009450:	f107 0020 	addeq.w	r0, r7, #32
 8009454:	3418      	addeq	r4, #24
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	6863      	ldr	r3, [r4, #4]
 800945c:	6043      	str	r3, [r0, #4]
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	6083      	str	r3, [r0, #8]
 8009462:	4635      	mov	r5, r6
 8009464:	46bb      	mov	fp, r7
 8009466:	e055      	b.n	8009514 <_realloc_r+0x2f4>
 8009468:	4621      	mov	r1, r4
 800946a:	f7ff fbe7 	bl	8008c3c <memmove>
 800946e:	e7f8      	b.n	8009462 <_realloc_r+0x242>
 8009470:	4611      	mov	r1, r2
 8009472:	4648      	mov	r0, r9
 8009474:	f7fb fdf8 	bl	8005068 <_malloc_r>
 8009478:	4606      	mov	r6, r0
 800947a:	2800      	cmp	r0, #0
 800947c:	d042      	beq.n	8009504 <_realloc_r+0x2e4>
 800947e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009482:	f023 0301 	bic.w	r3, r3, #1
 8009486:	f1a0 0208 	sub.w	r2, r0, #8
 800948a:	445b      	add	r3, fp
 800948c:	429a      	cmp	r2, r3
 800948e:	d105      	bne.n	800949c <_realloc_r+0x27c>
 8009490:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009494:	f023 0303 	bic.w	r3, r3, #3
 8009498:	441d      	add	r5, r3
 800949a:	e03b      	b.n	8009514 <_realloc_r+0x2f4>
 800949c:	1f2a      	subs	r2, r5, #4
 800949e:	2a24      	cmp	r2, #36	; 0x24
 80094a0:	d829      	bhi.n	80094f6 <_realloc_r+0x2d6>
 80094a2:	2a13      	cmp	r2, #19
 80094a4:	d91e      	bls.n	80094e4 <_realloc_r+0x2c4>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	6863      	ldr	r3, [r4, #4]
 80094ac:	6043      	str	r3, [r0, #4]
 80094ae:	2a1b      	cmp	r2, #27
 80094b0:	d804      	bhi.n	80094bc <_realloc_r+0x29c>
 80094b2:	f100 0308 	add.w	r3, r0, #8
 80094b6:	f104 0208 	add.w	r2, r4, #8
 80094ba:	e015      	b.n	80094e8 <_realloc_r+0x2c8>
 80094bc:	68a3      	ldr	r3, [r4, #8]
 80094be:	6083      	str	r3, [r0, #8]
 80094c0:	68e3      	ldr	r3, [r4, #12]
 80094c2:	60c3      	str	r3, [r0, #12]
 80094c4:	2a24      	cmp	r2, #36	; 0x24
 80094c6:	bf01      	itttt	eq
 80094c8:	6923      	ldreq	r3, [r4, #16]
 80094ca:	6103      	streq	r3, [r0, #16]
 80094cc:	6961      	ldreq	r1, [r4, #20]
 80094ce:	6141      	streq	r1, [r0, #20]
 80094d0:	bf19      	ittee	ne
 80094d2:	f100 0310 	addne.w	r3, r0, #16
 80094d6:	f104 0210 	addne.w	r2, r4, #16
 80094da:	f100 0318 	addeq.w	r3, r0, #24
 80094de:	f104 0218 	addeq.w	r2, r4, #24
 80094e2:	e001      	b.n	80094e8 <_realloc_r+0x2c8>
 80094e4:	4603      	mov	r3, r0
 80094e6:	4622      	mov	r2, r4
 80094e8:	6811      	ldr	r1, [r2, #0]
 80094ea:	6019      	str	r1, [r3, #0]
 80094ec:	6851      	ldr	r1, [r2, #4]
 80094ee:	6059      	str	r1, [r3, #4]
 80094f0:	6892      	ldr	r2, [r2, #8]
 80094f2:	609a      	str	r2, [r3, #8]
 80094f4:	e002      	b.n	80094fc <_realloc_r+0x2dc>
 80094f6:	4621      	mov	r1, r4
 80094f8:	f7ff fba0 	bl	8008c3c <memmove>
 80094fc:	4621      	mov	r1, r4
 80094fe:	4648      	mov	r0, r9
 8009500:	f7ff f900 	bl	8008704 <_free_r>
 8009504:	4648      	mov	r0, r9
 8009506:	f7fb ffe3 	bl	80054d0 <__malloc_unlock>
 800950a:	4630      	mov	r0, r6
 800950c:	e02d      	b.n	800956a <_realloc_r+0x34a>
 800950e:	bf00      	nop
 8009510:	20000008 	.word	0x20000008
 8009514:	ebc8 0205 	rsb	r2, r8, r5
 8009518:	2a0f      	cmp	r2, #15
 800951a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800951e:	d914      	bls.n	800954a <_realloc_r+0x32a>
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	eb0b 0108 	add.w	r1, fp, r8
 8009528:	ea43 0308 	orr.w	r3, r3, r8
 800952c:	f8cb 3004 	str.w	r3, [fp, #4]
 8009530:	f042 0301 	orr.w	r3, r2, #1
 8009534:	440a      	add	r2, r1
 8009536:	604b      	str	r3, [r1, #4]
 8009538:	6853      	ldr	r3, [r2, #4]
 800953a:	f043 0301 	orr.w	r3, r3, #1
 800953e:	6053      	str	r3, [r2, #4]
 8009540:	3108      	adds	r1, #8
 8009542:	4648      	mov	r0, r9
 8009544:	f7ff f8de 	bl	8008704 <_free_r>
 8009548:	e00a      	b.n	8009560 <_realloc_r+0x340>
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	432b      	orrs	r3, r5
 8009550:	eb0b 0205 	add.w	r2, fp, r5
 8009554:	f8cb 3004 	str.w	r3, [fp, #4]
 8009558:	6853      	ldr	r3, [r2, #4]
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	6053      	str	r3, [r2, #4]
 8009560:	4648      	mov	r0, r9
 8009562:	f7fb ffb5 	bl	80054d0 <__malloc_unlock>
 8009566:	f10b 0008 	add.w	r0, fp, #8
 800956a:	b003      	add	sp, #12
 800956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009570 <__sread>:
 8009570:	b510      	push	{r4, lr}
 8009572:	460c      	mov	r4, r1
 8009574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009578:	f000 fa14 	bl	80099a4 <_read_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	bfab      	itete	ge
 8009580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009582:	89a3      	ldrhlt	r3, [r4, #12]
 8009584:	181b      	addge	r3, r3, r0
 8009586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800958a:	bfac      	ite	ge
 800958c:	6563      	strge	r3, [r4, #84]	; 0x54
 800958e:	81a3      	strhlt	r3, [r4, #12]
 8009590:	bd10      	pop	{r4, pc}

08009592 <__swrite>:
 8009592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009596:	461f      	mov	r7, r3
 8009598:	898b      	ldrh	r3, [r1, #12]
 800959a:	05db      	lsls	r3, r3, #23
 800959c:	4605      	mov	r5, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	4616      	mov	r6, r2
 80095a2:	d505      	bpl.n	80095b0 <__swrite+0x1e>
 80095a4:	2302      	movs	r3, #2
 80095a6:	2200      	movs	r2, #0
 80095a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ac:	f000 f9e8 	bl	8009980 <_lseek_r>
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	4632      	mov	r2, r6
 80095be:	463b      	mov	r3, r7
 80095c0:	4628      	mov	r0, r5
 80095c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095c6:	f000 b8c7 	b.w	8009758 <_write_r>

080095ca <__sseek>:
 80095ca:	b510      	push	{r4, lr}
 80095cc:	460c      	mov	r4, r1
 80095ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d2:	f000 f9d5 	bl	8009980 <_lseek_r>
 80095d6:	1c43      	adds	r3, r0, #1
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	bf15      	itete	ne
 80095dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80095de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095e6:	81a3      	strheq	r3, [r4, #12]
 80095e8:	bf18      	it	ne
 80095ea:	81a3      	strhne	r3, [r4, #12]
 80095ec:	bd10      	pop	{r4, pc}

080095ee <__sclose>:
 80095ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f2:	f000 b8f1 	b.w	80097d8 <_close_r>

080095f6 <__ssprint_r>:
 80095f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fa:	4693      	mov	fp, r2
 80095fc:	6892      	ldr	r2, [r2, #8]
 80095fe:	4681      	mov	r9, r0
 8009600:	460c      	mov	r4, r1
 8009602:	b34a      	cbz	r2, 8009658 <__ssprint_r+0x62>
 8009604:	2300      	movs	r3, #0
 8009606:	f8db a000 	ldr.w	sl, [fp]
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	461f      	mov	r7, r3
 800960e:	e006      	b.n	800961e <__ssprint_r+0x28>
 8009610:	f8da 3000 	ldr.w	r3, [sl]
 8009614:	f8da 7004 	ldr.w	r7, [sl, #4]
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	f10a 0a08 	add.w	sl, sl, #8
 800961e:	2f00      	cmp	r7, #0
 8009620:	d0f6      	beq.n	8009610 <__ssprint_r+0x1a>
 8009622:	68a6      	ldr	r6, [r4, #8]
 8009624:	42b7      	cmp	r7, r6
 8009626:	d360      	bcc.n	80096ea <__ssprint_r+0xf4>
 8009628:	89a0      	ldrh	r0, [r4, #12]
 800962a:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800962e:	d117      	bne.n	8009660 <__ssprint_r+0x6a>
 8009630:	42b7      	cmp	r7, r6
 8009632:	d35a      	bcc.n	80096ea <__ssprint_r+0xf4>
 8009634:	4632      	mov	r2, r6
 8009636:	9901      	ldr	r1, [sp, #4]
 8009638:	6820      	ldr	r0, [r4, #0]
 800963a:	f7ff faff 	bl	8008c3c <memmove>
 800963e:	68a2      	ldr	r2, [r4, #8]
 8009640:	1b92      	subs	r2, r2, r6
 8009642:	60a2      	str	r2, [r4, #8]
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	4416      	add	r6, r2
 8009648:	f8db 2008 	ldr.w	r2, [fp, #8]
 800964c:	6026      	str	r6, [r4, #0]
 800964e:	1bd7      	subs	r7, r2, r7
 8009650:	f8cb 7008 	str.w	r7, [fp, #8]
 8009654:	2f00      	cmp	r7, #0
 8009656:	d1db      	bne.n	8009610 <__ssprint_r+0x1a>
 8009658:	2000      	movs	r0, #0
 800965a:	f8cb 0004 	str.w	r0, [fp, #4]
 800965e:	e046      	b.n	80096ee <__ssprint_r+0xf8>
 8009660:	6825      	ldr	r5, [r4, #0]
 8009662:	6921      	ldr	r1, [r4, #16]
 8009664:	ebc1 0805 	rsb	r8, r1, r5
 8009668:	f108 0201 	add.w	r2, r8, #1
 800966c:	6965      	ldr	r5, [r4, #20]
 800966e:	443a      	add	r2, r7
 8009670:	2302      	movs	r3, #2
 8009672:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009676:	fb95 f5f3 	sdiv	r5, r5, r3
 800967a:	4295      	cmp	r5, r2
 800967c:	bf38      	it	cc
 800967e:	4615      	movcc	r5, r2
 8009680:	0543      	lsls	r3, r0, #21
 8009682:	d510      	bpl.n	80096a6 <__ssprint_r+0xb0>
 8009684:	4629      	mov	r1, r5
 8009686:	4648      	mov	r0, r9
 8009688:	f7fb fcee 	bl	8005068 <_malloc_r>
 800968c:	4606      	mov	r6, r0
 800968e:	b1a0      	cbz	r0, 80096ba <__ssprint_r+0xc4>
 8009690:	4642      	mov	r2, r8
 8009692:	6921      	ldr	r1, [r4, #16]
 8009694:	f7fb ff08 	bl	80054a8 <memcpy>
 8009698:	89a2      	ldrh	r2, [r4, #12]
 800969a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800969e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096a2:	81a2      	strh	r2, [r4, #12]
 80096a4:	e018      	b.n	80096d8 <__ssprint_r+0xe2>
 80096a6:	462a      	mov	r2, r5
 80096a8:	4648      	mov	r0, r9
 80096aa:	f7ff fdb9 	bl	8009220 <_realloc_r>
 80096ae:	4606      	mov	r6, r0
 80096b0:	b990      	cbnz	r0, 80096d8 <__ssprint_r+0xe2>
 80096b2:	6921      	ldr	r1, [r4, #16]
 80096b4:	4648      	mov	r0, r9
 80096b6:	f7ff f825 	bl	8008704 <_free_r>
 80096ba:	220c      	movs	r2, #12
 80096bc:	f8c9 2000 	str.w	r2, [r9]
 80096c0:	89a2      	ldrh	r2, [r4, #12]
 80096c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c6:	81a2      	strh	r2, [r4, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f8cb 2008 	str.w	r2, [fp, #8]
 80096ce:	f8cb 2004 	str.w	r2, [fp, #4]
 80096d2:	f04f 30ff 	mov.w	r0, #4294967295
 80096d6:	e00a      	b.n	80096ee <__ssprint_r+0xf8>
 80096d8:	6126      	str	r6, [r4, #16]
 80096da:	6165      	str	r5, [r4, #20]
 80096dc:	4446      	add	r6, r8
 80096de:	ebc8 0505 	rsb	r5, r8, r5
 80096e2:	6026      	str	r6, [r4, #0]
 80096e4:	60a5      	str	r5, [r4, #8]
 80096e6:	463e      	mov	r6, r7
 80096e8:	e7a2      	b.n	8009630 <__ssprint_r+0x3a>
 80096ea:	463e      	mov	r6, r7
 80096ec:	e7a2      	b.n	8009634 <__ssprint_r+0x3e>
 80096ee:	b003      	add	sp, #12
 80096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096f4 <__sprint_r>:
 80096f4:	6893      	ldr	r3, [r2, #8]
 80096f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fa:	4680      	mov	r8, r0
 80096fc:	460f      	mov	r7, r1
 80096fe:	4614      	mov	r4, r2
 8009700:	b91b      	cbnz	r3, 800970a <__sprint_r+0x16>
 8009702:	6053      	str	r3, [r2, #4]
 8009704:	4618      	mov	r0, r3
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800970c:	049d      	lsls	r5, r3, #18
 800970e:	d51c      	bpl.n	800974a <__sprint_r+0x56>
 8009710:	6815      	ldr	r5, [r2, #0]
 8009712:	68a0      	ldr	r0, [r4, #8]
 8009714:	3508      	adds	r5, #8
 8009716:	b1d0      	cbz	r0, 800974e <__sprint_r+0x5a>
 8009718:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800971c:	f855 ac08 	ldr.w	sl, [r5, #-8]
 8009720:	08b6      	lsrs	r6, r6, #2
 8009722:	f04f 0900 	mov.w	r9, #0
 8009726:	454e      	cmp	r6, r9
 8009728:	dd0a      	ble.n	8009740 <__sprint_r+0x4c>
 800972a:	463a      	mov	r2, r7
 800972c:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 8009730:	4640      	mov	r0, r8
 8009732:	f000 f8f2 	bl	800991a <_fputwc_r>
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	d009      	beq.n	800974e <__sprint_r+0x5a>
 800973a:	f109 0901 	add.w	r9, r9, #1
 800973e:	e7f2      	b.n	8009726 <__sprint_r+0x32>
 8009740:	68a3      	ldr	r3, [r4, #8]
 8009742:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 8009746:	60a6      	str	r6, [r4, #8]
 8009748:	e7e3      	b.n	8009712 <__sprint_r+0x1e>
 800974a:	f7ff f899 	bl	8008880 <__sfvwrite_r>
 800974e:	2300      	movs	r3, #0
 8009750:	60a3      	str	r3, [r4, #8]
 8009752:	6063      	str	r3, [r4, #4]
 8009754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009758 <_write_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4c07      	ldr	r4, [pc, #28]	; (8009778 <_write_r+0x20>)
 800975c:	4605      	mov	r5, r0
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	2200      	movs	r2, #0
 8009764:	6022      	str	r2, [r4, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f7fa feae 	bl	80044c8 <_write>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_write_r+0x1e>
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	b103      	cbz	r3, 8009776 <_write_r+0x1e>
 8009774:	602b      	str	r3, [r5, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20004c68 	.word	0x20004c68

0800977c <_calloc_r>:
 800977c:	b510      	push	{r4, lr}
 800977e:	4351      	muls	r1, r2
 8009780:	f7fb fc72 	bl	8005068 <_malloc_r>
 8009784:	4604      	mov	r4, r0
 8009786:	b320      	cbz	r0, 80097d2 <_calloc_r+0x56>
 8009788:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800978c:	f022 0203 	bic.w	r2, r2, #3
 8009790:	3a04      	subs	r2, #4
 8009792:	2a24      	cmp	r2, #36	; 0x24
 8009794:	d81a      	bhi.n	80097cc <_calloc_r+0x50>
 8009796:	2a13      	cmp	r2, #19
 8009798:	d912      	bls.n	80097c0 <_calloc_r+0x44>
 800979a:	2100      	movs	r1, #0
 800979c:	2a1b      	cmp	r2, #27
 800979e:	6001      	str	r1, [r0, #0]
 80097a0:	6041      	str	r1, [r0, #4]
 80097a2:	d802      	bhi.n	80097aa <_calloc_r+0x2e>
 80097a4:	f100 0308 	add.w	r3, r0, #8
 80097a8:	e00b      	b.n	80097c2 <_calloc_r+0x46>
 80097aa:	2a24      	cmp	r2, #36	; 0x24
 80097ac:	6081      	str	r1, [r0, #8]
 80097ae:	60c1      	str	r1, [r0, #12]
 80097b0:	bf11      	iteee	ne
 80097b2:	f100 0310 	addne.w	r3, r0, #16
 80097b6:	6101      	streq	r1, [r0, #16]
 80097b8:	f100 0318 	addeq.w	r3, r0, #24
 80097bc:	6141      	streq	r1, [r0, #20]
 80097be:	e000      	b.n	80097c2 <_calloc_r+0x46>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	605a      	str	r2, [r3, #4]
 80097c8:	609a      	str	r2, [r3, #8]
 80097ca:	e002      	b.n	80097d2 <_calloc_r+0x56>
 80097cc:	2100      	movs	r1, #0
 80097ce:	f7fb fe76 	bl	80054be <memset>
 80097d2:	4620      	mov	r0, r4
 80097d4:	bd10      	pop	{r4, pc}
	...

080097d8 <_close_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4c06      	ldr	r4, [pc, #24]	; (80097f4 <_close_r+0x1c>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4605      	mov	r5, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	6023      	str	r3, [r4, #0]
 80097e4:	f000 fb0a 	bl	8009dfc <_close>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_close_r+0x1a>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_close_r+0x1a>
 80097f0:	602b      	str	r3, [r5, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20004c68 	.word	0x20004c68

080097f8 <_fclose_r>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4605      	mov	r5, r0
 80097fc:	460c      	mov	r4, r1
 80097fe:	b909      	cbnz	r1, 8009804 <_fclose_r+0xc>
 8009800:	2000      	movs	r0, #0
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	b118      	cbz	r0, 800980e <_fclose_r+0x16>
 8009806:	6983      	ldr	r3, [r0, #24]
 8009808:	b90b      	cbnz	r3, 800980e <_fclose_r+0x16>
 800980a:	f7fe feb3 	bl	8008574 <__sinit>
 800980e:	4b20      	ldr	r3, [pc, #128]	; (8009890 <_fclose_r+0x98>)
 8009810:	429c      	cmp	r4, r3
 8009812:	d101      	bne.n	8009818 <_fclose_r+0x20>
 8009814:	686c      	ldr	r4, [r5, #4]
 8009816:	e008      	b.n	800982a <_fclose_r+0x32>
 8009818:	4b1e      	ldr	r3, [pc, #120]	; (8009894 <_fclose_r+0x9c>)
 800981a:	429c      	cmp	r4, r3
 800981c:	d101      	bne.n	8009822 <_fclose_r+0x2a>
 800981e:	68ac      	ldr	r4, [r5, #8]
 8009820:	e003      	b.n	800982a <_fclose_r+0x32>
 8009822:	4b1d      	ldr	r3, [pc, #116]	; (8009898 <_fclose_r+0xa0>)
 8009824:	429c      	cmp	r4, r3
 8009826:	bf08      	it	eq
 8009828:	68ec      	ldreq	r4, [r5, #12]
 800982a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d0e6      	beq.n	8009800 <_fclose_r+0x8>
 8009832:	4621      	mov	r1, r4
 8009834:	4628      	mov	r0, r5
 8009836:	f7fe fda3 	bl	8008380 <__sflush_r>
 800983a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800983c:	4606      	mov	r6, r0
 800983e:	b133      	cbz	r3, 800984e <_fclose_r+0x56>
 8009840:	6a21      	ldr	r1, [r4, #32]
 8009842:	4628      	mov	r0, r5
 8009844:	4798      	blx	r3
 8009846:	2800      	cmp	r0, #0
 8009848:	bfb8      	it	lt
 800984a:	f04f 36ff 	movlt.w	r6, #4294967295
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	061b      	lsls	r3, r3, #24
 8009852:	d503      	bpl.n	800985c <_fclose_r+0x64>
 8009854:	6921      	ldr	r1, [r4, #16]
 8009856:	4628      	mov	r0, r5
 8009858:	f7fe ff54 	bl	8008704 <_free_r>
 800985c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800985e:	b141      	cbz	r1, 8009872 <_fclose_r+0x7a>
 8009860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009864:	4299      	cmp	r1, r3
 8009866:	d002      	beq.n	800986e <_fclose_r+0x76>
 8009868:	4628      	mov	r0, r5
 800986a:	f7fe ff4b 	bl	8008704 <_free_r>
 800986e:	2300      	movs	r3, #0
 8009870:	6363      	str	r3, [r4, #52]	; 0x34
 8009872:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009874:	b121      	cbz	r1, 8009880 <_fclose_r+0x88>
 8009876:	4628      	mov	r0, r5
 8009878:	f7fe ff44 	bl	8008704 <_free_r>
 800987c:	2300      	movs	r3, #0
 800987e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009880:	f7fe fee8 	bl	8008654 <__sfp_lock_acquire>
 8009884:	2300      	movs	r3, #0
 8009886:	81a3      	strh	r3, [r4, #12]
 8009888:	f7fe fee5 	bl	8008656 <__sfp_lock_release>
 800988c:	4630      	mov	r0, r6
 800988e:	bd70      	pop	{r4, r5, r6, pc}
 8009890:	0800a1dc 	.word	0x0800a1dc
 8009894:	0800a1fc 	.word	0x0800a1fc
 8009898:	0800a21c 	.word	0x0800a21c

0800989c <__fputwc>:
 800989c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80098a0:	4680      	mov	r8, r0
 80098a2:	460e      	mov	r6, r1
 80098a4:	4614      	mov	r4, r2
 80098a6:	f7ff f957 	bl	8008b58 <__locale_mb_cur_max>
 80098aa:	2801      	cmp	r0, #1
 80098ac:	d106      	bne.n	80098bc <__fputwc+0x20>
 80098ae:	1e73      	subs	r3, r6, #1
 80098b0:	2bfe      	cmp	r3, #254	; 0xfe
 80098b2:	d803      	bhi.n	80098bc <__fputwc+0x20>
 80098b4:	f88d 6004 	strb.w	r6, [sp, #4]
 80098b8:	4605      	mov	r5, r0
 80098ba:	e00e      	b.n	80098da <__fputwc+0x3e>
 80098bc:	4632      	mov	r2, r6
 80098be:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80098c2:	a901      	add	r1, sp, #4
 80098c4:	4640      	mov	r0, r8
 80098c6:	f000 f8dd 	bl	8009a84 <_wcrtomb_r>
 80098ca:	1c42      	adds	r2, r0, #1
 80098cc:	4605      	mov	r5, r0
 80098ce:	d104      	bne.n	80098da <__fputwc+0x3e>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d6:	81a3      	strh	r3, [r4, #12]
 80098d8:	e01c      	b.n	8009914 <__fputwc+0x78>
 80098da:	2700      	movs	r7, #0
 80098dc:	42af      	cmp	r7, r5
 80098de:	d018      	beq.n	8009912 <__fputwc+0x76>
 80098e0:	ab01      	add	r3, sp, #4
 80098e2:	5cf9      	ldrb	r1, [r7, r3]
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	60a3      	str	r3, [r4, #8]
 80098ec:	da04      	bge.n	80098f8 <__fputwc+0x5c>
 80098ee:	69a2      	ldr	r2, [r4, #24]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	db06      	blt.n	8009902 <__fputwc+0x66>
 80098f4:	290a      	cmp	r1, #10
 80098f6:	d004      	beq.n	8009902 <__fputwc+0x66>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	6022      	str	r2, [r4, #0]
 80098fe:	7019      	strb	r1, [r3, #0]
 8009900:	e005      	b.n	800990e <__fputwc+0x72>
 8009902:	4622      	mov	r2, r4
 8009904:	4640      	mov	r0, r8
 8009906:	f000 f85f 	bl	80099c8 <__swbuf_r>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d002      	beq.n	8009914 <__fputwc+0x78>
 800990e:	3701      	adds	r7, #1
 8009910:	e7e4      	b.n	80098dc <__fputwc+0x40>
 8009912:	4630      	mov	r0, r6
 8009914:	b002      	add	sp, #8
 8009916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800991a <_fputwc_r>:
 800991a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800991e:	b410      	push	{r4}
 8009920:	049c      	lsls	r4, r3, #18
 8009922:	d406      	bmi.n	8009932 <_fputwc_r+0x18>
 8009924:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8009926:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800992a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800992e:	8193      	strh	r3, [r2, #12]
 8009930:	6654      	str	r4, [r2, #100]	; 0x64
 8009932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009936:	f7ff bfb1 	b.w	800989c <__fputwc>
	...

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4c07      	ldr	r4, [pc, #28]	; (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4605      	mov	r5, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	f000 fa5f 	bl	8009e0c <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	20004c68 	.word	0x20004c68

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4c06      	ldr	r4, [pc, #24]	; (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4605      	mov	r5, r0
 8009968:	4608      	mov	r0, r1
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	f000 fa56 	bl	8009e1c <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20004c68 	.word	0x20004c68

08009980 <_lseek_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4c07      	ldr	r4, [pc, #28]	; (80099a0 <_lseek_r+0x20>)
 8009984:	4605      	mov	r5, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	6022      	str	r2, [r4, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f000 fa4c 	bl	8009e2c <_lseek>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_lseek_r+0x1e>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	b103      	cbz	r3, 800999e <_lseek_r+0x1e>
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20004c68 	.word	0x20004c68

080099a4 <_read_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4c07      	ldr	r4, [pc, #28]	; (80099c4 <_read_r+0x20>)
 80099a8:	4605      	mov	r5, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	6022      	str	r2, [r4, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f000 fa42 	bl	8009e3c <_read>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_read_r+0x1e>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_read_r+0x1e>
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	20004c68 	.word	0x20004c68

080099c8 <__swbuf_r>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	460f      	mov	r7, r1
 80099cc:	4614      	mov	r4, r2
 80099ce:	4606      	mov	r6, r0
 80099d0:	b118      	cbz	r0, 80099da <__swbuf_r+0x12>
 80099d2:	6983      	ldr	r3, [r0, #24]
 80099d4:	b90b      	cbnz	r3, 80099da <__swbuf_r+0x12>
 80099d6:	f7fe fdcd 	bl	8008574 <__sinit>
 80099da:	4b27      	ldr	r3, [pc, #156]	; (8009a78 <__swbuf_r+0xb0>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d101      	bne.n	80099e4 <__swbuf_r+0x1c>
 80099e0:	6874      	ldr	r4, [r6, #4]
 80099e2:	e008      	b.n	80099f6 <__swbuf_r+0x2e>
 80099e4:	4b25      	ldr	r3, [pc, #148]	; (8009a7c <__swbuf_r+0xb4>)
 80099e6:	429c      	cmp	r4, r3
 80099e8:	d101      	bne.n	80099ee <__swbuf_r+0x26>
 80099ea:	68b4      	ldr	r4, [r6, #8]
 80099ec:	e003      	b.n	80099f6 <__swbuf_r+0x2e>
 80099ee:	4b24      	ldr	r3, [pc, #144]	; (8009a80 <__swbuf_r+0xb8>)
 80099f0:	429c      	cmp	r4, r3
 80099f2:	bf08      	it	eq
 80099f4:	68f4      	ldreq	r4, [r6, #12]
 80099f6:	69a3      	ldr	r3, [r4, #24]
 80099f8:	60a3      	str	r3, [r4, #8]
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	0719      	lsls	r1, r3, #28
 80099fe:	d50e      	bpl.n	8009a1e <__swbuf_r+0x56>
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	b163      	cbz	r3, 8009a1e <__swbuf_r+0x56>
 8009a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a08:	049a      	lsls	r2, r3, #18
 8009a0a:	b2fd      	uxtb	r5, r7
 8009a0c:	d410      	bmi.n	8009a30 <__swbuf_r+0x68>
 8009a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009a12:	81a3      	strh	r3, [r4, #12]
 8009a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a1a:	6663      	str	r3, [r4, #100]	; 0x64
 8009a1c:	e008      	b.n	8009a30 <__swbuf_r+0x68>
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7fd fe0d 	bl	8007640 <__swsetup_r>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d0ec      	beq.n	8009a04 <__swbuf_r+0x3c>
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	6920      	ldr	r0, [r4, #16]
 8009a34:	1a18      	subs	r0, r3, r0
 8009a36:	6963      	ldr	r3, [r4, #20]
 8009a38:	4298      	cmp	r0, r3
 8009a3a:	db05      	blt.n	8009a48 <__swbuf_r+0x80>
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f7fe fd2e 	bl	80084a0 <_fflush_r>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d1f0      	bne.n	8009a2a <__swbuf_r+0x62>
 8009a48:	68a3      	ldr	r3, [r4, #8]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	60a3      	str	r3, [r4, #8]
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	6022      	str	r2, [r4, #0]
 8009a54:	701f      	strb	r7, [r3, #0]
 8009a56:	6962      	ldr	r2, [r4, #20]
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d004      	beq.n	8009a68 <__swbuf_r+0xa0>
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	07db      	lsls	r3, r3, #31
 8009a62:	d507      	bpl.n	8009a74 <__swbuf_r+0xac>
 8009a64:	2d0a      	cmp	r5, #10
 8009a66:	d105      	bne.n	8009a74 <__swbuf_r+0xac>
 8009a68:	4621      	mov	r1, r4
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7fe fd18 	bl	80084a0 <_fflush_r>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d1da      	bne.n	8009a2a <__swbuf_r+0x62>
 8009a74:	4628      	mov	r0, r5
 8009a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a78:	0800a1dc 	.word	0x0800a1dc
 8009a7c:	0800a1fc 	.word	0x0800a1fc
 8009a80:	0800a21c 	.word	0x0800a21c

08009a84 <_wcrtomb_r>:
 8009a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a88:	461d      	mov	r5, r3
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <_wcrtomb_r+0x44>)
 8009a8c:	b086      	sub	sp, #24
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4690      	mov	r8, r2
 8009a92:	460e      	mov	r6, r1
 8009a94:	681f      	ldr	r7, [r3, #0]
 8009a96:	b931      	cbnz	r1, 8009aa6 <_wcrtomb_r+0x22>
 8009a98:	f7ff f85a 	bl	8008b50 <__locale_charset>
 8009a9c:	9500      	str	r5, [sp, #0]
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	4632      	mov	r2, r6
 8009aa2:	a903      	add	r1, sp, #12
 8009aa4:	e005      	b.n	8009ab2 <_wcrtomb_r+0x2e>
 8009aa6:	f7ff f853 	bl	8008b50 <__locale_charset>
 8009aaa:	9500      	str	r5, [sp, #0]
 8009aac:	4603      	mov	r3, r0
 8009aae:	4642      	mov	r2, r8
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	47b8      	blx	r7
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	bf01      	itttt	eq
 8009aba:	2300      	moveq	r3, #0
 8009abc:	602b      	streq	r3, [r5, #0]
 8009abe:	238a      	moveq	r3, #138	; 0x8a
 8009ac0:	6023      	streq	r3, [r4, #0]
 8009ac2:	b006      	add	sp, #24
 8009ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac8:	20000568 	.word	0x20000568

08009acc <__ascii_wctomb>:
 8009acc:	b149      	cbz	r1, 8009ae2 <__ascii_wctomb+0x16>
 8009ace:	2aff      	cmp	r2, #255	; 0xff
 8009ad0:	bf85      	ittet	hi
 8009ad2:	238a      	movhi	r3, #138	; 0x8a
 8009ad4:	6003      	strhi	r3, [r0, #0]
 8009ad6:	700a      	strbls	r2, [r1, #0]
 8009ad8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009adc:	bf98      	it	ls
 8009ade:	2001      	movls	r0, #1
 8009ae0:	4770      	bx	lr
 8009ae2:	4608      	mov	r0, r1
 8009ae4:	4770      	bx	lr

08009ae6 <atan2f>:
 8009ae6:	f000 b801 	b.w	8009aec <__ieee754_atan2f>
	...

08009aec <__ieee754_atan2f>:
 8009aec:	ee10 2a90 	vmov	r2, s1
 8009af0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009af4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009af8:	b510      	push	{r4, lr}
 8009afa:	eef0 7a40 	vmov.f32	s15, s0
 8009afe:	dc06      	bgt.n	8009b0e <__ieee754_atan2f+0x22>
 8009b00:	ee10 0a10 	vmov	r0, s0
 8009b04:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009b08:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b0c:	dd02      	ble.n	8009b14 <__ieee754_atan2f+0x28>
 8009b0e:	ee30 0aa7 	vadd.f32	s0, s1, s15
 8009b12:	bd10      	pop	{r4, pc}
 8009b14:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009b18:	d103      	bne.n	8009b22 <__ieee754_atan2f+0x36>
 8009b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b1e:	f000 b88f 	b.w	8009c40 <atanf>
 8009b22:	1794      	asrs	r4, r2, #30
 8009b24:	f004 0402 	and.w	r4, r4, #2
 8009b28:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009b2c:	b943      	cbnz	r3, 8009b40 <__ieee754_atan2f+0x54>
 8009b2e:	2c02      	cmp	r4, #2
 8009b30:	d06c      	beq.n	8009c0c <__ieee754_atan2f+0x120>
 8009b32:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8009c14 <__ieee754_atan2f+0x128>
 8009b36:	2c03      	cmp	r4, #3
 8009b38:	bf18      	it	ne
 8009b3a:	eeb0 0a67 	vmovne.f32	s0, s15
 8009b3e:	bd10      	pop	{r4, pc}
 8009b40:	b341      	cbz	r1, 8009b94 <__ieee754_atan2f+0xa8>
 8009b42:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009b46:	d122      	bne.n	8009b8e <__ieee754_atan2f+0xa2>
 8009b48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b4c:	d10f      	bne.n	8009b6e <__ieee754_atan2f+0x82>
 8009b4e:	2c02      	cmp	r4, #2
 8009b50:	d007      	beq.n	8009b62 <__ieee754_atan2f+0x76>
 8009b52:	2c03      	cmp	r4, #3
 8009b54:	d008      	beq.n	8009b68 <__ieee754_atan2f+0x7c>
 8009b56:	2c01      	cmp	r4, #1
 8009b58:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8009c18 <__ieee754_atan2f+0x12c>
 8009b5c:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8009c1c <__ieee754_atan2f+0x130>
 8009b60:	e00e      	b.n	8009b80 <__ieee754_atan2f+0x94>
 8009b62:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8009c20 <__ieee754_atan2f+0x134>
 8009b66:	bd10      	pop	{r4, pc}
 8009b68:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8009c24 <__ieee754_atan2f+0x138>
 8009b6c:	bd10      	pop	{r4, pc}
 8009b6e:	2c02      	cmp	r4, #2
 8009b70:	d04c      	beq.n	8009c0c <__ieee754_atan2f+0x120>
 8009b72:	2c03      	cmp	r4, #3
 8009b74:	d008      	beq.n	8009b88 <__ieee754_atan2f+0x9c>
 8009b76:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009c28 <__ieee754_atan2f+0x13c>
 8009b7a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009c2c <__ieee754_atan2f+0x140>
 8009b7e:	2c01      	cmp	r4, #1
 8009b80:	bf08      	it	eq
 8009b82:	eeb0 0a67 	vmoveq.f32	s0, s15
 8009b86:	bd10      	pop	{r4, pc}
 8009b88:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8009c14 <__ieee754_atan2f+0x128>
 8009b8c:	bd10      	pop	{r4, pc}
 8009b8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b92:	d108      	bne.n	8009ba6 <__ieee754_atan2f+0xba>
 8009b94:	eddf 7a26 	vldr	s15, [pc, #152]	; 8009c30 <__ieee754_atan2f+0x144>
 8009b98:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8009c34 <__ieee754_atan2f+0x148>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	bfa8      	it	ge
 8009ba0:	eeb0 0a67 	vmovge.f32	s0, s15
 8009ba4:	bd10      	pop	{r4, pc}
 8009ba6:	1a5b      	subs	r3, r3, r1
 8009ba8:	15db      	asrs	r3, r3, #23
 8009baa:	2b3c      	cmp	r3, #60	; 0x3c
 8009bac:	dc0a      	bgt.n	8009bc4 <__ieee754_atan2f+0xd8>
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	da01      	bge.n	8009bb6 <__ieee754_atan2f+0xca>
 8009bb2:	333c      	adds	r3, #60	; 0x3c
 8009bb4:	db09      	blt.n	8009bca <__ieee754_atan2f+0xde>
 8009bb6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009bba:	f000 f917 	bl	8009dec <fabsf>
 8009bbe:	f000 f83f 	bl	8009c40 <atanf>
 8009bc2:	e004      	b.n	8009bce <__ieee754_atan2f+0xe2>
 8009bc4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8009c30 <__ieee754_atan2f+0x144>
 8009bc8:	e001      	b.n	8009bce <__ieee754_atan2f+0xe2>
 8009bca:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8009c28 <__ieee754_atan2f+0x13c>
 8009bce:	2c01      	cmp	r4, #1
 8009bd0:	d003      	beq.n	8009bda <__ieee754_atan2f+0xee>
 8009bd2:	2c02      	cmp	r4, #2
 8009bd4:	d008      	beq.n	8009be8 <__ieee754_atan2f+0xfc>
 8009bd6:	b984      	cbnz	r4, 8009bfa <__ieee754_atan2f+0x10e>
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	ee10 3a10 	vmov	r3, s0
 8009bde:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009be2:	ee00 3a10 	vmov	s0, r3
 8009be6:	bd10      	pop	{r4, pc}
 8009be8:	eddf 0a13 	vldr	s1, [pc, #76]	; 8009c38 <__ieee754_atan2f+0x14c>
 8009bec:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009bf0:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009c3c <__ieee754_atan2f+0x150>
 8009bf4:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8009bf8:	bd10      	pop	{r4, pc}
 8009bfa:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8009c38 <__ieee754_atan2f+0x14c>
 8009bfe:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009c02:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8009c3c <__ieee754_atan2f+0x150>
 8009c06:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009c0a:	bd10      	pop	{r4, pc}
 8009c0c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8009c3c <__ieee754_atan2f+0x150>
 8009c10:	bd10      	pop	{r4, pc}
 8009c12:	bf00      	nop
 8009c14:	c0490fdb 	.word	0xc0490fdb
 8009c18:	3f490fdb 	.word	0x3f490fdb
 8009c1c:	bf490fdb 	.word	0xbf490fdb
 8009c20:	4016cbe4 	.word	0x4016cbe4
 8009c24:	c016cbe4 	.word	0xc016cbe4
 8009c28:	00000000 	.word	0x00000000
 8009c2c:	80000000 	.word	0x80000000
 8009c30:	3fc90fdb 	.word	0x3fc90fdb
 8009c34:	bfc90fdb 	.word	0xbfc90fdb
 8009c38:	33bbbd2e 	.word	0x33bbbd2e
 8009c3c:	40490fdb 	.word	0x40490fdb

08009c40 <atanf>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	ee10 5a10 	vmov	r5, s0
 8009c46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009c4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009c4e:	eef0 7a40 	vmov.f32	s15, s0
 8009c52:	db0e      	blt.n	8009c72 <atanf+0x32>
 8009c54:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009c58:	dd02      	ble.n	8009c60 <atanf+0x20>
 8009c5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8009da0 <atanf+0x160>
 8009c64:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009da4 <atanf+0x164>
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	bfc8      	it	gt
 8009c6c:	eeb0 0a67 	vmovgt.f32	s0, s15
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	4b4d      	ldr	r3, [pc, #308]	; (8009da8 <atanf+0x168>)
 8009c74:	429c      	cmp	r4, r3
 8009c76:	dc0f      	bgt.n	8009c98 <atanf+0x58>
 8009c78:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009c7c:	da40      	bge.n	8009d00 <atanf+0xc0>
 8009c7e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8009dac <atanf+0x16c>
 8009c82:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c92:	f300 8082 	bgt.w	8009d9a <atanf+0x15a>
 8009c96:	e033      	b.n	8009d00 <atanf+0xc0>
 8009c98:	f000 f8a8 	bl	8009dec <fabsf>
 8009c9c:	4b44      	ldr	r3, [pc, #272]	; (8009db0 <atanf+0x170>)
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	dc19      	bgt.n	8009cd6 <atanf+0x96>
 8009ca2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	dc0b      	bgt.n	8009cc2 <atanf+0x82>
 8009caa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009cae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009cb2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009cbc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009cc0:	e020      	b.n	8009d04 <atanf+0xc4>
 8009cc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009cc6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009cca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009cce:	2301      	movs	r3, #1
 8009cd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009cd4:	e016      	b.n	8009d04 <atanf+0xc4>
 8009cd6:	4b37      	ldr	r3, [pc, #220]	; (8009db4 <atanf+0x174>)
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	dc0b      	bgt.n	8009cf4 <atanf+0xb4>
 8009cdc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ce4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009ce8:	2302      	movs	r3, #2
 8009cea:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf2:	e007      	b.n	8009d04 <atanf+0xc4>
 8009cf4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009cf8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e001      	b.n	8009d04 <atanf+0xc4>
 8009d00:	f04f 33ff 	mov.w	r3, #4294967295
 8009d04:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009d08:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8009db8 <atanf+0x178>
 8009d0c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8009dbc <atanf+0x17c>
 8009d10:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 8009dc0 <atanf+0x180>
 8009d14:	ee26 7a06 	vmul.f32	s14, s12, s12
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d1e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009dc4 <atanf+0x184>
 8009d22:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009d26:	eddf 5a28 	vldr	s11, [pc, #160]	; 8009dc8 <atanf+0x188>
 8009d2a:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d2e:	eddf 6a27 	vldr	s13, [pc, #156]	; 8009dcc <atanf+0x18c>
 8009d32:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009d36:	eddf 5a26 	vldr	s11, [pc, #152]	; 8009dd0 <atanf+0x190>
 8009d3a:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d3e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009dd4 <atanf+0x194>
 8009d42:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009d46:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009dd8 <atanf+0x198>
 8009d4a:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009d4e:	ed9f 5a23 	vldr	s10, [pc, #140]	; 8009ddc <atanf+0x19c>
 8009d52:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009d56:	eddf 6a22 	vldr	s13, [pc, #136]	; 8009de0 <atanf+0x1a0>
 8009d5a:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009d5e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009d62:	ee05 7a86 	vmla.f32	s14, s11, s12
 8009d66:	d104      	bne.n	8009d72 <atanf+0x132>
 8009d68:	eeb0 0a67 	vmov.f32	s0, s15
 8009d6c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	4a1c      	ldr	r2, [pc, #112]	; (8009de4 <atanf+0x1a4>)
 8009d74:	491c      	ldr	r1, [pc, #112]	; (8009de8 <atanf+0x1a8>)
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	441a      	add	r2, r3
 8009d7a:	440b      	add	r3, r1
 8009d7c:	ed93 0a00 	vldr	s0, [r3]
 8009d80:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	ed92 7a00 	vldr	s14, [r2]
 8009d8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009d8e:	ee77 7a40 	vsub.f32	s15, s14, s0
 8009d92:	da02      	bge.n	8009d9a <atanf+0x15a>
 8009d94:	eeb1 0a67 	vneg.f32	s0, s15
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	3fc90fdb 	.word	0x3fc90fdb
 8009da4:	bfc90fdb 	.word	0xbfc90fdb
 8009da8:	3edfffff 	.word	0x3edfffff
 8009dac:	7149f2ca 	.word	0x7149f2ca
 8009db0:	3f97ffff 	.word	0x3f97ffff
 8009db4:	401bffff 	.word	0x401bffff
 8009db8:	3c8569d7 	.word	0x3c8569d7
 8009dbc:	3d4bda59 	.word	0x3d4bda59
 8009dc0:	bd6ef16b 	.word	0xbd6ef16b
 8009dc4:	3d886b35 	.word	0x3d886b35
 8009dc8:	3dba2e6e 	.word	0x3dba2e6e
 8009dcc:	3e124925 	.word	0x3e124925
 8009dd0:	3eaaaaab 	.word	0x3eaaaaab
 8009dd4:	bd15a221 	.word	0xbd15a221
 8009dd8:	bd9d8795 	.word	0xbd9d8795
 8009ddc:	bde38e38 	.word	0xbde38e38
 8009de0:	be4ccccd 	.word	0xbe4ccccd
 8009de4:	0800a354 	.word	0x0800a354
 8009de8:	0800a344 	.word	0x0800a344

08009dec <fabsf>:
 8009dec:	ee10 3a10 	vmov	r3, s0
 8009df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009df4:	ee00 3a10 	vmov	s0, r3
 8009df8:	4770      	bx	lr
	...

08009dfc <_close>:
 8009dfc:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <_close+0xc>)
 8009dfe:	2258      	movs	r2, #88	; 0x58
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295
 8009e06:	4770      	bx	lr
 8009e08:	20004c68 	.word	0x20004c68

08009e0c <_fstat>:
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <_fstat+0xc>)
 8009e0e:	2258      	movs	r2, #88	; 0x58
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295
 8009e16:	4770      	bx	lr
 8009e18:	20004c68 	.word	0x20004c68

08009e1c <_isatty>:
 8009e1c:	4b02      	ldr	r3, [pc, #8]	; (8009e28 <_isatty+0xc>)
 8009e1e:	2258      	movs	r2, #88	; 0x58
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	2000      	movs	r0, #0
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	20004c68 	.word	0x20004c68

08009e2c <_lseek>:
 8009e2c:	4b02      	ldr	r3, [pc, #8]	; (8009e38 <_lseek+0xc>)
 8009e2e:	2258      	movs	r2, #88	; 0x58
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	f04f 30ff 	mov.w	r0, #4294967295
 8009e36:	4770      	bx	lr
 8009e38:	20004c68 	.word	0x20004c68

08009e3c <_read>:
 8009e3c:	4b02      	ldr	r3, [pc, #8]	; (8009e48 <_read+0xc>)
 8009e3e:	2258      	movs	r2, #88	; 0x58
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	f04f 30ff 	mov.w	r0, #4294967295
 8009e46:	4770      	bx	lr
 8009e48:	20004c68 	.word	0x20004c68

08009e4c <_sbrk>:
 8009e4c:	4b04      	ldr	r3, [pc, #16]	; (8009e60 <_sbrk+0x14>)
 8009e4e:	6819      	ldr	r1, [r3, #0]
 8009e50:	4602      	mov	r2, r0
 8009e52:	b909      	cbnz	r1, 8009e58 <_sbrk+0xc>
 8009e54:	4903      	ldr	r1, [pc, #12]	; (8009e64 <_sbrk+0x18>)
 8009e56:	6019      	str	r1, [r3, #0]
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	4402      	add	r2, r0
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	4770      	bx	lr
 8009e60:	20004308 	.word	0x20004308
 8009e64:	20004c6c 	.word	0x20004c6c

08009e68 <_init>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	bf00      	nop
 8009e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6e:	bc08      	pop	{r3}
 8009e70:	469e      	mov	lr, r3
 8009e72:	4770      	bx	lr

08009e74 <_fini>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	bf00      	nop
 8009e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7a:	bc08      	pop	{r3}
 8009e7c:	469e      	mov	lr, r3
 8009e7e:	4770      	bx	lr
